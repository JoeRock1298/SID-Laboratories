/*
 * Real_Time_Clock.c
 *
 *  Created on: 10 de mar. de 2022
 *      Author: Rocabado Rocha, Jose Luis
 */

// -------------------------------------------------------------------------------------------------------------------------
// Universitat Politï¿½cnica de Valï¿½ncia
// Escuela Tï¿½cnica Superior de Ingenieros de Telecomunicaciï¿½n
// -------------------------------------------------------------------------------------------------------------------------
// Sistemas Integrados Digitales
// Curso 2021 - 2022
// -------------------------------------------------------------------------------------------------------------------------
// Nombre del archivo: Real_Time_Clock.c
//
// Descripciï¿½n:
// El siguiente codigo implementa la visualizaciï¿½n de un reloj utilizando interruociones y el timer del sistema. Sus
// especificaciones son:
//      - Horas, minutos y segundos se observan en los displays 7-seg
//      - El timer se configura para generar una interrupciï¿½n cada 100ms con un reloj del sistema de 50MHz
//      - Pulsador KEY3 incrementa las horas en una unidad
//      - Pulsador KEY2 incrementa los minutos en una unidad
//      - El reloj se visualiza ademas en el LCD y en la otra fila se mostrara el nombre
//
// -------------------------------------------------------------------------------------------------------------------------
//      Version: V1.0                   | Fecha Modificaciï¿½n: 10/03/2022
//
//      Autor: Jose Luis Rocabado Rocha
//
// -------------------------------------------------------------------------------------------------------------------------

#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "sys/alt_stdio.h"
#include "key_codes.h"	// define los valores para KEY1, KEY2, KEY3
#include "system.h"
#include "sys/alt_irq.h"
#include <stdio.h> //Necesario para el NULL

//Auxiliar defines
#define MARGIN_OFFSET 1
#define TEXT_X_RES (50 - (2 * MARGIN_OFFSET)) //we will leave a margin on the MTL screen
#define TEXT_Y_RES (30 - (2 * MARGIN_OFFSET))

// Definition of the auxiliar functions
void interval_timer_isr( );
void pushbutton_ISR( );
void switch_ISR( );
int two_hex_to_seven (int two_hex);
void print_7_seg_time (int h, int m, int s);
void LCD_cursor( int, int );
void LCD_text( char * );
void LCD_cursor_off( void );
void print_LCD_text (int h, int m, int s);
int read_VGA_line (FILE *filePointer, char* line);
void data_update(alt_up_char_buffer_dev* char_buffer_dev_MTL, char data[TEXT_Y_RES][TEXT_X_RES+1], char* newdata);

volatile int msec_counter = 0;
volatile int frame_refresh = 0;
volatile int key_pressed = -1;
volatile int VGA_enable = 1; //Enable active when H level

int main(void)
{
	///*Variable definition*///
	int hour, min, sec = 0; //hacer una variable para cada parte, y no una global
	int txt_id = 0;
	int file_status = 0;
	char txt_files [4][23] = {{"/mnt/rozipfs/new00.txt"},
							 {"/mnt/rozipfs/new01.txt"},
							 {"/mnt/rozipfs/new02.txt"},
							 {"/mnt/rozipfs/new03.txt"}};
	char newline [TEXT_X_RES] = "\0";
	char separator [TEXT_X_RES] = "*";
	char text_data [TEXT_Y_RES][TEXT_X_RES + 1] = {"\0"};

	/* Peripheral handler definitions */
	volatile int * interval_timer_ptr = (int *) TIMER_BASE;	    // Direccion Temporizador
	volatile int * KEY_ptr = (int *) PUSHBUTTONS_BASE;			// Direccion pulsadores KEY
	volatile int * SWITCH_ptr = (int *) SWITCHES_BASE; 	        // dirección SW
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev_MTL;
	alt_up_char_buffer_dev *char_buffer_dev_MTL;

	/* Configuring timer */
	// 0x4C4B40 -> 5000000 counts -> 100ms counter
	*(interval_timer_ptr + 0x2) = ( 0x4C4B40 & 0xFFFF); // LCounter
	*(interval_timer_ptr + 0x3) = ( 0x4C4B40 >> 16) & 0xFFFF; // HCounter

	/* Enabling timer and Interrupt Requests */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
	alt_irq_register(TIMER_IRQ, NULL, interval_timer_isr);

	/* Enabling pushbutton IRQs */
	*(KEY_ptr + 2) = 0xC; 		/* Enabling interrupts for KEY2 y KEY3*/
	*(KEY_ptr + 3) = 0; /* Edge detect reset */
	alt_irq_register(PUSHBUTTONS_IRQ, NULL, pushbutton_ISR);

	/* Enabling switch IRQs */
	*(SWITCH_ptr + 2) = 0x1; 		/* Enabling interrupts for SW0*/
	//*(SWITCH_ptr + 3) = 0; 		// borra la interrupcion
	alt_irq_register(SWITCHES_IRQ, NULL, switch_ISR);

	/* Initialazing 7-segment and LCD*/
	//12H,0min,0seg
	hour = 12;
	min = 0;
	sec = 0;
	print_7_seg_time (hour, min, sec);
	LCD_cursor_off(); 
	print_LCD_text (hour, min, sec);

	/* File Handling definition and screen init*/
	pixel_buffer_dev_MTL = alt_up_pixel_buffer_dma_open_dev ("/dev/mtl_pixel_buffer_dma");
	if ( pixel_buffer_dev_MTL == NULL)
		alt_printf ("Error: could not open MTL pixel buffer device\n");
	else
		alt_printf ("Opened MTL pixel buffer device\n");
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev_MTL, 0);


	/* output text message in the middle of the MTL monitor */
	char_buffer_dev_MTL = alt_up_char_buffer_open_dev ("/dev/mtl_char_buffer");
	if (char_buffer_dev_MTL == NULL)
	{
		alt_printf ("Error: could not open MTL character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened MTL character buffer device\n");
	alt_up_char_buffer_clear (char_buffer_dev_MTL);

	FILE *fh;
	fh = fopen(txt_files[txt_id & 0x3], "r");
	if (fh == NULL)
	{
		printf("Error loading file");
		return 1;
	}
	while(1)
	{
		if(msec_counter == 10)
		{
			msec_counter = 0;
			sec ++;
		}
		if (key_pressed == KEY2)
		{
			key_pressed = -1;
			min ++;
		}
		if (key_pressed == KEY3)
		{
			key_pressed = -1;
			hour ++;
		}
		if (sec == 60)
		{
			sec = 0;
			min ++;
		}
		if (min == 60)
		{
			min = 0;
			hour ++;
		}
		if (hour == 24)
		{
			hour = 0;
		}	
		print_7_seg_time (hour, min, sec);
		print_LCD_text (hour, min, sec);
		if (frame_refresh == 25)
		{
			if (frame_refresh == 25)
			if (VGA_enable)
			{
				frame_refresh = 0;
				if (file_status == 0) //proceed normally
				{
					file_status = read_VGA_line (fh, newline);
					printf("%s\n", newline);
					if(file_status == 1)
					{
						data_update(char_buffer_dev_MTL, text_data, separator);
						fclose(fh);
						file_status = 0;
						txt_id ++;
						fh = fopen(txt_files[txt_id & 0x3],"r");
						if (fh == NULL)
							{
								printf("Error loading file");
								return 1;
							}
					}
					else // status 0 or 2 (test the status 2 uncomment lower else)
					{
						data_update(char_buffer_dev_MTL, text_data, newline);
					}
				}
				/*
				else //print a separator line when EOF in case EOF is an the end of the line
				{

				}*/
			}
		}
	}
}

/****************************************************************************************
 * two digit hex to seven-segment
****************************************************************************************/
int two_hex_to_seven (int two_hex)
{
	unsigned char	seven_seg_decode_table[] = 
	{	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27,
		0x7F, 0x67, 0x77, 0x7C, 0x3B, 0x5E, 0x79, 0x71 };
	int Lresult = seven_seg_decode_table[(two_hex % 10) & 0xF];
	int Hresult = seven_seg_decode_table[(two_hex / 10) & 0xF];
	return (Hresult <<8) | Lresult;
}

/****************************************************************************************
 * show time on 7 segment display
****************************************************************************************/
void print_7_seg_time (int h, int m, int s)
{
	// 7 segment addresses	
	volatile int * HEX3_HEX0_ptr	= (int *) HEX3_HEX0_BASE;	// Direcciï¿½n HEX3_HEX0
	volatile int * HEX7_HEX4_ptr	= (int *) HEX7_HEX4_BASE;	// Direcciï¿½n HEX7_HEX4

	// Auxiliar variables
	int h_7seg, m_7seg, s_7seg;

	h_7seg = two_hex_to_seven(h);
	m_7seg = two_hex_to_seven(m);
	s_7seg = two_hex_to_seven(s);
	// Visualiza el patrÃ³n en HEX3 ... HEX0
	*(HEX3_HEX0_ptr) = s_7seg << 16;				
    *(HEX7_HEX4_ptr) = h_7seg << 16 | m_7seg;
}

/****************************************************************************************
 * Subroutine to move the LCD cursor
****************************************************************************************/
void LCD_cursor(int x, int y)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// 16x2 character display
	char instruction;

	instruction = x;
	if (y != 0) instruction |= 0x40;				// set bit 6 for bottom row
	instruction |= 0x80;								// need to set bit 7 to set the cursor location
	*(LCD_display_ptr) = instruction;			// write to the LCD instruction register
}

/****************************************************************************************
 * Subroutine to send a string of text to the LCD
****************************************************************************************/
void LCD_text(char * text_ptr)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// 16x2 character display

	while ( *(text_ptr) )
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
		++text_ptr;
	}
}

/****************************************************************************************
 * Subroutine to turn off the LCD cursor
****************************************************************************************/
void LCD_cursor_off(void)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// 16x2 character display
	*(LCD_display_ptr) = 0x0C;											// turn off the LCD cursor
}

/****************************************************************************************
 * show text on first row and time on second row of the LCD display
****************************************************************************************/
void print_LCD_text (int h, int m, int s)
{
	char top_text[2][16] =  {{"  EJERCICIO 3\0"}, // dos espacios para centrar texto
							 {"  JL ROCABADO\0"}};
	char bot_text[16];
	sprintf(bot_text, "    %.2d:%.2d:%.2d", h, m, s);
	LCD_cursor(0, 0);
	LCD_text(top_text[((s/5) & 0x1)]); // changing text every 5s
	LCD_cursor(0, 1);
	LCD_text(bot_text);
}

/****************************************************************************************
 * Reads a printable line from the file passed
 * returns a 0 if everything went properly
 * returns a 1 if eof (use this to add a file separation line)
 * returns a 2 if eof is in same line (print current line and then separation line)
 * migth be better tu use a struct
****************************************************************************************/

int read_VGA_line (FILE *filePointer, char* line)
{
	char read_char;
	int last_ws_pos = 0;
	int status = 0;
	int clear_flag = 0;
	// check if the text needs to be really
	for (int i = 0; i < TEXT_X_RES; i++)
	{
		read_char = getc(filePointer);
		if(read_char == EOF)
		{
			if(i != 0 && line[i-1] != '\n') // EOF in same line of last line
			{
				clear_flag = 1;
				status = 2;
				fseek( filePointer, -1, SEEK_CUR );
			}
			else //EOF in begining of last line
			{
				status = 1;
				return status;
			}
		}
		else if(read_char == '\n')
		{
			clear_flag = 1;
			fseek( filePointer, -1, SEEK_CUR );
		}
		else if(read_char == ' ')
		{
			last_ws_pos = i;
		}
		if (clear_flag)
		{
			line[i] = ' ';
		}
		else
		{
			line[i] = read_char;
		}
	}
	//Checking if last word fits completely in the screen
	if(status == 0)
	{
		read_char = getc(filePointer);
		if((read_char == '\n') || (read_char == ' ') || (read_char == EOF))
		{
			fseek( filePointer, -1, SEEK_CUR );
		}
		else // the word doesn't fit
		{
			for (int i = last_ws_pos + 1; i < TEXT_X_RES + 1; i++)
			{
				line[i] = ' ';
			}
			fseek( filePointer, -(TEXT_X_RES - last_ws_pos), SEEK_CUR );
		}
		line[TEXT_X_RES] = '\0';
	}
	return status;
}

/****************************************************************************************
 * Displays the news including the new line
****************************************************************************************/
void data_update(alt_up_char_buffer_dev* char_buffer_dev_MTL, char data[TEXT_Y_RES][TEXT_X_RES+1], char* newdata)
{
	for (int i = 0; i < TEXT_Y_RES - 1; i++) // La última línea se asigna la nueva linea
	{
		for(int j = 0; j < TEXT_X_RES ; j++)
		{
			data[i][j] = data[i+1][j];
		}
		//remember to initialize the MTL window in order to use this function properly
		alt_up_char_buffer_string (char_buffer_dev_MTL, data[i], MARGIN_OFFSET, i + MARGIN_OFFSET);
	}
	for(int j = 0; j < TEXT_X_RES; j++)
	{
		data[TEXT_Y_RES - 1][j] = newdata[j];
	}
	alt_up_char_buffer_string (char_buffer_dev_MTL, data[TEXT_Y_RES - 1], MARGIN_OFFSET, TEXT_Y_RES - 1 + MARGIN_OFFSET);
}

