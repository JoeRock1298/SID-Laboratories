/*
 * Real_Time_Clock.c
 *
 *  Created on: 10 de mar. de 2022
 *      Author: Rocabado Rocha, Jose Luis
 */

// -------------------------------------------------------------------------------------------------------------------------
// Universitat Politècnica de València
// Escuela Técnica Superior de Ingenieros de Telecomunicación
// -------------------------------------------------------------------------------------------------------------------------
// Sistemas Integrados Digitales
// Curso 2021 - 2022
// -------------------------------------------------------------------------------------------------------------------------
// Nombre del archivo: Real_Time_Clock.c
//
// Descripción:
// El siguiente codigo implementa la visualización de un reloj utilizando interruociones y el timer del sistema. Sus
// especificaciones son:
//      - Horas, minutos y segundos se observan en los displays 7-seg
//      - El timer se configura para generar una interrupción cada 100ms con un reloj del sistema de 50MHz
//      - Pulsador KEY3 incrementa las horas en una unidad
//      - Pulsador KEY2 incrementa los minutos en una unidad
//      - El reloj se visualiza ademas en el LCD y en la otra fila se mostrara el nombre
//
// -------------------------------------------------------------------------------------------------------------------------
//      Versión: V1.0                   | Fecha Modificación: 10/03/2022
//
//      Autor: Jose Luis Rocabado Rocha
//
// -------------------------------------------------------------------------------------------------------------------------

#include "key_codes.h"	// define los valores para KEY1, KEY2, KEY3
#include "system.h"
#include "sys/alt_irq.h"
#include <stdio.h> //Necesario para el NULL

void interval_timer_isr( );
void pushbutton_ISR( );

volatile int Update_time_flag = 0;

int main(void)
{
	///*Variable definition*///
	// 6 bits para 60, 5 bits para 24. 11
	int time = 0; //[5:0]s, [11:6]min, [16:12] hours.

	/* Peripheral address definitions */
	volatile int * interval_timer_ptr = (int *) TIMER_BASE;	    // Dirección Temporizador
	volatile int * KEY_ptr = (int *) PUSHBUTTONS_BASE;			// Dirección pulsadores KEY
	volatile int * HEX3_HEX0_ptr	= (int *) HEX3_HEX0_BASE;	// Dirección HEX3_HEX0
	volatile int * HEX7_HEX4_ptr	= (int *) HEX7_HEX4_BASE;	// Dirección HEX7_HEX4

	/* Configuring timer */
	// 0x4C4B40 -> 5000000 counts
	*(interval_timer_ptr + 0x2) = ( 0x4C4B40 & 0xFFFF); // LCounter
	*(interval_timer_ptr + 0x3) = ( 0x4C4B40 >> 16) & 0xFFFF; // HCounter

	/* Enabling timer and Interrupt Requests */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
	alt_irq_register(TIMER_IRQ, NULL, interval_timer_isr);

	/* Configuring pushbuttons */
	*(KEY_ptr + 2) = 0xC; 		/* Enabling interrupts for KEY2 y KEY3*/
	*(KEY_ptr + 3) = 0; /* Edge detect reset */
	alt_irq_register(PUSHBUTTONS_IRQ, NULL, pushbutton_ISR);

	/* Initialazing 7-segment and LCD*/

	// Hour mask -> 0x1F000 >> 12
	// Minute mask -> 0xFC0 >> 6
	// Second mask -> 0x3F

	// test C1E1E
	while(1)
	{
		*(HEX3_HEX0_ptr) = 0xE << 14;				// Visualiza el patrón en HEX3 ... HEX0
	    *(HEX7_HEX4_ptr) = pattern;
		if(Update_time_flag)
		{
			time++;
		}
	}

}

/****************************************************************************************
 * Hexadecimal to 7-segment decoder
****************************************************************************************/
uint8_t hex_to_seven (uint8_t hex)
{
	switch(hex)
	{
		case 0x0: return 0b0111111;
		case 0x1: return 0b0000110;
		case 0x2: return 0b1011011;
		case 0x3: return 0b1001111;
		case 0x4: return 0b1100110;
		case 0x5: return 0b1101101;
		case 0x6: return 0b1111101;
		case 0x7: return 0b0100111;
		case 0x8: return 0b1111111;
		case 0x9: return 0b1100111;
		case 0xa: return 0b1110111;
		case 0xb: return 0b1111100;
		case 0xc: return 0b0111011;
		case 0xd: return 0b1011110;
		case 0xe: return 0b1111001;
		case 0xf: return 0b1110001;
	}
}





