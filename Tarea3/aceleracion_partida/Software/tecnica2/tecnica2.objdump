
tecnica2.elf:     file format elf32-littlenios2
tecnica2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001556c memsz 0x0001556c flags r-x
    LOAD off    0x0001658c vaddr 0x0401558c paddr 0x0401709c align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x00018bac vaddr 0x04018bac paddr 0x04018bac align 2**12
         filesz 0x00000000 memsz 0x0000291c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014e1c  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000052c  04015060  04015060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  0401558c  0401709c  0001658c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000291c  04018bac  04018bac  00018bac  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0401b4c8  0401b4c8  0001809c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001809c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001140  00000000  00000000  000180c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026091  00000000  00000000  00019200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009842  00000000  00000000  0003f291  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b813  00000000  00000000  00048ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002a78  00000000  00000000  000542e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004599  00000000  00000000  00056d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000091ce  00000000  00000000  0005b2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000644c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001460  00000000  00000000  000644f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006944a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006944d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00069450  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00069451  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00069452  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00069456  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006945a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006945e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00069467  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00069470  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000010  00000000  00000000  00069479  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003d  00000000  00000000  00069489  2**0
                  CONTENTS, READONLY
 29 .jdi          00003dae  00000000  00000000  000694c6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007a248  00000000  00000000  0006d274  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
04015060 l    d  .rodata	00000000 .rodata
0401558c l    d  .rwdata	00000000 .rwdata
04018bac l    d  .bss	00000000 .bss
0401b4c8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tecnica2_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 backpropagation_best2019_superdef_ver2_alumnos-1.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
04017048 l     O .rwdata	00000008 one
04017050 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0401558c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
04004c54 l     F .text	000000f0 __sbprintf
04006e64 l     F .text	0000020c cvt
04007070 l     F .text	00000140 exponent
04015286 l     O .rodata	00000010 blanks.4403
04015296 l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04007350 l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400965c l     F .text	000000f4 std
04018bc8 l     O .bss	00000004 __sfp_lock
04018bcc l     O .bss	00000004 __sinit_lock
04009b58 l     F .text	00000024 __fp_lock
04009b7c l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
040159b0 l     O .rwdata	00000038 lconv
040159e8 l     O .rwdata	00000020 lc_ctype_charset
04015a08 l     O .rwdata	00000020 lc_message_charset
04018be0 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0400af14 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
040153e8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400f318 l     F .text	000000f0 __sbprintf
0401543e l     O .rodata	00000010 blanks.4348
0401544e l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
04012084 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04012190 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040121bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401249c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401257c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04012668 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401283c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401708c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
04012c2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04012d60 l     F .text	00000034 alt_dev_reg
04015fd8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401305c l     F .text	0000020c altera_avalon_jtag_uart_irq
04013268 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040138a0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04013d88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040141fc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401433c l     F .text	0000003c alt_get_errno
04014378 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04018c1c l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
04018c18 g     O .bss	00000004 alt_instruction_exception_handler
040047d4 g     F .text	00000048 putchar
0400dd18 g     F .text	000000b0 _mprec_log10
0400de98 g     F .text	00000134 __any_on
04010fa8 g     F .text	00000060 _isatty_r
040153c0 g     O .rodata	00000028 __mprec_tinytens
04012778 g     F .text	0000007c alt_main
0400481c g     F .text	00000118 _puts_r
0401b3c8 g     O .bss	00000100 alt_irq
04011008 g     F .text	00000070 _lseek_r
040014ac g     F .text	00000174 sqrt
0401709c g       *ABS*	00000000 __flash_rwdata_start
04002f68 g     F .text	00000088 .hidden __eqdf2
0400aadc g     F .text	00000068 _gettimeofday_r
0401b4c8 g       *ABS*	00000000 __alt_heap_start
04004728 g     F .text	00000068 printf
040110e8 g     F .text	000000d4 _wcrtomb_r
0400efa8 g     F .text	000000a0 __sseek
04009a00 g     F .text	000000d8 __sinit
0401471c g     F .text	00000024 alt_get_cpu_freq
0401071c g     F .text	00000168 __swbuf_r
0400ab44 g     F .text	00000084 _setlocale_r
04009750 g     F .text	000000a4 __sfmoreglue
04012818 g     F .text	00000024 __malloc_unlock
0400c188 g     F .text	00000208 memmove
04013994 g     F .text	00000280 perf_print_formatted_report
040099cc g     F .text	00000034 _cleanup
04018bac g     O .bss	00000004 patNum
0400c554 g     F .text	00000130 _Balloc
04002ff0 g     F .text	000000dc .hidden __gtdf2
04014590 g     F .text	00000024 altera_nios2_gen2_irq_init
040046a4 g     F .text	00000020 __errno
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04010f40 g     F .text	00000068 _fstat_r
04018bd0 g     O .bss	00000004 errno
0400eec4 g     F .text	00000030 __seofread
04018c04 g     O .bss	00000004 alt_argv
0401f038 g       *ABS*	00000000 _gp
04018bb0 g     O .bss	00000004 errThisPat
04018bb8 g     O .bss	00000004 RMSerror
04015e58 g     O .rwdata	00000180 alt_fd_list
04000710 g     F .text	00000040 WeightChangesH2O
04000840 g     F .text	000000cc WeightChangesH1H2
04004790 g     F .text	00000044 _putchar_r
04014740 g     F .text	00000090 alt_find_dev
0400c000 g     F .text	00000188 memcpy
04009988 g     F .text	00000044 _cleanup_r
04011f00 g     F .text	000000dc .hidden __floatsidf
040142c0 g     F .text	0000007c alt_io_redirect
040030cc g     F .text	000000f4 .hidden __ltdf2
04015060 g       *ABS*	00000000 __DTOR_END__
04004934 g     F .text	00000038 puts
04014a0c g     F .text	0000009c alt_exception_cause_generated_bad_addr
04001c68 g     F .text	00000104 __fpclassifyd
0400dbfc g     F .text	0000011c __ratio
04004bbc g     F .text	00000038 system
0400f408 g     F .text	00000050 __vfiprintf_internal
04013460 g     F .text	0000021c altera_avalon_jtag_uart_read
040046c4 g     F .text	00000064 _printf_r
040045e8 g     F .text	00000064 .hidden __udivsi3
040124d8 g     F .text	000000a4 isatty
040152d0 g     O .rodata	000000c8 __mprec_tens
0400abc8 g     F .text	00000024 __locale_charset
04018bf0 g     O .bss	00000008 alt_timezone
0401497c g     F .text	00000090 alt_icache_flush
04018be4 g     O .bss	00000004 __malloc_top_pad
040146bc g     F .text	00000040 perf_get_num_starts
04017064 g     O .rwdata	00000004 __mb_cur_max
0400ac50 g     F .text	00000028 _localeconv_r
04017040 g     O .rwdata	00000004 LR_H2O
0400cb9c g     F .text	00000058 __i2b
0400a34c g     F .text	000005dc __sfvwrite_r
0400edc8 g     F .text	00000060 _sbrk_r
04000a68 g     F .text	00000128 WeightChangesIH1
04000b90 g     F .text	00000120 WeightUpdatesIH1
04011078 g     F .text	00000070 _read_r
04017084 g     O .rwdata	00000004 alt_max_fd
04010af8 g     F .text	0000012c _fclose_r
04009608 g     F .text	00000054 fflush
04018be8 g     O .bss	00000004 __malloc_max_sbrked_mem
040041d4 g     F .text	00000110 .hidden __extendsfdf2
04004b6c g     F .text	00000050 _system_r
04001dd4 g     F .text	000008ac .hidden __adddf3
04001100 g     F .text	000000d8 displayResults
0401703c g     O .rwdata	00000004 LR_IH1
0400d7b8 g     F .text	00000204 __b2d
04011948 g     F .text	00000538 .hidden __umoddi3
040126a4 g     F .text	000000d4 lseek
04017058 g     O .rwdata	00000004 __fdlib_version
04018c48 g     O .bss	00000050 hiddenVal2
04017060 g     O .rwdata	00000004 _global_impure_ptr
04000390 g     F .text	00000380 calcNet
0400e1d8 g     F .text	00000bf0 _realloc_r
0401b4c8 g       *ABS*	00000000 __bss_end
0401410c g     F .text	000000f0 alt_iic_isr_register
04012b24 g     F .text	00000108 alt_tick
040113d0 g     F .text	00000578 .hidden __udivdi3
04010e50 g     F .text	00000088 _fputwc_r
04015398 g     O .rodata	00000028 __mprec_bigtens
0400c894 g     F .text	0000018c __s2b
04011fdc g     F .text	000000a8 .hidden __floatunsidf
0400d334 g     F .text	00000114 __mcmp
04009ba0 g     F .text	00000040 __fp_lock_all
040140c0 g     F .text	0000004c alt_ic_irq_enabled
04012a88 g     F .text	0000009c alt_alarm_stop
040011d8 g     F .text	000000c0 calcOverallError
04018c14 g     O .bss	00000004 alt_irq_active
04017044 g     O .rwdata	00000004 LR_H1H2
040000fc g     F .exceptions	000000d4 alt_irq_handler
04015e30 g     O .rwdata	00000028 alt_dev_null
04013d40 g     F .text	00000048 alt_dcache_flush_all
0400ca20 g     F .text	00000090 __hi0bits
04011e80 g     F .text	00000080 .hidden __fixdfsi
0401709c g       *ABS*	00000000 __ram_rwdata_end
04018c98 g     O .bss	00000050 delta_h2
0401707c g     O .rwdata	00000008 alt_dev_list
04012c68 g     F .text	000000f8 write
0400dfcc g     F .text	00000104 _putc_r
04018ce8 g     O .bss	00000054 weightsH2O
0401558c g       *ABS*	00000000 __ram_rodata_end
040121f8 g     F .text	000000b0 fstat
040030cc g     F .text	000000f4 .hidden __ledf2
0400090c g     F .text	0000015c WeightUpdatesH1H2
0400cfc4 g     F .text	00000178 __pow5mult
0400f458 g     F .text	000012c4 ___vfiprintf_internal_r
04018bd4 g     O .bss	00000004 __nlocale_changed
0400464c g     F .text	00000058 .hidden __umodsi3
0401b4c8 g       *ABS*	00000000 end
04012f9c g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04015060 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04013918 g     F .text	0000007c alt_avalon_timer_sc_init
0400448c g     F .text	00000064 .hidden __clzsi2
0401367c g     F .text	00000224 altera_avalon_jtag_uart_write
04009ad8 g     F .text	00000020 __sfp_lock_acquire
04000f7c g     F .text	00000184 initData
0400be44 g     F .text	000001bc memchr
04004d94 g     F .text	000020d0 ___vfprintf_internal_r
04000750 g     F .text	000000f0 WeightUpdatesH2O
04009c20 g     F .text	00000560 _free_r
040002d4 g     F .text	000000bc print_array
0400abec g     F .text	00000020 __locale_mb_cur_max
04014dd0 g     F .text	000001ec __call_exitprocs
04018bd8 g     O .bss	00000004 __mlocale_changed
0401706c g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04018c0c g     O .bss	00000004 _alt_tick_rate
04017038 g     O .rwdata	00000004 numEpochs
04018d3c g     O .bss	000000c8 ponderacion1
04014fbc g     F .text	00000070 .hidden __floatundidf
040049b0 g     F .text	000000c8 rand
0400d13c g     F .text	000001f8 __lshift
04018c10 g     O .bss	00000004 _alt_nticks
04012878 g     F .text	000000fc read
04012dcc g     F .text	0000006c alt_sys_init
04014c60 g     F .text	00000170 __register_exitproc
0400cbf4 g     F .text	000003d0 __multiply
04013308 g     F .text	00000068 altera_avalon_jtag_uart_close
0401558c g       *ABS*	00000000 __ram_rwdata_start
04015060 g       *ABS*	00000000 __ram_rodata_start
04018c20 g     O .bss	00000028 __malloc_current_mallinfo
04018e04 g     O .bss	000000c8 der_hiddenVal1
0400d9bc g     F .text	00000240 __d2b
04018bbc g     O .bss	00000004 outPred
04012e38 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040148d8 g     F .text	000000a4 alt_get_fd
04000cb0 g     F .text	0000003c getRand
04010934 g     F .text	00000060 _close_r
040145b4 g     F .text	000000bc perf_get_section_time
04018bc0 g     O .bss	00000004 ponderacion3
04014b2c g     F .text	00000134 memcmp
04012ef8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0401b4c8 g       *ABS*	00000000 __alt_stack_base
04012f48 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040071b0 g     F .text	000001a0 __swsetup_r
04002680 g     F .text	000008e8 .hidden __divdf3
040097f4 g     F .text	00000194 __sfp
0400ddc8 g     F .text	000000d0 __copybits
04014670 g     F .text	0000004c perf_get_total_time
04018ecc g     O .bss	00000ff0 weightsH1H2_old
04015a28 g     O .rwdata	00000408 __malloc_av_
04009b38 g     F .text	00000020 __sinit_lock_release
040031c0 g     F .text	00000718 .hidden __muldf3
0400ee28 g     F .text	0000009c __sread
040147d0 g     F .text	00000108 alt_find_file
04013dc4 g     F .text	000000a4 alt_dev_llist_insert
040127f4 g     F .text	00000024 __malloc_lock
040129d8 g     F .text	000000b0 sbrk
04009580 g     F .text	00000088 _fflush_r
04010994 g     F .text	00000164 _calloc_r
040122a8 g     F .text	000001f4 gettimeofday
04018bac g       *ABS*	00000000 __bss_start
0400c390 g     F .text	000001c4 memset
04000cec g     F .text	00000290 initWeights
04001298 g     F .text	00000214 main
04018c08 g     O .bss	00000004 alt_envp
04018bec g     O .bss	00000004 __malloc_max_total_mem
04012e98 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04010884 g     F .text	00000040 __swbuf
0400496c g     F .text	00000044 srand
0400f048 g     F .text	00000054 __sclose
04001d6c g     F .text	00000068 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
04010c24 g     F .text	00000038 fclose
040042e4 g     F .text	000001a8 .hidden __truncdfsf2
04007704 g     F .text	00001b78 _dtoa_r
0400b2c8 g     F .text	00000b7c _malloc_r
040112f8 g     F .text	00000078 __ascii_wctomb
04004bf4 g     F .text	00000060 time
04017088 g     O .rwdata	00000004 alt_errno
0400a928 g     F .text	000000d8 _fwalk
0400e0d0 g     F .text	00000108 putc
040044f0 g     F .text	00000084 .hidden __divsi3
0400a180 g     F .text	000001cc _malloc_trim_r
04015060 g       *ABS*	00000000 __CTOR_END__
0400f09c g     F .text	00000140 strcmp
04015060 g       *ABS*	00000000 __flash_rodata_start
04019ebc g     O .bss	000000c8 hiddenVal1
04015060 g       *ABS*	00000000 __DTOR_LIST__
04002f68 g     F .text	00000088 .hidden __nedf2
04012d94 g     F .text	00000038 alt_irq_init
04012974 g     F .text	00000064 alt_release_fd
0401511d g     O .rodata	00000100 .hidden __clz_tab
04018bdc g     O .bss	00000004 _PathLocale
04014aa8 g     F .text	0000003c atexit
040108c4 g     F .text	00000070 _write_r
0400ac78 g     F .text	00000040 setlocale
0401705c g     O .rwdata	00000004 _impure_ptr
04018c00 g     O .bss	00000004 alt_argc
0400927c g     F .text	00000304 __sflush_r
04013ec8 g     F .text	00000060 _do_dtors
0400ac30 g     F .text	00000020 __locale_cjk_lang
04000020 g       .exceptions	00000000 alt_irq_entry
0400d6ec g     F .text	000000cc __ulp
04009be0 g     F .text	00000040 __fp_unlock_all
04017074 g     O .rwdata	00000008 alt_fs_list
04019f84 g     O .bss	00000258 weightsIH1
0401a1dc g     O .bss	00000054 weightsH2O_old
04018bc4 g     O .bss	00000004 der_outPred
04018bf8 g     O .bss	00000008 alt_resettime
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400acb8 g     F .text	00000030 localeconv
04000290 g     F .text	00000044 tanh_hard
04001620 g     F .text	00000648 __ieee754_sqrt
04013f5c g     F .text	00000050 alt_ic_isr_register
0401709c g       *ABS*	00000000 _edata
0401b4c8 g       *ABS*	00000000 _end
04010c5c g     F .text	000001f4 __fputwc
04000244 g       *ABS*	00000000 __ram_exceptions_end
04013370 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04014034 g     F .text	0000008c alt_ic_irq_disable
0401a230 g     O .bss	00000030 trainInputs
0400eef4 g     F .text	000000b4 __swrite
04017068 g     O .rwdata	00000004 __malloc_trim_threshold
040146fc g     F .text	00000020 alt_get_performance_counter_base
0400ac0c g     F .text	00000024 __locale_msgcharset
04014ae4 g     F .text	00000048 exit
0400aa00 g     F .text	000000dc _fwalk_reent
0400d448 g     F .text	000002a4 __mdiff
04004574 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04009af8 g     F .text	00000020 __sfp_lock_release
0401a260 g     O .bss	00000010 trainOutput
04000000 g       *ABS*	00000000 __alt_mem_sdram
0401a270 g     O .bss	00000050 ponderacion2
0401a2c0 g     O .bss	00000ff0 weightsH1H2
0401502c g     F .text	00000034 _exit
04013c14 g     F .text	0000012c alt_alarm_start
04018bb4 g     O .bss	00000004 delta_o
04011370 g     F .text	00000060 .hidden __muldi3
0400ace8 g     F .text	0000022c __smakebuf_r
04004a78 g     F .text	000000f4 strlen
0401443c g     F .text	00000154 open
04002ff0 g     F .text	000000dc .hidden __gedf2
0401b2b0 g     O .bss	00000050 der_hiddenVal2
04017070 g     O .rwdata	00000004 __wctomb
0400f1dc g     F .text	0000013c __sprint_r
04013f28 g     F .text	00000034 alt_icache_flush_all
04017098 g     O .rwdata	00000004 alt_priority_mask
0401b300 g     O .bss	000000c8 delta_h1
04013fac g     F .text	00000088 alt_ic_irq_enable
04004d44 g     F .text	00000050 __vfprintf_internal
04011294 g     F .text	00000064 _wctomb_r
040038d8 g     F .text	000008fc .hidden __subdf3
0400cab0 g     F .text	000000ec __lo0bits
04017090 g     O .rwdata	00000008 alt_alarm_list
04013e68 g     F .text	00000060 _do_ctors
040111bc g     F .text	000000d8 wcrtomb
040120c0 g     F .text	000000d0 close
040125e4 g     F .text	00000084 alt_load
04010ed8 g     F .text	00000068 fputwc
04009b18 g     F .text	00000020 __sinit_lock_acquire
0400c700 g     F .text	00000194 __multadd
0400c684 g     F .text	0000007c _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10acf204 	addi	r2,r2,-19512
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10acf204 	addi	r2,r2,-19512
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a6f817 	ldw	r2,-25632(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a6f817 	ldw	r2,-25632(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xfc000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000260:	d6bc0e14 	ori	gp,gp,61496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000268:	10a2eb14 	ori	r2,r2,35756

    movhi r3, %hi(__bss_end)
 400026c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000270:	18ed3214 	ori	r3,r3,46280

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xfc000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40125e40 	call	40125e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	40127780 	call	4012778 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xfc00028c>

04000290 <tanh_hard>:
//==============================================================
/*Inline function copies the definition of the function whenever its called
 * instead of reserving a chunk of memory for separate instructions
 * erasing call linking.
 */
inline float tanh_hard(float x){
 4000290:	defffd04 	addi	sp,sp,-12
 4000294:	df000215 	stw	fp,8(sp)
 4000298:	df000204 	addi	fp,sp,8
 400029c:	e13fff15 	stw	r4,-4(fp)
	float *tanh_ip_pointer = TOP_TANH_0_BASE;
 40002a0:	00820004 	movi	r2,2048
 40002a4:	e0bffe15 	stw	r2,-8(fp)
	*(tanh_ip_pointer + 0x3) = x;
 40002a8:	e0bffe17 	ldw	r2,-8(fp)
 40002ac:	10800304 	addi	r2,r2,12
 40002b0:	e0ffff17 	ldw	r3,-4(fp)
 40002b4:	10c00015 	stw	r3,0(r2)
	return *(tanh_ip_pointer);
 40002b8:	e0bffe17 	ldw	r2,-8(fp)
 40002bc:	10c00017 	ldw	r3,0(r2)
 40002c0:	1805883a 	mov	r2,r3
}
 40002c4:	e037883a 	mov	sp,fp
 40002c8:	df000017 	ldw	fp,0(sp)
 40002cc:	dec00104 	addi	sp,sp,4
 40002d0:	f800283a 	ret

040002d4 <print_array>:

void print_array(float data[], int n)
{
 40002d4:	defffb04 	addi	sp,sp,-20
 40002d8:	dfc00415 	stw	ra,16(sp)
 40002dc:	df000315 	stw	fp,12(sp)
 40002e0:	df000304 	addi	fp,sp,12
 40002e4:	e13ffe15 	stw	r4,-8(fp)
 40002e8:	e17fff15 	stw	r5,-4(fp)
    int i;

    printf("[");
 40002ec:	010016c4 	movi	r4,91
 40002f0:	40047d40 	call	40047d4 <putchar>
    for (i = 0; i < n; i++)
 40002f4:	e03ffd15 	stw	zero,-12(fp)
 40002f8:	00001906 	br	4000360 <print_array+0x8c>
    {

        printf("%f",data[i]);
 40002fc:	e0bffd17 	ldw	r2,-12(fp)
 4000300:	1085883a 	add	r2,r2,r2
 4000304:	1085883a 	add	r2,r2,r2
 4000308:	1007883a 	mov	r3,r2
 400030c:	e0bffe17 	ldw	r2,-8(fp)
 4000310:	10c5883a 	add	r2,r2,r3
 4000314:	10c00017 	ldw	r3,0(r2)
 4000318:	1809883a 	mov	r4,r3
 400031c:	40041d40 	call	40041d4 <__extendsfdf2>
 4000320:	100d883a 	mov	r6,r2
 4000324:	180f883a 	mov	r7,r3
 4000328:	300b883a 	mov	r5,r6
 400032c:	380d883a 	mov	r6,r7
 4000330:	01010074 	movhi	r4,1025
 4000334:	21141804 	addi	r4,r4,20576
 4000338:	40047280 	call	4004728 <printf>
        if (i != n-1)
 400033c:	e0bfff17 	ldw	r2,-4(fp)
 4000340:	10ffffc4 	addi	r3,r2,-1
 4000344:	e0bffd17 	ldw	r2,-12(fp)
 4000348:	18800226 	beq	r3,r2,4000354 <print_array+0x80>
        {
            printf(",");
 400034c:	01000b04 	movi	r4,44
 4000350:	40047d40 	call	40047d4 <putchar>
void print_array(float data[], int n)
{
    int i;

    printf("[");
    for (i = 0; i < n; i++)
 4000354:	e0bffd17 	ldw	r2,-12(fp)
 4000358:	10800044 	addi	r2,r2,1
 400035c:	e0bffd15 	stw	r2,-12(fp)
 4000360:	e0fffd17 	ldw	r3,-12(fp)
 4000364:	e0bfff17 	ldw	r2,-4(fp)
 4000368:	18bfe416 	blt	r3,r2,40002fc <__alt_data_end+0xfc0002fc>
        if (i != n-1)
        {
            printf(",");
        }
    }
    printf("]\n");
 400036c:	01010074 	movhi	r4,1025
 4000370:	21141904 	addi	r4,r4,20580
 4000374:	40049340 	call	4004934 <puts>
}
 4000378:	0001883a 	nop
 400037c:	e037883a 	mov	sp,fp
 4000380:	dfc00117 	ldw	ra,4(sp)
 4000384:	df000017 	ldw	fp,0(sp)
 4000388:	dec00204 	addi	sp,sp,8
 400038c:	f800283a 	ret

04000390 <calcNet>:

//***********************************
// calculates the network output
void calcNet(void)
{
 4000390:	defffc04 	addi	sp,sp,-16
 4000394:	dfc00315 	stw	ra,12(sp)
 4000398:	df000215 	stw	fp,8(sp)
 400039c:	df000204 	addi	fp,sp,8
    //calculate the outputs of the hidden neurons of hidden layer 1
    //the hidden neurons are tanh
    int i = 0;
 40003a0:	e03ffe15 	stw	zero,-8(fp)
    int j =0;
 40003a4:	e03fff15 	stw	zero,-4(fp)


    for(i = 0;i<numHidden1;i++)
 40003a8:	e03ffe15 	stw	zero,-8(fp)
 40003ac:	00005106 	br	40004f4 <calcNet+0x164>
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];
 40003b0:	008100b4 	movhi	r2,1026
 40003b4:	10a7e104 	addi	r2,r2,-24700
 40003b8:	e0fffe17 	ldw	r3,-8(fp)
 40003bc:	18c01904 	addi	r3,r3,100
 40003c0:	18c7883a 	add	r3,r3,r3
 40003c4:	18c7883a 	add	r3,r3,r3
 40003c8:	10c5883a 	add	r2,r2,r3
 40003cc:	11000017 	ldw	r4,0(r2)
 40003d0:	008100b4 	movhi	r2,1026
 40003d4:	10a34f04 	addi	r2,r2,-29380
 40003d8:	e0fffe17 	ldw	r3,-8(fp)
 40003dc:	18c7883a 	add	r3,r3,r3
 40003e0:	18c7883a 	add	r3,r3,r3
 40003e4:	10c5883a 	add	r2,r2,r3
 40003e8:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numInputs;j++)
 40003ec:	e03fff15 	stw	zero,-4(fp)
 40003f0:	00002906 	br	4000498 <calcNet+0x108>
        {

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);
 40003f4:	008100b4 	movhi	r2,1026
 40003f8:	10a34f04 	addi	r2,r2,-29380
 40003fc:	e0fffe17 	ldw	r3,-8(fp)
 4000400:	18c7883a 	add	r3,r3,r3
 4000404:	18c7883a 	add	r3,r3,r3
 4000408:	10c5883a 	add	r2,r2,r3
 400040c:	11400017 	ldw	r5,0(r2)
 4000410:	d126dd17 	ldw	r4,-25740(gp)
 4000414:	00c100b4 	movhi	r3,1026
 4000418:	18e88c04 	addi	r3,r3,-24016
 400041c:	2005883a 	mov	r2,r4
 4000420:	1085883a 	add	r2,r2,r2
 4000424:	1105883a 	add	r2,r2,r4
 4000428:	e13fff17 	ldw	r4,-4(fp)
 400042c:	1105883a 	add	r2,r2,r4
 4000430:	1085883a 	add	r2,r2,r2
 4000434:	1085883a 	add	r2,r2,r2
 4000438:	1885883a 	add	r2,r3,r2
 400043c:	11000017 	ldw	r4,0(r2)
 4000440:	008100b4 	movhi	r2,1026
 4000444:	10a7e104 	addi	r2,r2,-24700
 4000448:	e0ffff17 	ldw	r3,-4(fp)
 400044c:	19800ca4 	muli	r6,r3,50
 4000450:	e0fffe17 	ldw	r3,-8(fp)
 4000454:	30c7883a 	add	r3,r6,r3
 4000458:	18c7883a 	add	r3,r3,r3
 400045c:	18c7883a 	add	r3,r3,r3
 4000460:	10c7883a 	add	r3,r2,r3
 4000464:	18800017 	ldw	r2,0(r3)
 4000468:	2085ff32 	custom	252,r2,r4,r2
 400046c:	2889ff72 	custom	253,r4,r5,r2
 4000470:	008100b4 	movhi	r2,1026
 4000474:	10a34f04 	addi	r2,r2,-29380
 4000478:	e0fffe17 	ldw	r3,-8(fp)
 400047c:	18c7883a 	add	r3,r3,r3
 4000480:	18c7883a 	add	r3,r3,r3
 4000484:	10c5883a 	add	r2,r2,r3
 4000488:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden1;i++)
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];

        for(j = 0;j<numInputs;j++)
 400048c:	e0bfff17 	ldw	r2,-4(fp)
 4000490:	10800044 	addi	r2,r2,1
 4000494:	e0bfff15 	stw	r2,-4(fp)
 4000498:	e0bfff17 	ldw	r2,-4(fp)
 400049c:	10800090 	cmplti	r2,r2,2
 40004a0:	103fd41e 	bne	r2,zero,40003f4 <__alt_data_end+0xfc0003f4>

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);

        }

			hiddenVal1[i] = tanh_hard(ponderacion1[i]);
 40004a4:	008100b4 	movhi	r2,1026
 40004a8:	10a34f04 	addi	r2,r2,-29380
 40004ac:	e0fffe17 	ldw	r3,-8(fp)
 40004b0:	18c7883a 	add	r3,r3,r3
 40004b4:	18c7883a 	add	r3,r3,r3
 40004b8:	10c5883a 	add	r2,r2,r3
 40004bc:	10c00017 	ldw	r3,0(r2)
 40004c0:	1809883a 	mov	r4,r3
 40004c4:	40002900 	call	4000290 <tanh_hard>
 40004c8:	1009883a 	mov	r4,r2
 40004cc:	008100b4 	movhi	r2,1026
 40004d0:	10a7af04 	addi	r2,r2,-24900
 40004d4:	e0fffe17 	ldw	r3,-8(fp)
 40004d8:	18c7883a 	add	r3,r3,r3
 40004dc:	18c7883a 	add	r3,r3,r3
 40004e0:	10c5883a 	add	r2,r2,r3
 40004e4:	11000015 	stw	r4,0(r2)
    //the hidden neurons are tanh
    int i = 0;
    int j =0;


    for(i = 0;i<numHidden1;i++)
 40004e8:	e0bffe17 	ldw	r2,-8(fp)
 40004ec:	10800044 	addi	r2,r2,1
 40004f0:	e0bffe15 	stw	r2,-8(fp)
 40004f4:	e0bffe17 	ldw	r2,-8(fp)
 40004f8:	10800c90 	cmplti	r2,r2,50
 40004fc:	103fac1e 	bne	r2,zero,40003b0 <__alt_data_end+0xfc0003b0>
			hiddenVal1[i] = tanh_hard(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
 4000500:	e03ffe15 	stw	zero,-8(fp)
 4000504:	00004c06 	br	4000638 <calcNet+0x2a8>
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];
 4000508:	008100b4 	movhi	r2,1026
 400050c:	10a8b004 	addi	r2,r2,-23872
 4000510:	e0fffe17 	ldw	r3,-8(fp)
 4000514:	18c0fa04 	addi	r3,r3,1000
 4000518:	18c7883a 	add	r3,r3,r3
 400051c:	18c7883a 	add	r3,r3,r3
 4000520:	10c5883a 	add	r2,r2,r3
 4000524:	11000017 	ldw	r4,0(r2)
 4000528:	008100b4 	movhi	r2,1026
 400052c:	10a89c04 	addi	r2,r2,-23952
 4000530:	e0fffe17 	ldw	r3,-8(fp)
 4000534:	18c7883a 	add	r3,r3,r3
 4000538:	18c7883a 	add	r3,r3,r3
 400053c:	10c5883a 	add	r2,r2,r3
 4000540:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numHidden1;j++)
 4000544:	e03fff15 	stw	zero,-4(fp)
 4000548:	00002406 	br	40005dc <calcNet+0x24c>
        {

        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);
 400054c:	008100b4 	movhi	r2,1026
 4000550:	10a89c04 	addi	r2,r2,-23952
 4000554:	e0fffe17 	ldw	r3,-8(fp)
 4000558:	18c7883a 	add	r3,r3,r3
 400055c:	18c7883a 	add	r3,r3,r3
 4000560:	10c5883a 	add	r2,r2,r3
 4000564:	11000017 	ldw	r4,0(r2)
 4000568:	008100b4 	movhi	r2,1026
 400056c:	10a7af04 	addi	r2,r2,-24900
 4000570:	e0ffff17 	ldw	r3,-4(fp)
 4000574:	18c7883a 	add	r3,r3,r3
 4000578:	18c7883a 	add	r3,r3,r3
 400057c:	10c5883a 	add	r2,r2,r3
 4000580:	11400017 	ldw	r5,0(r2)
 4000584:	008100b4 	movhi	r2,1026
 4000588:	10a8b004 	addi	r2,r2,-23872
 400058c:	e0ffff17 	ldw	r3,-4(fp)
 4000590:	19800524 	muli	r6,r3,20
 4000594:	e0fffe17 	ldw	r3,-8(fp)
 4000598:	30c7883a 	add	r3,r6,r3
 400059c:	18c7883a 	add	r3,r3,r3
 40005a0:	18c7883a 	add	r3,r3,r3
 40005a4:	10c7883a 	add	r3,r2,r3
 40005a8:	18800017 	ldw	r2,0(r3)
 40005ac:	2885ff32 	custom	252,r2,r5,r2
 40005b0:	2089ff72 	custom	253,r4,r4,r2
 40005b4:	008100b4 	movhi	r2,1026
 40005b8:	10a89c04 	addi	r2,r2,-23952
 40005bc:	e0fffe17 	ldw	r3,-8(fp)
 40005c0:	18c7883a 	add	r3,r3,r3
 40005c4:	18c7883a 	add	r3,r3,r3
 40005c8:	10c5883a 	add	r2,r2,r3
 40005cc:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden2;i++)
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];

        for(j = 0;j<numHidden1;j++)
 40005d0:	e0bfff17 	ldw	r2,-4(fp)
 40005d4:	10800044 	addi	r2,r2,1
 40005d8:	e0bfff15 	stw	r2,-4(fp)
 40005dc:	e0bfff17 	ldw	r2,-4(fp)
 40005e0:	10800c90 	cmplti	r2,r2,50
 40005e4:	103fd91e 	bne	r2,zero,400054c <__alt_data_end+0xfc00054c>
        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);

        }


			hiddenVal2[i] = tanh_hard(ponderacion2[i]);
 40005e8:	008100b4 	movhi	r2,1026
 40005ec:	10a89c04 	addi	r2,r2,-23952
 40005f0:	e0fffe17 	ldw	r3,-8(fp)
 40005f4:	18c7883a 	add	r3,r3,r3
 40005f8:	18c7883a 	add	r3,r3,r3
 40005fc:	10c5883a 	add	r2,r2,r3
 4000600:	10c00017 	ldw	r3,0(r2)
 4000604:	1809883a 	mov	r4,r3
 4000608:	40002900 	call	4000290 <tanh_hard>
 400060c:	1009883a 	mov	r4,r2
 4000610:	008100b4 	movhi	r2,1026
 4000614:	10a31204 	addi	r2,r2,-29624
 4000618:	e0fffe17 	ldw	r3,-8(fp)
 400061c:	18c7883a 	add	r3,r3,r3
 4000620:	18c7883a 	add	r3,r3,r3
 4000624:	10c5883a 	add	r2,r2,r3
 4000628:	11000015 	stw	r4,0(r2)
			hiddenVal1[i] = tanh_hard(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
 400062c:	e0bffe17 	ldw	r2,-8(fp)
 4000630:	10800044 	addi	r2,r2,1
 4000634:	e0bffe15 	stw	r2,-8(fp)
 4000638:	e0bffe17 	ldw	r2,-8(fp)
 400063c:	10800510 	cmplti	r2,r2,20
 4000640:	103fb11e 	bne	r2,zero,4000508 <__alt_data_end+0xfc000508>

    }
   //calculate the output of the network
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];
 4000644:	008100b4 	movhi	r2,1026
 4000648:	10a33a04 	addi	r2,r2,-29464
 400064c:	10c01417 	ldw	r3,80(r2)
 4000650:	d0e6e215 	stw	r3,-25720(gp)


   for(i = 0;i<numHidden2;i++)
 4000654:	e03ffe15 	stw	zero,-8(fp)
 4000658:	00001506 	br	40006b0 <calcNet+0x320>
   {

    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];
 400065c:	008100b4 	movhi	r2,1026
 4000660:	10a31204 	addi	r2,r2,-29624
 4000664:	e0fffe17 	ldw	r3,-8(fp)
 4000668:	18c7883a 	add	r3,r3,r3
 400066c:	18c7883a 	add	r3,r3,r3
 4000670:	10c5883a 	add	r2,r2,r3
 4000674:	11000017 	ldw	r4,0(r2)
 4000678:	008100b4 	movhi	r2,1026
 400067c:	10a33a04 	addi	r2,r2,-29464
 4000680:	e0fffe17 	ldw	r3,-8(fp)
 4000684:	18c7883a 	add	r3,r3,r3
 4000688:	18c7883a 	add	r3,r3,r3
 400068c:	10c7883a 	add	r3,r2,r3
 4000690:	18800017 	ldw	r2,0(r3)
 4000694:	2087ff32 	custom	252,r3,r4,r2
 4000698:	d0a6e217 	ldw	r2,-25720(gp)
 400069c:	1885ff72 	custom	253,r2,r3,r2
 40006a0:	d0a6e215 	stw	r2,-25720(gp)
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];


   for(i = 0;i<numHidden2;i++)
 40006a4:	e0bffe17 	ldw	r2,-8(fp)
 40006a8:	10800044 	addi	r2,r2,1
 40006ac:	e0bffe15 	stw	r2,-8(fp)
 40006b0:	e0bffe17 	ldw	r2,-8(fp)
 40006b4:	10800510 	cmplti	r2,r2,20
 40006b8:	103fe81e 	bne	r2,zero,400065c <__alt_data_end+0xfc00065c>
    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];

   }


        outPred  = tanh_hard(ponderacion3);
 40006bc:	d0a6e217 	ldw	r2,-25720(gp)
 40006c0:	1009883a 	mov	r4,r2
 40006c4:	40002900 	call	4000290 <tanh_hard>
 40006c8:	1007883a 	mov	r3,r2
 40006cc:	d0e6e115 	stw	r3,-25724(gp)

    //calculate the error
    errThisPat = trainOutput[patNum]-outPred;
 40006d0:	d0e6dd17 	ldw	r3,-25740(gp)
 40006d4:	008100b4 	movhi	r2,1026
 40006d8:	10a89804 	addi	r2,r2,-23968
 40006dc:	18c7883a 	add	r3,r3,r3
 40006e0:	18c7883a 	add	r3,r3,r3
 40006e4:	10c5883a 	add	r2,r2,r3
 40006e8:	10c00017 	ldw	r3,0(r2)
 40006ec:	d0a6e117 	ldw	r2,-25724(gp)
 40006f0:	1885ffb2 	custom	254,r2,r3,r2
 40006f4:	d0a6de15 	stw	r2,-25736(gp)

}
 40006f8:	0001883a 	nop
 40006fc:	e037883a 	mov	sp,fp
 4000700:	dfc00117 	ldw	ra,4(sp)
 4000704:	df000017 	ldw	fp,0(sp)
 4000708:	dec00204 	addi	sp,sp,8
 400070c:	f800283a 	ret

04000710 <WeightChangesH2O>:


//************************************
//adjust the weights hidden-output
void WeightChangesH2O(void)
{
 4000710:	deffff04 	addi	sp,sp,-4
 4000714:	df000015 	stw	fp,0(sp)
 4000718:	d839883a 	mov	fp,sp


		delta_o = (1 - (outPred * outPred))* errThisPat;
 400071c:	d0e6e117 	ldw	r3,-25724(gp)
 4000720:	d0a6e117 	ldw	r2,-25724(gp)
 4000724:	1885ff32 	custom	252,r2,r3,r2
 4000728:	00cfe034 	movhi	r3,16256
 400072c:	1887ffb2 	custom	254,r3,r3,r2
 4000730:	d0a6de17 	ldw	r2,-25736(gp)
 4000734:	1885ff32 	custom	252,r2,r3,r2
 4000738:	d0a6df15 	stw	r2,-25732(gp)


 }
 400073c:	0001883a 	nop
 4000740:	e037883a 	mov	sp,fp
 4000744:	df000017 	ldw	fp,0(sp)
 4000748:	dec00104 	addi	sp,sp,4
 400074c:	f800283a 	ret

04000750 <WeightUpdatesH2O>:

//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
 4000750:	defffd04 	addi	sp,sp,-12
 4000754:	df000215 	stw	fp,8(sp)
 4000758:	df000204 	addi	fp,sp,8
    int k=0;
 400075c:	e03ffe15 	stw	zero,-8(fp)
   for(k = 0;k<numHidden2+1;k++)
 4000760:	e03ffe15 	stw	zero,-8(fp)
 4000764:	00002e06 	br	4000820 <WeightUpdatesH2O+0xd0>
   {
    float weightChange =delta_o * LR_H2O * hiddenVal2[k];
 4000768:	d0e6df17 	ldw	r3,-25732(gp)
 400076c:	008f7374 	movhi	r2,15821
 4000770:	10b33344 	addi	r2,r2,-13107
 4000774:	1889ff32 	custom	252,r4,r3,r2
 4000778:	008100b4 	movhi	r2,1026
 400077c:	10a31204 	addi	r2,r2,-29624
 4000780:	e0fffe17 	ldw	r3,-8(fp)
 4000784:	18c7883a 	add	r3,r3,r3
 4000788:	18c7883a 	add	r3,r3,r3
 400078c:	10c7883a 	add	r3,r2,r3
 4000790:	18800017 	ldw	r2,0(r3)
 4000794:	2085ff32 	custom	252,r2,r4,r2
 4000798:	e0bfff15 	stw	r2,-4(fp)

    weightsH2O_old[k] = weightsH2O[k] ;
 400079c:	008100b4 	movhi	r2,1026
 40007a0:	10a33a04 	addi	r2,r2,-29464
 40007a4:	e0fffe17 	ldw	r3,-8(fp)
 40007a8:	18c7883a 	add	r3,r3,r3
 40007ac:	18c7883a 	add	r3,r3,r3
 40007b0:	10c5883a 	add	r2,r2,r3
 40007b4:	11000017 	ldw	r4,0(r2)
 40007b8:	008100b4 	movhi	r2,1026
 40007bc:	10a87704 	addi	r2,r2,-24100
 40007c0:	e0fffe17 	ldw	r3,-8(fp)
 40007c4:	18c7883a 	add	r3,r3,r3
 40007c8:	18c7883a 	add	r3,r3,r3
 40007cc:	10c5883a 	add	r2,r2,r3
 40007d0:	11000015 	stw	r4,0(r2)
    weightsH2O[k] = weightsH2O[k] + weightChange;
 40007d4:	008100b4 	movhi	r2,1026
 40007d8:	10a33a04 	addi	r2,r2,-29464
 40007dc:	e0fffe17 	ldw	r3,-8(fp)
 40007e0:	18c7883a 	add	r3,r3,r3
 40007e4:	18c7883a 	add	r3,r3,r3
 40007e8:	10c5883a 	add	r2,r2,r3
 40007ec:	10c00017 	ldw	r3,0(r2)
 40007f0:	e0bfff17 	ldw	r2,-4(fp)
 40007f4:	1889ff72 	custom	253,r4,r3,r2
 40007f8:	008100b4 	movhi	r2,1026
 40007fc:	10a33a04 	addi	r2,r2,-29464
 4000800:	e0fffe17 	ldw	r3,-8(fp)
 4000804:	18c7883a 	add	r3,r3,r3
 4000808:	18c7883a 	add	r3,r3,r3
 400080c:	10c5883a 	add	r2,r2,r3
 4000810:	11000015 	stw	r4,0(r2)
//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
    int k=0;
   for(k = 0;k<numHidden2+1;k++)
 4000814:	e0bffe17 	ldw	r2,-8(fp)
 4000818:	10800044 	addi	r2,r2,1
 400081c:	e0bffe15 	stw	r2,-8(fp)
 4000820:	e0bffe17 	ldw	r2,-8(fp)
 4000824:	10800550 	cmplti	r2,r2,21
 4000828:	103fcf1e 	bne	r2,zero,4000768 <__alt_data_end+0xfc000768>
    weightsH2O_old[k] = weightsH2O[k] ;
    weightsH2O[k] = weightsH2O[k] + weightChange;

   }

 }
 400082c:	0001883a 	nop
 4000830:	e037883a 	mov	sp,fp
 4000834:	df000017 	ldw	fp,0(sp)
 4000838:	dec00104 	addi	sp,sp,4
 400083c:	f800283a 	ret

04000840 <WeightChangesH1H2>:

//************************************
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{
 4000840:	defffe04 	addi	sp,sp,-8
 4000844:	df000115 	stw	fp,4(sp)
 4000848:	df000104 	addi	fp,sp,4

  int i=0; 
 400084c:	e03fff15 	stw	zero,-4(fp)
  for(i = 0;i<numHidden2;i++)
 4000850:	e03fff15 	stw	zero,-4(fp)
 4000854:	00002506 	br	40008ec <WeightChangesH1H2+0xac>
  {

		delta_h2[i] = (1 - (hiddenVal2[i] * hiddenVal2[i]))* delta_o* weightsH2O_old[i];
 4000858:	008100b4 	movhi	r2,1026
 400085c:	10a31204 	addi	r2,r2,-29624
 4000860:	e0ffff17 	ldw	r3,-4(fp)
 4000864:	18c7883a 	add	r3,r3,r3
 4000868:	18c7883a 	add	r3,r3,r3
 400086c:	10c5883a 	add	r2,r2,r3
 4000870:	11000017 	ldw	r4,0(r2)
 4000874:	008100b4 	movhi	r2,1026
 4000878:	10a31204 	addi	r2,r2,-29624
 400087c:	e0ffff17 	ldw	r3,-4(fp)
 4000880:	18c7883a 	add	r3,r3,r3
 4000884:	18c7883a 	add	r3,r3,r3
 4000888:	10c7883a 	add	r3,r2,r3
 400088c:	18800017 	ldw	r2,0(r3)
 4000890:	2085ff32 	custom	252,r2,r4,r2
 4000894:	00cfe034 	movhi	r3,16256
 4000898:	1887ffb2 	custom	254,r3,r3,r2
 400089c:	d0a6df17 	ldw	r2,-25732(gp)
 40008a0:	1889ff32 	custom	252,r4,r3,r2
 40008a4:	008100b4 	movhi	r2,1026
 40008a8:	10a87704 	addi	r2,r2,-24100
 40008ac:	e0ffff17 	ldw	r3,-4(fp)
 40008b0:	18c7883a 	add	r3,r3,r3
 40008b4:	18c7883a 	add	r3,r3,r3
 40008b8:	10c7883a 	add	r3,r2,r3
 40008bc:	18800017 	ldw	r2,0(r3)
 40008c0:	2089ff32 	custom	252,r4,r4,r2
 40008c4:	008100b4 	movhi	r2,1026
 40008c8:	10a32604 	addi	r2,r2,-29544
 40008cc:	e0ffff17 	ldw	r3,-4(fp)
 40008d0:	18c7883a 	add	r3,r3,r3
 40008d4:	18c7883a 	add	r3,r3,r3
 40008d8:	10c5883a 	add	r2,r2,r3
 40008dc:	11000015 	stw	r4,0(r2)
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{

  int i=0; 
  for(i = 0;i<numHidden2;i++)
 40008e0:	e0bfff17 	ldw	r2,-4(fp)
 40008e4:	10800044 	addi	r2,r2,1
 40008e8:	e0bfff15 	stw	r2,-4(fp)
 40008ec:	e0bfff17 	ldw	r2,-4(fp)
 40008f0:	10800510 	cmplti	r2,r2,20
 40008f4:	103fd81e 	bne	r2,zero,4000858 <__alt_data_end+0xfc000858>



  }

}
 40008f8:	0001883a 	nop
 40008fc:	e037883a 	mov	sp,fp
 4000900:	df000017 	ldw	fp,0(sp)
 4000904:	dec00104 	addi	sp,sp,4
 4000908:	f800283a 	ret

0400090c <WeightUpdatesH1H2>:

//************************************
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{
 400090c:	defffc04 	addi	sp,sp,-16
 4000910:	df000315 	stw	fp,12(sp)
 4000914:	df000304 	addi	fp,sp,12

  int i=0;
 4000918:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden2;i++)
 400091c:	e03ffd15 	stw	zero,-12(fp)
 4000920:	00004906 	br	4000a48 <WeightUpdatesH1H2+0x13c>
  {
   int k=0;
 4000924:	e03ffe15 	stw	zero,-8(fp)
   for( k = 0;k<numHidden1+1;k++)
 4000928:	e03ffe15 	stw	zero,-8(fp)
 400092c:	00004006 	br	4000a30 <WeightUpdatesH1H2+0x124>
   {
    float weightChange = delta_h2[i] * LR_H1H2 * hiddenVal1[k];
 4000930:	008100b4 	movhi	r2,1026
 4000934:	10a32604 	addi	r2,r2,-29544
 4000938:	e0fffd17 	ldw	r3,-12(fp)
 400093c:	18c7883a 	add	r3,r3,r3
 4000940:	18c7883a 	add	r3,r3,r3
 4000944:	10c5883a 	add	r2,r2,r3
 4000948:	10c00017 	ldw	r3,0(r2)
 400094c:	008f7374 	movhi	r2,15821
 4000950:	10b33344 	addi	r2,r2,-13107
 4000954:	1889ff32 	custom	252,r4,r3,r2
 4000958:	008100b4 	movhi	r2,1026
 400095c:	10a7af04 	addi	r2,r2,-24900
 4000960:	e0fffe17 	ldw	r3,-8(fp)
 4000964:	18c7883a 	add	r3,r3,r3
 4000968:	18c7883a 	add	r3,r3,r3
 400096c:	10c7883a 	add	r3,r2,r3
 4000970:	18800017 	ldw	r2,0(r3)
 4000974:	2085ff32 	custom	252,r2,r4,r2
 4000978:	e0bfff15 	stw	r2,-4(fp)

   weightsH1H2_old[k][i] = weightsH1H2[k][i];
 400097c:	008100b4 	movhi	r2,1026
 4000980:	10a8b004 	addi	r2,r2,-23872
 4000984:	e0fffe17 	ldw	r3,-8(fp)
 4000988:	19000524 	muli	r4,r3,20
 400098c:	e0fffd17 	ldw	r3,-12(fp)
 4000990:	20c7883a 	add	r3,r4,r3
 4000994:	18c7883a 	add	r3,r3,r3
 4000998:	18c7883a 	add	r3,r3,r3
 400099c:	10c5883a 	add	r2,r2,r3
 40009a0:	11000017 	ldw	r4,0(r2)
 40009a4:	008100b4 	movhi	r2,1026
 40009a8:	10a3b304 	addi	r2,r2,-28980
 40009ac:	e0fffe17 	ldw	r3,-8(fp)
 40009b0:	19400524 	muli	r5,r3,20
 40009b4:	e0fffd17 	ldw	r3,-12(fp)
 40009b8:	28c7883a 	add	r3,r5,r3
 40009bc:	18c7883a 	add	r3,r3,r3
 40009c0:	18c7883a 	add	r3,r3,r3
 40009c4:	10c5883a 	add	r2,r2,r3
 40009c8:	11000015 	stw	r4,0(r2)
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;
 40009cc:	008100b4 	movhi	r2,1026
 40009d0:	10a8b004 	addi	r2,r2,-23872
 40009d4:	e0fffe17 	ldw	r3,-8(fp)
 40009d8:	19000524 	muli	r4,r3,20
 40009dc:	e0fffd17 	ldw	r3,-12(fp)
 40009e0:	20c7883a 	add	r3,r4,r3
 40009e4:	18c7883a 	add	r3,r3,r3
 40009e8:	18c7883a 	add	r3,r3,r3
 40009ec:	10c5883a 	add	r2,r2,r3
 40009f0:	10c00017 	ldw	r3,0(r2)
 40009f4:	e0bfff17 	ldw	r2,-4(fp)
 40009f8:	1889ff72 	custom	253,r4,r3,r2
 40009fc:	008100b4 	movhi	r2,1026
 4000a00:	10a8b004 	addi	r2,r2,-23872
 4000a04:	e0fffe17 	ldw	r3,-8(fp)
 4000a08:	19400524 	muli	r5,r3,20
 4000a0c:	e0fffd17 	ldw	r3,-12(fp)
 4000a10:	28c7883a 	add	r3,r5,r3
 4000a14:	18c7883a 	add	r3,r3,r3
 4000a18:	18c7883a 	add	r3,r3,r3
 4000a1c:	10c5883a 	add	r2,r2,r3
 4000a20:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden2;i++)
  {
   int k=0;
   for( k = 0;k<numHidden1+1;k++)
 4000a24:	e0bffe17 	ldw	r2,-8(fp)
 4000a28:	10800044 	addi	r2,r2,1
 4000a2c:	e0bffe15 	stw	r2,-8(fp)
 4000a30:	e0bffe17 	ldw	r2,-8(fp)
 4000a34:	10800cd0 	cmplti	r2,r2,51
 4000a38:	103fbd1e 	bne	r2,zero,4000930 <__alt_data_end+0xfc000930>
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
 4000a3c:	e0bffd17 	ldw	r2,-12(fp)
 4000a40:	10800044 	addi	r2,r2,1
 4000a44:	e0bffd15 	stw	r2,-12(fp)
 4000a48:	e0bffd17 	ldw	r2,-12(fp)
 4000a4c:	10800510 	cmplti	r2,r2,20
 4000a50:	103fb41e 	bne	r2,zero,4000924 <__alt_data_end+0xfc000924>
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;

   }
  }

}
 4000a54:	0001883a 	nop
 4000a58:	e037883a 	mov	sp,fp
 4000a5c:	df000017 	ldw	fp,0(sp)
 4000a60:	dec00104 	addi	sp,sp,4
 4000a64:	f800283a 	ret

04000a68 <WeightChangesIH1>:
//************************************
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{
 4000a68:	defffc04 	addi	sp,sp,-16
 4000a6c:	df000315 	stw	fp,12(sp)
 4000a70:	df000304 	addi	fp,sp,12

  int i=0; 
 4000a74:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
 4000a78:	e03ffd15 	stw	zero,-12(fp)
 4000a7c:	00003c06 	br	4000b70 <WeightChangesIH1+0x108>
  {

    int j=0;
 4000a80:	e03ffe15 	stw	zero,-8(fp)
    float sum_delta=0.0;
 4000a84:	e03fff15 	stw	zero,-4(fp)
    for ( j = 0;j<numHidden2;j++)
 4000a88:	e03ffe15 	stw	zero,-8(fp)
 4000a8c:	00001806 	br	4000af0 <WeightChangesIH1+0x88>
    {

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];
 4000a90:	008100b4 	movhi	r2,1026
 4000a94:	10a32604 	addi	r2,r2,-29544
 4000a98:	e0fffe17 	ldw	r3,-8(fp)
 4000a9c:	18c7883a 	add	r3,r3,r3
 4000aa0:	18c7883a 	add	r3,r3,r3
 4000aa4:	10c5883a 	add	r2,r2,r3
 4000aa8:	11000017 	ldw	r4,0(r2)
 4000aac:	008100b4 	movhi	r2,1026
 4000ab0:	10a3b304 	addi	r2,r2,-28980
 4000ab4:	e0fffd17 	ldw	r3,-12(fp)
 4000ab8:	19400524 	muli	r5,r3,20
 4000abc:	e0fffe17 	ldw	r3,-8(fp)
 4000ac0:	28c7883a 	add	r3,r5,r3
 4000ac4:	18c7883a 	add	r3,r3,r3
 4000ac8:	18c7883a 	add	r3,r3,r3
 4000acc:	10c7883a 	add	r3,r2,r3
 4000ad0:	18800017 	ldw	r2,0(r3)
 4000ad4:	2085ff32 	custom	252,r2,r4,r2
 4000ad8:	e0ffff17 	ldw	r3,-4(fp)
 4000adc:	1885ff72 	custom	253,r2,r3,r2
 4000ae0:	e0bfff15 	stw	r2,-4(fp)
  for(i = 0;i<numHidden1;i++)
  {

    int j=0;
    float sum_delta=0.0;
    for ( j = 0;j<numHidden2;j++)
 4000ae4:	e0bffe17 	ldw	r2,-8(fp)
 4000ae8:	10800044 	addi	r2,r2,1
 4000aec:	e0bffe15 	stw	r2,-8(fp)
 4000af0:	e0bffe17 	ldw	r2,-8(fp)
 4000af4:	10800510 	cmplti	r2,r2,20
 4000af8:	103fe51e 	bne	r2,zero,4000a90 <__alt_data_end+0xfc000a90>

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];

    }

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;
 4000afc:	008100b4 	movhi	r2,1026
 4000b00:	10a7af04 	addi	r2,r2,-24900
 4000b04:	e0fffd17 	ldw	r3,-12(fp)
 4000b08:	18c7883a 	add	r3,r3,r3
 4000b0c:	18c7883a 	add	r3,r3,r3
 4000b10:	10c5883a 	add	r2,r2,r3
 4000b14:	11000017 	ldw	r4,0(r2)
 4000b18:	008100b4 	movhi	r2,1026
 4000b1c:	10a7af04 	addi	r2,r2,-24900
 4000b20:	e0fffd17 	ldw	r3,-12(fp)
 4000b24:	18c7883a 	add	r3,r3,r3
 4000b28:	18c7883a 	add	r3,r3,r3
 4000b2c:	10c7883a 	add	r3,r2,r3
 4000b30:	18800017 	ldw	r2,0(r3)
 4000b34:	2085ff32 	custom	252,r2,r4,r2
 4000b38:	00cfe034 	movhi	r3,16256
 4000b3c:	1887ffb2 	custom	254,r3,r3,r2
 4000b40:	e0bfff17 	ldw	r2,-4(fp)
 4000b44:	1889ff32 	custom	252,r4,r3,r2
 4000b48:	008100b4 	movhi	r2,1026
 4000b4c:	10acc004 	addi	r2,r2,-19712
 4000b50:	e0fffd17 	ldw	r3,-12(fp)
 4000b54:	18c7883a 	add	r3,r3,r3
 4000b58:	18c7883a 	add	r3,r3,r3
 4000b5c:	10c5883a 	add	r2,r2,r3
 4000b60:	11000015 	stw	r4,0(r2)
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{

  int i=0; 
  for(i = 0;i<numHidden1;i++)
 4000b64:	e0bffd17 	ldw	r2,-12(fp)
 4000b68:	10800044 	addi	r2,r2,1
 4000b6c:	e0bffd15 	stw	r2,-12(fp)
 4000b70:	e0bffd17 	ldw	r2,-12(fp)
 4000b74:	10800c90 	cmplti	r2,r2,50
 4000b78:	103fc11e 	bne	r2,zero,4000a80 <__alt_data_end+0xfc000a80>

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;

  }

}
 4000b7c:	0001883a 	nop
 4000b80:	e037883a 	mov	sp,fp
 4000b84:	df000017 	ldw	fp,0(sp)
 4000b88:	dec00104 	addi	sp,sp,4
 4000b8c:	f800283a 	ret

04000b90 <WeightUpdatesIH1>:

//************************************
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{
 4000b90:	defffc04 	addi	sp,sp,-16
 4000b94:	df000315 	stw	fp,12(sp)
 4000b98:	df000304 	addi	fp,sp,12

  int i=0;
 4000b9c:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
 4000ba0:	e03ffd15 	stw	zero,-12(fp)
 4000ba4:	00003a06 	br	4000c90 <WeightUpdatesIH1+0x100>
  {
    int k=0;
 4000ba8:	e03ffe15 	stw	zero,-8(fp)
	for( k = 0;k<numInputs+1;k++)
 4000bac:	e03ffe15 	stw	zero,-8(fp)
 4000bb0:	00003106 	br	4000c78 <WeightUpdatesIH1+0xe8>
	{
    float weightChange = delta_h1[i] * LR_IH1 * trainInputs[patNum][k];
 4000bb4:	008100b4 	movhi	r2,1026
 4000bb8:	10acc004 	addi	r2,r2,-19712
 4000bbc:	e0fffd17 	ldw	r3,-12(fp)
 4000bc0:	18c7883a 	add	r3,r3,r3
 4000bc4:	18c7883a 	add	r3,r3,r3
 4000bc8:	10c5883a 	add	r2,r2,r3
 4000bcc:	10c00017 	ldw	r3,0(r2)
 4000bd0:	008f7374 	movhi	r2,15821
 4000bd4:	10b33344 	addi	r2,r2,-13107
 4000bd8:	188bff32 	custom	252,r5,r3,r2
 4000bdc:	d126dd17 	ldw	r4,-25740(gp)
 4000be0:	00c100b4 	movhi	r3,1026
 4000be4:	18e88c04 	addi	r3,r3,-24016
 4000be8:	2005883a 	mov	r2,r4
 4000bec:	1085883a 	add	r2,r2,r2
 4000bf0:	1105883a 	add	r2,r2,r4
 4000bf4:	e13ffe17 	ldw	r4,-8(fp)
 4000bf8:	1105883a 	add	r2,r2,r4
 4000bfc:	1085883a 	add	r2,r2,r2
 4000c00:	1085883a 	add	r2,r2,r2
 4000c04:	1887883a 	add	r3,r3,r2
 4000c08:	18800017 	ldw	r2,0(r3)
 4000c0c:	2885ff32 	custom	252,r2,r5,r2
 4000c10:	e0bfff15 	stw	r2,-4(fp)

     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;
 4000c14:	008100b4 	movhi	r2,1026
 4000c18:	10a7e104 	addi	r2,r2,-24700
 4000c1c:	e0fffe17 	ldw	r3,-8(fp)
 4000c20:	19000ca4 	muli	r4,r3,50
 4000c24:	e0fffd17 	ldw	r3,-12(fp)
 4000c28:	20c7883a 	add	r3,r4,r3
 4000c2c:	18c7883a 	add	r3,r3,r3
 4000c30:	18c7883a 	add	r3,r3,r3
 4000c34:	10c5883a 	add	r2,r2,r3
 4000c38:	10c00017 	ldw	r3,0(r2)
 4000c3c:	e0bfff17 	ldw	r2,-4(fp)
 4000c40:	1889ff72 	custom	253,r4,r3,r2
 4000c44:	008100b4 	movhi	r2,1026
 4000c48:	10a7e104 	addi	r2,r2,-24700
 4000c4c:	e0fffe17 	ldw	r3,-8(fp)
 4000c50:	19400ca4 	muli	r5,r3,50
 4000c54:	e0fffd17 	ldw	r3,-12(fp)
 4000c58:	28c7883a 	add	r3,r5,r3
 4000c5c:	18c7883a 	add	r3,r3,r3
 4000c60:	18c7883a 	add	r3,r3,r3
 4000c64:	10c5883a 	add	r2,r2,r3
 4000c68:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden1;i++)
  {
    int k=0;
	for( k = 0;k<numInputs+1;k++)
 4000c6c:	e0bffe17 	ldw	r2,-8(fp)
 4000c70:	10800044 	addi	r2,r2,1
 4000c74:	e0bffe15 	stw	r2,-8(fp)
 4000c78:	e0bffe17 	ldw	r2,-8(fp)
 4000c7c:	108000d0 	cmplti	r2,r2,3
 4000c80:	103fcc1e 	bne	r2,zero,4000bb4 <__alt_data_end+0xfc000bb4>
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
 4000c84:	e0bffd17 	ldw	r2,-12(fp)
 4000c88:	10800044 	addi	r2,r2,1
 4000c8c:	e0bffd15 	stw	r2,-12(fp)
 4000c90:	e0bffd17 	ldw	r2,-12(fp)
 4000c94:	10800c90 	cmplti	r2,r2,50
 4000c98:	103fc31e 	bne	r2,zero,4000ba8 <__alt_data_end+0xfc000ba8>
     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;

   }
  }

}
 4000c9c:	0001883a 	nop
 4000ca0:	e037883a 	mov	sp,fp
 4000ca4:	df000017 	ldw	fp,0(sp)
 4000ca8:	dec00104 	addi	sp,sp,4
 4000cac:	f800283a 	ret

04000cb0 <getRand>:

//************************************
// generates a random number
float getRand(void)
{
 4000cb0:	defffe04 	addi	sp,sp,-8
 4000cb4:	dfc00115 	stw	ra,4(sp)
 4000cb8:	df000015 	stw	fp,0(sp)
 4000cbc:	d839883a 	mov	fp,sp
 return ((float)rand())/(float)RAND_MAX;
 4000cc0:	40049b00 	call	40049b0 <rand>
 4000cc4:	1007feb2 	custom	250,r3,r2,zero
 4000cc8:	0093c034 	movhi	r2,20224
 4000ccc:	1885fff2 	custom	255,r2,r3,r2
 4000cd0:	1007883a 	mov	r3,r2
}
 4000cd4:	1805883a 	mov	r2,r3
 4000cd8:	e037883a 	mov	sp,fp
 4000cdc:	dfc00117 	ldw	ra,4(sp)
 4000ce0:	df000017 	ldw	fp,0(sp)
 4000ce4:	dec00204 	addi	sp,sp,8
 4000ce8:	f800283a 	ret

04000cec <initWeights>:


//************************************
// set weights to random numbers 
void initWeights(void)
{
 4000cec:	defffb04 	addi	sp,sp,-20
 4000cf0:	dfc00415 	stw	ra,16(sp)
 4000cf4:	df000315 	stw	fp,12(sp)
 4000cf8:	df000304 	addi	fp,sp,12
 int j=0;
 4000cfc:	e03ffd15 	stw	zero,-12(fp)
 int i=0;
 4000d00:	e03ffe15 	stw	zero,-8(fp)
 int k=0;
 4000d04:	e03fff15 	stw	zero,-4(fp)

 for( j = 0;j<numHidden2+1;j++)
 4000d08:	e03ffd15 	stw	zero,-12(fp)
 4000d0c:	00002606 	br	4000da8 <initWeights+0xbc>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 4000d10:	4000cb00 	call	4000cb0 <getRand>
 4000d14:	1007883a 	mov	r3,r2
 4000d18:	1809883a 	mov	r4,r3
 4000d1c:	40041d40 	call	40041d4 <__extendsfdf2>
 4000d20:	1011883a 	mov	r8,r2
 4000d24:	1813883a 	mov	r9,r3
 4000d28:	000d883a 	mov	r6,zero
 4000d2c:	01cff834 	movhi	r7,16352
 4000d30:	4009883a 	mov	r4,r8
 4000d34:	480b883a 	mov	r5,r9
 4000d38:	40038d80 	call	40038d8 <__subdf3>
 4000d3c:	1009883a 	mov	r4,r2
 4000d40:	180b883a 	mov	r5,r3
 4000d44:	2005883a 	mov	r2,r4
 4000d48:	2807883a 	mov	r3,r5
 4000d4c:	000d883a 	mov	r6,zero
 4000d50:	01d00034 	movhi	r7,16384
 4000d54:	1009883a 	mov	r4,r2
 4000d58:	180b883a 	mov	r5,r3
 4000d5c:	40026800 	call	4002680 <__divdf3>
 4000d60:	1009883a 	mov	r4,r2
 4000d64:	180b883a 	mov	r5,r3
 4000d68:	2005883a 	mov	r2,r4
 4000d6c:	2807883a 	mov	r3,r5
 4000d70:	1009883a 	mov	r4,r2
 4000d74:	180b883a 	mov	r5,r3
 4000d78:	40042e40 	call	40042e4 <__truncdfsf2>
 4000d7c:	1009883a 	mov	r4,r2
 4000d80:	008100b4 	movhi	r2,1026
 4000d84:	10a33a04 	addi	r2,r2,-29464
 4000d88:	e0fffd17 	ldw	r3,-12(fp)
 4000d8c:	18c7883a 	add	r3,r3,r3
 4000d90:	18c7883a 	add	r3,r3,r3
 4000d94:	10c5883a 	add	r2,r2,r3
 4000d98:	11000015 	stw	r4,0(r2)
{
 int j=0;
 int i=0;
 int k=0;

 for( j = 0;j<numHidden2+1;j++)
 4000d9c:	e0bffd17 	ldw	r2,-12(fp)
 4000da0:	10800044 	addi	r2,r2,1
 4000da4:	e0bffd15 	stw	r2,-12(fp)
 4000da8:	e0bffd17 	ldw	r2,-12(fp)
 4000dac:	10800550 	cmplti	r2,r2,21
 4000db0:	103fd71e 	bne	r2,zero,4000d10 <__alt_data_end+0xfc000d10>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
 4000db4:	e03fff15 	stw	zero,-4(fp)
 4000db8:	00003106 	br	4000e80 <initWeights+0x194>
   {
    for( i = 0;i<numHidden1+1;i++)
 4000dbc:	e03ffe15 	stw	zero,-8(fp)
 4000dc0:	00002906 	br	4000e68 <initWeights+0x17c>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
 4000dc4:	4000cb00 	call	4000cb0 <getRand>
 4000dc8:	1007883a 	mov	r3,r2
 4000dcc:	1809883a 	mov	r4,r3
 4000dd0:	40041d40 	call	40041d4 <__extendsfdf2>
 4000dd4:	1011883a 	mov	r8,r2
 4000dd8:	1813883a 	mov	r9,r3
 4000ddc:	000d883a 	mov	r6,zero
 4000de0:	01cff834 	movhi	r7,16352
 4000de4:	4009883a 	mov	r4,r8
 4000de8:	480b883a 	mov	r5,r9
 4000dec:	40038d80 	call	40038d8 <__subdf3>
 4000df0:	1009883a 	mov	r4,r2
 4000df4:	180b883a 	mov	r5,r3
 4000df8:	2005883a 	mov	r2,r4
 4000dfc:	2807883a 	mov	r3,r5
 4000e00:	000d883a 	mov	r6,zero
 4000e04:	01d00034 	movhi	r7,16384
 4000e08:	1009883a 	mov	r4,r2
 4000e0c:	180b883a 	mov	r5,r3
 4000e10:	40026800 	call	4002680 <__divdf3>
 4000e14:	1009883a 	mov	r4,r2
 4000e18:	180b883a 	mov	r5,r3
 4000e1c:	2005883a 	mov	r2,r4
 4000e20:	2807883a 	mov	r3,r5
 4000e24:	1009883a 	mov	r4,r2
 4000e28:	180b883a 	mov	r5,r3
 4000e2c:	40042e40 	call	40042e4 <__truncdfsf2>
 4000e30:	100b883a 	mov	r5,r2
 4000e34:	008100b4 	movhi	r2,1026
 4000e38:	10a8b004 	addi	r2,r2,-23872
 4000e3c:	e0fffe17 	ldw	r3,-8(fp)
 4000e40:	19000524 	muli	r4,r3,20
 4000e44:	e0ffff17 	ldw	r3,-4(fp)
 4000e48:	20c7883a 	add	r3,r4,r3
 4000e4c:	18c7883a 	add	r3,r3,r3
 4000e50:	18c7883a 	add	r3,r3,r3
 4000e54:	10c5883a 	add	r2,r2,r3
 4000e58:	11400015 	stw	r5,0(r2)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
   {
    for( i = 0;i<numHidden1+1;i++)
 4000e5c:	e0bffe17 	ldw	r2,-8(fp)
 4000e60:	10800044 	addi	r2,r2,1
 4000e64:	e0bffe15 	stw	r2,-8(fp)
 4000e68:	e0bffe17 	ldw	r2,-8(fp)
 4000e6c:	10800cd0 	cmplti	r2,r2,51
 4000e70:	103fd41e 	bne	r2,zero,4000dc4 <__alt_data_end+0xfc000dc4>

 for( j = 0;j<numHidden2+1;j++)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
 4000e74:	e0bfff17 	ldw	r2,-4(fp)
 4000e78:	10800044 	addi	r2,r2,1
 4000e7c:	e0bfff15 	stw	r2,-4(fp)
 4000e80:	e0bfff17 	ldw	r2,-4(fp)
 4000e84:	10800510 	cmplti	r2,r2,20
 4000e88:	103fcc1e 	bne	r2,zero,4000dbc <__alt_data_end+0xfc000dbc>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
 4000e8c:	e03fff15 	stw	zero,-4(fp)
 4000e90:	00003106 	br	4000f58 <initWeights+0x26c>
   {
    for( i = 0;i<numInputs+1;i++)
 4000e94:	e03ffe15 	stw	zero,-8(fp)
 4000e98:	00002906 	br	4000f40 <initWeights+0x254>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
 4000e9c:	4000cb00 	call	4000cb0 <getRand>
 4000ea0:	1007883a 	mov	r3,r2
 4000ea4:	1809883a 	mov	r4,r3
 4000ea8:	40041d40 	call	40041d4 <__extendsfdf2>
 4000eac:	1011883a 	mov	r8,r2
 4000eb0:	1813883a 	mov	r9,r3
 4000eb4:	000d883a 	mov	r6,zero
 4000eb8:	01cff834 	movhi	r7,16352
 4000ebc:	4009883a 	mov	r4,r8
 4000ec0:	480b883a 	mov	r5,r9
 4000ec4:	40038d80 	call	40038d8 <__subdf3>
 4000ec8:	1009883a 	mov	r4,r2
 4000ecc:	180b883a 	mov	r5,r3
 4000ed0:	2005883a 	mov	r2,r4
 4000ed4:	2807883a 	mov	r3,r5
 4000ed8:	000d883a 	mov	r6,zero
 4000edc:	01d00034 	movhi	r7,16384
 4000ee0:	1009883a 	mov	r4,r2
 4000ee4:	180b883a 	mov	r5,r3
 4000ee8:	40026800 	call	4002680 <__divdf3>
 4000eec:	1009883a 	mov	r4,r2
 4000ef0:	180b883a 	mov	r5,r3
 4000ef4:	2005883a 	mov	r2,r4
 4000ef8:	2807883a 	mov	r3,r5
 4000efc:	1009883a 	mov	r4,r2
 4000f00:	180b883a 	mov	r5,r3
 4000f04:	40042e40 	call	40042e4 <__truncdfsf2>
 4000f08:	100b883a 	mov	r5,r2
 4000f0c:	008100b4 	movhi	r2,1026
 4000f10:	10a7e104 	addi	r2,r2,-24700
 4000f14:	e0fffe17 	ldw	r3,-8(fp)
 4000f18:	19000ca4 	muli	r4,r3,50
 4000f1c:	e0ffff17 	ldw	r3,-4(fp)
 4000f20:	20c7883a 	add	r3,r4,r3
 4000f24:	18c7883a 	add	r3,r3,r3
 4000f28:	18c7883a 	add	r3,r3,r3
 4000f2c:	10c5883a 	add	r2,r2,r3
 4000f30:	11400015 	stw	r5,0(r2)
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
   {
    for( i = 0;i<numInputs+1;i++)
 4000f34:	e0bffe17 	ldw	r2,-8(fp)
 4000f38:	10800044 	addi	r2,r2,1
 4000f3c:	e0bffe15 	stw	r2,-8(fp)
 4000f40:	e0bffe17 	ldw	r2,-8(fp)
 4000f44:	108000d0 	cmplti	r2,r2,3
 4000f48:	103fd41e 	bne	r2,zero,4000e9c <__alt_data_end+0xfc000e9c>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
 4000f4c:	e0bfff17 	ldw	r2,-4(fp)
 4000f50:	10800044 	addi	r2,r2,1
 4000f54:	e0bfff15 	stw	r2,-4(fp)
 4000f58:	e0bfff17 	ldw	r2,-4(fp)
 4000f5c:	10800c90 	cmplti	r2,r2,50
 4000f60:	103fcc1e 	bne	r2,zero,4000e94 <__alt_data_end+0xfc000e94>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsIH1[i][k]);
    }
   }
}
 4000f64:	0001883a 	nop
 4000f68:	e037883a 	mov	sp,fp
 4000f6c:	dfc00117 	ldw	ra,4(sp)
 4000f70:	df000017 	ldw	fp,0(sp)
 4000f74:	dec00204 	addi	sp,sp,8
 4000f78:	f800283a 	ret

04000f7c <initData>:


//************************************
// read in the data
void initData(void)
{
 4000f7c:	defffe04 	addi	sp,sp,-8
 4000f80:	dfc00115 	stw	ra,4(sp)
 4000f84:	df000015 	stw	fp,0(sp)
 4000f88:	d839883a 	mov	fp,sp
    printf("initialising data\n");
 4000f8c:	01010074 	movhi	r4,1025
 4000f90:	21141a04 	addi	r4,r4,20584
 4000f94:	40049340 	call	4004934 <puts>
    // [-1][1]
    // an extra input valued 1 is also added
    // to act as the bias
    // the output must lie in the range -1 to 1

    trainInputs[0][0]  = 0.95;
 4000f98:	008100b4 	movhi	r2,1026
 4000f9c:	10a88c04 	addi	r2,r2,-24016
 4000fa0:	00cfdcf4 	movhi	r3,16243
 4000fa4:	18ccccc4 	addi	r3,r3,13107
 4000fa8:	10c00015 	stw	r3,0(r2)
    trainInputs[0][1]  = -0.95;
 4000fac:	008100b4 	movhi	r2,1026
 4000fb0:	10a88c04 	addi	r2,r2,-24016
 4000fb4:	00efdcf4 	movhi	r3,49011
 4000fb8:	18ccccc4 	addi	r3,r3,13107
 4000fbc:	10c00115 	stw	r3,4(r2)
    trainInputs[0][2]  = 1;    //bias
 4000fc0:	008100b4 	movhi	r2,1026
 4000fc4:	10a88c04 	addi	r2,r2,-24016
 4000fc8:	00cfe034 	movhi	r3,16256
 4000fcc:	10c00215 	stw	r3,8(r2)
    trainOutput[0] = 0.95;
 4000fd0:	008100b4 	movhi	r2,1026
 4000fd4:	10a89804 	addi	r2,r2,-23968
 4000fd8:	00cfdcf4 	movhi	r3,16243
 4000fdc:	18ccccc4 	addi	r3,r3,13107
 4000fe0:	10c00015 	stw	r3,0(r2)

    trainInputs[1][0]  = -0.95;
 4000fe4:	008100b4 	movhi	r2,1026
 4000fe8:	10a88c04 	addi	r2,r2,-24016
 4000fec:	00efdcf4 	movhi	r3,49011
 4000ff0:	18ccccc4 	addi	r3,r3,13107
 4000ff4:	10c00315 	stw	r3,12(r2)
    trainInputs[1][1]  = 0.95;   
 4000ff8:	008100b4 	movhi	r2,1026
 4000ffc:	10a88c04 	addi	r2,r2,-24016
 4001000:	00cfdcf4 	movhi	r3,16243
 4001004:	18ccccc4 	addi	r3,r3,13107
 4001008:	10c00415 	stw	r3,16(r2)
    trainInputs[1][2]  = 1;       //bias
 400100c:	008100b4 	movhi	r2,1026
 4001010:	10a88c04 	addi	r2,r2,-24016
 4001014:	00cfe034 	movhi	r3,16256
 4001018:	10c00515 	stw	r3,20(r2)
    trainOutput[1] = 0.95;
 400101c:	008100b4 	movhi	r2,1026
 4001020:	10a89804 	addi	r2,r2,-23968
 4001024:	00cfdcf4 	movhi	r3,16243
 4001028:	18ccccc4 	addi	r3,r3,13107
 400102c:	10c00115 	stw	r3,4(r2)

    trainInputs[2][0]  = 0.95;
 4001030:	008100b4 	movhi	r2,1026
 4001034:	10a88c04 	addi	r2,r2,-24016
 4001038:	00cfdcf4 	movhi	r3,16243
 400103c:	18ccccc4 	addi	r3,r3,13107
 4001040:	10c00615 	stw	r3,24(r2)
    trainInputs[2][1]  = 0.95;
 4001044:	008100b4 	movhi	r2,1026
 4001048:	10a88c04 	addi	r2,r2,-24016
 400104c:	00cfdcf4 	movhi	r3,16243
 4001050:	18ccccc4 	addi	r3,r3,13107
 4001054:	10c00715 	stw	r3,28(r2)
   trainInputs[2][2]  = 1;        //bias
 4001058:	008100b4 	movhi	r2,1026
 400105c:	10a88c04 	addi	r2,r2,-24016
 4001060:	00cfe034 	movhi	r3,16256
 4001064:	10c00815 	stw	r3,32(r2)
    trainOutput[2] = -0.95;
 4001068:	008100b4 	movhi	r2,1026
 400106c:	10a89804 	addi	r2,r2,-23968
 4001070:	00efdcf4 	movhi	r3,49011
 4001074:	18ccccc4 	addi	r3,r3,13107
 4001078:	10c00215 	stw	r3,8(r2)
    
    trainInputs[3][0]  = -0.95;
 400107c:	008100b4 	movhi	r2,1026
 4001080:	10a88c04 	addi	r2,r2,-24016
 4001084:	00efdcf4 	movhi	r3,49011
 4001088:	18ccccc4 	addi	r3,r3,13107
 400108c:	10c00915 	stw	r3,36(r2)
    trainInputs[3][1]  = -0.95;
 4001090:	008100b4 	movhi	r2,1026
 4001094:	10a88c04 	addi	r2,r2,-24016
 4001098:	00efdcf4 	movhi	r3,49011
 400109c:	18ccccc4 	addi	r3,r3,13107
 40010a0:	10c00a15 	stw	r3,40(r2)
    trainInputs[3][2]  = 1;     //bias
 40010a4:	008100b4 	movhi	r2,1026
 40010a8:	10a88c04 	addi	r2,r2,-24016
 40010ac:	00cfe034 	movhi	r3,16256
 40010b0:	10c00b15 	stw	r3,44(r2)
    trainOutput[3] = -0.95;
 40010b4:	008100b4 	movhi	r2,1026
 40010b8:	10a89804 	addi	r2,r2,-23968
 40010bc:	00efdcf4 	movhi	r3,49011
 40010c0:	18ccccc4 	addi	r3,r3,13107
 40010c4:	10c00315 	stw	r3,12(r2)
hiddenVal1[numHidden1]=1;//bias capa oculta1
 40010c8:	008100b4 	movhi	r2,1026
 40010cc:	10a7af04 	addi	r2,r2,-24900
 40010d0:	00cfe034 	movhi	r3,16256
 40010d4:	10c03215 	stw	r3,200(r2)
hiddenVal2[numHidden2]=1;//bias capa oculta2
 40010d8:	008100b4 	movhi	r2,1026
 40010dc:	10a31204 	addi	r2,r2,-29624
 40010e0:	00cfe034 	movhi	r3,16256
 40010e4:	10c01415 	stw	r3,80(r2)
}
 40010e8:	0001883a 	nop
 40010ec:	e037883a 	mov	sp,fp
 40010f0:	dfc00117 	ldw	ra,4(sp)
 40010f4:	df000017 	ldw	fp,0(sp)
 40010f8:	dec00204 	addi	sp,sp,8
 40010fc:	f800283a 	ret

04001100 <displayResults>:


//************************************
// display results
void displayResults(void)
{
 4001100:	defff804 	addi	sp,sp,-32
 4001104:	dfc00715 	stw	ra,28(sp)
 4001108:	df000615 	stw	fp,24(sp)
 400110c:	dc800515 	stw	r18,20(sp)
 4001110:	dc400415 	stw	r17,16(sp)
 4001114:	dc000315 	stw	r16,12(sp)
 4001118:	df000604 	addi	fp,sp,24
 int i=0;
 400111c:	e03ffc15 	stw	zero,-16(fp)
 for( i = 0;i<numPatterns;i++)
 4001120:	e03ffc15 	stw	zero,-16(fp)
 4001124:	00002006 	br	40011a8 <displayResults+0xa8>
 {
  patNum = i;
 4001128:	e0bffc17 	ldw	r2,-16(fp)
 400112c:	d0a6dd15 	stw	r2,-25740(gp)
  calcNet();
 4001130:	40003900 	call	4000390 <calcNet>
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
 4001134:	d0a6dd17 	ldw	r2,-25740(gp)
 4001138:	14800044 	addi	r18,r2,1
 400113c:	d0e6dd17 	ldw	r3,-25740(gp)
 4001140:	008100b4 	movhi	r2,1026
 4001144:	10a89804 	addi	r2,r2,-23968
 4001148:	18c7883a 	add	r3,r3,r3
 400114c:	18c7883a 	add	r3,r3,r3
 4001150:	10c5883a 	add	r2,r2,r3
 4001154:	10c00017 	ldw	r3,0(r2)
 4001158:	1809883a 	mov	r4,r3
 400115c:	40041d40 	call	40041d4 <__extendsfdf2>
 4001160:	1021883a 	mov	r16,r2
 4001164:	1823883a 	mov	r17,r3
 4001168:	d0a6e117 	ldw	r2,-25724(gp)
 400116c:	1009883a 	mov	r4,r2
 4001170:	40041d40 	call	40041d4 <__extendsfdf2>
 4001174:	1009883a 	mov	r4,r2
 4001178:	180b883a 	mov	r5,r3
 400117c:	d9000015 	stw	r4,0(sp)
 4001180:	d9400115 	stw	r5,4(sp)
 4001184:	800d883a 	mov	r6,r16
 4001188:	880f883a 	mov	r7,r17
 400118c:	900b883a 	mov	r5,r18
 4001190:	01010074 	movhi	r4,1025
 4001194:	21141f04 	addi	r4,r4,20604
 4001198:	40047280 	call	4004728 <printf>
//************************************
// display results
void displayResults(void)
{
 int i=0;
 for( i = 0;i<numPatterns;i++)
 400119c:	e0bffc17 	ldw	r2,-16(fp)
 40011a0:	10800044 	addi	r2,r2,1
 40011a4:	e0bffc15 	stw	r2,-16(fp)
 40011a8:	e0bffc17 	ldw	r2,-16(fp)
 40011ac:	10800110 	cmplti	r2,r2,4
 40011b0:	103fdd1e 	bne	r2,zero,4001128 <__alt_data_end+0xfc001128>
 {
  patNum = i;
  calcNet();
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
 }
}
 40011b4:	0001883a 	nop
 40011b8:	e6fffd04 	addi	sp,fp,-12
 40011bc:	dfc00417 	ldw	ra,16(sp)
 40011c0:	df000317 	ldw	fp,12(sp)
 40011c4:	dc800217 	ldw	r18,8(sp)
 40011c8:	dc400117 	ldw	r17,4(sp)
 40011cc:	dc000017 	ldw	r16,0(sp)
 40011d0:	dec00504 	addi	sp,sp,20
 40011d4:	f800283a 	ret

040011d8 <calcOverallError>:


//************************************
// calculate the overall error
void calcOverallError(void)
{
 40011d8:	defffd04 	addi	sp,sp,-12
 40011dc:	dfc00215 	stw	ra,8(sp)
 40011e0:	df000115 	stw	fp,4(sp)
 40011e4:	df000104 	addi	fp,sp,4
     int i=0;
 40011e8:	e03fff15 	stw	zero,-4(fp)
     RMSerror = 0.0;
 40011ec:	d026e015 	stw	zero,-25728(gp)
     for(i = 0;i<numPatterns;i++)
 40011f0:	e03fff15 	stw	zero,-4(fp)
 40011f4:	00000c06 	br	4001228 <calcOverallError+0x50>
        {
         patNum = i;
 40011f8:	e0bfff17 	ldw	r2,-4(fp)
 40011fc:	d0a6dd15 	stw	r2,-25740(gp)
         calcNet();
 4001200:	40003900 	call	4000390 <calcNet>
         RMSerror = RMSerror + (errThisPat * errThisPat);
 4001204:	d0e6de17 	ldw	r3,-25736(gp)
 4001208:	d0a6de17 	ldw	r2,-25736(gp)
 400120c:	1887ff32 	custom	252,r3,r3,r2
 4001210:	d0a6e017 	ldw	r2,-25728(gp)
 4001214:	1885ff72 	custom	253,r2,r3,r2
 4001218:	d0a6e015 	stw	r2,-25728(gp)
// calculate the overall error
void calcOverallError(void)
{
     int i=0;
     RMSerror = 0.0;
     for(i = 0;i<numPatterns;i++)
 400121c:	e0bfff17 	ldw	r2,-4(fp)
 4001220:	10800044 	addi	r2,r2,1
 4001224:	e0bfff15 	stw	r2,-4(fp)
 4001228:	e0bfff17 	ldw	r2,-4(fp)
 400122c:	10800110 	cmplti	r2,r2,4
 4001230:	103ff11e 	bne	r2,zero,40011f8 <__alt_data_end+0xfc0011f8>
        {
         patNum = i;
         calcNet();
         RMSerror = RMSerror + (errThisPat * errThisPat);
        }
     RMSerror = RMSerror/numPatterns;
 4001234:	d0e6e017 	ldw	r3,-25728(gp)
 4001238:	00902034 	movhi	r2,16512
 400123c:	1885fff2 	custom	255,r2,r3,r2
 4001240:	d0a6e015 	stw	r2,-25728(gp)
     RMSerror = sqrt(RMSerror);
 4001244:	d0a6e017 	ldw	r2,-25728(gp)
 4001248:	1009883a 	mov	r4,r2
 400124c:	40041d40 	call	40041d4 <__extendsfdf2>
 4001250:	100b883a 	mov	r5,r2
 4001254:	180d883a 	mov	r6,r3
 4001258:	2809883a 	mov	r4,r5
 400125c:	300b883a 	mov	r5,r6
 4001260:	40014ac0 	call	40014ac <sqrt>
 4001264:	100b883a 	mov	r5,r2
 4001268:	180d883a 	mov	r6,r3
 400126c:	2809883a 	mov	r4,r5
 4001270:	300b883a 	mov	r5,r6
 4001274:	40042e40 	call	40042e4 <__truncdfsf2>
 4001278:	1007883a 	mov	r3,r2
 400127c:	d0e6e015 	stw	r3,-25728(gp)
}
 4001280:	0001883a 	nop
 4001284:	e037883a 	mov	sp,fp
 4001288:	dfc00117 	ldw	ra,4(sp)
 400128c:	df000017 	ldw	fp,0(sp)
 4001290:	dec00204 	addi	sp,sp,8
 4001294:	f800283a 	ret

04001298 <main>:
//********** THIS IS THE MAIN PROGRAM **************************
//==============================================================


int main(void)
{
 4001298:	defff704 	addi	sp,sp,-36
 400129c:	dfc00815 	stw	ra,32(sp)
 40012a0:	df000715 	stw	fp,28(sp)
 40012a4:	df000704 	addi	fp,sp,28
 // seed random number function
 srand ( time(NULL) );
 40012a8:	0009883a 	mov	r4,zero
 40012ac:	4004bf40 	call	4004bf4 <time>
 40012b0:	1009883a 	mov	r4,r2
 40012b4:	400496c0 	call	400496c <srand>
  PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 40012b8:	00800044 	movi	r2,1
 40012bc:	0007883a 	mov	r3,zero
 40012c0:	18800035 	stwio	r2,0(r3)
  PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 40012c4:	0007883a 	mov	r3,zero
 40012c8:	00800104 	movi	r2,4
 40012cc:	10c00035 	stwio	r3,0(r2)
 // initiate the weights
  PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 1);
 40012d0:	0007883a 	mov	r3,zero
 40012d4:	00800504 	movi	r2,20
 40012d8:	10c00035 	stwio	r3,0(r2)
 initWeights();
 40012dc:	4000cec0 	call	4000cec <initWeights>
 // load in the data
 initData();
 40012e0:	4000f7c0 	call	4000f7c <initData>
   PERF_END (PERFORMANCE_COUNTER_0_BASE, 1);
 40012e4:	0007883a 	mov	r3,zero
 40012e8:	00800404 	movi	r2,16
 40012ec:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
 40012f0:	e03ffe15 	stw	zero,-8(fp)
 40012f4:	00004106 	br	40013fc <main+0x164>
    {
        for(i = 0;i<numPatterns;i++)
 40012f8:	e03fff15 	stw	zero,-4(fp)
 40012fc:	00002706 	br	400139c <main+0x104>
        {
          //select a pattern at random
          patNum = rand()%numPatterns;
 4001300:	40049b00 	call	40049b0 <rand>
 4001304:	1007883a 	mov	r3,r2
 4001308:	00a00034 	movhi	r2,32768
 400130c:	108000c4 	addi	r2,r2,3
 4001310:	1884703a 	and	r2,r3,r2
 4001314:	1000040e 	bge	r2,zero,4001328 <main+0x90>
 4001318:	10bfffc4 	addi	r2,r2,-1
 400131c:	00ffff04 	movi	r3,-4
 4001320:	10c4b03a 	or	r2,r2,r3
 4001324:	10800044 	addi	r2,r2,1
 4001328:	d0a6dd15 	stw	r2,-25740(gp)

          //calculate the current network output
          //and error for this pattern
          //phase forward

          PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 2);
 400132c:	0007883a 	mov	r3,zero
 4001330:	00800904 	movi	r2,36
 4001334:	10c00035 	stwio	r3,0(r2)
          calcNet();
 4001338:	40003900 	call	4000390 <calcNet>
          PERF_END (PERFORMANCE_COUNTER_0_BASE, 2);
 400133c:	0007883a 	mov	r3,zero
 4001340:	00800804 	movi	r2,32
 4001344:	10c00035 	stwio	r3,0(r2)
          //change network weights
          //phase backward and update weights
          PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 3);
 4001348:	0007883a 	mov	r3,zero
 400134c:	00800d04 	movi	r2,52
 4001350:	10c00035 	stwio	r3,0(r2)
          WeightChangesH2O();
 4001354:	40007100 	call	4000710 <WeightChangesH2O>
          WeightChangesH1H2();         
 4001358:	40008400 	call	4000840 <WeightChangesH1H2>
          WeightChangesIH1();
 400135c:	4000a680 	call	4000a68 <WeightChangesIH1>
          PERF_END (PERFORMANCE_COUNTER_0_BASE, 3);
 4001360:	0007883a 	mov	r3,zero
 4001364:	00800c04 	movi	r2,48
 4001368:	10c00035 	stwio	r3,0(r2)
          PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 4);
 400136c:	0007883a 	mov	r3,zero
 4001370:	00801104 	movi	r2,68
 4001374:	10c00035 	stwio	r3,0(r2)
          WeightUpdatesH2O();
 4001378:	40007500 	call	4000750 <WeightUpdatesH2O>
          WeightUpdatesH1H2();
 400137c:	400090c0 	call	400090c <WeightUpdatesH1H2>
          WeightUpdatesIH1();
 4001380:	4000b900 	call	4000b90 <WeightUpdatesIH1>
          PERF_END (PERFORMANCE_COUNTER_0_BASE, 4);
 4001384:	0007883a 	mov	r3,zero
 4001388:	00801004 	movi	r2,64
 400138c:	10c00035 	stwio	r3,0(r2)


 // train the network
    for(j = 0;j <= numEpochs;j++)
    {
        for(i = 0;i<numPatterns;i++)
 4001390:	e0bfff17 	ldw	r2,-4(fp)
 4001394:	10800044 	addi	r2,r2,1
 4001398:	e0bfff15 	stw	r2,-4(fp)
 400139c:	e0bfff17 	ldw	r2,-4(fp)
 40013a0:	10800110 	cmplti	r2,r2,4
 40013a4:	103fd61e 	bne	r2,zero,4001300 <__alt_data_end+0xfc001300>
          PERF_END (PERFORMANCE_COUNTER_0_BASE, 4);
        }

        //display the overall network error
        //after each epoch
        PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 5);
 40013a8:	0007883a 	mov	r3,zero
 40013ac:	00801504 	movi	r2,84
 40013b0:	10c00035 	stwio	r3,0(r2)
        calcOverallError();
 40013b4:	40011d80 	call	40011d8 <calcOverallError>
        printf("epoch = %d RMS Error = %f\n",j,RMSerror);
 40013b8:	d0a6e017 	ldw	r2,-25728(gp)
 40013bc:	1009883a 	mov	r4,r2
 40013c0:	40041d40 	call	40041d4 <__extendsfdf2>
 40013c4:	1009883a 	mov	r4,r2
 40013c8:	180b883a 	mov	r5,r3
 40013cc:	200d883a 	mov	r6,r4
 40013d0:	280f883a 	mov	r7,r5
 40013d4:	e17ffe17 	ldw	r5,-8(fp)
 40013d8:	01010074 	movhi	r4,1025
 40013dc:	21142904 	addi	r4,r4,20644
 40013e0:	40047280 	call	4004728 <printf>
        PERF_END (PERFORMANCE_COUNTER_0_BASE, 5);
 40013e4:	0007883a 	mov	r3,zero
 40013e8:	00801404 	movi	r2,80
 40013ec:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
 40013f0:	e0bffe17 	ldw	r2,-8(fp)
 40013f4:	10800044 	addi	r2,r2,1
 40013f8:	e0bffe15 	stw	r2,-8(fp)
 40013fc:	00c03204 	movi	r3,200
 4001400:	e0bffe17 	ldw	r2,-8(fp)
 4001404:	18bfbc0e 	bge	r3,r2,40012f8 <__alt_data_end+0xfc0012f8>
        PERF_END (PERFORMANCE_COUNTER_0_BASE, 5);
    }

 //training has finished
 //display the results
 PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 6);
 4001408:	0007883a 	mov	r3,zero
 400140c:	00801904 	movi	r2,100
 4001410:	10c00035 	stwio	r3,0(r2)
 displayResults();
 4001414:	40011000 	call	4001100 <displayResults>
 PERF_END (PERFORMANCE_COUNTER_0_BASE, 6);
 4001418:	0007883a 	mov	r3,zero
 400141c:	00801804 	movi	r2,96
 4001420:	10c00035 	stwio	r3,0(r2)
 
 PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 4001424:	0007883a 	mov	r3,zero
 4001428:	0005883a 	mov	r2,zero
 400142c:	10c00035 	stwio	r3,0(r2)

  perf_print_formatted_report((void *)PERFORMANCE_COUNTER_0_BASE,
 4001430:	00810074 	movhi	r2,1025
 4001434:	10943204 	addi	r2,r2,20680
 4001438:	d8800415 	stw	r2,16(sp)
 400143c:	00810074 	movhi	r2,1025
 4001440:	10943504 	addi	r2,r2,20692
 4001444:	d8800315 	stw	r2,12(sp)
 4001448:	00810074 	movhi	r2,1025
 400144c:	10943904 	addi	r2,r2,20708
 4001450:	d8800215 	stw	r2,8(sp)
 4001454:	00810074 	movhi	r2,1025
 4001458:	10943c04 	addi	r2,r2,20720
 400145c:	d8800115 	stw	r2,4(sp)
 4001460:	00810074 	movhi	r2,1025
 4001464:	10944004 	addi	r2,r2,20736
 4001468:	d8800015 	stw	r2,0(sp)
 400146c:	01c10074 	movhi	r7,1025
 4001470:	39d43004 	addi	r7,r7,20672
 4001474:	01800184 	movi	r6,6
 4001478:	01417db4 	movhi	r5,1526
 400147c:	29784004 	addi	r5,r5,-7936
 4001480:	0009883a 	mov	r4,zero
 4001484:	40139940 	call	4013994 <perf_print_formatted_report>
							  "FASE UPDATE",
                              "CALCULO ERROR",
                              "TEST FINAL"
                              );

 system("PAUSE");
 4001488:	01010074 	movhi	r4,1025
 400148c:	21144404 	addi	r4,r4,20752
 4001490:	4004bbc0 	call	4004bbc <system>
 return 0;
 4001494:	0005883a 	mov	r2,zero
}
 4001498:	e037883a 	mov	sp,fp
 400149c:	dfc00117 	ldw	ra,4(sp)
 40014a0:	df000017 	ldw	fp,0(sp)
 40014a4:	dec00204 	addi	sp,sp,8
 40014a8:	f800283a 	ret

040014ac <sqrt>:
	double sqrt(double x)		/* wrapper sqrt */
#else
	double sqrt(x)			/* wrapper sqrt */
	double x;
#endif
{
 40014ac:	defff104 	addi	sp,sp,-60
 40014b0:	dfc00e15 	stw	ra,56(sp)
 40014b4:	df000d15 	stw	fp,52(sp)
 40014b8:	df000d04 	addi	fp,sp,52
 40014bc:	e13ffe15 	stw	r4,-8(fp)
 40014c0:	e17fff15 	stw	r5,-4(fp)
#ifdef _IEEE_LIBM
	return __ieee754_sqrt(x);
#else
	struct exception exc;
	double z;
	z = __ieee754_sqrt(x);
 40014c4:	e13ffe17 	ldw	r4,-8(fp)
 40014c8:	e17fff17 	ldw	r5,-4(fp)
 40014cc:	40016200 	call	4001620 <__ieee754_sqrt>
 40014d0:	e0bff315 	stw	r2,-52(fp)
 40014d4:	e0fff415 	stw	r3,-48(fp)
	if(_LIB_VERSION == _IEEE_ || isnan(x)) return z;
 40014d8:	d0a00817 	ldw	r2,-32736(gp)
 40014dc:	10bfffe0 	cmpeqi	r2,r2,-1
 40014e0:	1000041e 	bne	r2,zero,40014f4 <sqrt+0x48>
 40014e4:	e13ffe17 	ldw	r4,-8(fp)
 40014e8:	e17fff17 	ldw	r5,-4(fp)
 40014ec:	4001c680 	call	4001c68 <__fpclassifyd>
 40014f0:	1000031e 	bne	r2,zero,4001500 <sqrt+0x54>
 40014f4:	e0bff317 	ldw	r2,-52(fp)
 40014f8:	e0fff417 	ldw	r3,-48(fp)
 40014fc:	00003f06 	br	40015fc <sqrt+0x150>
	if(x<0.0) {
 4001500:	000d883a 	mov	r6,zero
 4001504:	000f883a 	mov	r7,zero
 4001508:	e13ffe17 	ldw	r4,-8(fp)
 400150c:	e17fff17 	ldw	r5,-4(fp)
 4001510:	40030cc0 	call	40030cc <__ledf2>
 4001514:	1000370e 	bge	r2,zero,40015f4 <sqrt+0x148>
	  exc.type = DOMAIN;
 4001518:	00800044 	movi	r2,1
 400151c:	e0bff515 	stw	r2,-44(fp)
	  exc.name = "sqrt";
 4001520:	00810074 	movhi	r2,1025
 4001524:	10944604 	addi	r2,r2,20760
 4001528:	e0bff615 	stw	r2,-40(fp)
	  exc.err = 0;
 400152c:	e03ffd15 	stw	zero,-12(fp)
	  exc.arg1 = exc.arg2 = x;
 4001530:	e0bffe17 	ldw	r2,-8(fp)
 4001534:	e0bff915 	stw	r2,-28(fp)
 4001538:	e0bfff17 	ldw	r2,-4(fp)
 400153c:	e0bffa15 	stw	r2,-24(fp)
 4001540:	e0bff917 	ldw	r2,-28(fp)
 4001544:	e0fffa17 	ldw	r3,-24(fp)
 4001548:	e0bff715 	stw	r2,-36(fp)
 400154c:	e0fff815 	stw	r3,-32(fp)
	  if (_LIB_VERSION == _SVID_)
 4001550:	d0a00817 	ldw	r2,-32736(gp)
 4001554:	1000031e 	bne	r2,zero,4001564 <sqrt+0xb8>
	    exc.retval = 0.0;
 4001558:	e03ffb15 	stw	zero,-20(fp)
 400155c:	e03ffc15 	stw	zero,-16(fp)
 4001560:	00000b06 	br	4001590 <sqrt+0xe4>
          else
            exc.retval = 0.0/0.0;
 4001564:	000d883a 	mov	r6,zero
 4001568:	000f883a 	mov	r7,zero
 400156c:	0009883a 	mov	r4,zero
 4001570:	000b883a 	mov	r5,zero
 4001574:	40026800 	call	4002680 <__divdf3>
 4001578:	1009883a 	mov	r4,r2
 400157c:	180b883a 	mov	r5,r3
 4001580:	2005883a 	mov	r2,r4
 4001584:	2807883a 	mov	r3,r5
 4001588:	e0bffb15 	stw	r2,-20(fp)
 400158c:	e0fffc15 	stw	r3,-16(fp)
          if (_LIB_VERSION == _POSIX_)
 4001590:	d0a00817 	ldw	r2,-32736(gp)
 4001594:	10800098 	cmpnei	r2,r2,2
 4001598:	1000051e 	bne	r2,zero,40015b0 <sqrt+0x104>
            errno = EDOM;
 400159c:	40046a40 	call	40046a4 <__errno>
 40015a0:	1007883a 	mov	r3,r2
 40015a4:	00800844 	movi	r2,33
 40015a8:	18800015 	stw	r2,0(r3)
 40015ac:	00000806 	br	40015d0 <sqrt+0x124>
          else if (!matherr(&exc)) {
 40015b0:	e0bff504 	addi	r2,fp,-44
 40015b4:	1009883a 	mov	r4,r2
 40015b8:	4001d6c0 	call	4001d6c <matherr>
 40015bc:	1000041e 	bne	r2,zero,40015d0 <sqrt+0x124>
            errno = EDOM;
 40015c0:	40046a40 	call	40046a4 <__errno>
 40015c4:	1007883a 	mov	r3,r2
 40015c8:	00800844 	movi	r2,33
 40015cc:	18800015 	stw	r2,0(r3)
          }
          if (exc.err != 0)
 40015d0:	e0bffd17 	ldw	r2,-12(fp)
 40015d4:	10000426 	beq	r2,zero,40015e8 <sqrt+0x13c>
	    errno = exc.err;
 40015d8:	40046a40 	call	40046a4 <__errno>
 40015dc:	1007883a 	mov	r3,r2
 40015e0:	e0bffd17 	ldw	r2,-12(fp)
 40015e4:	18800015 	stw	r2,0(r3)
	  return exc.retval; 
 40015e8:	e0bffb17 	ldw	r2,-20(fp)
 40015ec:	e0fffc17 	ldw	r3,-16(fp)
 40015f0:	00000206 	br	40015fc <sqrt+0x150>
	} else
	    return z;
 40015f4:	e0bff317 	ldw	r2,-52(fp)
 40015f8:	e0fff417 	ldw	r3,-48(fp)
 40015fc:	1009883a 	mov	r4,r2
 4001600:	180b883a 	mov	r5,r3
#endif
}
 4001604:	2005883a 	mov	r2,r4
 4001608:	2807883a 	mov	r3,r5
 400160c:	e037883a 	mov	sp,fp
 4001610:	dfc00117 	ldw	ra,4(sp)
 4001614:	df000017 	ldw	fp,0(sp)
 4001618:	dec00204 	addi	sp,sp,8
 400161c:	f800283a 	ret

04001620 <__ieee754_sqrt>:
	double __ieee754_sqrt(double x)
#else
	double __ieee754_sqrt(x)
	double x;
#endif
{
 4001620:	deffe804 	addi	sp,sp,-96
 4001624:	dfc01715 	stw	ra,92(sp)
 4001628:	df001615 	stw	fp,88(sp)
 400162c:	dc401515 	stw	r17,84(sp)
 4001630:	dc001415 	stw	r16,80(sp)
 4001634:	df001604 	addi	fp,sp,88
 4001638:	e13ffc15 	stw	r4,-16(fp)
 400163c:	e17ffd15 	stw	r5,-12(fp)
	double z;
	__int32_t sign = (int)0x80000000; 
 4001640:	00a00034 	movhi	r2,32768
 4001644:	e0bff315 	stw	r2,-52(fp)
	__uint32_t r,t1,s1,ix1,q1;
	__int32_t ix0,s0,q,m,t,i;

	EXTRACT_WORDS(ix0,ix1,x);
 4001648:	e0bffc17 	ldw	r2,-16(fp)
 400164c:	e0bff815 	stw	r2,-32(fp)
 4001650:	e0bffd17 	ldw	r2,-12(fp)
 4001654:	e0bff915 	stw	r2,-28(fp)
 4001658:	e0bff917 	ldw	r2,-28(fp)
 400165c:	e0bfee15 	stw	r2,-72(fp)
 4001660:	e0bff817 	ldw	r2,-32(fp)
 4001664:	e0bfec15 	stw	r2,-80(fp)

    /* take care of Inf and NaN */
	if((ix0&0x7ff00000)==0x7ff00000) {			
 4001668:	e0bfee17 	ldw	r2,-72(fp)
 400166c:	10dffc2c 	andhi	r3,r2,32752
 4001670:	009ffc34 	movhi	r2,32752
 4001674:	1880131e 	bne	r3,r2,40016c4 <__ieee754_sqrt+0xa4>
	    return x*x+x;		/* sqrt(NaN)=NaN, sqrt(+inf)=+inf
 4001678:	e1bffc17 	ldw	r6,-16(fp)
 400167c:	e1fffd17 	ldw	r7,-12(fp)
 4001680:	e13ffc17 	ldw	r4,-16(fp)
 4001684:	e17ffd17 	ldw	r5,-12(fp)
 4001688:	40031c00 	call	40031c0 <__muldf3>
 400168c:	1009883a 	mov	r4,r2
 4001690:	180b883a 	mov	r5,r3
 4001694:	2005883a 	mov	r2,r4
 4001698:	2807883a 	mov	r3,r5
 400169c:	e1bffc17 	ldw	r6,-16(fp)
 40016a0:	e1fffd17 	ldw	r7,-12(fp)
 40016a4:	1009883a 	mov	r4,r2
 40016a8:	180b883a 	mov	r5,r3
 40016ac:	4001dd40 	call	4001dd4 <__adddf3>
 40016b0:	1009883a 	mov	r4,r2
 40016b4:	180b883a 	mov	r5,r3
 40016b8:	2005883a 	mov	r2,r4
 40016bc:	2807883a 	mov	r3,r5
 40016c0:	00015e06 	br	4001c3c <__ieee754_sqrt+0x61c>
					   sqrt(-inf)=sNaN */
	} 
    /* take care of zero */
	if(ix0<=0) {
 40016c4:	e0bfee17 	ldw	r2,-72(fp)
 40016c8:	00802916 	blt	zero,r2,4001770 <__ieee754_sqrt+0x150>
	    if(((ix0&(~sign))|ix1)==0) return x;/* sqrt(+-0) = +-0 */
 40016cc:	e0bff317 	ldw	r2,-52(fp)
 40016d0:	0086303a 	nor	r3,zero,r2
 40016d4:	e0bfee17 	ldw	r2,-72(fp)
 40016d8:	1884703a 	and	r2,r3,r2
 40016dc:	1007883a 	mov	r3,r2
 40016e0:	e0bfec17 	ldw	r2,-80(fp)
 40016e4:	1884b03a 	or	r2,r3,r2
 40016e8:	1000031e 	bne	r2,zero,40016f8 <__ieee754_sqrt+0xd8>
 40016ec:	e0bffc17 	ldw	r2,-16(fp)
 40016f0:	e0fffd17 	ldw	r3,-12(fp)
 40016f4:	00015106 	br	4001c3c <__ieee754_sqrt+0x61c>
	    else if(ix0<0)
 40016f8:	e0bfee17 	ldw	r2,-72(fp)
 40016fc:	10001c0e 	bge	r2,zero,4001770 <__ieee754_sqrt+0x150>
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
 4001700:	e1bffc17 	ldw	r6,-16(fp)
 4001704:	e1fffd17 	ldw	r7,-12(fp)
 4001708:	e13ffc17 	ldw	r4,-16(fp)
 400170c:	e17ffd17 	ldw	r5,-12(fp)
 4001710:	40038d80 	call	40038d8 <__subdf3>
 4001714:	1009883a 	mov	r4,r2
 4001718:	180b883a 	mov	r5,r3
 400171c:	2021883a 	mov	r16,r4
 4001720:	2823883a 	mov	r17,r5
 4001724:	e1bffc17 	ldw	r6,-16(fp)
 4001728:	e1fffd17 	ldw	r7,-12(fp)
 400172c:	e13ffc17 	ldw	r4,-16(fp)
 4001730:	e17ffd17 	ldw	r5,-12(fp)
 4001734:	40038d80 	call	40038d8 <__subdf3>
 4001738:	1009883a 	mov	r4,r2
 400173c:	180b883a 	mov	r5,r3
 4001740:	2005883a 	mov	r2,r4
 4001744:	2807883a 	mov	r3,r5
 4001748:	100d883a 	mov	r6,r2
 400174c:	180f883a 	mov	r7,r3
 4001750:	8009883a 	mov	r4,r16
 4001754:	880b883a 	mov	r5,r17
 4001758:	40026800 	call	4002680 <__divdf3>
 400175c:	1009883a 	mov	r4,r2
 4001760:	180b883a 	mov	r5,r3
 4001764:	2005883a 	mov	r2,r4
 4001768:	2807883a 	mov	r3,r5
 400176c:	00013306 	br	4001c3c <__ieee754_sqrt+0x61c>
	}
    /* normalize x */
	m = (ix0>>20);
 4001770:	e0bfee17 	ldw	r2,-72(fp)
 4001774:	1005d53a 	srai	r2,r2,20
 4001778:	e0bff115 	stw	r2,-60(fp)
	if(m==0) {				/* subnormal x */
 400177c:	e0bff117 	ldw	r2,-60(fp)
 4001780:	10002a1e 	bne	r2,zero,400182c <__ieee754_sqrt+0x20c>
	    while(ix0==0) {
 4001784:	00000b06 	br	40017b4 <__ieee754_sqrt+0x194>
		m -= 21;
 4001788:	e0bff117 	ldw	r2,-60(fp)
 400178c:	10bffac4 	addi	r2,r2,-21
 4001790:	e0bff115 	stw	r2,-60(fp)
		ix0 |= (ix1>>11); ix1 <<= 21;
 4001794:	e0bfec17 	ldw	r2,-80(fp)
 4001798:	1006d2fa 	srli	r3,r2,11
 400179c:	e0bfee17 	ldw	r2,-72(fp)
 40017a0:	1884b03a 	or	r2,r3,r2
 40017a4:	e0bfee15 	stw	r2,-72(fp)
 40017a8:	e0bfec17 	ldw	r2,-80(fp)
 40017ac:	1004957a 	slli	r2,r2,21
 40017b0:	e0bfec15 	stw	r2,-80(fp)
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
	}
    /* normalize x */
	m = (ix0>>20);
	if(m==0) {				/* subnormal x */
	    while(ix0==0) {
 40017b4:	e0bfee17 	ldw	r2,-72(fp)
 40017b8:	103ff326 	beq	r2,zero,4001788 <__alt_data_end+0xfc001788>
		m -= 21;
		ix0 |= (ix1>>11); ix1 <<= 21;
	    }
	    for(i=0;(ix0&0x00100000)==0;i++) ix0<<=1;
 40017bc:	e03ff215 	stw	zero,-56(fp)
 40017c0:	00000606 	br	40017dc <__ieee754_sqrt+0x1bc>
 40017c4:	e0bfee17 	ldw	r2,-72(fp)
 40017c8:	1085883a 	add	r2,r2,r2
 40017cc:	e0bfee15 	stw	r2,-72(fp)
 40017d0:	e0bff217 	ldw	r2,-56(fp)
 40017d4:	10800044 	addi	r2,r2,1
 40017d8:	e0bff215 	stw	r2,-56(fp)
 40017dc:	e0bfee17 	ldw	r2,-72(fp)
 40017e0:	1080042c 	andhi	r2,r2,16
 40017e4:	103ff726 	beq	r2,zero,40017c4 <__alt_data_end+0xfc0017c4>
	    m -= i-1;
 40017e8:	e0bff217 	ldw	r2,-56(fp)
 40017ec:	10bfffc4 	addi	r2,r2,-1
 40017f0:	e0fff117 	ldw	r3,-60(fp)
 40017f4:	1885c83a 	sub	r2,r3,r2
 40017f8:	e0bff115 	stw	r2,-60(fp)
	    ix0 |= (ix1>>(32-i));
 40017fc:	00c00804 	movi	r3,32
 4001800:	e0bff217 	ldw	r2,-56(fp)
 4001804:	1885c83a 	sub	r2,r3,r2
 4001808:	e0ffec17 	ldw	r3,-80(fp)
 400180c:	1886d83a 	srl	r3,r3,r2
 4001810:	e0bfee17 	ldw	r2,-72(fp)
 4001814:	1884b03a 	or	r2,r3,r2
 4001818:	e0bfee15 	stw	r2,-72(fp)
	    ix1 <<= i;
 400181c:	e0ffec17 	ldw	r3,-80(fp)
 4001820:	e0bff217 	ldw	r2,-56(fp)
 4001824:	1884983a 	sll	r2,r3,r2
 4001828:	e0bfec15 	stw	r2,-80(fp)
	}
	m -= 1023;	/* unbias exponent */
 400182c:	e0bff117 	ldw	r2,-60(fp)
 4001830:	10bf0044 	addi	r2,r2,-1023
 4001834:	e0bff115 	stw	r2,-60(fp)
	ix0 = (ix0&0x000fffff)|0x00100000;
 4001838:	e0ffee17 	ldw	r3,-72(fp)
 400183c:	00800434 	movhi	r2,16
 4001840:	10bfffc4 	addi	r2,r2,-1
 4001844:	1884703a 	and	r2,r3,r2
 4001848:	10800434 	orhi	r2,r2,16
 400184c:	e0bfee15 	stw	r2,-72(fp)
	if(m&1){	/* odd m, double x to make it even */
 4001850:	e0bff117 	ldw	r2,-60(fp)
 4001854:	1080004c 	andi	r2,r2,1
 4001858:	10000d26 	beq	r2,zero,4001890 <__ieee754_sqrt+0x270>
	    ix0 += ix0 + ((ix1&sign)>>31);
 400185c:	e0fff317 	ldw	r3,-52(fp)
 4001860:	e0bfec17 	ldw	r2,-80(fp)
 4001864:	1884703a 	and	r2,r3,r2
 4001868:	1006d7fa 	srli	r3,r2,31
 400186c:	e0bfee17 	ldw	r2,-72(fp)
 4001870:	1887883a 	add	r3,r3,r2
 4001874:	e0bfee17 	ldw	r2,-72(fp)
 4001878:	1885883a 	add	r2,r3,r2
 400187c:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 4001880:	e0ffec17 	ldw	r3,-80(fp)
 4001884:	e0bfec17 	ldw	r2,-80(fp)
 4001888:	1885883a 	add	r2,r3,r2
 400188c:	e0bfec15 	stw	r2,-80(fp)
	}
	m >>= 1;	/* m = [m/2] */
 4001890:	e0bff117 	ldw	r2,-60(fp)
 4001894:	1005d07a 	srai	r2,r2,1
 4001898:	e0bff115 	stw	r2,-60(fp)

    /* generate sqrt(x) bit by bit */
	ix0 += ix0 + ((ix1&sign)>>31);
 400189c:	e0fff317 	ldw	r3,-52(fp)
 40018a0:	e0bfec17 	ldw	r2,-80(fp)
 40018a4:	1884703a 	and	r2,r3,r2
 40018a8:	1006d7fa 	srli	r3,r2,31
 40018ac:	e0bfee17 	ldw	r2,-72(fp)
 40018b0:	1887883a 	add	r3,r3,r2
 40018b4:	e0bfee17 	ldw	r2,-72(fp)
 40018b8:	1885883a 	add	r2,r3,r2
 40018bc:	e0bfee15 	stw	r2,-72(fp)
	ix1 += ix1;
 40018c0:	e0ffec17 	ldw	r3,-80(fp)
 40018c4:	e0bfec17 	ldw	r2,-80(fp)
 40018c8:	1885883a 	add	r2,r3,r2
 40018cc:	e0bfec15 	stw	r2,-80(fp)
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
 40018d0:	e03feb15 	stw	zero,-84(fp)
 40018d4:	e03fef15 	stw	zero,-68(fp)
 40018d8:	e0bfef17 	ldw	r2,-68(fp)
 40018dc:	e0bfed15 	stw	r2,-76(fp)
 40018e0:	e0bfed17 	ldw	r2,-76(fp)
 40018e4:	e0bff015 	stw	r2,-64(fp)
	r = 0x00200000;		/* r = moving bit from right to left */
 40018e8:	00800834 	movhi	r2,32
 40018ec:	e0bfea15 	stw	r2,-88(fp)

	while(r!=0) {
 40018f0:	00002306 	br	4001980 <__ieee754_sqrt+0x360>
	    t = s0+r; 
 40018f4:	e0ffef17 	ldw	r3,-68(fp)
 40018f8:	e0bfea17 	ldw	r2,-88(fp)
 40018fc:	1885883a 	add	r2,r3,r2
 4001900:	e0bff415 	stw	r2,-48(fp)
	    if(t<=ix0) { 
 4001904:	e0bff417 	ldw	r2,-48(fp)
 4001908:	e0ffee17 	ldw	r3,-72(fp)
 400190c:	18800c16 	blt	r3,r2,4001940 <__ieee754_sqrt+0x320>
		s0   = t+r; 
 4001910:	e0fff417 	ldw	r3,-48(fp)
 4001914:	e0bfea17 	ldw	r2,-88(fp)
 4001918:	1885883a 	add	r2,r3,r2
 400191c:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t; 
 4001920:	e0ffee17 	ldw	r3,-72(fp)
 4001924:	e0bff417 	ldw	r2,-48(fp)
 4001928:	1885c83a 	sub	r2,r3,r2
 400192c:	e0bfee15 	stw	r2,-72(fp)
		q   += r; 
 4001930:	e0fff017 	ldw	r3,-64(fp)
 4001934:	e0bfea17 	ldw	r2,-88(fp)
 4001938:	1885883a 	add	r2,r3,r2
 400193c:	e0bff015 	stw	r2,-64(fp)
	    } 
	    ix0 += ix0 + ((ix1&sign)>>31);
 4001940:	e0fff317 	ldw	r3,-52(fp)
 4001944:	e0bfec17 	ldw	r2,-80(fp)
 4001948:	1884703a 	and	r2,r3,r2
 400194c:	1006d7fa 	srli	r3,r2,31
 4001950:	e0bfee17 	ldw	r2,-72(fp)
 4001954:	1887883a 	add	r3,r3,r2
 4001958:	e0bfee17 	ldw	r2,-72(fp)
 400195c:	1885883a 	add	r2,r3,r2
 4001960:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 4001964:	e0ffec17 	ldw	r3,-80(fp)
 4001968:	e0bfec17 	ldw	r2,-80(fp)
 400196c:	1885883a 	add	r2,r3,r2
 4001970:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 4001974:	e0bfea17 	ldw	r2,-88(fp)
 4001978:	1004d07a 	srli	r2,r2,1
 400197c:	e0bfea15 	stw	r2,-88(fp)
	ix0 += ix0 + ((ix1&sign)>>31);
	ix1 += ix1;
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
	r = 0x00200000;		/* r = moving bit from right to left */

	while(r!=0) {
 4001980:	e0bfea17 	ldw	r2,-88(fp)
 4001984:	103fdb1e 	bne	r2,zero,40018f4 <__alt_data_end+0xfc0018f4>
	    ix0 += ix0 + ((ix1&sign)>>31);
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
 4001988:	e0bff317 	ldw	r2,-52(fp)
 400198c:	e0bfea15 	stw	r2,-88(fp)
	while(r!=0) {
 4001990:	00004106 	br	4001a98 <__ieee754_sqrt+0x478>
	    t1 = s1+r; 
 4001994:	e0ffeb17 	ldw	r3,-84(fp)
 4001998:	e0bfea17 	ldw	r2,-88(fp)
 400199c:	1885883a 	add	r2,r3,r2
 40019a0:	e0bff515 	stw	r2,-44(fp)
	    t  = s0;
 40019a4:	e0bfef17 	ldw	r2,-68(fp)
 40019a8:	e0bff415 	stw	r2,-48(fp)
	    if((t<ix0)||((t==ix0)&&(t1<=ix1))) { 
 40019ac:	e0fff417 	ldw	r3,-48(fp)
 40019b0:	e0bfee17 	ldw	r2,-72(fp)
 40019b4:	18800616 	blt	r3,r2,40019d0 <__ieee754_sqrt+0x3b0>
 40019b8:	e0fff417 	ldw	r3,-48(fp)
 40019bc:	e0bfee17 	ldw	r2,-72(fp)
 40019c0:	1880251e 	bne	r3,r2,4001a58 <__ieee754_sqrt+0x438>
 40019c4:	e0bff517 	ldw	r2,-44(fp)
 40019c8:	e0ffec17 	ldw	r3,-80(fp)
 40019cc:	18802236 	bltu	r3,r2,4001a58 <__ieee754_sqrt+0x438>
		s1  = t1+r;
 40019d0:	e0fff517 	ldw	r3,-44(fp)
 40019d4:	e0bfea17 	ldw	r2,-88(fp)
 40019d8:	1885883a 	add	r2,r3,r2
 40019dc:	e0bfeb15 	stw	r2,-84(fp)
		if(((t1&sign)==sign)&&(s1&sign)==0) s0 += 1;
 40019e0:	e0fff317 	ldw	r3,-52(fp)
 40019e4:	e0bff517 	ldw	r2,-44(fp)
 40019e8:	1886703a 	and	r3,r3,r2
 40019ec:	e0bff317 	ldw	r2,-52(fp)
 40019f0:	1880071e 	bne	r3,r2,4001a10 <__ieee754_sqrt+0x3f0>
 40019f4:	e0fff317 	ldw	r3,-52(fp)
 40019f8:	e0bfeb17 	ldw	r2,-84(fp)
 40019fc:	1884703a 	and	r2,r3,r2
 4001a00:	1000031e 	bne	r2,zero,4001a10 <__ieee754_sqrt+0x3f0>
 4001a04:	e0bfef17 	ldw	r2,-68(fp)
 4001a08:	10800044 	addi	r2,r2,1
 4001a0c:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t;
 4001a10:	e0ffee17 	ldw	r3,-72(fp)
 4001a14:	e0bff417 	ldw	r2,-48(fp)
 4001a18:	1885c83a 	sub	r2,r3,r2
 4001a1c:	e0bfee15 	stw	r2,-72(fp)
		if (ix1 < t1) ix0 -= 1;
 4001a20:	e0ffec17 	ldw	r3,-80(fp)
 4001a24:	e0bff517 	ldw	r2,-44(fp)
 4001a28:	1880032e 	bgeu	r3,r2,4001a38 <__ieee754_sqrt+0x418>
 4001a2c:	e0bfee17 	ldw	r2,-72(fp)
 4001a30:	10bfffc4 	addi	r2,r2,-1
 4001a34:	e0bfee15 	stw	r2,-72(fp)
		ix1 -= t1;
 4001a38:	e0ffec17 	ldw	r3,-80(fp)
 4001a3c:	e0bff517 	ldw	r2,-44(fp)
 4001a40:	1885c83a 	sub	r2,r3,r2
 4001a44:	e0bfec15 	stw	r2,-80(fp)
		q1  += r;
 4001a48:	e0ffed17 	ldw	r3,-76(fp)
 4001a4c:	e0bfea17 	ldw	r2,-88(fp)
 4001a50:	1885883a 	add	r2,r3,r2
 4001a54:	e0bfed15 	stw	r2,-76(fp)
	    }
	    ix0 += ix0 + ((ix1&sign)>>31);
 4001a58:	e0fff317 	ldw	r3,-52(fp)
 4001a5c:	e0bfec17 	ldw	r2,-80(fp)
 4001a60:	1884703a 	and	r2,r3,r2
 4001a64:	1006d7fa 	srli	r3,r2,31
 4001a68:	e0bfee17 	ldw	r2,-72(fp)
 4001a6c:	1887883a 	add	r3,r3,r2
 4001a70:	e0bfee17 	ldw	r2,-72(fp)
 4001a74:	1885883a 	add	r2,r3,r2
 4001a78:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 4001a7c:	e0ffec17 	ldw	r3,-80(fp)
 4001a80:	e0bfec17 	ldw	r2,-80(fp)
 4001a84:	1885883a 	add	r2,r3,r2
 4001a88:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 4001a8c:	e0bfea17 	ldw	r2,-88(fp)
 4001a90:	1004d07a 	srli	r2,r2,1
 4001a94:	e0bfea15 	stw	r2,-88(fp)
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
	while(r!=0) {
 4001a98:	e0bfea17 	ldw	r2,-88(fp)
 4001a9c:	103fbd1e 	bne	r2,zero,4001994 <__alt_data_end+0xfc001994>
	    ix1 += ix1;
	    r>>=1;
	}

    /* use floating add to find out rounding direction */
	if((ix0|ix1)!=0) {
 4001aa0:	e0ffee17 	ldw	r3,-72(fp)
 4001aa4:	e0bfec17 	ldw	r2,-80(fp)
 4001aa8:	1884b03a 	or	r2,r3,r2
 4001aac:	10004526 	beq	r2,zero,4001bc4 <__ieee754_sqrt+0x5a4>
	    z = one-tiny; /* trigger inexact flag */
 4001ab0:	0011883a 	mov	r8,zero
 4001ab4:	024ffc34 	movhi	r9,16368
 4001ab8:	00b0be74 	movhi	r2,49913
 4001abc:	10bcd644 	addi	r2,r2,-3239
 4001ac0:	00c06974 	movhi	r3,421
 4001ac4:	18db87c4 	addi	r3,r3,28191
 4001ac8:	100d883a 	mov	r6,r2
 4001acc:	180f883a 	mov	r7,r3
 4001ad0:	4009883a 	mov	r4,r8
 4001ad4:	480b883a 	mov	r5,r9
 4001ad8:	40038d80 	call	40038d8 <__subdf3>
 4001adc:	1009883a 	mov	r4,r2
 4001ae0:	180b883a 	mov	r5,r3
 4001ae4:	e13ff615 	stw	r4,-40(fp)
 4001ae8:	e17ff715 	stw	r5,-36(fp)
	    if (z>=one) {
 4001aec:	0005883a 	mov	r2,zero
 4001af0:	00cffc34 	movhi	r3,16368
 4001af4:	100d883a 	mov	r6,r2
 4001af8:	180f883a 	mov	r7,r3
 4001afc:	e13ff617 	ldw	r4,-40(fp)
 4001b00:	e17ff717 	ldw	r5,-36(fp)
 4001b04:	4002ff00 	call	4002ff0 <__gedf2>
 4001b08:	10002e16 	blt	r2,zero,4001bc4 <__ieee754_sqrt+0x5a4>
	        z = one+tiny;
 4001b0c:	0011883a 	mov	r8,zero
 4001b10:	024ffc34 	movhi	r9,16368
 4001b14:	00b0be74 	movhi	r2,49913
 4001b18:	10bcd644 	addi	r2,r2,-3239
 4001b1c:	00c06974 	movhi	r3,421
 4001b20:	18db87c4 	addi	r3,r3,28191
 4001b24:	100d883a 	mov	r6,r2
 4001b28:	180f883a 	mov	r7,r3
 4001b2c:	4009883a 	mov	r4,r8
 4001b30:	480b883a 	mov	r5,r9
 4001b34:	4001dd40 	call	4001dd4 <__adddf3>
 4001b38:	1009883a 	mov	r4,r2
 4001b3c:	180b883a 	mov	r5,r3
 4001b40:	e13ff615 	stw	r4,-40(fp)
 4001b44:	e17ff715 	stw	r5,-36(fp)
	        if (q1==(__uint32_t)0xffffffff) { q1=0; q += 1;}
 4001b48:	e0bfed17 	ldw	r2,-76(fp)
 4001b4c:	10bfffd8 	cmpnei	r2,r2,-1
 4001b50:	1000051e 	bne	r2,zero,4001b68 <__ieee754_sqrt+0x548>
 4001b54:	e03fed15 	stw	zero,-76(fp)
 4001b58:	e0bff017 	ldw	r2,-64(fp)
 4001b5c:	10800044 	addi	r2,r2,1
 4001b60:	e0bff015 	stw	r2,-64(fp)
 4001b64:	00001706 	br	4001bc4 <__ieee754_sqrt+0x5a4>
		else if (z>one) {
 4001b68:	0005883a 	mov	r2,zero
 4001b6c:	00cffc34 	movhi	r3,16368
 4001b70:	100d883a 	mov	r6,r2
 4001b74:	180f883a 	mov	r7,r3
 4001b78:	e13ff617 	ldw	r4,-40(fp)
 4001b7c:	e17ff717 	ldw	r5,-36(fp)
 4001b80:	4002ff00 	call	4002ff0 <__gedf2>
 4001b84:	00800a0e 	bge	zero,r2,4001bb0 <__ieee754_sqrt+0x590>
		    if (q1==(__uint32_t)0xfffffffe) q+=1;
 4001b88:	e0bfed17 	ldw	r2,-76(fp)
 4001b8c:	10bfff98 	cmpnei	r2,r2,-2
 4001b90:	1000031e 	bne	r2,zero,4001ba0 <__ieee754_sqrt+0x580>
 4001b94:	e0bff017 	ldw	r2,-64(fp)
 4001b98:	10800044 	addi	r2,r2,1
 4001b9c:	e0bff015 	stw	r2,-64(fp)
		    q1+=2; 
 4001ba0:	e0bfed17 	ldw	r2,-76(fp)
 4001ba4:	10800084 	addi	r2,r2,2
 4001ba8:	e0bfed15 	stw	r2,-76(fp)
 4001bac:	00000506 	br	4001bc4 <__ieee754_sqrt+0x5a4>
		} else
	            q1 += (q1&1);
 4001bb0:	e0bfed17 	ldw	r2,-76(fp)
 4001bb4:	1080004c 	andi	r2,r2,1
 4001bb8:	e0ffed17 	ldw	r3,-76(fp)
 4001bbc:	1885883a 	add	r2,r3,r2
 4001bc0:	e0bfed15 	stw	r2,-76(fp)
	    }
	}
	ix0 = (q>>1)+0x3fe00000;
 4001bc4:	e0bff017 	ldw	r2,-64(fp)
 4001bc8:	1007d07a 	srai	r3,r2,1
 4001bcc:	008ff834 	movhi	r2,16352
 4001bd0:	1885883a 	add	r2,r3,r2
 4001bd4:	e0bfee15 	stw	r2,-72(fp)
	ix1 =  q1>>1;
 4001bd8:	e0bfed17 	ldw	r2,-76(fp)
 4001bdc:	1004d07a 	srli	r2,r2,1
 4001be0:	e0bfec15 	stw	r2,-80(fp)
	if ((q&1)==1) ix1 |= sign;
 4001be4:	e0bff017 	ldw	r2,-64(fp)
 4001be8:	1080004c 	andi	r2,r2,1
 4001bec:	10000426 	beq	r2,zero,4001c00 <__ieee754_sqrt+0x5e0>
 4001bf0:	e0bff317 	ldw	r2,-52(fp)
 4001bf4:	e0ffec17 	ldw	r3,-80(fp)
 4001bf8:	1884b03a 	or	r2,r3,r2
 4001bfc:	e0bfec15 	stw	r2,-80(fp)
	ix0 += (m <<20);
 4001c00:	e0bff117 	ldw	r2,-60(fp)
 4001c04:	1004953a 	slli	r2,r2,20
 4001c08:	e0ffee17 	ldw	r3,-72(fp)
 4001c0c:	1885883a 	add	r2,r3,r2
 4001c10:	e0bfee15 	stw	r2,-72(fp)
	INSERT_WORDS(z,ix0,ix1);
 4001c14:	e0bfee17 	ldw	r2,-72(fp)
 4001c18:	e0bffb15 	stw	r2,-20(fp)
 4001c1c:	e0bfec17 	ldw	r2,-80(fp)
 4001c20:	e0bffa15 	stw	r2,-24(fp)
 4001c24:	e0bffa17 	ldw	r2,-24(fp)
 4001c28:	e0bff615 	stw	r2,-40(fp)
 4001c2c:	e0bffb17 	ldw	r2,-20(fp)
 4001c30:	e0bff715 	stw	r2,-36(fp)
	return z;
 4001c34:	e0bff617 	ldw	r2,-40(fp)
 4001c38:	e0fff717 	ldw	r3,-36(fp)
 4001c3c:	1009883a 	mov	r4,r2
 4001c40:	180b883a 	mov	r5,r3
}
 4001c44:	2005883a 	mov	r2,r4
 4001c48:	2807883a 	mov	r3,r5
 4001c4c:	e6fffe04 	addi	sp,fp,-8
 4001c50:	dfc00317 	ldw	ra,12(sp)
 4001c54:	df000217 	ldw	fp,8(sp)
 4001c58:	dc400117 	ldw	r17,4(sp)
 4001c5c:	dc000017 	ldw	r16,0(sp)
 4001c60:	dec00404 	addi	sp,sp,16
 4001c64:	f800283a 	ret

04001c68 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 4001c68:	defff904 	addi	sp,sp,-28
 4001c6c:	df000615 	stw	fp,24(sp)
 4001c70:	df000604 	addi	fp,sp,24
 4001c74:	e13ffe15 	stw	r4,-8(fp)
 4001c78:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 4001c7c:	e0bffe17 	ldw	r2,-8(fp)
 4001c80:	e0bffc15 	stw	r2,-16(fp)
 4001c84:	e0bfff17 	ldw	r2,-4(fp)
 4001c88:	e0bffd15 	stw	r2,-12(fp)
 4001c8c:	e0bffd17 	ldw	r2,-12(fp)
 4001c90:	e0bffa15 	stw	r2,-24(fp)
 4001c94:	e0bffc17 	ldw	r2,-16(fp)
 4001c98:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 4001c9c:	e0bffa17 	ldw	r2,-24(fp)
 4001ca0:	1000021e 	bne	r2,zero,4001cac <__fpclassifyd+0x44>
 4001ca4:	e0bffb17 	ldw	r2,-20(fp)
 4001ca8:	10000526 	beq	r2,zero,4001cc0 <__fpclassifyd+0x58>
 4001cac:	e0fffa17 	ldw	r3,-24(fp)
 4001cb0:	00a00034 	movhi	r2,32768
 4001cb4:	1880041e 	bne	r3,r2,4001cc8 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 4001cb8:	e0bffb17 	ldw	r2,-20(fp)
 4001cbc:	1000021e 	bne	r2,zero,4001cc8 <__fpclassifyd+0x60>
    return FP_ZERO;
 4001cc0:	00800084 	movi	r2,2
 4001cc4:	00002506 	br	4001d5c <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 4001cc8:	e0fffa17 	ldw	r3,-24(fp)
 4001ccc:	00800434 	movhi	r2,16
 4001cd0:	18800336 	bltu	r3,r2,4001ce0 <__fpclassifyd+0x78>
 4001cd4:	e0fffa17 	ldw	r3,-24(fp)
 4001cd8:	009ffc34 	movhi	r2,32752
 4001cdc:	18800636 	bltu	r3,r2,4001cf8 <__fpclassifyd+0x90>
 4001ce0:	e0fffa17 	ldw	r3,-24(fp)
 4001ce4:	00a00434 	movhi	r2,32784
 4001ce8:	18800536 	bltu	r3,r2,4001d00 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 4001cec:	e0fffa17 	ldw	r3,-24(fp)
 4001cf0:	00bffc34 	movhi	r2,65520
 4001cf4:	1880022e 	bgeu	r3,r2,4001d00 <__fpclassifyd+0x98>
    return FP_NORMAL;
 4001cf8:	00800104 	movi	r2,4
 4001cfc:	00001706 	br	4001d5c <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 4001d00:	e0fffa17 	ldw	r3,-24(fp)
 4001d04:	00800434 	movhi	r2,16
 4001d08:	18800536 	bltu	r3,r2,4001d20 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 4001d0c:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 4001d10:	1000050e 	bge	r2,zero,4001d28 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 4001d14:	e0fffa17 	ldw	r3,-24(fp)
 4001d18:	00a00434 	movhi	r2,32784
 4001d1c:	1880022e 	bgeu	r3,r2,4001d28 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 4001d20:	008000c4 	movi	r2,3
 4001d24:	00000d06 	br	4001d5c <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 4001d28:	e0fffa17 	ldw	r3,-24(fp)
 4001d2c:	009ffc34 	movhi	r2,32752
 4001d30:	1880021e 	bne	r3,r2,4001d3c <__fpclassifyd+0xd4>
 4001d34:	e0bffb17 	ldw	r2,-20(fp)
 4001d38:	10000526 	beq	r2,zero,4001d50 <__fpclassifyd+0xe8>
 4001d3c:	e0fffa17 	ldw	r3,-24(fp)
 4001d40:	00bffc34 	movhi	r2,65520
 4001d44:	1880041e 	bne	r3,r2,4001d58 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 4001d48:	e0bffb17 	ldw	r2,-20(fp)
 4001d4c:	1000021e 	bne	r2,zero,4001d58 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 4001d50:	00800044 	movi	r2,1
 4001d54:	00000106 	br	4001d5c <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 4001d58:	0005883a 	mov	r2,zero
}
 4001d5c:	e037883a 	mov	sp,fp
 4001d60:	df000017 	ldw	fp,0(sp)
 4001d64:	dec00104 	addi	sp,sp,4
 4001d68:	f800283a 	ret

04001d6c <matherr>:
	int matherr(struct exception *x)
#else
	int matherr(x)
	struct exception *x;
#endif
{
 4001d6c:	defffc04 	addi	sp,sp,-16
 4001d70:	dfc00315 	stw	ra,12(sp)
 4001d74:	df000215 	stw	fp,8(sp)
 4001d78:	df000204 	addi	fp,sp,8
 4001d7c:	e13fff15 	stw	r4,-4(fp)
	int n=0;
 4001d80:	e03ffe15 	stw	zero,-8(fp)
	if(x->arg1!=x->arg1) return 0;
 4001d84:	e13fff17 	ldw	r4,-4(fp)
 4001d88:	20800217 	ldw	r2,8(r4)
 4001d8c:	20c00317 	ldw	r3,12(r4)
 4001d90:	e1bfff17 	ldw	r6,-4(fp)
 4001d94:	31000217 	ldw	r4,8(r6)
 4001d98:	31400317 	ldw	r5,12(r6)
 4001d9c:	200d883a 	mov	r6,r4
 4001da0:	280f883a 	mov	r7,r5
 4001da4:	1009883a 	mov	r4,r2
 4001da8:	180b883a 	mov	r5,r3
 4001dac:	4002f680 	call	4002f68 <__eqdf2>
 4001db0:	10000226 	beq	r2,zero,4001dbc <matherr+0x50>
 4001db4:	0005883a 	mov	r2,zero
 4001db8:	00000106 	br	4001dc0 <matherr+0x54>
	return n;
 4001dbc:	e0bffe17 	ldw	r2,-8(fp)
}
 4001dc0:	e037883a 	mov	sp,fp
 4001dc4:	dfc00117 	ldw	ra,4(sp)
 4001dc8:	df000017 	ldw	fp,0(sp)
 4001dcc:	dec00204 	addi	sp,sp,8
 4001dd0:	f800283a 	ret

04001dd4 <__adddf3>:
 4001dd4:	02c00434 	movhi	r11,16
 4001dd8:	5affffc4 	addi	r11,r11,-1
 4001ddc:	2806d7fa 	srli	r3,r5,31
 4001de0:	2ad4703a 	and	r10,r5,r11
 4001de4:	3ad2703a 	and	r9,r7,r11
 4001de8:	3804d53a 	srli	r2,r7,20
 4001dec:	3018d77a 	srli	r12,r6,29
 4001df0:	280ad53a 	srli	r5,r5,20
 4001df4:	501490fa 	slli	r10,r10,3
 4001df8:	2010d77a 	srli	r8,r4,29
 4001dfc:	481290fa 	slli	r9,r9,3
 4001e00:	380ed7fa 	srli	r7,r7,31
 4001e04:	defffb04 	addi	sp,sp,-20
 4001e08:	dc800215 	stw	r18,8(sp)
 4001e0c:	dc400115 	stw	r17,4(sp)
 4001e10:	dc000015 	stw	r16,0(sp)
 4001e14:	dfc00415 	stw	ra,16(sp)
 4001e18:	dcc00315 	stw	r19,12(sp)
 4001e1c:	1c803fcc 	andi	r18,r3,255
 4001e20:	2c01ffcc 	andi	r16,r5,2047
 4001e24:	5210b03a 	or	r8,r10,r8
 4001e28:	202290fa 	slli	r17,r4,3
 4001e2c:	1081ffcc 	andi	r2,r2,2047
 4001e30:	4b12b03a 	or	r9,r9,r12
 4001e34:	300c90fa 	slli	r6,r6,3
 4001e38:	91c07526 	beq	r18,r7,4002010 <__adddf3+0x23c>
 4001e3c:	8087c83a 	sub	r3,r16,r2
 4001e40:	00c0ab0e 	bge	zero,r3,40020f0 <__adddf3+0x31c>
 4001e44:	10002a1e 	bne	r2,zero,4001ef0 <__adddf3+0x11c>
 4001e48:	4984b03a 	or	r2,r9,r6
 4001e4c:	1000961e 	bne	r2,zero,40020a8 <__adddf3+0x2d4>
 4001e50:	888001cc 	andi	r2,r17,7
 4001e54:	10000726 	beq	r2,zero,4001e74 <__adddf3+0xa0>
 4001e58:	888003cc 	andi	r2,r17,15
 4001e5c:	00c00104 	movi	r3,4
 4001e60:	10c00426 	beq	r2,r3,4001e74 <__adddf3+0xa0>
 4001e64:	88c7883a 	add	r3,r17,r3
 4001e68:	1c63803a 	cmpltu	r17,r3,r17
 4001e6c:	4451883a 	add	r8,r8,r17
 4001e70:	1823883a 	mov	r17,r3
 4001e74:	4080202c 	andhi	r2,r8,128
 4001e78:	10005926 	beq	r2,zero,4001fe0 <__adddf3+0x20c>
 4001e7c:	84000044 	addi	r16,r16,1
 4001e80:	0081ffc4 	movi	r2,2047
 4001e84:	8080ba26 	beq	r16,r2,4002170 <__adddf3+0x39c>
 4001e88:	00bfe034 	movhi	r2,65408
 4001e8c:	10bfffc4 	addi	r2,r2,-1
 4001e90:	4090703a 	and	r8,r8,r2
 4001e94:	4004977a 	slli	r2,r8,29
 4001e98:	4010927a 	slli	r8,r8,9
 4001e9c:	8822d0fa 	srli	r17,r17,3
 4001ea0:	8401ffcc 	andi	r16,r16,2047
 4001ea4:	4010d33a 	srli	r8,r8,12
 4001ea8:	9007883a 	mov	r3,r18
 4001eac:	1444b03a 	or	r2,r2,r17
 4001eb0:	8401ffcc 	andi	r16,r16,2047
 4001eb4:	8020953a 	slli	r16,r16,20
 4001eb8:	18c03fcc 	andi	r3,r3,255
 4001ebc:	01000434 	movhi	r4,16
 4001ec0:	213fffc4 	addi	r4,r4,-1
 4001ec4:	180697fa 	slli	r3,r3,31
 4001ec8:	4110703a 	and	r8,r8,r4
 4001ecc:	4410b03a 	or	r8,r8,r16
 4001ed0:	40c6b03a 	or	r3,r8,r3
 4001ed4:	dfc00417 	ldw	ra,16(sp)
 4001ed8:	dcc00317 	ldw	r19,12(sp)
 4001edc:	dc800217 	ldw	r18,8(sp)
 4001ee0:	dc400117 	ldw	r17,4(sp)
 4001ee4:	dc000017 	ldw	r16,0(sp)
 4001ee8:	dec00504 	addi	sp,sp,20
 4001eec:	f800283a 	ret
 4001ef0:	0081ffc4 	movi	r2,2047
 4001ef4:	80bfd626 	beq	r16,r2,4001e50 <__alt_data_end+0xfc001e50>
 4001ef8:	4a402034 	orhi	r9,r9,128
 4001efc:	00800e04 	movi	r2,56
 4001f00:	10c09f16 	blt	r2,r3,4002180 <__adddf3+0x3ac>
 4001f04:	008007c4 	movi	r2,31
 4001f08:	10c0c216 	blt	r2,r3,4002214 <__adddf3+0x440>
 4001f0c:	00800804 	movi	r2,32
 4001f10:	10c5c83a 	sub	r2,r2,r3
 4001f14:	488a983a 	sll	r5,r9,r2
 4001f18:	30c8d83a 	srl	r4,r6,r3
 4001f1c:	3084983a 	sll	r2,r6,r2
 4001f20:	48c6d83a 	srl	r3,r9,r3
 4001f24:	290cb03a 	or	r6,r5,r4
 4001f28:	1004c03a 	cmpne	r2,r2,zero
 4001f2c:	308cb03a 	or	r6,r6,r2
 4001f30:	898dc83a 	sub	r6,r17,r6
 4001f34:	89a3803a 	cmpltu	r17,r17,r6
 4001f38:	40d1c83a 	sub	r8,r8,r3
 4001f3c:	4451c83a 	sub	r8,r8,r17
 4001f40:	3023883a 	mov	r17,r6
 4001f44:	4080202c 	andhi	r2,r8,128
 4001f48:	10002326 	beq	r2,zero,4001fd8 <__adddf3+0x204>
 4001f4c:	04c02034 	movhi	r19,128
 4001f50:	9cffffc4 	addi	r19,r19,-1
 4001f54:	44e6703a 	and	r19,r8,r19
 4001f58:	98007626 	beq	r19,zero,4002134 <__adddf3+0x360>
 4001f5c:	9809883a 	mov	r4,r19
 4001f60:	400448c0 	call	400448c <__clzsi2>
 4001f64:	10fffe04 	addi	r3,r2,-8
 4001f68:	010007c4 	movi	r4,31
 4001f6c:	20c07716 	blt	r4,r3,400214c <__adddf3+0x378>
 4001f70:	00800804 	movi	r2,32
 4001f74:	10c5c83a 	sub	r2,r2,r3
 4001f78:	8884d83a 	srl	r2,r17,r2
 4001f7c:	98d0983a 	sll	r8,r19,r3
 4001f80:	88e2983a 	sll	r17,r17,r3
 4001f84:	1204b03a 	or	r2,r2,r8
 4001f88:	1c007416 	blt	r3,r16,400215c <__adddf3+0x388>
 4001f8c:	1c21c83a 	sub	r16,r3,r16
 4001f90:	82000044 	addi	r8,r16,1
 4001f94:	00c007c4 	movi	r3,31
 4001f98:	1a009116 	blt	r3,r8,40021e0 <__adddf3+0x40c>
 4001f9c:	00c00804 	movi	r3,32
 4001fa0:	1a07c83a 	sub	r3,r3,r8
 4001fa4:	8a08d83a 	srl	r4,r17,r8
 4001fa8:	88e2983a 	sll	r17,r17,r3
 4001fac:	10c6983a 	sll	r3,r2,r3
 4001fb0:	1210d83a 	srl	r8,r2,r8
 4001fb4:	8804c03a 	cmpne	r2,r17,zero
 4001fb8:	1906b03a 	or	r3,r3,r4
 4001fbc:	18a2b03a 	or	r17,r3,r2
 4001fc0:	0021883a 	mov	r16,zero
 4001fc4:	003fa206 	br	4001e50 <__alt_data_end+0xfc001e50>
 4001fc8:	1890b03a 	or	r8,r3,r2
 4001fcc:	40017d26 	beq	r8,zero,40025c4 <__adddf3+0x7f0>
 4001fd0:	1011883a 	mov	r8,r2
 4001fd4:	1823883a 	mov	r17,r3
 4001fd8:	888001cc 	andi	r2,r17,7
 4001fdc:	103f9e1e 	bne	r2,zero,4001e58 <__alt_data_end+0xfc001e58>
 4001fe0:	4004977a 	slli	r2,r8,29
 4001fe4:	8822d0fa 	srli	r17,r17,3
 4001fe8:	4010d0fa 	srli	r8,r8,3
 4001fec:	9007883a 	mov	r3,r18
 4001ff0:	1444b03a 	or	r2,r2,r17
 4001ff4:	0101ffc4 	movi	r4,2047
 4001ff8:	81002426 	beq	r16,r4,400208c <__adddf3+0x2b8>
 4001ffc:	8120703a 	and	r16,r16,r4
 4002000:	01000434 	movhi	r4,16
 4002004:	213fffc4 	addi	r4,r4,-1
 4002008:	4110703a 	and	r8,r8,r4
 400200c:	003fa806 	br	4001eb0 <__alt_data_end+0xfc001eb0>
 4002010:	8089c83a 	sub	r4,r16,r2
 4002014:	01005e0e 	bge	zero,r4,4002190 <__adddf3+0x3bc>
 4002018:	10002b26 	beq	r2,zero,40020c8 <__adddf3+0x2f4>
 400201c:	0081ffc4 	movi	r2,2047
 4002020:	80bf8b26 	beq	r16,r2,4001e50 <__alt_data_end+0xfc001e50>
 4002024:	4a402034 	orhi	r9,r9,128
 4002028:	00800e04 	movi	r2,56
 400202c:	1100a40e 	bge	r2,r4,40022c0 <__adddf3+0x4ec>
 4002030:	498cb03a 	or	r6,r9,r6
 4002034:	300ac03a 	cmpne	r5,r6,zero
 4002038:	0013883a 	mov	r9,zero
 400203c:	2c4b883a 	add	r5,r5,r17
 4002040:	2c63803a 	cmpltu	r17,r5,r17
 4002044:	4a11883a 	add	r8,r9,r8
 4002048:	8a11883a 	add	r8,r17,r8
 400204c:	2823883a 	mov	r17,r5
 4002050:	4080202c 	andhi	r2,r8,128
 4002054:	103fe026 	beq	r2,zero,4001fd8 <__alt_data_end+0xfc001fd8>
 4002058:	84000044 	addi	r16,r16,1
 400205c:	0081ffc4 	movi	r2,2047
 4002060:	8080d226 	beq	r16,r2,40023ac <__adddf3+0x5d8>
 4002064:	00bfe034 	movhi	r2,65408
 4002068:	10bfffc4 	addi	r2,r2,-1
 400206c:	4090703a 	and	r8,r8,r2
 4002070:	880ad07a 	srli	r5,r17,1
 4002074:	400897fa 	slli	r4,r8,31
 4002078:	88c0004c 	andi	r3,r17,1
 400207c:	28e2b03a 	or	r17,r5,r3
 4002080:	4010d07a 	srli	r8,r8,1
 4002084:	2462b03a 	or	r17,r4,r17
 4002088:	003f7106 	br	4001e50 <__alt_data_end+0xfc001e50>
 400208c:	4088b03a 	or	r4,r8,r2
 4002090:	20014526 	beq	r4,zero,40025a8 <__adddf3+0x7d4>
 4002094:	01000434 	movhi	r4,16
 4002098:	42000234 	orhi	r8,r8,8
 400209c:	213fffc4 	addi	r4,r4,-1
 40020a0:	4110703a 	and	r8,r8,r4
 40020a4:	003f8206 	br	4001eb0 <__alt_data_end+0xfc001eb0>
 40020a8:	18ffffc4 	addi	r3,r3,-1
 40020ac:	1800491e 	bne	r3,zero,40021d4 <__adddf3+0x400>
 40020b0:	898bc83a 	sub	r5,r17,r6
 40020b4:	8963803a 	cmpltu	r17,r17,r5
 40020b8:	4251c83a 	sub	r8,r8,r9
 40020bc:	4451c83a 	sub	r8,r8,r17
 40020c0:	2823883a 	mov	r17,r5
 40020c4:	003f9f06 	br	4001f44 <__alt_data_end+0xfc001f44>
 40020c8:	4984b03a 	or	r2,r9,r6
 40020cc:	103f6026 	beq	r2,zero,4001e50 <__alt_data_end+0xfc001e50>
 40020d0:	213fffc4 	addi	r4,r4,-1
 40020d4:	2000931e 	bne	r4,zero,4002324 <__adddf3+0x550>
 40020d8:	898d883a 	add	r6,r17,r6
 40020dc:	3463803a 	cmpltu	r17,r6,r17
 40020e0:	4251883a 	add	r8,r8,r9
 40020e4:	8a11883a 	add	r8,r17,r8
 40020e8:	3023883a 	mov	r17,r6
 40020ec:	003fd806 	br	4002050 <__alt_data_end+0xfc002050>
 40020f0:	1800541e 	bne	r3,zero,4002244 <__adddf3+0x470>
 40020f4:	80800044 	addi	r2,r16,1
 40020f8:	1081ffcc 	andi	r2,r2,2047
 40020fc:	00c00044 	movi	r3,1
 4002100:	1880a00e 	bge	r3,r2,4002384 <__adddf3+0x5b0>
 4002104:	8989c83a 	sub	r4,r17,r6
 4002108:	8905803a 	cmpltu	r2,r17,r4
 400210c:	4267c83a 	sub	r19,r8,r9
 4002110:	98a7c83a 	sub	r19,r19,r2
 4002114:	9880202c 	andhi	r2,r19,128
 4002118:	10006326 	beq	r2,zero,40022a8 <__adddf3+0x4d4>
 400211c:	3463c83a 	sub	r17,r6,r17
 4002120:	4a07c83a 	sub	r3,r9,r8
 4002124:	344d803a 	cmpltu	r6,r6,r17
 4002128:	19a7c83a 	sub	r19,r3,r6
 400212c:	3825883a 	mov	r18,r7
 4002130:	983f8a1e 	bne	r19,zero,4001f5c <__alt_data_end+0xfc001f5c>
 4002134:	8809883a 	mov	r4,r17
 4002138:	400448c0 	call	400448c <__clzsi2>
 400213c:	10800804 	addi	r2,r2,32
 4002140:	10fffe04 	addi	r3,r2,-8
 4002144:	010007c4 	movi	r4,31
 4002148:	20ff890e 	bge	r4,r3,4001f70 <__alt_data_end+0xfc001f70>
 400214c:	10bff604 	addi	r2,r2,-40
 4002150:	8884983a 	sll	r2,r17,r2
 4002154:	0023883a 	mov	r17,zero
 4002158:	1c3f8c0e 	bge	r3,r16,4001f8c <__alt_data_end+0xfc001f8c>
 400215c:	023fe034 	movhi	r8,65408
 4002160:	423fffc4 	addi	r8,r8,-1
 4002164:	80e1c83a 	sub	r16,r16,r3
 4002168:	1210703a 	and	r8,r2,r8
 400216c:	003f3806 	br	4001e50 <__alt_data_end+0xfc001e50>
 4002170:	9007883a 	mov	r3,r18
 4002174:	0011883a 	mov	r8,zero
 4002178:	0005883a 	mov	r2,zero
 400217c:	003f4c06 	br	4001eb0 <__alt_data_end+0xfc001eb0>
 4002180:	498cb03a 	or	r6,r9,r6
 4002184:	300cc03a 	cmpne	r6,r6,zero
 4002188:	0007883a 	mov	r3,zero
 400218c:	003f6806 	br	4001f30 <__alt_data_end+0xfc001f30>
 4002190:	20009c1e 	bne	r4,zero,4002404 <__adddf3+0x630>
 4002194:	80800044 	addi	r2,r16,1
 4002198:	1141ffcc 	andi	r5,r2,2047
 400219c:	01000044 	movi	r4,1
 40021a0:	2140670e 	bge	r4,r5,4002340 <__adddf3+0x56c>
 40021a4:	0101ffc4 	movi	r4,2047
 40021a8:	11007f26 	beq	r2,r4,40023a8 <__adddf3+0x5d4>
 40021ac:	898d883a 	add	r6,r17,r6
 40021b0:	4247883a 	add	r3,r8,r9
 40021b4:	3451803a 	cmpltu	r8,r6,r17
 40021b8:	40d1883a 	add	r8,r8,r3
 40021bc:	402297fa 	slli	r17,r8,31
 40021c0:	300cd07a 	srli	r6,r6,1
 40021c4:	4010d07a 	srli	r8,r8,1
 40021c8:	1021883a 	mov	r16,r2
 40021cc:	89a2b03a 	or	r17,r17,r6
 40021d0:	003f1f06 	br	4001e50 <__alt_data_end+0xfc001e50>
 40021d4:	0081ffc4 	movi	r2,2047
 40021d8:	80bf481e 	bne	r16,r2,4001efc <__alt_data_end+0xfc001efc>
 40021dc:	003f1c06 	br	4001e50 <__alt_data_end+0xfc001e50>
 40021e0:	843ff844 	addi	r16,r16,-31
 40021e4:	01000804 	movi	r4,32
 40021e8:	1406d83a 	srl	r3,r2,r16
 40021ec:	41005026 	beq	r8,r4,4002330 <__adddf3+0x55c>
 40021f0:	01001004 	movi	r4,64
 40021f4:	2211c83a 	sub	r8,r4,r8
 40021f8:	1204983a 	sll	r2,r2,r8
 40021fc:	88a2b03a 	or	r17,r17,r2
 4002200:	8822c03a 	cmpne	r17,r17,zero
 4002204:	1c62b03a 	or	r17,r3,r17
 4002208:	0011883a 	mov	r8,zero
 400220c:	0021883a 	mov	r16,zero
 4002210:	003f7106 	br	4001fd8 <__alt_data_end+0xfc001fd8>
 4002214:	193ff804 	addi	r4,r3,-32
 4002218:	00800804 	movi	r2,32
 400221c:	4908d83a 	srl	r4,r9,r4
 4002220:	18804526 	beq	r3,r2,4002338 <__adddf3+0x564>
 4002224:	00801004 	movi	r2,64
 4002228:	10c5c83a 	sub	r2,r2,r3
 400222c:	4886983a 	sll	r3,r9,r2
 4002230:	198cb03a 	or	r6,r3,r6
 4002234:	300cc03a 	cmpne	r6,r6,zero
 4002238:	218cb03a 	or	r6,r4,r6
 400223c:	0007883a 	mov	r3,zero
 4002240:	003f3b06 	br	4001f30 <__alt_data_end+0xfc001f30>
 4002244:	80002a26 	beq	r16,zero,40022f0 <__adddf3+0x51c>
 4002248:	0101ffc4 	movi	r4,2047
 400224c:	11006826 	beq	r2,r4,40023f0 <__adddf3+0x61c>
 4002250:	00c7c83a 	sub	r3,zero,r3
 4002254:	42002034 	orhi	r8,r8,128
 4002258:	01000e04 	movi	r4,56
 400225c:	20c07c16 	blt	r4,r3,4002450 <__adddf3+0x67c>
 4002260:	010007c4 	movi	r4,31
 4002264:	20c0da16 	blt	r4,r3,40025d0 <__adddf3+0x7fc>
 4002268:	01000804 	movi	r4,32
 400226c:	20c9c83a 	sub	r4,r4,r3
 4002270:	4114983a 	sll	r10,r8,r4
 4002274:	88cad83a 	srl	r5,r17,r3
 4002278:	8908983a 	sll	r4,r17,r4
 400227c:	40c6d83a 	srl	r3,r8,r3
 4002280:	5162b03a 	or	r17,r10,r5
 4002284:	2008c03a 	cmpne	r4,r4,zero
 4002288:	8922b03a 	or	r17,r17,r4
 400228c:	3463c83a 	sub	r17,r6,r17
 4002290:	48c7c83a 	sub	r3,r9,r3
 4002294:	344d803a 	cmpltu	r6,r6,r17
 4002298:	1991c83a 	sub	r8,r3,r6
 400229c:	1021883a 	mov	r16,r2
 40022a0:	3825883a 	mov	r18,r7
 40022a4:	003f2706 	br	4001f44 <__alt_data_end+0xfc001f44>
 40022a8:	24d0b03a 	or	r8,r4,r19
 40022ac:	40001b1e 	bne	r8,zero,400231c <__adddf3+0x548>
 40022b0:	0005883a 	mov	r2,zero
 40022b4:	0007883a 	mov	r3,zero
 40022b8:	0021883a 	mov	r16,zero
 40022bc:	003f4d06 	br	4001ff4 <__alt_data_end+0xfc001ff4>
 40022c0:	008007c4 	movi	r2,31
 40022c4:	11003c16 	blt	r2,r4,40023b8 <__adddf3+0x5e4>
 40022c8:	00800804 	movi	r2,32
 40022cc:	1105c83a 	sub	r2,r2,r4
 40022d0:	488e983a 	sll	r7,r9,r2
 40022d4:	310ad83a 	srl	r5,r6,r4
 40022d8:	3084983a 	sll	r2,r6,r2
 40022dc:	4912d83a 	srl	r9,r9,r4
 40022e0:	394ab03a 	or	r5,r7,r5
 40022e4:	1004c03a 	cmpne	r2,r2,zero
 40022e8:	288ab03a 	or	r5,r5,r2
 40022ec:	003f5306 	br	400203c <__alt_data_end+0xfc00203c>
 40022f0:	4448b03a 	or	r4,r8,r17
 40022f4:	20003e26 	beq	r4,zero,40023f0 <__adddf3+0x61c>
 40022f8:	00c6303a 	nor	r3,zero,r3
 40022fc:	18003a1e 	bne	r3,zero,40023e8 <__adddf3+0x614>
 4002300:	3463c83a 	sub	r17,r6,r17
 4002304:	4a07c83a 	sub	r3,r9,r8
 4002308:	344d803a 	cmpltu	r6,r6,r17
 400230c:	1991c83a 	sub	r8,r3,r6
 4002310:	1021883a 	mov	r16,r2
 4002314:	3825883a 	mov	r18,r7
 4002318:	003f0a06 	br	4001f44 <__alt_data_end+0xfc001f44>
 400231c:	2023883a 	mov	r17,r4
 4002320:	003f0d06 	br	4001f58 <__alt_data_end+0xfc001f58>
 4002324:	0081ffc4 	movi	r2,2047
 4002328:	80bf3f1e 	bne	r16,r2,4002028 <__alt_data_end+0xfc002028>
 400232c:	003ec806 	br	4001e50 <__alt_data_end+0xfc001e50>
 4002330:	0005883a 	mov	r2,zero
 4002334:	003fb106 	br	40021fc <__alt_data_end+0xfc0021fc>
 4002338:	0007883a 	mov	r3,zero
 400233c:	003fbc06 	br	4002230 <__alt_data_end+0xfc002230>
 4002340:	4444b03a 	or	r2,r8,r17
 4002344:	8000871e 	bne	r16,zero,4002564 <__adddf3+0x790>
 4002348:	1000ba26 	beq	r2,zero,4002634 <__adddf3+0x860>
 400234c:	4984b03a 	or	r2,r9,r6
 4002350:	103ebf26 	beq	r2,zero,4001e50 <__alt_data_end+0xfc001e50>
 4002354:	8985883a 	add	r2,r17,r6
 4002358:	4247883a 	add	r3,r8,r9
 400235c:	1451803a 	cmpltu	r8,r2,r17
 4002360:	40d1883a 	add	r8,r8,r3
 4002364:	40c0202c 	andhi	r3,r8,128
 4002368:	1023883a 	mov	r17,r2
 400236c:	183f1a26 	beq	r3,zero,4001fd8 <__alt_data_end+0xfc001fd8>
 4002370:	00bfe034 	movhi	r2,65408
 4002374:	10bfffc4 	addi	r2,r2,-1
 4002378:	2021883a 	mov	r16,r4
 400237c:	4090703a 	and	r8,r8,r2
 4002380:	003eb306 	br	4001e50 <__alt_data_end+0xfc001e50>
 4002384:	4444b03a 	or	r2,r8,r17
 4002388:	8000291e 	bne	r16,zero,4002430 <__adddf3+0x65c>
 400238c:	10004b1e 	bne	r2,zero,40024bc <__adddf3+0x6e8>
 4002390:	4990b03a 	or	r8,r9,r6
 4002394:	40008b26 	beq	r8,zero,40025c4 <__adddf3+0x7f0>
 4002398:	4811883a 	mov	r8,r9
 400239c:	3023883a 	mov	r17,r6
 40023a0:	3825883a 	mov	r18,r7
 40023a4:	003eaa06 	br	4001e50 <__alt_data_end+0xfc001e50>
 40023a8:	1021883a 	mov	r16,r2
 40023ac:	0011883a 	mov	r8,zero
 40023b0:	0005883a 	mov	r2,zero
 40023b4:	003f0f06 	br	4001ff4 <__alt_data_end+0xfc001ff4>
 40023b8:	217ff804 	addi	r5,r4,-32
 40023bc:	00800804 	movi	r2,32
 40023c0:	494ad83a 	srl	r5,r9,r5
 40023c4:	20807d26 	beq	r4,r2,40025bc <__adddf3+0x7e8>
 40023c8:	00801004 	movi	r2,64
 40023cc:	1109c83a 	sub	r4,r2,r4
 40023d0:	4912983a 	sll	r9,r9,r4
 40023d4:	498cb03a 	or	r6,r9,r6
 40023d8:	300cc03a 	cmpne	r6,r6,zero
 40023dc:	298ab03a 	or	r5,r5,r6
 40023e0:	0013883a 	mov	r9,zero
 40023e4:	003f1506 	br	400203c <__alt_data_end+0xfc00203c>
 40023e8:	0101ffc4 	movi	r4,2047
 40023ec:	113f9a1e 	bne	r2,r4,4002258 <__alt_data_end+0xfc002258>
 40023f0:	4811883a 	mov	r8,r9
 40023f4:	3023883a 	mov	r17,r6
 40023f8:	1021883a 	mov	r16,r2
 40023fc:	3825883a 	mov	r18,r7
 4002400:	003e9306 	br	4001e50 <__alt_data_end+0xfc001e50>
 4002404:	8000161e 	bne	r16,zero,4002460 <__adddf3+0x68c>
 4002408:	444ab03a 	or	r5,r8,r17
 400240c:	28005126 	beq	r5,zero,4002554 <__adddf3+0x780>
 4002410:	0108303a 	nor	r4,zero,r4
 4002414:	20004d1e 	bne	r4,zero,400254c <__adddf3+0x778>
 4002418:	89a3883a 	add	r17,r17,r6
 400241c:	4253883a 	add	r9,r8,r9
 4002420:	898d803a 	cmpltu	r6,r17,r6
 4002424:	3251883a 	add	r8,r6,r9
 4002428:	1021883a 	mov	r16,r2
 400242c:	003f0806 	br	4002050 <__alt_data_end+0xfc002050>
 4002430:	1000301e 	bne	r2,zero,40024f4 <__adddf3+0x720>
 4002434:	4984b03a 	or	r2,r9,r6
 4002438:	10007126 	beq	r2,zero,4002600 <__adddf3+0x82c>
 400243c:	4811883a 	mov	r8,r9
 4002440:	3023883a 	mov	r17,r6
 4002444:	3825883a 	mov	r18,r7
 4002448:	0401ffc4 	movi	r16,2047
 400244c:	003e8006 	br	4001e50 <__alt_data_end+0xfc001e50>
 4002450:	4462b03a 	or	r17,r8,r17
 4002454:	8822c03a 	cmpne	r17,r17,zero
 4002458:	0007883a 	mov	r3,zero
 400245c:	003f8b06 	br	400228c <__alt_data_end+0xfc00228c>
 4002460:	0141ffc4 	movi	r5,2047
 4002464:	11403b26 	beq	r2,r5,4002554 <__adddf3+0x780>
 4002468:	0109c83a 	sub	r4,zero,r4
 400246c:	42002034 	orhi	r8,r8,128
 4002470:	01400e04 	movi	r5,56
 4002474:	29006716 	blt	r5,r4,4002614 <__adddf3+0x840>
 4002478:	014007c4 	movi	r5,31
 400247c:	29007016 	blt	r5,r4,4002640 <__adddf3+0x86c>
 4002480:	01400804 	movi	r5,32
 4002484:	290bc83a 	sub	r5,r5,r4
 4002488:	4154983a 	sll	r10,r8,r5
 400248c:	890ed83a 	srl	r7,r17,r4
 4002490:	894a983a 	sll	r5,r17,r5
 4002494:	4108d83a 	srl	r4,r8,r4
 4002498:	51e2b03a 	or	r17,r10,r7
 400249c:	280ac03a 	cmpne	r5,r5,zero
 40024a0:	8962b03a 	or	r17,r17,r5
 40024a4:	89a3883a 	add	r17,r17,r6
 40024a8:	2253883a 	add	r9,r4,r9
 40024ac:	898d803a 	cmpltu	r6,r17,r6
 40024b0:	3251883a 	add	r8,r6,r9
 40024b4:	1021883a 	mov	r16,r2
 40024b8:	003ee506 	br	4002050 <__alt_data_end+0xfc002050>
 40024bc:	4984b03a 	or	r2,r9,r6
 40024c0:	103e6326 	beq	r2,zero,4001e50 <__alt_data_end+0xfc001e50>
 40024c4:	8987c83a 	sub	r3,r17,r6
 40024c8:	88c9803a 	cmpltu	r4,r17,r3
 40024cc:	4245c83a 	sub	r2,r8,r9
 40024d0:	1105c83a 	sub	r2,r2,r4
 40024d4:	1100202c 	andhi	r4,r2,128
 40024d8:	203ebb26 	beq	r4,zero,4001fc8 <__alt_data_end+0xfc001fc8>
 40024dc:	3463c83a 	sub	r17,r6,r17
 40024e0:	4a07c83a 	sub	r3,r9,r8
 40024e4:	344d803a 	cmpltu	r6,r6,r17
 40024e8:	1991c83a 	sub	r8,r3,r6
 40024ec:	3825883a 	mov	r18,r7
 40024f0:	003e5706 	br	4001e50 <__alt_data_end+0xfc001e50>
 40024f4:	4984b03a 	or	r2,r9,r6
 40024f8:	10002e26 	beq	r2,zero,40025b4 <__adddf3+0x7e0>
 40024fc:	4004d0fa 	srli	r2,r8,3
 4002500:	8822d0fa 	srli	r17,r17,3
 4002504:	4010977a 	slli	r8,r8,29
 4002508:	10c0022c 	andhi	r3,r2,8
 400250c:	4462b03a 	or	r17,r8,r17
 4002510:	18000826 	beq	r3,zero,4002534 <__adddf3+0x760>
 4002514:	4808d0fa 	srli	r4,r9,3
 4002518:	20c0022c 	andhi	r3,r4,8
 400251c:	1800051e 	bne	r3,zero,4002534 <__adddf3+0x760>
 4002520:	300cd0fa 	srli	r6,r6,3
 4002524:	4806977a 	slli	r3,r9,29
 4002528:	2005883a 	mov	r2,r4
 400252c:	3825883a 	mov	r18,r7
 4002530:	19a2b03a 	or	r17,r3,r6
 4002534:	8810d77a 	srli	r8,r17,29
 4002538:	100490fa 	slli	r2,r2,3
 400253c:	882290fa 	slli	r17,r17,3
 4002540:	0401ffc4 	movi	r16,2047
 4002544:	4090b03a 	or	r8,r8,r2
 4002548:	003e4106 	br	4001e50 <__alt_data_end+0xfc001e50>
 400254c:	0141ffc4 	movi	r5,2047
 4002550:	117fc71e 	bne	r2,r5,4002470 <__alt_data_end+0xfc002470>
 4002554:	4811883a 	mov	r8,r9
 4002558:	3023883a 	mov	r17,r6
 400255c:	1021883a 	mov	r16,r2
 4002560:	003e3b06 	br	4001e50 <__alt_data_end+0xfc001e50>
 4002564:	10002f26 	beq	r2,zero,4002624 <__adddf3+0x850>
 4002568:	4984b03a 	or	r2,r9,r6
 400256c:	10001126 	beq	r2,zero,40025b4 <__adddf3+0x7e0>
 4002570:	4004d0fa 	srli	r2,r8,3
 4002574:	8822d0fa 	srli	r17,r17,3
 4002578:	4010977a 	slli	r8,r8,29
 400257c:	10c0022c 	andhi	r3,r2,8
 4002580:	4462b03a 	or	r17,r8,r17
 4002584:	183feb26 	beq	r3,zero,4002534 <__alt_data_end+0xfc002534>
 4002588:	4808d0fa 	srli	r4,r9,3
 400258c:	20c0022c 	andhi	r3,r4,8
 4002590:	183fe81e 	bne	r3,zero,4002534 <__alt_data_end+0xfc002534>
 4002594:	300cd0fa 	srli	r6,r6,3
 4002598:	4806977a 	slli	r3,r9,29
 400259c:	2005883a 	mov	r2,r4
 40025a0:	19a2b03a 	or	r17,r3,r6
 40025a4:	003fe306 	br	4002534 <__alt_data_end+0xfc002534>
 40025a8:	0011883a 	mov	r8,zero
 40025ac:	0005883a 	mov	r2,zero
 40025b0:	003e3f06 	br	4001eb0 <__alt_data_end+0xfc001eb0>
 40025b4:	0401ffc4 	movi	r16,2047
 40025b8:	003e2506 	br	4001e50 <__alt_data_end+0xfc001e50>
 40025bc:	0013883a 	mov	r9,zero
 40025c0:	003f8406 	br	40023d4 <__alt_data_end+0xfc0023d4>
 40025c4:	0005883a 	mov	r2,zero
 40025c8:	0007883a 	mov	r3,zero
 40025cc:	003e8906 	br	4001ff4 <__alt_data_end+0xfc001ff4>
 40025d0:	197ff804 	addi	r5,r3,-32
 40025d4:	01000804 	movi	r4,32
 40025d8:	414ad83a 	srl	r5,r8,r5
 40025dc:	19002426 	beq	r3,r4,4002670 <__adddf3+0x89c>
 40025e0:	01001004 	movi	r4,64
 40025e4:	20c7c83a 	sub	r3,r4,r3
 40025e8:	40c6983a 	sll	r3,r8,r3
 40025ec:	1c46b03a 	or	r3,r3,r17
 40025f0:	1806c03a 	cmpne	r3,r3,zero
 40025f4:	28e2b03a 	or	r17,r5,r3
 40025f8:	0007883a 	mov	r3,zero
 40025fc:	003f2306 	br	400228c <__alt_data_end+0xfc00228c>
 4002600:	0007883a 	mov	r3,zero
 4002604:	5811883a 	mov	r8,r11
 4002608:	00bfffc4 	movi	r2,-1
 400260c:	0401ffc4 	movi	r16,2047
 4002610:	003e7806 	br	4001ff4 <__alt_data_end+0xfc001ff4>
 4002614:	4462b03a 	or	r17,r8,r17
 4002618:	8822c03a 	cmpne	r17,r17,zero
 400261c:	0009883a 	mov	r4,zero
 4002620:	003fa006 	br	40024a4 <__alt_data_end+0xfc0024a4>
 4002624:	4811883a 	mov	r8,r9
 4002628:	3023883a 	mov	r17,r6
 400262c:	0401ffc4 	movi	r16,2047
 4002630:	003e0706 	br	4001e50 <__alt_data_end+0xfc001e50>
 4002634:	4811883a 	mov	r8,r9
 4002638:	3023883a 	mov	r17,r6
 400263c:	003e0406 	br	4001e50 <__alt_data_end+0xfc001e50>
 4002640:	21fff804 	addi	r7,r4,-32
 4002644:	01400804 	movi	r5,32
 4002648:	41ced83a 	srl	r7,r8,r7
 400264c:	21400a26 	beq	r4,r5,4002678 <__adddf3+0x8a4>
 4002650:	01401004 	movi	r5,64
 4002654:	2909c83a 	sub	r4,r5,r4
 4002658:	4108983a 	sll	r4,r8,r4
 400265c:	2448b03a 	or	r4,r4,r17
 4002660:	2008c03a 	cmpne	r4,r4,zero
 4002664:	3922b03a 	or	r17,r7,r4
 4002668:	0009883a 	mov	r4,zero
 400266c:	003f8d06 	br	40024a4 <__alt_data_end+0xfc0024a4>
 4002670:	0007883a 	mov	r3,zero
 4002674:	003fdd06 	br	40025ec <__alt_data_end+0xfc0025ec>
 4002678:	0009883a 	mov	r4,zero
 400267c:	003ff706 	br	400265c <__alt_data_end+0xfc00265c>

04002680 <__divdf3>:
 4002680:	defff204 	addi	sp,sp,-56
 4002684:	dd400915 	stw	r21,36(sp)
 4002688:	282ad53a 	srli	r21,r5,20
 400268c:	dd000815 	stw	r20,32(sp)
 4002690:	2828d7fa 	srli	r20,r5,31
 4002694:	dc000415 	stw	r16,16(sp)
 4002698:	04000434 	movhi	r16,16
 400269c:	df000c15 	stw	fp,48(sp)
 40026a0:	843fffc4 	addi	r16,r16,-1
 40026a4:	dfc00d15 	stw	ra,52(sp)
 40026a8:	ddc00b15 	stw	r23,44(sp)
 40026ac:	dd800a15 	stw	r22,40(sp)
 40026b0:	dcc00715 	stw	r19,28(sp)
 40026b4:	dc800615 	stw	r18,24(sp)
 40026b8:	dc400515 	stw	r17,20(sp)
 40026bc:	ad41ffcc 	andi	r21,r21,2047
 40026c0:	2c20703a 	and	r16,r5,r16
 40026c4:	a7003fcc 	andi	fp,r20,255
 40026c8:	a8006126 	beq	r21,zero,4002850 <__divdf3+0x1d0>
 40026cc:	0081ffc4 	movi	r2,2047
 40026d0:	2025883a 	mov	r18,r4
 40026d4:	a8803726 	beq	r21,r2,40027b4 <__divdf3+0x134>
 40026d8:	80800434 	orhi	r2,r16,16
 40026dc:	100490fa 	slli	r2,r2,3
 40026e0:	2020d77a 	srli	r16,r4,29
 40026e4:	202490fa 	slli	r18,r4,3
 40026e8:	ad7f0044 	addi	r21,r21,-1023
 40026ec:	80a0b03a 	or	r16,r16,r2
 40026f0:	0027883a 	mov	r19,zero
 40026f4:	0013883a 	mov	r9,zero
 40026f8:	3804d53a 	srli	r2,r7,20
 40026fc:	382cd7fa 	srli	r22,r7,31
 4002700:	04400434 	movhi	r17,16
 4002704:	8c7fffc4 	addi	r17,r17,-1
 4002708:	1081ffcc 	andi	r2,r2,2047
 400270c:	3011883a 	mov	r8,r6
 4002710:	3c62703a 	and	r17,r7,r17
 4002714:	b5c03fcc 	andi	r23,r22,255
 4002718:	10006c26 	beq	r2,zero,40028cc <__divdf3+0x24c>
 400271c:	00c1ffc4 	movi	r3,2047
 4002720:	10c06426 	beq	r2,r3,40028b4 <__divdf3+0x234>
 4002724:	88c00434 	orhi	r3,r17,16
 4002728:	180690fa 	slli	r3,r3,3
 400272c:	3022d77a 	srli	r17,r6,29
 4002730:	301090fa 	slli	r8,r6,3
 4002734:	10bf0044 	addi	r2,r2,-1023
 4002738:	88e2b03a 	or	r17,r17,r3
 400273c:	000f883a 	mov	r7,zero
 4002740:	a58cf03a 	xor	r6,r20,r22
 4002744:	3cc8b03a 	or	r4,r7,r19
 4002748:	a8abc83a 	sub	r21,r21,r2
 400274c:	008003c4 	movi	r2,15
 4002750:	3007883a 	mov	r3,r6
 4002754:	34c03fcc 	andi	r19,r6,255
 4002758:	11009036 	bltu	r2,r4,400299c <__divdf3+0x31c>
 400275c:	200890ba 	slli	r4,r4,2
 4002760:	00810034 	movhi	r2,1024
 4002764:	1089dd04 	addi	r2,r2,10100
 4002768:	2089883a 	add	r4,r4,r2
 400276c:	20800017 	ldw	r2,0(r4)
 4002770:	1000683a 	jmp	r2
 4002774:	0400299c 	xori	r16,zero,166
 4002778:	040027ec 	andhi	r16,zero,159
 400277c:	0400298c 	andi	r16,zero,166
 4002780:	040027e0 	cmpeqi	r16,zero,159
 4002784:	0400298c 	andi	r16,zero,166
 4002788:	04002960 	cmpeqi	r16,zero,165
 400278c:	0400298c 	andi	r16,zero,166
 4002790:	040027e0 	cmpeqi	r16,zero,159
 4002794:	040027ec 	andhi	r16,zero,159
 4002798:	040027ec 	andhi	r16,zero,159
 400279c:	04002960 	cmpeqi	r16,zero,165
 40027a0:	040027e0 	cmpeqi	r16,zero,159
 40027a4:	040027d0 	cmplti	r16,zero,159
 40027a8:	040027d0 	cmplti	r16,zero,159
 40027ac:	040027d0 	cmplti	r16,zero,159
 40027b0:	04002c80 	call	4002c8 <__reset-0x3bffd38>
 40027b4:	2404b03a 	or	r2,r4,r16
 40027b8:	1000661e 	bne	r2,zero,4002954 <__divdf3+0x2d4>
 40027bc:	04c00204 	movi	r19,8
 40027c0:	0021883a 	mov	r16,zero
 40027c4:	0025883a 	mov	r18,zero
 40027c8:	02400084 	movi	r9,2
 40027cc:	003fca06 	br	40026f8 <__alt_data_end+0xfc0026f8>
 40027d0:	8023883a 	mov	r17,r16
 40027d4:	9011883a 	mov	r8,r18
 40027d8:	e02f883a 	mov	r23,fp
 40027dc:	480f883a 	mov	r7,r9
 40027e0:	00800084 	movi	r2,2
 40027e4:	3881311e 	bne	r7,r2,4002cac <__divdf3+0x62c>
 40027e8:	b827883a 	mov	r19,r23
 40027ec:	98c0004c 	andi	r3,r19,1
 40027f0:	0081ffc4 	movi	r2,2047
 40027f4:	000b883a 	mov	r5,zero
 40027f8:	0025883a 	mov	r18,zero
 40027fc:	1004953a 	slli	r2,r2,20
 4002800:	18c03fcc 	andi	r3,r3,255
 4002804:	04400434 	movhi	r17,16
 4002808:	8c7fffc4 	addi	r17,r17,-1
 400280c:	180697fa 	slli	r3,r3,31
 4002810:	2c4a703a 	and	r5,r5,r17
 4002814:	288ab03a 	or	r5,r5,r2
 4002818:	28c6b03a 	or	r3,r5,r3
 400281c:	9005883a 	mov	r2,r18
 4002820:	dfc00d17 	ldw	ra,52(sp)
 4002824:	df000c17 	ldw	fp,48(sp)
 4002828:	ddc00b17 	ldw	r23,44(sp)
 400282c:	dd800a17 	ldw	r22,40(sp)
 4002830:	dd400917 	ldw	r21,36(sp)
 4002834:	dd000817 	ldw	r20,32(sp)
 4002838:	dcc00717 	ldw	r19,28(sp)
 400283c:	dc800617 	ldw	r18,24(sp)
 4002840:	dc400517 	ldw	r17,20(sp)
 4002844:	dc000417 	ldw	r16,16(sp)
 4002848:	dec00e04 	addi	sp,sp,56
 400284c:	f800283a 	ret
 4002850:	2404b03a 	or	r2,r4,r16
 4002854:	2027883a 	mov	r19,r4
 4002858:	10003926 	beq	r2,zero,4002940 <__divdf3+0x2c0>
 400285c:	80012e26 	beq	r16,zero,4002d18 <__divdf3+0x698>
 4002860:	8009883a 	mov	r4,r16
 4002864:	d9800315 	stw	r6,12(sp)
 4002868:	d9c00215 	stw	r7,8(sp)
 400286c:	400448c0 	call	400448c <__clzsi2>
 4002870:	d9800317 	ldw	r6,12(sp)
 4002874:	d9c00217 	ldw	r7,8(sp)
 4002878:	113ffd44 	addi	r4,r2,-11
 400287c:	00c00704 	movi	r3,28
 4002880:	19012116 	blt	r3,r4,4002d08 <__divdf3+0x688>
 4002884:	00c00744 	movi	r3,29
 4002888:	147ffe04 	addi	r17,r2,-8
 400288c:	1907c83a 	sub	r3,r3,r4
 4002890:	8460983a 	sll	r16,r16,r17
 4002894:	98c6d83a 	srl	r3,r19,r3
 4002898:	9c64983a 	sll	r18,r19,r17
 400289c:	1c20b03a 	or	r16,r3,r16
 40028a0:	1080fcc4 	addi	r2,r2,1011
 40028a4:	00abc83a 	sub	r21,zero,r2
 40028a8:	0027883a 	mov	r19,zero
 40028ac:	0013883a 	mov	r9,zero
 40028b0:	003f9106 	br	40026f8 <__alt_data_end+0xfc0026f8>
 40028b4:	3446b03a 	or	r3,r6,r17
 40028b8:	18001f1e 	bne	r3,zero,4002938 <__divdf3+0x2b8>
 40028bc:	0023883a 	mov	r17,zero
 40028c0:	0011883a 	mov	r8,zero
 40028c4:	01c00084 	movi	r7,2
 40028c8:	003f9d06 	br	4002740 <__alt_data_end+0xfc002740>
 40028cc:	3446b03a 	or	r3,r6,r17
 40028d0:	18001526 	beq	r3,zero,4002928 <__divdf3+0x2a8>
 40028d4:	88011b26 	beq	r17,zero,4002d44 <__divdf3+0x6c4>
 40028d8:	8809883a 	mov	r4,r17
 40028dc:	d9800315 	stw	r6,12(sp)
 40028e0:	da400115 	stw	r9,4(sp)
 40028e4:	400448c0 	call	400448c <__clzsi2>
 40028e8:	d9800317 	ldw	r6,12(sp)
 40028ec:	da400117 	ldw	r9,4(sp)
 40028f0:	113ffd44 	addi	r4,r2,-11
 40028f4:	00c00704 	movi	r3,28
 40028f8:	19010e16 	blt	r3,r4,4002d34 <__divdf3+0x6b4>
 40028fc:	00c00744 	movi	r3,29
 4002900:	123ffe04 	addi	r8,r2,-8
 4002904:	1907c83a 	sub	r3,r3,r4
 4002908:	8a22983a 	sll	r17,r17,r8
 400290c:	30c6d83a 	srl	r3,r6,r3
 4002910:	3210983a 	sll	r8,r6,r8
 4002914:	1c62b03a 	or	r17,r3,r17
 4002918:	1080fcc4 	addi	r2,r2,1011
 400291c:	0085c83a 	sub	r2,zero,r2
 4002920:	000f883a 	mov	r7,zero
 4002924:	003f8606 	br	4002740 <__alt_data_end+0xfc002740>
 4002928:	0023883a 	mov	r17,zero
 400292c:	0011883a 	mov	r8,zero
 4002930:	01c00044 	movi	r7,1
 4002934:	003f8206 	br	4002740 <__alt_data_end+0xfc002740>
 4002938:	01c000c4 	movi	r7,3
 400293c:	003f8006 	br	4002740 <__alt_data_end+0xfc002740>
 4002940:	04c00104 	movi	r19,4
 4002944:	0021883a 	mov	r16,zero
 4002948:	0025883a 	mov	r18,zero
 400294c:	02400044 	movi	r9,1
 4002950:	003f6906 	br	40026f8 <__alt_data_end+0xfc0026f8>
 4002954:	04c00304 	movi	r19,12
 4002958:	024000c4 	movi	r9,3
 400295c:	003f6606 	br	40026f8 <__alt_data_end+0xfc0026f8>
 4002960:	01400434 	movhi	r5,16
 4002964:	0007883a 	mov	r3,zero
 4002968:	297fffc4 	addi	r5,r5,-1
 400296c:	04bfffc4 	movi	r18,-1
 4002970:	0081ffc4 	movi	r2,2047
 4002974:	003fa106 	br	40027fc <__alt_data_end+0xfc0027fc>
 4002978:	00c00044 	movi	r3,1
 400297c:	1887c83a 	sub	r3,r3,r2
 4002980:	01000e04 	movi	r4,56
 4002984:	20c1210e 	bge	r4,r3,4002e0c <__divdf3+0x78c>
 4002988:	98c0004c 	andi	r3,r19,1
 400298c:	0005883a 	mov	r2,zero
 4002990:	000b883a 	mov	r5,zero
 4002994:	0025883a 	mov	r18,zero
 4002998:	003f9806 	br	40027fc <__alt_data_end+0xfc0027fc>
 400299c:	8c00fd36 	bltu	r17,r16,4002d94 <__divdf3+0x714>
 40029a0:	8440fb26 	beq	r16,r17,4002d90 <__divdf3+0x710>
 40029a4:	8007883a 	mov	r3,r16
 40029a8:	ad7fffc4 	addi	r21,r21,-1
 40029ac:	0021883a 	mov	r16,zero
 40029b0:	4004d63a 	srli	r2,r8,24
 40029b4:	8822923a 	slli	r17,r17,8
 40029b8:	1809883a 	mov	r4,r3
 40029bc:	402c923a 	slli	r22,r8,8
 40029c0:	88b8b03a 	or	fp,r17,r2
 40029c4:	e028d43a 	srli	r20,fp,16
 40029c8:	d8c00015 	stw	r3,0(sp)
 40029cc:	e5ffffcc 	andi	r23,fp,65535
 40029d0:	a00b883a 	mov	r5,r20
 40029d4:	40045e80 	call	40045e8 <__udivsi3>
 40029d8:	d8c00017 	ldw	r3,0(sp)
 40029dc:	a00b883a 	mov	r5,r20
 40029e0:	d8800315 	stw	r2,12(sp)
 40029e4:	1809883a 	mov	r4,r3
 40029e8:	400464c0 	call	400464c <__umodsi3>
 40029ec:	d9800317 	ldw	r6,12(sp)
 40029f0:	1006943a 	slli	r3,r2,16
 40029f4:	9004d43a 	srli	r2,r18,16
 40029f8:	b9a3383a 	mul	r17,r23,r6
 40029fc:	10c4b03a 	or	r2,r2,r3
 4002a00:	1440062e 	bgeu	r2,r17,4002a1c <__divdf3+0x39c>
 4002a04:	1705883a 	add	r2,r2,fp
 4002a08:	30ffffc4 	addi	r3,r6,-1
 4002a0c:	1700ee36 	bltu	r2,fp,4002dc8 <__divdf3+0x748>
 4002a10:	1440ed2e 	bgeu	r2,r17,4002dc8 <__divdf3+0x748>
 4002a14:	31bfff84 	addi	r6,r6,-2
 4002a18:	1705883a 	add	r2,r2,fp
 4002a1c:	1463c83a 	sub	r17,r2,r17
 4002a20:	a00b883a 	mov	r5,r20
 4002a24:	8809883a 	mov	r4,r17
 4002a28:	d9800315 	stw	r6,12(sp)
 4002a2c:	40045e80 	call	40045e8 <__udivsi3>
 4002a30:	a00b883a 	mov	r5,r20
 4002a34:	8809883a 	mov	r4,r17
 4002a38:	d8800215 	stw	r2,8(sp)
 4002a3c:	400464c0 	call	400464c <__umodsi3>
 4002a40:	d9c00217 	ldw	r7,8(sp)
 4002a44:	1004943a 	slli	r2,r2,16
 4002a48:	94bfffcc 	andi	r18,r18,65535
 4002a4c:	b9d1383a 	mul	r8,r23,r7
 4002a50:	90a4b03a 	or	r18,r18,r2
 4002a54:	d9800317 	ldw	r6,12(sp)
 4002a58:	9200062e 	bgeu	r18,r8,4002a74 <__divdf3+0x3f4>
 4002a5c:	9725883a 	add	r18,r18,fp
 4002a60:	38bfffc4 	addi	r2,r7,-1
 4002a64:	9700d636 	bltu	r18,fp,4002dc0 <__divdf3+0x740>
 4002a68:	9200d52e 	bgeu	r18,r8,4002dc0 <__divdf3+0x740>
 4002a6c:	39ffff84 	addi	r7,r7,-2
 4002a70:	9725883a 	add	r18,r18,fp
 4002a74:	3004943a 	slli	r2,r6,16
 4002a78:	b012d43a 	srli	r9,r22,16
 4002a7c:	b1bfffcc 	andi	r6,r22,65535
 4002a80:	11e2b03a 	or	r17,r2,r7
 4002a84:	8806d43a 	srli	r3,r17,16
 4002a88:	893fffcc 	andi	r4,r17,65535
 4002a8c:	218b383a 	mul	r5,r4,r6
 4002a90:	30c5383a 	mul	r2,r6,r3
 4002a94:	2249383a 	mul	r4,r4,r9
 4002a98:	280ed43a 	srli	r7,r5,16
 4002a9c:	9225c83a 	sub	r18,r18,r8
 4002aa0:	2089883a 	add	r4,r4,r2
 4002aa4:	3909883a 	add	r4,r7,r4
 4002aa8:	1a47383a 	mul	r3,r3,r9
 4002aac:	2080022e 	bgeu	r4,r2,4002ab8 <__divdf3+0x438>
 4002ab0:	00800074 	movhi	r2,1
 4002ab4:	1887883a 	add	r3,r3,r2
 4002ab8:	2004d43a 	srli	r2,r4,16
 4002abc:	2008943a 	slli	r4,r4,16
 4002ac0:	297fffcc 	andi	r5,r5,65535
 4002ac4:	10c7883a 	add	r3,r2,r3
 4002ac8:	2149883a 	add	r4,r4,r5
 4002acc:	90c0a536 	bltu	r18,r3,4002d64 <__divdf3+0x6e4>
 4002ad0:	90c0bf26 	beq	r18,r3,4002dd0 <__divdf3+0x750>
 4002ad4:	90c7c83a 	sub	r3,r18,r3
 4002ad8:	810fc83a 	sub	r7,r16,r4
 4002adc:	81e5803a 	cmpltu	r18,r16,r7
 4002ae0:	1ca5c83a 	sub	r18,r3,r18
 4002ae4:	e480c126 	beq	fp,r18,4002dec <__divdf3+0x76c>
 4002ae8:	a00b883a 	mov	r5,r20
 4002aec:	9009883a 	mov	r4,r18
 4002af0:	d9800315 	stw	r6,12(sp)
 4002af4:	d9c00215 	stw	r7,8(sp)
 4002af8:	da400115 	stw	r9,4(sp)
 4002afc:	40045e80 	call	40045e8 <__udivsi3>
 4002b00:	a00b883a 	mov	r5,r20
 4002b04:	9009883a 	mov	r4,r18
 4002b08:	d8800015 	stw	r2,0(sp)
 4002b0c:	400464c0 	call	400464c <__umodsi3>
 4002b10:	d9c00217 	ldw	r7,8(sp)
 4002b14:	da000017 	ldw	r8,0(sp)
 4002b18:	1006943a 	slli	r3,r2,16
 4002b1c:	3804d43a 	srli	r2,r7,16
 4002b20:	ba21383a 	mul	r16,r23,r8
 4002b24:	d9800317 	ldw	r6,12(sp)
 4002b28:	10c4b03a 	or	r2,r2,r3
 4002b2c:	da400117 	ldw	r9,4(sp)
 4002b30:	1400062e 	bgeu	r2,r16,4002b4c <__divdf3+0x4cc>
 4002b34:	1705883a 	add	r2,r2,fp
 4002b38:	40ffffc4 	addi	r3,r8,-1
 4002b3c:	1700ad36 	bltu	r2,fp,4002df4 <__divdf3+0x774>
 4002b40:	1400ac2e 	bgeu	r2,r16,4002df4 <__divdf3+0x774>
 4002b44:	423fff84 	addi	r8,r8,-2
 4002b48:	1705883a 	add	r2,r2,fp
 4002b4c:	1421c83a 	sub	r16,r2,r16
 4002b50:	a00b883a 	mov	r5,r20
 4002b54:	8009883a 	mov	r4,r16
 4002b58:	d9800315 	stw	r6,12(sp)
 4002b5c:	d9c00215 	stw	r7,8(sp)
 4002b60:	da000015 	stw	r8,0(sp)
 4002b64:	da400115 	stw	r9,4(sp)
 4002b68:	40045e80 	call	40045e8 <__udivsi3>
 4002b6c:	8009883a 	mov	r4,r16
 4002b70:	a00b883a 	mov	r5,r20
 4002b74:	1025883a 	mov	r18,r2
 4002b78:	400464c0 	call	400464c <__umodsi3>
 4002b7c:	d9c00217 	ldw	r7,8(sp)
 4002b80:	1004943a 	slli	r2,r2,16
 4002b84:	bcaf383a 	mul	r23,r23,r18
 4002b88:	393fffcc 	andi	r4,r7,65535
 4002b8c:	2088b03a 	or	r4,r4,r2
 4002b90:	d9800317 	ldw	r6,12(sp)
 4002b94:	da000017 	ldw	r8,0(sp)
 4002b98:	da400117 	ldw	r9,4(sp)
 4002b9c:	25c0062e 	bgeu	r4,r23,4002bb8 <__divdf3+0x538>
 4002ba0:	2709883a 	add	r4,r4,fp
 4002ba4:	90bfffc4 	addi	r2,r18,-1
 4002ba8:	27009436 	bltu	r4,fp,4002dfc <__divdf3+0x77c>
 4002bac:	25c0932e 	bgeu	r4,r23,4002dfc <__divdf3+0x77c>
 4002bb0:	94bfff84 	addi	r18,r18,-2
 4002bb4:	2709883a 	add	r4,r4,fp
 4002bb8:	4004943a 	slli	r2,r8,16
 4002bbc:	25efc83a 	sub	r23,r4,r23
 4002bc0:	1490b03a 	or	r8,r2,r18
 4002bc4:	4008d43a 	srli	r4,r8,16
 4002bc8:	40ffffcc 	andi	r3,r8,65535
 4002bcc:	30c5383a 	mul	r2,r6,r3
 4002bd0:	1a47383a 	mul	r3,r3,r9
 4002bd4:	310d383a 	mul	r6,r6,r4
 4002bd8:	100ad43a 	srli	r5,r2,16
 4002bdc:	4913383a 	mul	r9,r9,r4
 4002be0:	1987883a 	add	r3,r3,r6
 4002be4:	28c7883a 	add	r3,r5,r3
 4002be8:	1980022e 	bgeu	r3,r6,4002bf4 <__divdf3+0x574>
 4002bec:	01000074 	movhi	r4,1
 4002bf0:	4913883a 	add	r9,r9,r4
 4002bf4:	1808d43a 	srli	r4,r3,16
 4002bf8:	1806943a 	slli	r3,r3,16
 4002bfc:	10bfffcc 	andi	r2,r2,65535
 4002c00:	2253883a 	add	r9,r4,r9
 4002c04:	1887883a 	add	r3,r3,r2
 4002c08:	ba403836 	bltu	r23,r9,4002cec <__divdf3+0x66c>
 4002c0c:	ba403626 	beq	r23,r9,4002ce8 <__divdf3+0x668>
 4002c10:	42000054 	ori	r8,r8,1
 4002c14:	a880ffc4 	addi	r2,r21,1023
 4002c18:	00bf570e 	bge	zero,r2,4002978 <__alt_data_end+0xfc002978>
 4002c1c:	40c001cc 	andi	r3,r8,7
 4002c20:	18000726 	beq	r3,zero,4002c40 <__divdf3+0x5c0>
 4002c24:	40c003cc 	andi	r3,r8,15
 4002c28:	01000104 	movi	r4,4
 4002c2c:	19000426 	beq	r3,r4,4002c40 <__divdf3+0x5c0>
 4002c30:	4107883a 	add	r3,r8,r4
 4002c34:	1a11803a 	cmpltu	r8,r3,r8
 4002c38:	8a23883a 	add	r17,r17,r8
 4002c3c:	1811883a 	mov	r8,r3
 4002c40:	88c0402c 	andhi	r3,r17,256
 4002c44:	18000426 	beq	r3,zero,4002c58 <__divdf3+0x5d8>
 4002c48:	00ffc034 	movhi	r3,65280
 4002c4c:	18ffffc4 	addi	r3,r3,-1
 4002c50:	a8810004 	addi	r2,r21,1024
 4002c54:	88e2703a 	and	r17,r17,r3
 4002c58:	00c1ff84 	movi	r3,2046
 4002c5c:	18bee316 	blt	r3,r2,40027ec <__alt_data_end+0xfc0027ec>
 4002c60:	8824977a 	slli	r18,r17,29
 4002c64:	4010d0fa 	srli	r8,r8,3
 4002c68:	8822927a 	slli	r17,r17,9
 4002c6c:	1081ffcc 	andi	r2,r2,2047
 4002c70:	9224b03a 	or	r18,r18,r8
 4002c74:	880ad33a 	srli	r5,r17,12
 4002c78:	98c0004c 	andi	r3,r19,1
 4002c7c:	003edf06 	br	40027fc <__alt_data_end+0xfc0027fc>
 4002c80:	8080022c 	andhi	r2,r16,8
 4002c84:	10001226 	beq	r2,zero,4002cd0 <__divdf3+0x650>
 4002c88:	8880022c 	andhi	r2,r17,8
 4002c8c:	1000101e 	bne	r2,zero,4002cd0 <__divdf3+0x650>
 4002c90:	00800434 	movhi	r2,16
 4002c94:	89400234 	orhi	r5,r17,8
 4002c98:	10bfffc4 	addi	r2,r2,-1
 4002c9c:	b007883a 	mov	r3,r22
 4002ca0:	288a703a 	and	r5,r5,r2
 4002ca4:	4025883a 	mov	r18,r8
 4002ca8:	003f3106 	br	4002970 <__alt_data_end+0xfc002970>
 4002cac:	008000c4 	movi	r2,3
 4002cb0:	3880a626 	beq	r7,r2,4002f4c <__divdf3+0x8cc>
 4002cb4:	00800044 	movi	r2,1
 4002cb8:	3880521e 	bne	r7,r2,4002e04 <__divdf3+0x784>
 4002cbc:	b807883a 	mov	r3,r23
 4002cc0:	0005883a 	mov	r2,zero
 4002cc4:	000b883a 	mov	r5,zero
 4002cc8:	0025883a 	mov	r18,zero
 4002ccc:	003ecb06 	br	40027fc <__alt_data_end+0xfc0027fc>
 4002cd0:	00800434 	movhi	r2,16
 4002cd4:	81400234 	orhi	r5,r16,8
 4002cd8:	10bfffc4 	addi	r2,r2,-1
 4002cdc:	a007883a 	mov	r3,r20
 4002ce0:	288a703a 	and	r5,r5,r2
 4002ce4:	003f2206 	br	4002970 <__alt_data_end+0xfc002970>
 4002ce8:	183fca26 	beq	r3,zero,4002c14 <__alt_data_end+0xfc002c14>
 4002cec:	e5ef883a 	add	r23,fp,r23
 4002cf0:	40bfffc4 	addi	r2,r8,-1
 4002cf4:	bf00392e 	bgeu	r23,fp,4002ddc <__divdf3+0x75c>
 4002cf8:	1011883a 	mov	r8,r2
 4002cfc:	ba7fc41e 	bne	r23,r9,4002c10 <__alt_data_end+0xfc002c10>
 4002d00:	b0ffc31e 	bne	r22,r3,4002c10 <__alt_data_end+0xfc002c10>
 4002d04:	003fc306 	br	4002c14 <__alt_data_end+0xfc002c14>
 4002d08:	143ff604 	addi	r16,r2,-40
 4002d0c:	9c20983a 	sll	r16,r19,r16
 4002d10:	0025883a 	mov	r18,zero
 4002d14:	003ee206 	br	40028a0 <__alt_data_end+0xfc0028a0>
 4002d18:	d9800315 	stw	r6,12(sp)
 4002d1c:	d9c00215 	stw	r7,8(sp)
 4002d20:	400448c0 	call	400448c <__clzsi2>
 4002d24:	10800804 	addi	r2,r2,32
 4002d28:	d9c00217 	ldw	r7,8(sp)
 4002d2c:	d9800317 	ldw	r6,12(sp)
 4002d30:	003ed106 	br	4002878 <__alt_data_end+0xfc002878>
 4002d34:	147ff604 	addi	r17,r2,-40
 4002d38:	3462983a 	sll	r17,r6,r17
 4002d3c:	0011883a 	mov	r8,zero
 4002d40:	003ef506 	br	4002918 <__alt_data_end+0xfc002918>
 4002d44:	3009883a 	mov	r4,r6
 4002d48:	d9800315 	stw	r6,12(sp)
 4002d4c:	da400115 	stw	r9,4(sp)
 4002d50:	400448c0 	call	400448c <__clzsi2>
 4002d54:	10800804 	addi	r2,r2,32
 4002d58:	da400117 	ldw	r9,4(sp)
 4002d5c:	d9800317 	ldw	r6,12(sp)
 4002d60:	003ee306 	br	40028f0 <__alt_data_end+0xfc0028f0>
 4002d64:	85a1883a 	add	r16,r16,r22
 4002d68:	8585803a 	cmpltu	r2,r16,r22
 4002d6c:	1705883a 	add	r2,r2,fp
 4002d70:	14a5883a 	add	r18,r2,r18
 4002d74:	88bfffc4 	addi	r2,r17,-1
 4002d78:	e4800c2e 	bgeu	fp,r18,4002dac <__divdf3+0x72c>
 4002d7c:	90c03e36 	bltu	r18,r3,4002e78 <__divdf3+0x7f8>
 4002d80:	1c806926 	beq	r3,r18,4002f28 <__divdf3+0x8a8>
 4002d84:	90c7c83a 	sub	r3,r18,r3
 4002d88:	1023883a 	mov	r17,r2
 4002d8c:	003f5206 	br	4002ad8 <__alt_data_end+0xfc002ad8>
 4002d90:	923f0436 	bltu	r18,r8,40029a4 <__alt_data_end+0xfc0029a4>
 4002d94:	800897fa 	slli	r4,r16,31
 4002d98:	9004d07a 	srli	r2,r18,1
 4002d9c:	8006d07a 	srli	r3,r16,1
 4002da0:	902097fa 	slli	r16,r18,31
 4002da4:	20a4b03a 	or	r18,r4,r2
 4002da8:	003f0106 	br	40029b0 <__alt_data_end+0xfc0029b0>
 4002dac:	e4bff51e 	bne	fp,r18,4002d84 <__alt_data_end+0xfc002d84>
 4002db0:	85bff22e 	bgeu	r16,r22,4002d7c <__alt_data_end+0xfc002d7c>
 4002db4:	e0c7c83a 	sub	r3,fp,r3
 4002db8:	1023883a 	mov	r17,r2
 4002dbc:	003f4606 	br	4002ad8 <__alt_data_end+0xfc002ad8>
 4002dc0:	100f883a 	mov	r7,r2
 4002dc4:	003f2b06 	br	4002a74 <__alt_data_end+0xfc002a74>
 4002dc8:	180d883a 	mov	r6,r3
 4002dcc:	003f1306 	br	4002a1c <__alt_data_end+0xfc002a1c>
 4002dd0:	813fe436 	bltu	r16,r4,4002d64 <__alt_data_end+0xfc002d64>
 4002dd4:	0007883a 	mov	r3,zero
 4002dd8:	003f3f06 	br	4002ad8 <__alt_data_end+0xfc002ad8>
 4002ddc:	ba402c36 	bltu	r23,r9,4002e90 <__divdf3+0x810>
 4002de0:	4dc05426 	beq	r9,r23,4002f34 <__divdf3+0x8b4>
 4002de4:	1011883a 	mov	r8,r2
 4002de8:	003f8906 	br	4002c10 <__alt_data_end+0xfc002c10>
 4002dec:	023fffc4 	movi	r8,-1
 4002df0:	003f8806 	br	4002c14 <__alt_data_end+0xfc002c14>
 4002df4:	1811883a 	mov	r8,r3
 4002df8:	003f5406 	br	4002b4c <__alt_data_end+0xfc002b4c>
 4002dfc:	1025883a 	mov	r18,r2
 4002e00:	003f6d06 	br	4002bb8 <__alt_data_end+0xfc002bb8>
 4002e04:	b827883a 	mov	r19,r23
 4002e08:	003f8206 	br	4002c14 <__alt_data_end+0xfc002c14>
 4002e0c:	010007c4 	movi	r4,31
 4002e10:	20c02616 	blt	r4,r3,4002eac <__divdf3+0x82c>
 4002e14:	00800804 	movi	r2,32
 4002e18:	10c5c83a 	sub	r2,r2,r3
 4002e1c:	888a983a 	sll	r5,r17,r2
 4002e20:	40c8d83a 	srl	r4,r8,r3
 4002e24:	4084983a 	sll	r2,r8,r2
 4002e28:	88e2d83a 	srl	r17,r17,r3
 4002e2c:	2906b03a 	or	r3,r5,r4
 4002e30:	1004c03a 	cmpne	r2,r2,zero
 4002e34:	1886b03a 	or	r3,r3,r2
 4002e38:	188001cc 	andi	r2,r3,7
 4002e3c:	10000726 	beq	r2,zero,4002e5c <__divdf3+0x7dc>
 4002e40:	188003cc 	andi	r2,r3,15
 4002e44:	01000104 	movi	r4,4
 4002e48:	11000426 	beq	r2,r4,4002e5c <__divdf3+0x7dc>
 4002e4c:	1805883a 	mov	r2,r3
 4002e50:	10c00104 	addi	r3,r2,4
 4002e54:	1885803a 	cmpltu	r2,r3,r2
 4002e58:	88a3883a 	add	r17,r17,r2
 4002e5c:	8880202c 	andhi	r2,r17,128
 4002e60:	10002726 	beq	r2,zero,4002f00 <__divdf3+0x880>
 4002e64:	98c0004c 	andi	r3,r19,1
 4002e68:	00800044 	movi	r2,1
 4002e6c:	000b883a 	mov	r5,zero
 4002e70:	0025883a 	mov	r18,zero
 4002e74:	003e6106 	br	40027fc <__alt_data_end+0xfc0027fc>
 4002e78:	85a1883a 	add	r16,r16,r22
 4002e7c:	8585803a 	cmpltu	r2,r16,r22
 4002e80:	1705883a 	add	r2,r2,fp
 4002e84:	14a5883a 	add	r18,r2,r18
 4002e88:	8c7fff84 	addi	r17,r17,-2
 4002e8c:	003f1106 	br	4002ad4 <__alt_data_end+0xfc002ad4>
 4002e90:	b589883a 	add	r4,r22,r22
 4002e94:	25ad803a 	cmpltu	r22,r4,r22
 4002e98:	b739883a 	add	fp,r22,fp
 4002e9c:	40bfff84 	addi	r2,r8,-2
 4002ea0:	bf2f883a 	add	r23,r23,fp
 4002ea4:	202d883a 	mov	r22,r4
 4002ea8:	003f9306 	br	4002cf8 <__alt_data_end+0xfc002cf8>
 4002eac:	013ff844 	movi	r4,-31
 4002eb0:	2085c83a 	sub	r2,r4,r2
 4002eb4:	8888d83a 	srl	r4,r17,r2
 4002eb8:	00800804 	movi	r2,32
 4002ebc:	18802126 	beq	r3,r2,4002f44 <__divdf3+0x8c4>
 4002ec0:	00801004 	movi	r2,64
 4002ec4:	10c5c83a 	sub	r2,r2,r3
 4002ec8:	8884983a 	sll	r2,r17,r2
 4002ecc:	1204b03a 	or	r2,r2,r8
 4002ed0:	1004c03a 	cmpne	r2,r2,zero
 4002ed4:	2084b03a 	or	r2,r4,r2
 4002ed8:	144001cc 	andi	r17,r2,7
 4002edc:	88000d1e 	bne	r17,zero,4002f14 <__divdf3+0x894>
 4002ee0:	000b883a 	mov	r5,zero
 4002ee4:	1024d0fa 	srli	r18,r2,3
 4002ee8:	98c0004c 	andi	r3,r19,1
 4002eec:	0005883a 	mov	r2,zero
 4002ef0:	9464b03a 	or	r18,r18,r17
 4002ef4:	003e4106 	br	40027fc <__alt_data_end+0xfc0027fc>
 4002ef8:	1007883a 	mov	r3,r2
 4002efc:	0023883a 	mov	r17,zero
 4002f00:	880a927a 	slli	r5,r17,9
 4002f04:	1805883a 	mov	r2,r3
 4002f08:	8822977a 	slli	r17,r17,29
 4002f0c:	280ad33a 	srli	r5,r5,12
 4002f10:	003ff406 	br	4002ee4 <__alt_data_end+0xfc002ee4>
 4002f14:	10c003cc 	andi	r3,r2,15
 4002f18:	01000104 	movi	r4,4
 4002f1c:	193ff626 	beq	r3,r4,4002ef8 <__alt_data_end+0xfc002ef8>
 4002f20:	0023883a 	mov	r17,zero
 4002f24:	003fca06 	br	4002e50 <__alt_data_end+0xfc002e50>
 4002f28:	813fd336 	bltu	r16,r4,4002e78 <__alt_data_end+0xfc002e78>
 4002f2c:	1023883a 	mov	r17,r2
 4002f30:	003fa806 	br	4002dd4 <__alt_data_end+0xfc002dd4>
 4002f34:	b0ffd636 	bltu	r22,r3,4002e90 <__alt_data_end+0xfc002e90>
 4002f38:	1011883a 	mov	r8,r2
 4002f3c:	b0ff341e 	bne	r22,r3,4002c10 <__alt_data_end+0xfc002c10>
 4002f40:	003f3406 	br	4002c14 <__alt_data_end+0xfc002c14>
 4002f44:	0005883a 	mov	r2,zero
 4002f48:	003fe006 	br	4002ecc <__alt_data_end+0xfc002ecc>
 4002f4c:	00800434 	movhi	r2,16
 4002f50:	89400234 	orhi	r5,r17,8
 4002f54:	10bfffc4 	addi	r2,r2,-1
 4002f58:	b807883a 	mov	r3,r23
 4002f5c:	288a703a 	and	r5,r5,r2
 4002f60:	4025883a 	mov	r18,r8
 4002f64:	003e8206 	br	4002970 <__alt_data_end+0xfc002970>

04002f68 <__eqdf2>:
 4002f68:	2804d53a 	srli	r2,r5,20
 4002f6c:	3806d53a 	srli	r3,r7,20
 4002f70:	02000434 	movhi	r8,16
 4002f74:	423fffc4 	addi	r8,r8,-1
 4002f78:	1081ffcc 	andi	r2,r2,2047
 4002f7c:	0281ffc4 	movi	r10,2047
 4002f80:	2a12703a 	and	r9,r5,r8
 4002f84:	18c1ffcc 	andi	r3,r3,2047
 4002f88:	3a10703a 	and	r8,r7,r8
 4002f8c:	280ad7fa 	srli	r5,r5,31
 4002f90:	380ed7fa 	srli	r7,r7,31
 4002f94:	12801026 	beq	r2,r10,4002fd8 <__eqdf2+0x70>
 4002f98:	0281ffc4 	movi	r10,2047
 4002f9c:	1a800a26 	beq	r3,r10,4002fc8 <__eqdf2+0x60>
 4002fa0:	10c00226 	beq	r2,r3,4002fac <__eqdf2+0x44>
 4002fa4:	00800044 	movi	r2,1
 4002fa8:	f800283a 	ret
 4002fac:	4a3ffd1e 	bne	r9,r8,4002fa4 <__alt_data_end+0xfc002fa4>
 4002fb0:	21bffc1e 	bne	r4,r6,4002fa4 <__alt_data_end+0xfc002fa4>
 4002fb4:	29c00c26 	beq	r5,r7,4002fe8 <__eqdf2+0x80>
 4002fb8:	103ffa1e 	bne	r2,zero,4002fa4 <__alt_data_end+0xfc002fa4>
 4002fbc:	2244b03a 	or	r2,r4,r9
 4002fc0:	1004c03a 	cmpne	r2,r2,zero
 4002fc4:	f800283a 	ret
 4002fc8:	3214b03a 	or	r10,r6,r8
 4002fcc:	503ff426 	beq	r10,zero,4002fa0 <__alt_data_end+0xfc002fa0>
 4002fd0:	00800044 	movi	r2,1
 4002fd4:	f800283a 	ret
 4002fd8:	2254b03a 	or	r10,r4,r9
 4002fdc:	503fee26 	beq	r10,zero,4002f98 <__alt_data_end+0xfc002f98>
 4002fe0:	00800044 	movi	r2,1
 4002fe4:	f800283a 	ret
 4002fe8:	0005883a 	mov	r2,zero
 4002fec:	f800283a 	ret

04002ff0 <__gedf2>:
 4002ff0:	2804d53a 	srli	r2,r5,20
 4002ff4:	3806d53a 	srli	r3,r7,20
 4002ff8:	02000434 	movhi	r8,16
 4002ffc:	423fffc4 	addi	r8,r8,-1
 4003000:	1081ffcc 	andi	r2,r2,2047
 4003004:	0241ffc4 	movi	r9,2047
 4003008:	2a14703a 	and	r10,r5,r8
 400300c:	18c1ffcc 	andi	r3,r3,2047
 4003010:	3a10703a 	and	r8,r7,r8
 4003014:	280ad7fa 	srli	r5,r5,31
 4003018:	380ed7fa 	srli	r7,r7,31
 400301c:	12401d26 	beq	r2,r9,4003094 <__gedf2+0xa4>
 4003020:	0241ffc4 	movi	r9,2047
 4003024:	1a401226 	beq	r3,r9,4003070 <__gedf2+0x80>
 4003028:	1000081e 	bne	r2,zero,400304c <__gedf2+0x5c>
 400302c:	2296b03a 	or	r11,r4,r10
 4003030:	5813003a 	cmpeq	r9,r11,zero
 4003034:	1800091e 	bne	r3,zero,400305c <__gedf2+0x6c>
 4003038:	3218b03a 	or	r12,r6,r8
 400303c:	6000071e 	bne	r12,zero,400305c <__gedf2+0x6c>
 4003040:	0005883a 	mov	r2,zero
 4003044:	5800101e 	bne	r11,zero,4003088 <__gedf2+0x98>
 4003048:	f800283a 	ret
 400304c:	18000c1e 	bne	r3,zero,4003080 <__gedf2+0x90>
 4003050:	3212b03a 	or	r9,r6,r8
 4003054:	48000c26 	beq	r9,zero,4003088 <__gedf2+0x98>
 4003058:	0013883a 	mov	r9,zero
 400305c:	39c03fcc 	andi	r7,r7,255
 4003060:	48000826 	beq	r9,zero,4003084 <__gedf2+0x94>
 4003064:	38000926 	beq	r7,zero,400308c <__gedf2+0x9c>
 4003068:	00800044 	movi	r2,1
 400306c:	f800283a 	ret
 4003070:	3212b03a 	or	r9,r6,r8
 4003074:	483fec26 	beq	r9,zero,4003028 <__alt_data_end+0xfc003028>
 4003078:	00bfff84 	movi	r2,-2
 400307c:	f800283a 	ret
 4003080:	39c03fcc 	andi	r7,r7,255
 4003084:	29c00626 	beq	r5,r7,40030a0 <__gedf2+0xb0>
 4003088:	283ff726 	beq	r5,zero,4003068 <__alt_data_end+0xfc003068>
 400308c:	00bfffc4 	movi	r2,-1
 4003090:	f800283a 	ret
 4003094:	2292b03a 	or	r9,r4,r10
 4003098:	483fe126 	beq	r9,zero,4003020 <__alt_data_end+0xfc003020>
 400309c:	003ff606 	br	4003078 <__alt_data_end+0xfc003078>
 40030a0:	18bff916 	blt	r3,r2,4003088 <__alt_data_end+0xfc003088>
 40030a4:	10c00316 	blt	r2,r3,40030b4 <__gedf2+0xc4>
 40030a8:	42bff736 	bltu	r8,r10,4003088 <__alt_data_end+0xfc003088>
 40030ac:	52000326 	beq	r10,r8,40030bc <__gedf2+0xcc>
 40030b0:	5200042e 	bgeu	r10,r8,40030c4 <__gedf2+0xd4>
 40030b4:	283fec1e 	bne	r5,zero,4003068 <__alt_data_end+0xfc003068>
 40030b8:	003ff406 	br	400308c <__alt_data_end+0xfc00308c>
 40030bc:	313ff236 	bltu	r6,r4,4003088 <__alt_data_end+0xfc003088>
 40030c0:	21bffc36 	bltu	r4,r6,40030b4 <__alt_data_end+0xfc0030b4>
 40030c4:	0005883a 	mov	r2,zero
 40030c8:	f800283a 	ret

040030cc <__ledf2>:
 40030cc:	2804d53a 	srli	r2,r5,20
 40030d0:	3810d53a 	srli	r8,r7,20
 40030d4:	00c00434 	movhi	r3,16
 40030d8:	18ffffc4 	addi	r3,r3,-1
 40030dc:	1081ffcc 	andi	r2,r2,2047
 40030e0:	0241ffc4 	movi	r9,2047
 40030e4:	28d4703a 	and	r10,r5,r3
 40030e8:	4201ffcc 	andi	r8,r8,2047
 40030ec:	38c6703a 	and	r3,r7,r3
 40030f0:	280ad7fa 	srli	r5,r5,31
 40030f4:	380ed7fa 	srli	r7,r7,31
 40030f8:	12401f26 	beq	r2,r9,4003178 <__ledf2+0xac>
 40030fc:	0241ffc4 	movi	r9,2047
 4003100:	42401426 	beq	r8,r9,4003154 <__ledf2+0x88>
 4003104:	1000091e 	bne	r2,zero,400312c <__ledf2+0x60>
 4003108:	2296b03a 	or	r11,r4,r10
 400310c:	5813003a 	cmpeq	r9,r11,zero
 4003110:	29403fcc 	andi	r5,r5,255
 4003114:	40000a1e 	bne	r8,zero,4003140 <__ledf2+0x74>
 4003118:	30d8b03a 	or	r12,r6,r3
 400311c:	6000081e 	bne	r12,zero,4003140 <__ledf2+0x74>
 4003120:	0005883a 	mov	r2,zero
 4003124:	5800111e 	bne	r11,zero,400316c <__ledf2+0xa0>
 4003128:	f800283a 	ret
 400312c:	29403fcc 	andi	r5,r5,255
 4003130:	40000c1e 	bne	r8,zero,4003164 <__ledf2+0x98>
 4003134:	30d2b03a 	or	r9,r6,r3
 4003138:	48000c26 	beq	r9,zero,400316c <__ledf2+0xa0>
 400313c:	0013883a 	mov	r9,zero
 4003140:	39c03fcc 	andi	r7,r7,255
 4003144:	48000826 	beq	r9,zero,4003168 <__ledf2+0x9c>
 4003148:	38001126 	beq	r7,zero,4003190 <__ledf2+0xc4>
 400314c:	00800044 	movi	r2,1
 4003150:	f800283a 	ret
 4003154:	30d2b03a 	or	r9,r6,r3
 4003158:	483fea26 	beq	r9,zero,4003104 <__alt_data_end+0xfc003104>
 400315c:	00800084 	movi	r2,2
 4003160:	f800283a 	ret
 4003164:	39c03fcc 	andi	r7,r7,255
 4003168:	39400726 	beq	r7,r5,4003188 <__ledf2+0xbc>
 400316c:	2800081e 	bne	r5,zero,4003190 <__ledf2+0xc4>
 4003170:	00800044 	movi	r2,1
 4003174:	f800283a 	ret
 4003178:	2292b03a 	or	r9,r4,r10
 400317c:	483fdf26 	beq	r9,zero,40030fc <__alt_data_end+0xfc0030fc>
 4003180:	00800084 	movi	r2,2
 4003184:	f800283a 	ret
 4003188:	4080030e 	bge	r8,r2,4003198 <__ledf2+0xcc>
 400318c:	383fef26 	beq	r7,zero,400314c <__alt_data_end+0xfc00314c>
 4003190:	00bfffc4 	movi	r2,-1
 4003194:	f800283a 	ret
 4003198:	123feb16 	blt	r2,r8,4003148 <__alt_data_end+0xfc003148>
 400319c:	1abff336 	bltu	r3,r10,400316c <__alt_data_end+0xfc00316c>
 40031a0:	50c00326 	beq	r10,r3,40031b0 <__ledf2+0xe4>
 40031a4:	50c0042e 	bgeu	r10,r3,40031b8 <__ledf2+0xec>
 40031a8:	283fe81e 	bne	r5,zero,400314c <__alt_data_end+0xfc00314c>
 40031ac:	003ff806 	br	4003190 <__alt_data_end+0xfc003190>
 40031b0:	313fee36 	bltu	r6,r4,400316c <__alt_data_end+0xfc00316c>
 40031b4:	21bffc36 	bltu	r4,r6,40031a8 <__alt_data_end+0xfc0031a8>
 40031b8:	0005883a 	mov	r2,zero
 40031bc:	f800283a 	ret

040031c0 <__muldf3>:
 40031c0:	defff304 	addi	sp,sp,-52
 40031c4:	2804d53a 	srli	r2,r5,20
 40031c8:	dd800915 	stw	r22,36(sp)
 40031cc:	282cd7fa 	srli	r22,r5,31
 40031d0:	dc000315 	stw	r16,12(sp)
 40031d4:	04000434 	movhi	r16,16
 40031d8:	dd400815 	stw	r21,32(sp)
 40031dc:	dc800515 	stw	r18,20(sp)
 40031e0:	843fffc4 	addi	r16,r16,-1
 40031e4:	dfc00c15 	stw	ra,48(sp)
 40031e8:	df000b15 	stw	fp,44(sp)
 40031ec:	ddc00a15 	stw	r23,40(sp)
 40031f0:	dd000715 	stw	r20,28(sp)
 40031f4:	dcc00615 	stw	r19,24(sp)
 40031f8:	dc400415 	stw	r17,16(sp)
 40031fc:	1481ffcc 	andi	r18,r2,2047
 4003200:	2c20703a 	and	r16,r5,r16
 4003204:	b02b883a 	mov	r21,r22
 4003208:	b2403fcc 	andi	r9,r22,255
 400320c:	90006026 	beq	r18,zero,4003390 <__muldf3+0x1d0>
 4003210:	0081ffc4 	movi	r2,2047
 4003214:	2029883a 	mov	r20,r4
 4003218:	90803626 	beq	r18,r2,40032f4 <__muldf3+0x134>
 400321c:	80800434 	orhi	r2,r16,16
 4003220:	100490fa 	slli	r2,r2,3
 4003224:	2020d77a 	srli	r16,r4,29
 4003228:	202890fa 	slli	r20,r4,3
 400322c:	94bf0044 	addi	r18,r18,-1023
 4003230:	80a0b03a 	or	r16,r16,r2
 4003234:	0027883a 	mov	r19,zero
 4003238:	0039883a 	mov	fp,zero
 400323c:	3804d53a 	srli	r2,r7,20
 4003240:	382ed7fa 	srli	r23,r7,31
 4003244:	04400434 	movhi	r17,16
 4003248:	8c7fffc4 	addi	r17,r17,-1
 400324c:	1081ffcc 	andi	r2,r2,2047
 4003250:	3011883a 	mov	r8,r6
 4003254:	3c62703a 	and	r17,r7,r17
 4003258:	ba803fcc 	andi	r10,r23,255
 400325c:	10006d26 	beq	r2,zero,4003414 <__muldf3+0x254>
 4003260:	00c1ffc4 	movi	r3,2047
 4003264:	10c06526 	beq	r2,r3,40033fc <__muldf3+0x23c>
 4003268:	88c00434 	orhi	r3,r17,16
 400326c:	180690fa 	slli	r3,r3,3
 4003270:	3022d77a 	srli	r17,r6,29
 4003274:	301090fa 	slli	r8,r6,3
 4003278:	10bf0044 	addi	r2,r2,-1023
 400327c:	88e2b03a 	or	r17,r17,r3
 4003280:	000b883a 	mov	r5,zero
 4003284:	9085883a 	add	r2,r18,r2
 4003288:	2cc8b03a 	or	r4,r5,r19
 400328c:	00c003c4 	movi	r3,15
 4003290:	bdacf03a 	xor	r22,r23,r22
 4003294:	12c00044 	addi	r11,r2,1
 4003298:	19009936 	bltu	r3,r4,4003500 <__muldf3+0x340>
 400329c:	200890ba 	slli	r4,r4,2
 40032a0:	00c10034 	movhi	r3,1024
 40032a4:	18ccad04 	addi	r3,r3,12980
 40032a8:	20c9883a 	add	r4,r4,r3
 40032ac:	20c00017 	ldw	r3,0(r4)
 40032b0:	1800683a 	jmp	r3
 40032b4:	04003500 	call	400350 <__reset-0x3bffcb0>
 40032b8:	04003314 	movui	r16,204
 40032bc:	04003314 	movui	r16,204
 40032c0:	04003310 	cmplti	r16,zero,204
 40032c4:	040034dc 	xori	r16,zero,211
 40032c8:	040034dc 	xori	r16,zero,211
 40032cc:	040034c4 	movi	r16,211
 40032d0:	04003310 	cmplti	r16,zero,204
 40032d4:	040034dc 	xori	r16,zero,211
 40032d8:	040034c4 	movi	r16,211
 40032dc:	040034dc 	xori	r16,zero,211
 40032e0:	04003310 	cmplti	r16,zero,204
 40032e4:	040034ec 	andhi	r16,zero,211
 40032e8:	040034ec 	andhi	r16,zero,211
 40032ec:	040034ec 	andhi	r16,zero,211
 40032f0:	04003708 	cmpgei	r16,zero,220
 40032f4:	2404b03a 	or	r2,r4,r16
 40032f8:	10006f1e 	bne	r2,zero,40034b8 <__muldf3+0x2f8>
 40032fc:	04c00204 	movi	r19,8
 4003300:	0021883a 	mov	r16,zero
 4003304:	0029883a 	mov	r20,zero
 4003308:	07000084 	movi	fp,2
 400330c:	003fcb06 	br	400323c <__alt_data_end+0xfc00323c>
 4003310:	502d883a 	mov	r22,r10
 4003314:	00800084 	movi	r2,2
 4003318:	28805726 	beq	r5,r2,4003478 <__muldf3+0x2b8>
 400331c:	008000c4 	movi	r2,3
 4003320:	28816626 	beq	r5,r2,40038bc <__muldf3+0x6fc>
 4003324:	00800044 	movi	r2,1
 4003328:	2881411e 	bne	r5,r2,4003830 <__muldf3+0x670>
 400332c:	b02b883a 	mov	r21,r22
 4003330:	0005883a 	mov	r2,zero
 4003334:	000b883a 	mov	r5,zero
 4003338:	0029883a 	mov	r20,zero
 400333c:	1004953a 	slli	r2,r2,20
 4003340:	a8c03fcc 	andi	r3,r21,255
 4003344:	04400434 	movhi	r17,16
 4003348:	8c7fffc4 	addi	r17,r17,-1
 400334c:	180697fa 	slli	r3,r3,31
 4003350:	2c4a703a 	and	r5,r5,r17
 4003354:	288ab03a 	or	r5,r5,r2
 4003358:	28c6b03a 	or	r3,r5,r3
 400335c:	a005883a 	mov	r2,r20
 4003360:	dfc00c17 	ldw	ra,48(sp)
 4003364:	df000b17 	ldw	fp,44(sp)
 4003368:	ddc00a17 	ldw	r23,40(sp)
 400336c:	dd800917 	ldw	r22,36(sp)
 4003370:	dd400817 	ldw	r21,32(sp)
 4003374:	dd000717 	ldw	r20,28(sp)
 4003378:	dcc00617 	ldw	r19,24(sp)
 400337c:	dc800517 	ldw	r18,20(sp)
 4003380:	dc400417 	ldw	r17,16(sp)
 4003384:	dc000317 	ldw	r16,12(sp)
 4003388:	dec00d04 	addi	sp,sp,52
 400338c:	f800283a 	ret
 4003390:	2404b03a 	or	r2,r4,r16
 4003394:	2027883a 	mov	r19,r4
 4003398:	10004226 	beq	r2,zero,40034a4 <__muldf3+0x2e4>
 400339c:	8000fc26 	beq	r16,zero,4003790 <__muldf3+0x5d0>
 40033a0:	8009883a 	mov	r4,r16
 40033a4:	d9800215 	stw	r6,8(sp)
 40033a8:	d9c00015 	stw	r7,0(sp)
 40033ac:	da400115 	stw	r9,4(sp)
 40033b0:	400448c0 	call	400448c <__clzsi2>
 40033b4:	d9800217 	ldw	r6,8(sp)
 40033b8:	d9c00017 	ldw	r7,0(sp)
 40033bc:	da400117 	ldw	r9,4(sp)
 40033c0:	113ffd44 	addi	r4,r2,-11
 40033c4:	00c00704 	movi	r3,28
 40033c8:	1900ed16 	blt	r3,r4,4003780 <__muldf3+0x5c0>
 40033cc:	00c00744 	movi	r3,29
 40033d0:	147ffe04 	addi	r17,r2,-8
 40033d4:	1907c83a 	sub	r3,r3,r4
 40033d8:	8460983a 	sll	r16,r16,r17
 40033dc:	98c6d83a 	srl	r3,r19,r3
 40033e0:	9c68983a 	sll	r20,r19,r17
 40033e4:	1c20b03a 	or	r16,r3,r16
 40033e8:	1080fcc4 	addi	r2,r2,1011
 40033ec:	00a5c83a 	sub	r18,zero,r2
 40033f0:	0027883a 	mov	r19,zero
 40033f4:	0039883a 	mov	fp,zero
 40033f8:	003f9006 	br	400323c <__alt_data_end+0xfc00323c>
 40033fc:	3446b03a 	or	r3,r6,r17
 4003400:	1800261e 	bne	r3,zero,400349c <__muldf3+0x2dc>
 4003404:	0023883a 	mov	r17,zero
 4003408:	0011883a 	mov	r8,zero
 400340c:	01400084 	movi	r5,2
 4003410:	003f9c06 	br	4003284 <__alt_data_end+0xfc003284>
 4003414:	3446b03a 	or	r3,r6,r17
 4003418:	18001c26 	beq	r3,zero,400348c <__muldf3+0x2cc>
 400341c:	8800ce26 	beq	r17,zero,4003758 <__muldf3+0x598>
 4003420:	8809883a 	mov	r4,r17
 4003424:	d9800215 	stw	r6,8(sp)
 4003428:	da400115 	stw	r9,4(sp)
 400342c:	da800015 	stw	r10,0(sp)
 4003430:	400448c0 	call	400448c <__clzsi2>
 4003434:	d9800217 	ldw	r6,8(sp)
 4003438:	da400117 	ldw	r9,4(sp)
 400343c:	da800017 	ldw	r10,0(sp)
 4003440:	113ffd44 	addi	r4,r2,-11
 4003444:	00c00704 	movi	r3,28
 4003448:	1900bf16 	blt	r3,r4,4003748 <__muldf3+0x588>
 400344c:	00c00744 	movi	r3,29
 4003450:	123ffe04 	addi	r8,r2,-8
 4003454:	1907c83a 	sub	r3,r3,r4
 4003458:	8a22983a 	sll	r17,r17,r8
 400345c:	30c6d83a 	srl	r3,r6,r3
 4003460:	3210983a 	sll	r8,r6,r8
 4003464:	1c62b03a 	or	r17,r3,r17
 4003468:	1080fcc4 	addi	r2,r2,1011
 400346c:	0085c83a 	sub	r2,zero,r2
 4003470:	000b883a 	mov	r5,zero
 4003474:	003f8306 	br	4003284 <__alt_data_end+0xfc003284>
 4003478:	b02b883a 	mov	r21,r22
 400347c:	0081ffc4 	movi	r2,2047
 4003480:	000b883a 	mov	r5,zero
 4003484:	0029883a 	mov	r20,zero
 4003488:	003fac06 	br	400333c <__alt_data_end+0xfc00333c>
 400348c:	0023883a 	mov	r17,zero
 4003490:	0011883a 	mov	r8,zero
 4003494:	01400044 	movi	r5,1
 4003498:	003f7a06 	br	4003284 <__alt_data_end+0xfc003284>
 400349c:	014000c4 	movi	r5,3
 40034a0:	003f7806 	br	4003284 <__alt_data_end+0xfc003284>
 40034a4:	04c00104 	movi	r19,4
 40034a8:	0021883a 	mov	r16,zero
 40034ac:	0029883a 	mov	r20,zero
 40034b0:	07000044 	movi	fp,1
 40034b4:	003f6106 	br	400323c <__alt_data_end+0xfc00323c>
 40034b8:	04c00304 	movi	r19,12
 40034bc:	070000c4 	movi	fp,3
 40034c0:	003f5e06 	br	400323c <__alt_data_end+0xfc00323c>
 40034c4:	01400434 	movhi	r5,16
 40034c8:	002b883a 	mov	r21,zero
 40034cc:	297fffc4 	addi	r5,r5,-1
 40034d0:	053fffc4 	movi	r20,-1
 40034d4:	0081ffc4 	movi	r2,2047
 40034d8:	003f9806 	br	400333c <__alt_data_end+0xfc00333c>
 40034dc:	8023883a 	mov	r17,r16
 40034e0:	a011883a 	mov	r8,r20
 40034e4:	e00b883a 	mov	r5,fp
 40034e8:	003f8a06 	br	4003314 <__alt_data_end+0xfc003314>
 40034ec:	8023883a 	mov	r17,r16
 40034f0:	a011883a 	mov	r8,r20
 40034f4:	482d883a 	mov	r22,r9
 40034f8:	e00b883a 	mov	r5,fp
 40034fc:	003f8506 	br	4003314 <__alt_data_end+0xfc003314>
 4003500:	a00ad43a 	srli	r5,r20,16
 4003504:	401ad43a 	srli	r13,r8,16
 4003508:	a53fffcc 	andi	r20,r20,65535
 400350c:	423fffcc 	andi	r8,r8,65535
 4003510:	4519383a 	mul	r12,r8,r20
 4003514:	4147383a 	mul	r3,r8,r5
 4003518:	6d09383a 	mul	r4,r13,r20
 400351c:	600cd43a 	srli	r6,r12,16
 4003520:	2b5d383a 	mul	r14,r5,r13
 4003524:	20c9883a 	add	r4,r4,r3
 4003528:	310d883a 	add	r6,r6,r4
 400352c:	30c0022e 	bgeu	r6,r3,4003538 <__muldf3+0x378>
 4003530:	00c00074 	movhi	r3,1
 4003534:	70dd883a 	add	r14,r14,r3
 4003538:	8826d43a 	srli	r19,r17,16
 400353c:	8bffffcc 	andi	r15,r17,65535
 4003540:	7d23383a 	mul	r17,r15,r20
 4003544:	7949383a 	mul	r4,r15,r5
 4003548:	9d29383a 	mul	r20,r19,r20
 400354c:	8814d43a 	srli	r10,r17,16
 4003550:	3012943a 	slli	r9,r6,16
 4003554:	a129883a 	add	r20,r20,r4
 4003558:	633fffcc 	andi	r12,r12,65535
 400355c:	5515883a 	add	r10,r10,r20
 4003560:	3006d43a 	srli	r3,r6,16
 4003564:	4b13883a 	add	r9,r9,r12
 4003568:	2ccb383a 	mul	r5,r5,r19
 400356c:	5100022e 	bgeu	r10,r4,4003578 <__muldf3+0x3b8>
 4003570:	01000074 	movhi	r4,1
 4003574:	290b883a 	add	r5,r5,r4
 4003578:	802ad43a 	srli	r21,r16,16
 400357c:	843fffcc 	andi	r16,r16,65535
 4003580:	440d383a 	mul	r6,r8,r16
 4003584:	4565383a 	mul	r18,r8,r21
 4003588:	8349383a 	mul	r4,r16,r13
 400358c:	500e943a 	slli	r7,r10,16
 4003590:	3010d43a 	srli	r8,r6,16
 4003594:	5028d43a 	srli	r20,r10,16
 4003598:	2489883a 	add	r4,r4,r18
 400359c:	8abfffcc 	andi	r10,r17,65535
 40035a0:	3a95883a 	add	r10,r7,r10
 40035a4:	4119883a 	add	r12,r8,r4
 40035a8:	a169883a 	add	r20,r20,r5
 40035ac:	1a87883a 	add	r3,r3,r10
 40035b0:	6d5b383a 	mul	r13,r13,r21
 40035b4:	6480022e 	bgeu	r12,r18,40035c0 <__muldf3+0x400>
 40035b8:	01000074 	movhi	r4,1
 40035bc:	691b883a 	add	r13,r13,r4
 40035c0:	7c25383a 	mul	r18,r15,r16
 40035c4:	7d4b383a 	mul	r5,r15,r21
 40035c8:	84cf383a 	mul	r7,r16,r19
 40035cc:	901ed43a 	srli	r15,r18,16
 40035d0:	6008d43a 	srli	r4,r12,16
 40035d4:	6010943a 	slli	r8,r12,16
 40035d8:	394f883a 	add	r7,r7,r5
 40035dc:	333fffcc 	andi	r12,r6,65535
 40035e0:	79df883a 	add	r15,r15,r7
 40035e4:	235b883a 	add	r13,r4,r13
 40035e8:	9d63383a 	mul	r17,r19,r21
 40035ec:	4309883a 	add	r4,r8,r12
 40035f0:	7940022e 	bgeu	r15,r5,40035fc <__muldf3+0x43c>
 40035f4:	01400074 	movhi	r5,1
 40035f8:	8963883a 	add	r17,r17,r5
 40035fc:	780a943a 	slli	r5,r15,16
 4003600:	91bfffcc 	andi	r6,r18,65535
 4003604:	70c7883a 	add	r3,r14,r3
 4003608:	298d883a 	add	r6,r5,r6
 400360c:	1a8f803a 	cmpltu	r7,r3,r10
 4003610:	350b883a 	add	r5,r6,r20
 4003614:	20c7883a 	add	r3,r4,r3
 4003618:	3955883a 	add	r10,r7,r5
 400361c:	1909803a 	cmpltu	r4,r3,r4
 4003620:	6a91883a 	add	r8,r13,r10
 4003624:	780cd43a 	srli	r6,r15,16
 4003628:	2219883a 	add	r12,r4,r8
 400362c:	2d0b803a 	cmpltu	r5,r5,r20
 4003630:	51cf803a 	cmpltu	r7,r10,r7
 4003634:	29ceb03a 	or	r7,r5,r7
 4003638:	4351803a 	cmpltu	r8,r8,r13
 400363c:	610b803a 	cmpltu	r5,r12,r4
 4003640:	4148b03a 	or	r4,r8,r5
 4003644:	398f883a 	add	r7,r7,r6
 4003648:	3909883a 	add	r4,r7,r4
 400364c:	1810927a 	slli	r8,r3,9
 4003650:	2449883a 	add	r4,r4,r17
 4003654:	2008927a 	slli	r4,r4,9
 4003658:	6022d5fa 	srli	r17,r12,23
 400365c:	1806d5fa 	srli	r3,r3,23
 4003660:	4252b03a 	or	r9,r8,r9
 4003664:	600a927a 	slli	r5,r12,9
 4003668:	4810c03a 	cmpne	r8,r9,zero
 400366c:	2462b03a 	or	r17,r4,r17
 4003670:	40c6b03a 	or	r3,r8,r3
 4003674:	8900402c 	andhi	r4,r17,256
 4003678:	1950b03a 	or	r8,r3,r5
 400367c:	20000726 	beq	r4,zero,400369c <__muldf3+0x4dc>
 4003680:	4006d07a 	srli	r3,r8,1
 4003684:	880497fa 	slli	r2,r17,31
 4003688:	4200004c 	andi	r8,r8,1
 400368c:	8822d07a 	srli	r17,r17,1
 4003690:	1a10b03a 	or	r8,r3,r8
 4003694:	1210b03a 	or	r8,r2,r8
 4003698:	5805883a 	mov	r2,r11
 400369c:	1140ffc4 	addi	r5,r2,1023
 40036a0:	0140440e 	bge	zero,r5,40037b4 <__muldf3+0x5f4>
 40036a4:	40c001cc 	andi	r3,r8,7
 40036a8:	18000726 	beq	r3,zero,40036c8 <__muldf3+0x508>
 40036ac:	40c003cc 	andi	r3,r8,15
 40036b0:	01000104 	movi	r4,4
 40036b4:	19000426 	beq	r3,r4,40036c8 <__muldf3+0x508>
 40036b8:	4107883a 	add	r3,r8,r4
 40036bc:	1a11803a 	cmpltu	r8,r3,r8
 40036c0:	8a23883a 	add	r17,r17,r8
 40036c4:	1811883a 	mov	r8,r3
 40036c8:	88c0402c 	andhi	r3,r17,256
 40036cc:	18000426 	beq	r3,zero,40036e0 <__muldf3+0x520>
 40036d0:	11410004 	addi	r5,r2,1024
 40036d4:	00bfc034 	movhi	r2,65280
 40036d8:	10bfffc4 	addi	r2,r2,-1
 40036dc:	88a2703a 	and	r17,r17,r2
 40036e0:	0081ff84 	movi	r2,2046
 40036e4:	117f6416 	blt	r2,r5,4003478 <__alt_data_end+0xfc003478>
 40036e8:	8828977a 	slli	r20,r17,29
 40036ec:	4010d0fa 	srli	r8,r8,3
 40036f0:	8822927a 	slli	r17,r17,9
 40036f4:	2881ffcc 	andi	r2,r5,2047
 40036f8:	a228b03a 	or	r20,r20,r8
 40036fc:	880ad33a 	srli	r5,r17,12
 4003700:	b02b883a 	mov	r21,r22
 4003704:	003f0d06 	br	400333c <__alt_data_end+0xfc00333c>
 4003708:	8080022c 	andhi	r2,r16,8
 400370c:	10000926 	beq	r2,zero,4003734 <__muldf3+0x574>
 4003710:	8880022c 	andhi	r2,r17,8
 4003714:	1000071e 	bne	r2,zero,4003734 <__muldf3+0x574>
 4003718:	00800434 	movhi	r2,16
 400371c:	89400234 	orhi	r5,r17,8
 4003720:	10bfffc4 	addi	r2,r2,-1
 4003724:	b82b883a 	mov	r21,r23
 4003728:	288a703a 	and	r5,r5,r2
 400372c:	4029883a 	mov	r20,r8
 4003730:	003f6806 	br	40034d4 <__alt_data_end+0xfc0034d4>
 4003734:	00800434 	movhi	r2,16
 4003738:	81400234 	orhi	r5,r16,8
 400373c:	10bfffc4 	addi	r2,r2,-1
 4003740:	288a703a 	and	r5,r5,r2
 4003744:	003f6306 	br	40034d4 <__alt_data_end+0xfc0034d4>
 4003748:	147ff604 	addi	r17,r2,-40
 400374c:	3462983a 	sll	r17,r6,r17
 4003750:	0011883a 	mov	r8,zero
 4003754:	003f4406 	br	4003468 <__alt_data_end+0xfc003468>
 4003758:	3009883a 	mov	r4,r6
 400375c:	d9800215 	stw	r6,8(sp)
 4003760:	da400115 	stw	r9,4(sp)
 4003764:	da800015 	stw	r10,0(sp)
 4003768:	400448c0 	call	400448c <__clzsi2>
 400376c:	10800804 	addi	r2,r2,32
 4003770:	da800017 	ldw	r10,0(sp)
 4003774:	da400117 	ldw	r9,4(sp)
 4003778:	d9800217 	ldw	r6,8(sp)
 400377c:	003f3006 	br	4003440 <__alt_data_end+0xfc003440>
 4003780:	143ff604 	addi	r16,r2,-40
 4003784:	9c20983a 	sll	r16,r19,r16
 4003788:	0029883a 	mov	r20,zero
 400378c:	003f1606 	br	40033e8 <__alt_data_end+0xfc0033e8>
 4003790:	d9800215 	stw	r6,8(sp)
 4003794:	d9c00015 	stw	r7,0(sp)
 4003798:	da400115 	stw	r9,4(sp)
 400379c:	400448c0 	call	400448c <__clzsi2>
 40037a0:	10800804 	addi	r2,r2,32
 40037a4:	da400117 	ldw	r9,4(sp)
 40037a8:	d9c00017 	ldw	r7,0(sp)
 40037ac:	d9800217 	ldw	r6,8(sp)
 40037b0:	003f0306 	br	40033c0 <__alt_data_end+0xfc0033c0>
 40037b4:	00c00044 	movi	r3,1
 40037b8:	1947c83a 	sub	r3,r3,r5
 40037bc:	00800e04 	movi	r2,56
 40037c0:	10feda16 	blt	r2,r3,400332c <__alt_data_end+0xfc00332c>
 40037c4:	008007c4 	movi	r2,31
 40037c8:	10c01b16 	blt	r2,r3,4003838 <__muldf3+0x678>
 40037cc:	00800804 	movi	r2,32
 40037d0:	10c5c83a 	sub	r2,r2,r3
 40037d4:	888a983a 	sll	r5,r17,r2
 40037d8:	40c8d83a 	srl	r4,r8,r3
 40037dc:	4084983a 	sll	r2,r8,r2
 40037e0:	88e2d83a 	srl	r17,r17,r3
 40037e4:	2906b03a 	or	r3,r5,r4
 40037e8:	1004c03a 	cmpne	r2,r2,zero
 40037ec:	1886b03a 	or	r3,r3,r2
 40037f0:	188001cc 	andi	r2,r3,7
 40037f4:	10000726 	beq	r2,zero,4003814 <__muldf3+0x654>
 40037f8:	188003cc 	andi	r2,r3,15
 40037fc:	01000104 	movi	r4,4
 4003800:	11000426 	beq	r2,r4,4003814 <__muldf3+0x654>
 4003804:	1805883a 	mov	r2,r3
 4003808:	10c00104 	addi	r3,r2,4
 400380c:	1885803a 	cmpltu	r2,r3,r2
 4003810:	88a3883a 	add	r17,r17,r2
 4003814:	8880202c 	andhi	r2,r17,128
 4003818:	10001c26 	beq	r2,zero,400388c <__muldf3+0x6cc>
 400381c:	b02b883a 	mov	r21,r22
 4003820:	00800044 	movi	r2,1
 4003824:	000b883a 	mov	r5,zero
 4003828:	0029883a 	mov	r20,zero
 400382c:	003ec306 	br	400333c <__alt_data_end+0xfc00333c>
 4003830:	5805883a 	mov	r2,r11
 4003834:	003f9906 	br	400369c <__alt_data_end+0xfc00369c>
 4003838:	00bff844 	movi	r2,-31
 400383c:	1145c83a 	sub	r2,r2,r5
 4003840:	8888d83a 	srl	r4,r17,r2
 4003844:	00800804 	movi	r2,32
 4003848:	18801a26 	beq	r3,r2,40038b4 <__muldf3+0x6f4>
 400384c:	00801004 	movi	r2,64
 4003850:	10c5c83a 	sub	r2,r2,r3
 4003854:	8884983a 	sll	r2,r17,r2
 4003858:	1204b03a 	or	r2,r2,r8
 400385c:	1004c03a 	cmpne	r2,r2,zero
 4003860:	2084b03a 	or	r2,r4,r2
 4003864:	144001cc 	andi	r17,r2,7
 4003868:	88000d1e 	bne	r17,zero,40038a0 <__muldf3+0x6e0>
 400386c:	000b883a 	mov	r5,zero
 4003870:	1028d0fa 	srli	r20,r2,3
 4003874:	b02b883a 	mov	r21,r22
 4003878:	0005883a 	mov	r2,zero
 400387c:	a468b03a 	or	r20,r20,r17
 4003880:	003eae06 	br	400333c <__alt_data_end+0xfc00333c>
 4003884:	1007883a 	mov	r3,r2
 4003888:	0023883a 	mov	r17,zero
 400388c:	880a927a 	slli	r5,r17,9
 4003890:	1805883a 	mov	r2,r3
 4003894:	8822977a 	slli	r17,r17,29
 4003898:	280ad33a 	srli	r5,r5,12
 400389c:	003ff406 	br	4003870 <__alt_data_end+0xfc003870>
 40038a0:	10c003cc 	andi	r3,r2,15
 40038a4:	01000104 	movi	r4,4
 40038a8:	193ff626 	beq	r3,r4,4003884 <__alt_data_end+0xfc003884>
 40038ac:	0023883a 	mov	r17,zero
 40038b0:	003fd506 	br	4003808 <__alt_data_end+0xfc003808>
 40038b4:	0005883a 	mov	r2,zero
 40038b8:	003fe706 	br	4003858 <__alt_data_end+0xfc003858>
 40038bc:	00800434 	movhi	r2,16
 40038c0:	89400234 	orhi	r5,r17,8
 40038c4:	10bfffc4 	addi	r2,r2,-1
 40038c8:	b02b883a 	mov	r21,r22
 40038cc:	288a703a 	and	r5,r5,r2
 40038d0:	4029883a 	mov	r20,r8
 40038d4:	003eff06 	br	40034d4 <__alt_data_end+0xfc0034d4>

040038d8 <__subdf3>:
 40038d8:	02000434 	movhi	r8,16
 40038dc:	423fffc4 	addi	r8,r8,-1
 40038e0:	defffb04 	addi	sp,sp,-20
 40038e4:	2a14703a 	and	r10,r5,r8
 40038e8:	3812d53a 	srli	r9,r7,20
 40038ec:	3a10703a 	and	r8,r7,r8
 40038f0:	2006d77a 	srli	r3,r4,29
 40038f4:	3004d77a 	srli	r2,r6,29
 40038f8:	dc000015 	stw	r16,0(sp)
 40038fc:	501490fa 	slli	r10,r10,3
 4003900:	2820d53a 	srli	r16,r5,20
 4003904:	401090fa 	slli	r8,r8,3
 4003908:	dc800215 	stw	r18,8(sp)
 400390c:	dc400115 	stw	r17,4(sp)
 4003910:	dfc00415 	stw	ra,16(sp)
 4003914:	202290fa 	slli	r17,r4,3
 4003918:	dcc00315 	stw	r19,12(sp)
 400391c:	4a41ffcc 	andi	r9,r9,2047
 4003920:	0101ffc4 	movi	r4,2047
 4003924:	2824d7fa 	srli	r18,r5,31
 4003928:	8401ffcc 	andi	r16,r16,2047
 400392c:	50c6b03a 	or	r3,r10,r3
 4003930:	380ed7fa 	srli	r7,r7,31
 4003934:	408ab03a 	or	r5,r8,r2
 4003938:	300c90fa 	slli	r6,r6,3
 400393c:	49009626 	beq	r9,r4,4003b98 <__subdf3+0x2c0>
 4003940:	39c0005c 	xori	r7,r7,1
 4003944:	8245c83a 	sub	r2,r16,r9
 4003948:	3c807426 	beq	r7,r18,4003b1c <__subdf3+0x244>
 400394c:	0080af0e 	bge	zero,r2,4003c0c <__subdf3+0x334>
 4003950:	48002a1e 	bne	r9,zero,40039fc <__subdf3+0x124>
 4003954:	2988b03a 	or	r4,r5,r6
 4003958:	20009a1e 	bne	r4,zero,4003bc4 <__subdf3+0x2ec>
 400395c:	888001cc 	andi	r2,r17,7
 4003960:	10000726 	beq	r2,zero,4003980 <__subdf3+0xa8>
 4003964:	888003cc 	andi	r2,r17,15
 4003968:	01000104 	movi	r4,4
 400396c:	11000426 	beq	r2,r4,4003980 <__subdf3+0xa8>
 4003970:	890b883a 	add	r5,r17,r4
 4003974:	2c63803a 	cmpltu	r17,r5,r17
 4003978:	1c47883a 	add	r3,r3,r17
 400397c:	2823883a 	mov	r17,r5
 4003980:	1880202c 	andhi	r2,r3,128
 4003984:	10005926 	beq	r2,zero,4003aec <__subdf3+0x214>
 4003988:	84000044 	addi	r16,r16,1
 400398c:	0081ffc4 	movi	r2,2047
 4003990:	8080be26 	beq	r16,r2,4003c8c <__subdf3+0x3b4>
 4003994:	017fe034 	movhi	r5,65408
 4003998:	297fffc4 	addi	r5,r5,-1
 400399c:	1946703a 	and	r3,r3,r5
 40039a0:	1804977a 	slli	r2,r3,29
 40039a4:	1806927a 	slli	r3,r3,9
 40039a8:	8822d0fa 	srli	r17,r17,3
 40039ac:	8401ffcc 	andi	r16,r16,2047
 40039b0:	180ad33a 	srli	r5,r3,12
 40039b4:	9100004c 	andi	r4,r18,1
 40039b8:	1444b03a 	or	r2,r2,r17
 40039bc:	80c1ffcc 	andi	r3,r16,2047
 40039c0:	1820953a 	slli	r16,r3,20
 40039c4:	20c03fcc 	andi	r3,r4,255
 40039c8:	180897fa 	slli	r4,r3,31
 40039cc:	00c00434 	movhi	r3,16
 40039d0:	18ffffc4 	addi	r3,r3,-1
 40039d4:	28c6703a 	and	r3,r5,r3
 40039d8:	1c06b03a 	or	r3,r3,r16
 40039dc:	1906b03a 	or	r3,r3,r4
 40039e0:	dfc00417 	ldw	ra,16(sp)
 40039e4:	dcc00317 	ldw	r19,12(sp)
 40039e8:	dc800217 	ldw	r18,8(sp)
 40039ec:	dc400117 	ldw	r17,4(sp)
 40039f0:	dc000017 	ldw	r16,0(sp)
 40039f4:	dec00504 	addi	sp,sp,20
 40039f8:	f800283a 	ret
 40039fc:	0101ffc4 	movi	r4,2047
 4003a00:	813fd626 	beq	r16,r4,400395c <__alt_data_end+0xfc00395c>
 4003a04:	29402034 	orhi	r5,r5,128
 4003a08:	01000e04 	movi	r4,56
 4003a0c:	2080a316 	blt	r4,r2,4003c9c <__subdf3+0x3c4>
 4003a10:	010007c4 	movi	r4,31
 4003a14:	2080c616 	blt	r4,r2,4003d30 <__subdf3+0x458>
 4003a18:	01000804 	movi	r4,32
 4003a1c:	2089c83a 	sub	r4,r4,r2
 4003a20:	2910983a 	sll	r8,r5,r4
 4003a24:	308ed83a 	srl	r7,r6,r2
 4003a28:	3108983a 	sll	r4,r6,r4
 4003a2c:	2884d83a 	srl	r2,r5,r2
 4003a30:	41ccb03a 	or	r6,r8,r7
 4003a34:	2008c03a 	cmpne	r4,r4,zero
 4003a38:	310cb03a 	or	r6,r6,r4
 4003a3c:	898dc83a 	sub	r6,r17,r6
 4003a40:	89a3803a 	cmpltu	r17,r17,r6
 4003a44:	1887c83a 	sub	r3,r3,r2
 4003a48:	1c47c83a 	sub	r3,r3,r17
 4003a4c:	3023883a 	mov	r17,r6
 4003a50:	1880202c 	andhi	r2,r3,128
 4003a54:	10002326 	beq	r2,zero,4003ae4 <__subdf3+0x20c>
 4003a58:	04c02034 	movhi	r19,128
 4003a5c:	9cffffc4 	addi	r19,r19,-1
 4003a60:	1ce6703a 	and	r19,r3,r19
 4003a64:	98007a26 	beq	r19,zero,4003c50 <__subdf3+0x378>
 4003a68:	9809883a 	mov	r4,r19
 4003a6c:	400448c0 	call	400448c <__clzsi2>
 4003a70:	113ffe04 	addi	r4,r2,-8
 4003a74:	00c007c4 	movi	r3,31
 4003a78:	19007b16 	blt	r3,r4,4003c68 <__subdf3+0x390>
 4003a7c:	00800804 	movi	r2,32
 4003a80:	1105c83a 	sub	r2,r2,r4
 4003a84:	8884d83a 	srl	r2,r17,r2
 4003a88:	9906983a 	sll	r3,r19,r4
 4003a8c:	8922983a 	sll	r17,r17,r4
 4003a90:	10c4b03a 	or	r2,r2,r3
 4003a94:	24007816 	blt	r4,r16,4003c78 <__subdf3+0x3a0>
 4003a98:	2421c83a 	sub	r16,r4,r16
 4003a9c:	80c00044 	addi	r3,r16,1
 4003aa0:	010007c4 	movi	r4,31
 4003aa4:	20c09516 	blt	r4,r3,4003cfc <__subdf3+0x424>
 4003aa8:	01400804 	movi	r5,32
 4003aac:	28cbc83a 	sub	r5,r5,r3
 4003ab0:	88c8d83a 	srl	r4,r17,r3
 4003ab4:	8962983a 	sll	r17,r17,r5
 4003ab8:	114a983a 	sll	r5,r2,r5
 4003abc:	10c6d83a 	srl	r3,r2,r3
 4003ac0:	8804c03a 	cmpne	r2,r17,zero
 4003ac4:	290ab03a 	or	r5,r5,r4
 4003ac8:	28a2b03a 	or	r17,r5,r2
 4003acc:	0021883a 	mov	r16,zero
 4003ad0:	003fa206 	br	400395c <__alt_data_end+0xfc00395c>
 4003ad4:	2090b03a 	or	r8,r4,r2
 4003ad8:	40018e26 	beq	r8,zero,4004114 <__subdf3+0x83c>
 4003adc:	1007883a 	mov	r3,r2
 4003ae0:	2023883a 	mov	r17,r4
 4003ae4:	888001cc 	andi	r2,r17,7
 4003ae8:	103f9e1e 	bne	r2,zero,4003964 <__alt_data_end+0xfc003964>
 4003aec:	1804977a 	slli	r2,r3,29
 4003af0:	8822d0fa 	srli	r17,r17,3
 4003af4:	1810d0fa 	srli	r8,r3,3
 4003af8:	9100004c 	andi	r4,r18,1
 4003afc:	1444b03a 	or	r2,r2,r17
 4003b00:	00c1ffc4 	movi	r3,2047
 4003b04:	80c02826 	beq	r16,r3,4003ba8 <__subdf3+0x2d0>
 4003b08:	01400434 	movhi	r5,16
 4003b0c:	297fffc4 	addi	r5,r5,-1
 4003b10:	80e0703a 	and	r16,r16,r3
 4003b14:	414a703a 	and	r5,r8,r5
 4003b18:	003fa806 	br	40039bc <__alt_data_end+0xfc0039bc>
 4003b1c:	0080630e 	bge	zero,r2,4003cac <__subdf3+0x3d4>
 4003b20:	48003026 	beq	r9,zero,4003be4 <__subdf3+0x30c>
 4003b24:	0101ffc4 	movi	r4,2047
 4003b28:	813f8c26 	beq	r16,r4,400395c <__alt_data_end+0xfc00395c>
 4003b2c:	29402034 	orhi	r5,r5,128
 4003b30:	01000e04 	movi	r4,56
 4003b34:	2080a90e 	bge	r4,r2,4003ddc <__subdf3+0x504>
 4003b38:	298cb03a 	or	r6,r5,r6
 4003b3c:	3012c03a 	cmpne	r9,r6,zero
 4003b40:	0005883a 	mov	r2,zero
 4003b44:	4c53883a 	add	r9,r9,r17
 4003b48:	4c63803a 	cmpltu	r17,r9,r17
 4003b4c:	10c7883a 	add	r3,r2,r3
 4003b50:	88c7883a 	add	r3,r17,r3
 4003b54:	4823883a 	mov	r17,r9
 4003b58:	1880202c 	andhi	r2,r3,128
 4003b5c:	1000d026 	beq	r2,zero,4003ea0 <__subdf3+0x5c8>
 4003b60:	84000044 	addi	r16,r16,1
 4003b64:	0081ffc4 	movi	r2,2047
 4003b68:	8080fe26 	beq	r16,r2,4003f64 <__subdf3+0x68c>
 4003b6c:	00bfe034 	movhi	r2,65408
 4003b70:	10bfffc4 	addi	r2,r2,-1
 4003b74:	1886703a 	and	r3,r3,r2
 4003b78:	880ad07a 	srli	r5,r17,1
 4003b7c:	180497fa 	slli	r2,r3,31
 4003b80:	8900004c 	andi	r4,r17,1
 4003b84:	2922b03a 	or	r17,r5,r4
 4003b88:	1806d07a 	srli	r3,r3,1
 4003b8c:	1462b03a 	or	r17,r2,r17
 4003b90:	3825883a 	mov	r18,r7
 4003b94:	003f7106 	br	400395c <__alt_data_end+0xfc00395c>
 4003b98:	2984b03a 	or	r2,r5,r6
 4003b9c:	103f6826 	beq	r2,zero,4003940 <__alt_data_end+0xfc003940>
 4003ba0:	39c03fcc 	andi	r7,r7,255
 4003ba4:	003f6706 	br	4003944 <__alt_data_end+0xfc003944>
 4003ba8:	4086b03a 	or	r3,r8,r2
 4003bac:	18015226 	beq	r3,zero,40040f8 <__subdf3+0x820>
 4003bb0:	00c00434 	movhi	r3,16
 4003bb4:	41400234 	orhi	r5,r8,8
 4003bb8:	18ffffc4 	addi	r3,r3,-1
 4003bbc:	28ca703a 	and	r5,r5,r3
 4003bc0:	003f7e06 	br	40039bc <__alt_data_end+0xfc0039bc>
 4003bc4:	10bfffc4 	addi	r2,r2,-1
 4003bc8:	1000491e 	bne	r2,zero,4003cf0 <__subdf3+0x418>
 4003bcc:	898fc83a 	sub	r7,r17,r6
 4003bd0:	89e3803a 	cmpltu	r17,r17,r7
 4003bd4:	1947c83a 	sub	r3,r3,r5
 4003bd8:	1c47c83a 	sub	r3,r3,r17
 4003bdc:	3823883a 	mov	r17,r7
 4003be0:	003f9b06 	br	4003a50 <__alt_data_end+0xfc003a50>
 4003be4:	2988b03a 	or	r4,r5,r6
 4003be8:	203f5c26 	beq	r4,zero,400395c <__alt_data_end+0xfc00395c>
 4003bec:	10bfffc4 	addi	r2,r2,-1
 4003bf0:	1000931e 	bne	r2,zero,4003e40 <__subdf3+0x568>
 4003bf4:	898d883a 	add	r6,r17,r6
 4003bf8:	3463803a 	cmpltu	r17,r6,r17
 4003bfc:	1947883a 	add	r3,r3,r5
 4003c00:	88c7883a 	add	r3,r17,r3
 4003c04:	3023883a 	mov	r17,r6
 4003c08:	003fd306 	br	4003b58 <__alt_data_end+0xfc003b58>
 4003c0c:	1000541e 	bne	r2,zero,4003d60 <__subdf3+0x488>
 4003c10:	80800044 	addi	r2,r16,1
 4003c14:	1081ffcc 	andi	r2,r2,2047
 4003c18:	01000044 	movi	r4,1
 4003c1c:	2080a20e 	bge	r4,r2,4003ea8 <__subdf3+0x5d0>
 4003c20:	8989c83a 	sub	r4,r17,r6
 4003c24:	8905803a 	cmpltu	r2,r17,r4
 4003c28:	1967c83a 	sub	r19,r3,r5
 4003c2c:	98a7c83a 	sub	r19,r19,r2
 4003c30:	9880202c 	andhi	r2,r19,128
 4003c34:	10006326 	beq	r2,zero,4003dc4 <__subdf3+0x4ec>
 4003c38:	3463c83a 	sub	r17,r6,r17
 4003c3c:	28c7c83a 	sub	r3,r5,r3
 4003c40:	344d803a 	cmpltu	r6,r6,r17
 4003c44:	19a7c83a 	sub	r19,r3,r6
 4003c48:	3825883a 	mov	r18,r7
 4003c4c:	983f861e 	bne	r19,zero,4003a68 <__alt_data_end+0xfc003a68>
 4003c50:	8809883a 	mov	r4,r17
 4003c54:	400448c0 	call	400448c <__clzsi2>
 4003c58:	10800804 	addi	r2,r2,32
 4003c5c:	113ffe04 	addi	r4,r2,-8
 4003c60:	00c007c4 	movi	r3,31
 4003c64:	193f850e 	bge	r3,r4,4003a7c <__alt_data_end+0xfc003a7c>
 4003c68:	10bff604 	addi	r2,r2,-40
 4003c6c:	8884983a 	sll	r2,r17,r2
 4003c70:	0023883a 	mov	r17,zero
 4003c74:	243f880e 	bge	r4,r16,4003a98 <__alt_data_end+0xfc003a98>
 4003c78:	00ffe034 	movhi	r3,65408
 4003c7c:	18ffffc4 	addi	r3,r3,-1
 4003c80:	8121c83a 	sub	r16,r16,r4
 4003c84:	10c6703a 	and	r3,r2,r3
 4003c88:	003f3406 	br	400395c <__alt_data_end+0xfc00395c>
 4003c8c:	9100004c 	andi	r4,r18,1
 4003c90:	000b883a 	mov	r5,zero
 4003c94:	0005883a 	mov	r2,zero
 4003c98:	003f4806 	br	40039bc <__alt_data_end+0xfc0039bc>
 4003c9c:	298cb03a 	or	r6,r5,r6
 4003ca0:	300cc03a 	cmpne	r6,r6,zero
 4003ca4:	0005883a 	mov	r2,zero
 4003ca8:	003f6406 	br	4003a3c <__alt_data_end+0xfc003a3c>
 4003cac:	10009a1e 	bne	r2,zero,4003f18 <__subdf3+0x640>
 4003cb0:	82400044 	addi	r9,r16,1
 4003cb4:	4881ffcc 	andi	r2,r9,2047
 4003cb8:	02800044 	movi	r10,1
 4003cbc:	5080670e 	bge	r10,r2,4003e5c <__subdf3+0x584>
 4003cc0:	0081ffc4 	movi	r2,2047
 4003cc4:	4880af26 	beq	r9,r2,4003f84 <__subdf3+0x6ac>
 4003cc8:	898d883a 	add	r6,r17,r6
 4003ccc:	1945883a 	add	r2,r3,r5
 4003cd0:	3447803a 	cmpltu	r3,r6,r17
 4003cd4:	1887883a 	add	r3,r3,r2
 4003cd8:	182297fa 	slli	r17,r3,31
 4003cdc:	300cd07a 	srli	r6,r6,1
 4003ce0:	1806d07a 	srli	r3,r3,1
 4003ce4:	4821883a 	mov	r16,r9
 4003ce8:	89a2b03a 	or	r17,r17,r6
 4003cec:	003f1b06 	br	400395c <__alt_data_end+0xfc00395c>
 4003cf0:	0101ffc4 	movi	r4,2047
 4003cf4:	813f441e 	bne	r16,r4,4003a08 <__alt_data_end+0xfc003a08>
 4003cf8:	003f1806 	br	400395c <__alt_data_end+0xfc00395c>
 4003cfc:	843ff844 	addi	r16,r16,-31
 4003d00:	01400804 	movi	r5,32
 4003d04:	1408d83a 	srl	r4,r2,r16
 4003d08:	19405026 	beq	r3,r5,4003e4c <__subdf3+0x574>
 4003d0c:	01401004 	movi	r5,64
 4003d10:	28c7c83a 	sub	r3,r5,r3
 4003d14:	10c4983a 	sll	r2,r2,r3
 4003d18:	88a2b03a 	or	r17,r17,r2
 4003d1c:	8822c03a 	cmpne	r17,r17,zero
 4003d20:	2462b03a 	or	r17,r4,r17
 4003d24:	0007883a 	mov	r3,zero
 4003d28:	0021883a 	mov	r16,zero
 4003d2c:	003f6d06 	br	4003ae4 <__alt_data_end+0xfc003ae4>
 4003d30:	11fff804 	addi	r7,r2,-32
 4003d34:	01000804 	movi	r4,32
 4003d38:	29ced83a 	srl	r7,r5,r7
 4003d3c:	11004526 	beq	r2,r4,4003e54 <__subdf3+0x57c>
 4003d40:	01001004 	movi	r4,64
 4003d44:	2089c83a 	sub	r4,r4,r2
 4003d48:	2904983a 	sll	r2,r5,r4
 4003d4c:	118cb03a 	or	r6,r2,r6
 4003d50:	300cc03a 	cmpne	r6,r6,zero
 4003d54:	398cb03a 	or	r6,r7,r6
 4003d58:	0005883a 	mov	r2,zero
 4003d5c:	003f3706 	br	4003a3c <__alt_data_end+0xfc003a3c>
 4003d60:	80002a26 	beq	r16,zero,4003e0c <__subdf3+0x534>
 4003d64:	0101ffc4 	movi	r4,2047
 4003d68:	49006626 	beq	r9,r4,4003f04 <__subdf3+0x62c>
 4003d6c:	0085c83a 	sub	r2,zero,r2
 4003d70:	18c02034 	orhi	r3,r3,128
 4003d74:	01000e04 	movi	r4,56
 4003d78:	20807e16 	blt	r4,r2,4003f74 <__subdf3+0x69c>
 4003d7c:	010007c4 	movi	r4,31
 4003d80:	2080e716 	blt	r4,r2,4004120 <__subdf3+0x848>
 4003d84:	01000804 	movi	r4,32
 4003d88:	2089c83a 	sub	r4,r4,r2
 4003d8c:	1914983a 	sll	r10,r3,r4
 4003d90:	8890d83a 	srl	r8,r17,r2
 4003d94:	8908983a 	sll	r4,r17,r4
 4003d98:	1884d83a 	srl	r2,r3,r2
 4003d9c:	5222b03a 	or	r17,r10,r8
 4003da0:	2006c03a 	cmpne	r3,r4,zero
 4003da4:	88e2b03a 	or	r17,r17,r3
 4003da8:	3463c83a 	sub	r17,r6,r17
 4003dac:	2885c83a 	sub	r2,r5,r2
 4003db0:	344d803a 	cmpltu	r6,r6,r17
 4003db4:	1187c83a 	sub	r3,r2,r6
 4003db8:	4821883a 	mov	r16,r9
 4003dbc:	3825883a 	mov	r18,r7
 4003dc0:	003f2306 	br	4003a50 <__alt_data_end+0xfc003a50>
 4003dc4:	24d0b03a 	or	r8,r4,r19
 4003dc8:	40001b1e 	bne	r8,zero,4003e38 <__subdf3+0x560>
 4003dcc:	0005883a 	mov	r2,zero
 4003dd0:	0009883a 	mov	r4,zero
 4003dd4:	0021883a 	mov	r16,zero
 4003dd8:	003f4906 	br	4003b00 <__alt_data_end+0xfc003b00>
 4003ddc:	010007c4 	movi	r4,31
 4003de0:	20803a16 	blt	r4,r2,4003ecc <__subdf3+0x5f4>
 4003de4:	01000804 	movi	r4,32
 4003de8:	2089c83a 	sub	r4,r4,r2
 4003dec:	2912983a 	sll	r9,r5,r4
 4003df0:	3090d83a 	srl	r8,r6,r2
 4003df4:	3108983a 	sll	r4,r6,r4
 4003df8:	2884d83a 	srl	r2,r5,r2
 4003dfc:	4a12b03a 	or	r9,r9,r8
 4003e00:	2008c03a 	cmpne	r4,r4,zero
 4003e04:	4912b03a 	or	r9,r9,r4
 4003e08:	003f4e06 	br	4003b44 <__alt_data_end+0xfc003b44>
 4003e0c:	1c48b03a 	or	r4,r3,r17
 4003e10:	20003c26 	beq	r4,zero,4003f04 <__subdf3+0x62c>
 4003e14:	0084303a 	nor	r2,zero,r2
 4003e18:	1000381e 	bne	r2,zero,4003efc <__subdf3+0x624>
 4003e1c:	3463c83a 	sub	r17,r6,r17
 4003e20:	28c5c83a 	sub	r2,r5,r3
 4003e24:	344d803a 	cmpltu	r6,r6,r17
 4003e28:	1187c83a 	sub	r3,r2,r6
 4003e2c:	4821883a 	mov	r16,r9
 4003e30:	3825883a 	mov	r18,r7
 4003e34:	003f0606 	br	4003a50 <__alt_data_end+0xfc003a50>
 4003e38:	2023883a 	mov	r17,r4
 4003e3c:	003f0906 	br	4003a64 <__alt_data_end+0xfc003a64>
 4003e40:	0101ffc4 	movi	r4,2047
 4003e44:	813f3a1e 	bne	r16,r4,4003b30 <__alt_data_end+0xfc003b30>
 4003e48:	003ec406 	br	400395c <__alt_data_end+0xfc00395c>
 4003e4c:	0005883a 	mov	r2,zero
 4003e50:	003fb106 	br	4003d18 <__alt_data_end+0xfc003d18>
 4003e54:	0005883a 	mov	r2,zero
 4003e58:	003fbc06 	br	4003d4c <__alt_data_end+0xfc003d4c>
 4003e5c:	1c44b03a 	or	r2,r3,r17
 4003e60:	80008e1e 	bne	r16,zero,400409c <__subdf3+0x7c4>
 4003e64:	1000c826 	beq	r2,zero,4004188 <__subdf3+0x8b0>
 4003e68:	2984b03a 	or	r2,r5,r6
 4003e6c:	103ebb26 	beq	r2,zero,400395c <__alt_data_end+0xfc00395c>
 4003e70:	8989883a 	add	r4,r17,r6
 4003e74:	1945883a 	add	r2,r3,r5
 4003e78:	2447803a 	cmpltu	r3,r4,r17
 4003e7c:	1887883a 	add	r3,r3,r2
 4003e80:	1880202c 	andhi	r2,r3,128
 4003e84:	2023883a 	mov	r17,r4
 4003e88:	103f1626 	beq	r2,zero,4003ae4 <__alt_data_end+0xfc003ae4>
 4003e8c:	00bfe034 	movhi	r2,65408
 4003e90:	10bfffc4 	addi	r2,r2,-1
 4003e94:	5021883a 	mov	r16,r10
 4003e98:	1886703a 	and	r3,r3,r2
 4003e9c:	003eaf06 	br	400395c <__alt_data_end+0xfc00395c>
 4003ea0:	3825883a 	mov	r18,r7
 4003ea4:	003f0f06 	br	4003ae4 <__alt_data_end+0xfc003ae4>
 4003ea8:	1c44b03a 	or	r2,r3,r17
 4003eac:	8000251e 	bne	r16,zero,4003f44 <__subdf3+0x66c>
 4003eb0:	1000661e 	bne	r2,zero,400404c <__subdf3+0x774>
 4003eb4:	2990b03a 	or	r8,r5,r6
 4003eb8:	40009626 	beq	r8,zero,4004114 <__subdf3+0x83c>
 4003ebc:	2807883a 	mov	r3,r5
 4003ec0:	3023883a 	mov	r17,r6
 4003ec4:	3825883a 	mov	r18,r7
 4003ec8:	003ea406 	br	400395c <__alt_data_end+0xfc00395c>
 4003ecc:	127ff804 	addi	r9,r2,-32
 4003ed0:	01000804 	movi	r4,32
 4003ed4:	2a52d83a 	srl	r9,r5,r9
 4003ed8:	11008c26 	beq	r2,r4,400410c <__subdf3+0x834>
 4003edc:	01001004 	movi	r4,64
 4003ee0:	2085c83a 	sub	r2,r4,r2
 4003ee4:	2884983a 	sll	r2,r5,r2
 4003ee8:	118cb03a 	or	r6,r2,r6
 4003eec:	300cc03a 	cmpne	r6,r6,zero
 4003ef0:	4992b03a 	or	r9,r9,r6
 4003ef4:	0005883a 	mov	r2,zero
 4003ef8:	003f1206 	br	4003b44 <__alt_data_end+0xfc003b44>
 4003efc:	0101ffc4 	movi	r4,2047
 4003f00:	493f9c1e 	bne	r9,r4,4003d74 <__alt_data_end+0xfc003d74>
 4003f04:	2807883a 	mov	r3,r5
 4003f08:	3023883a 	mov	r17,r6
 4003f0c:	4821883a 	mov	r16,r9
 4003f10:	3825883a 	mov	r18,r7
 4003f14:	003e9106 	br	400395c <__alt_data_end+0xfc00395c>
 4003f18:	80001f1e 	bne	r16,zero,4003f98 <__subdf3+0x6c0>
 4003f1c:	1c48b03a 	or	r4,r3,r17
 4003f20:	20005a26 	beq	r4,zero,400408c <__subdf3+0x7b4>
 4003f24:	0084303a 	nor	r2,zero,r2
 4003f28:	1000561e 	bne	r2,zero,4004084 <__subdf3+0x7ac>
 4003f2c:	89a3883a 	add	r17,r17,r6
 4003f30:	1945883a 	add	r2,r3,r5
 4003f34:	898d803a 	cmpltu	r6,r17,r6
 4003f38:	3087883a 	add	r3,r6,r2
 4003f3c:	4821883a 	mov	r16,r9
 4003f40:	003f0506 	br	4003b58 <__alt_data_end+0xfc003b58>
 4003f44:	10002b1e 	bne	r2,zero,4003ff4 <__subdf3+0x71c>
 4003f48:	2984b03a 	or	r2,r5,r6
 4003f4c:	10008026 	beq	r2,zero,4004150 <__subdf3+0x878>
 4003f50:	2807883a 	mov	r3,r5
 4003f54:	3023883a 	mov	r17,r6
 4003f58:	3825883a 	mov	r18,r7
 4003f5c:	0401ffc4 	movi	r16,2047
 4003f60:	003e7e06 	br	400395c <__alt_data_end+0xfc00395c>
 4003f64:	3809883a 	mov	r4,r7
 4003f68:	0011883a 	mov	r8,zero
 4003f6c:	0005883a 	mov	r2,zero
 4003f70:	003ee306 	br	4003b00 <__alt_data_end+0xfc003b00>
 4003f74:	1c62b03a 	or	r17,r3,r17
 4003f78:	8822c03a 	cmpne	r17,r17,zero
 4003f7c:	0005883a 	mov	r2,zero
 4003f80:	003f8906 	br	4003da8 <__alt_data_end+0xfc003da8>
 4003f84:	3809883a 	mov	r4,r7
 4003f88:	4821883a 	mov	r16,r9
 4003f8c:	0011883a 	mov	r8,zero
 4003f90:	0005883a 	mov	r2,zero
 4003f94:	003eda06 	br	4003b00 <__alt_data_end+0xfc003b00>
 4003f98:	0101ffc4 	movi	r4,2047
 4003f9c:	49003b26 	beq	r9,r4,400408c <__subdf3+0x7b4>
 4003fa0:	0085c83a 	sub	r2,zero,r2
 4003fa4:	18c02034 	orhi	r3,r3,128
 4003fa8:	01000e04 	movi	r4,56
 4003fac:	20806e16 	blt	r4,r2,4004168 <__subdf3+0x890>
 4003fb0:	010007c4 	movi	r4,31
 4003fb4:	20807716 	blt	r4,r2,4004194 <__subdf3+0x8bc>
 4003fb8:	01000804 	movi	r4,32
 4003fbc:	2089c83a 	sub	r4,r4,r2
 4003fc0:	1914983a 	sll	r10,r3,r4
 4003fc4:	8890d83a 	srl	r8,r17,r2
 4003fc8:	8908983a 	sll	r4,r17,r4
 4003fcc:	1884d83a 	srl	r2,r3,r2
 4003fd0:	5222b03a 	or	r17,r10,r8
 4003fd4:	2006c03a 	cmpne	r3,r4,zero
 4003fd8:	88e2b03a 	or	r17,r17,r3
 4003fdc:	89a3883a 	add	r17,r17,r6
 4003fe0:	1145883a 	add	r2,r2,r5
 4003fe4:	898d803a 	cmpltu	r6,r17,r6
 4003fe8:	3087883a 	add	r3,r6,r2
 4003fec:	4821883a 	mov	r16,r9
 4003ff0:	003ed906 	br	4003b58 <__alt_data_end+0xfc003b58>
 4003ff4:	2984b03a 	or	r2,r5,r6
 4003ff8:	10004226 	beq	r2,zero,4004104 <__subdf3+0x82c>
 4003ffc:	1808d0fa 	srli	r4,r3,3
 4004000:	8822d0fa 	srli	r17,r17,3
 4004004:	1806977a 	slli	r3,r3,29
 4004008:	2080022c 	andhi	r2,r4,8
 400400c:	1c62b03a 	or	r17,r3,r17
 4004010:	10000826 	beq	r2,zero,4004034 <__subdf3+0x75c>
 4004014:	2812d0fa 	srli	r9,r5,3
 4004018:	4880022c 	andhi	r2,r9,8
 400401c:	1000051e 	bne	r2,zero,4004034 <__subdf3+0x75c>
 4004020:	300cd0fa 	srli	r6,r6,3
 4004024:	2804977a 	slli	r2,r5,29
 4004028:	4809883a 	mov	r4,r9
 400402c:	3825883a 	mov	r18,r7
 4004030:	11a2b03a 	or	r17,r2,r6
 4004034:	8806d77a 	srli	r3,r17,29
 4004038:	200890fa 	slli	r4,r4,3
 400403c:	882290fa 	slli	r17,r17,3
 4004040:	0401ffc4 	movi	r16,2047
 4004044:	1906b03a 	or	r3,r3,r4
 4004048:	003e4406 	br	400395c <__alt_data_end+0xfc00395c>
 400404c:	2984b03a 	or	r2,r5,r6
 4004050:	103e4226 	beq	r2,zero,400395c <__alt_data_end+0xfc00395c>
 4004054:	8989c83a 	sub	r4,r17,r6
 4004058:	8911803a 	cmpltu	r8,r17,r4
 400405c:	1945c83a 	sub	r2,r3,r5
 4004060:	1205c83a 	sub	r2,r2,r8
 4004064:	1200202c 	andhi	r8,r2,128
 4004068:	403e9a26 	beq	r8,zero,4003ad4 <__alt_data_end+0xfc003ad4>
 400406c:	3463c83a 	sub	r17,r6,r17
 4004070:	28c5c83a 	sub	r2,r5,r3
 4004074:	344d803a 	cmpltu	r6,r6,r17
 4004078:	1187c83a 	sub	r3,r2,r6
 400407c:	3825883a 	mov	r18,r7
 4004080:	003e3606 	br	400395c <__alt_data_end+0xfc00395c>
 4004084:	0101ffc4 	movi	r4,2047
 4004088:	493fc71e 	bne	r9,r4,4003fa8 <__alt_data_end+0xfc003fa8>
 400408c:	2807883a 	mov	r3,r5
 4004090:	3023883a 	mov	r17,r6
 4004094:	4821883a 	mov	r16,r9
 4004098:	003e3006 	br	400395c <__alt_data_end+0xfc00395c>
 400409c:	10003626 	beq	r2,zero,4004178 <__subdf3+0x8a0>
 40040a0:	2984b03a 	or	r2,r5,r6
 40040a4:	10001726 	beq	r2,zero,4004104 <__subdf3+0x82c>
 40040a8:	1808d0fa 	srli	r4,r3,3
 40040ac:	8822d0fa 	srli	r17,r17,3
 40040b0:	1806977a 	slli	r3,r3,29
 40040b4:	2080022c 	andhi	r2,r4,8
 40040b8:	1c62b03a 	or	r17,r3,r17
 40040bc:	10000726 	beq	r2,zero,40040dc <__subdf3+0x804>
 40040c0:	2812d0fa 	srli	r9,r5,3
 40040c4:	4880022c 	andhi	r2,r9,8
 40040c8:	1000041e 	bne	r2,zero,40040dc <__subdf3+0x804>
 40040cc:	300cd0fa 	srli	r6,r6,3
 40040d0:	2804977a 	slli	r2,r5,29
 40040d4:	4809883a 	mov	r4,r9
 40040d8:	11a2b03a 	or	r17,r2,r6
 40040dc:	8806d77a 	srli	r3,r17,29
 40040e0:	200890fa 	slli	r4,r4,3
 40040e4:	882290fa 	slli	r17,r17,3
 40040e8:	3825883a 	mov	r18,r7
 40040ec:	1906b03a 	or	r3,r3,r4
 40040f0:	0401ffc4 	movi	r16,2047
 40040f4:	003e1906 	br	400395c <__alt_data_end+0xfc00395c>
 40040f8:	000b883a 	mov	r5,zero
 40040fc:	0005883a 	mov	r2,zero
 4004100:	003e2e06 	br	40039bc <__alt_data_end+0xfc0039bc>
 4004104:	0401ffc4 	movi	r16,2047
 4004108:	003e1406 	br	400395c <__alt_data_end+0xfc00395c>
 400410c:	0005883a 	mov	r2,zero
 4004110:	003f7506 	br	4003ee8 <__alt_data_end+0xfc003ee8>
 4004114:	0005883a 	mov	r2,zero
 4004118:	0009883a 	mov	r4,zero
 400411c:	003e7806 	br	4003b00 <__alt_data_end+0xfc003b00>
 4004120:	123ff804 	addi	r8,r2,-32
 4004124:	01000804 	movi	r4,32
 4004128:	1a10d83a 	srl	r8,r3,r8
 400412c:	11002526 	beq	r2,r4,40041c4 <__subdf3+0x8ec>
 4004130:	01001004 	movi	r4,64
 4004134:	2085c83a 	sub	r2,r4,r2
 4004138:	1884983a 	sll	r2,r3,r2
 400413c:	1444b03a 	or	r2,r2,r17
 4004140:	1004c03a 	cmpne	r2,r2,zero
 4004144:	40a2b03a 	or	r17,r8,r2
 4004148:	0005883a 	mov	r2,zero
 400414c:	003f1606 	br	4003da8 <__alt_data_end+0xfc003da8>
 4004150:	02000434 	movhi	r8,16
 4004154:	0009883a 	mov	r4,zero
 4004158:	423fffc4 	addi	r8,r8,-1
 400415c:	00bfffc4 	movi	r2,-1
 4004160:	0401ffc4 	movi	r16,2047
 4004164:	003e6606 	br	4003b00 <__alt_data_end+0xfc003b00>
 4004168:	1c62b03a 	or	r17,r3,r17
 400416c:	8822c03a 	cmpne	r17,r17,zero
 4004170:	0005883a 	mov	r2,zero
 4004174:	003f9906 	br	4003fdc <__alt_data_end+0xfc003fdc>
 4004178:	2807883a 	mov	r3,r5
 400417c:	3023883a 	mov	r17,r6
 4004180:	0401ffc4 	movi	r16,2047
 4004184:	003df506 	br	400395c <__alt_data_end+0xfc00395c>
 4004188:	2807883a 	mov	r3,r5
 400418c:	3023883a 	mov	r17,r6
 4004190:	003df206 	br	400395c <__alt_data_end+0xfc00395c>
 4004194:	123ff804 	addi	r8,r2,-32
 4004198:	01000804 	movi	r4,32
 400419c:	1a10d83a 	srl	r8,r3,r8
 40041a0:	11000a26 	beq	r2,r4,40041cc <__subdf3+0x8f4>
 40041a4:	01001004 	movi	r4,64
 40041a8:	2085c83a 	sub	r2,r4,r2
 40041ac:	1884983a 	sll	r2,r3,r2
 40041b0:	1444b03a 	or	r2,r2,r17
 40041b4:	1004c03a 	cmpne	r2,r2,zero
 40041b8:	40a2b03a 	or	r17,r8,r2
 40041bc:	0005883a 	mov	r2,zero
 40041c0:	003f8606 	br	4003fdc <__alt_data_end+0xfc003fdc>
 40041c4:	0005883a 	mov	r2,zero
 40041c8:	003fdc06 	br	400413c <__alt_data_end+0xfc00413c>
 40041cc:	0005883a 	mov	r2,zero
 40041d0:	003ff706 	br	40041b0 <__alt_data_end+0xfc0041b0>

040041d4 <__extendsfdf2>:
 40041d4:	200ad5fa 	srli	r5,r4,23
 40041d8:	defffd04 	addi	sp,sp,-12
 40041dc:	dc400115 	stw	r17,4(sp)
 40041e0:	29403fcc 	andi	r5,r5,255
 40041e4:	29800044 	addi	r6,r5,1
 40041e8:	04402034 	movhi	r17,128
 40041ec:	dc000015 	stw	r16,0(sp)
 40041f0:	8c7fffc4 	addi	r17,r17,-1
 40041f4:	dfc00215 	stw	ra,8(sp)
 40041f8:	31803fcc 	andi	r6,r6,255
 40041fc:	00800044 	movi	r2,1
 4004200:	8922703a 	and	r17,r17,r4
 4004204:	2020d7fa 	srli	r16,r4,31
 4004208:	1180110e 	bge	r2,r6,4004250 <__extendsfdf2+0x7c>
 400420c:	880cd0fa 	srli	r6,r17,3
 4004210:	8822977a 	slli	r17,r17,29
 4004214:	2940e004 	addi	r5,r5,896
 4004218:	2941ffcc 	andi	r5,r5,2047
 400421c:	2804953a 	slli	r2,r5,20
 4004220:	01400434 	movhi	r5,16
 4004224:	800697fa 	slli	r3,r16,31
 4004228:	297fffc4 	addi	r5,r5,-1
 400422c:	314a703a 	and	r5,r6,r5
 4004230:	288ab03a 	or	r5,r5,r2
 4004234:	28c6b03a 	or	r3,r5,r3
 4004238:	8805883a 	mov	r2,r17
 400423c:	dfc00217 	ldw	ra,8(sp)
 4004240:	dc400117 	ldw	r17,4(sp)
 4004244:	dc000017 	ldw	r16,0(sp)
 4004248:	dec00304 	addi	sp,sp,12
 400424c:	f800283a 	ret
 4004250:	2800111e 	bne	r5,zero,4004298 <__extendsfdf2+0xc4>
 4004254:	88001c26 	beq	r17,zero,40042c8 <__extendsfdf2+0xf4>
 4004258:	8809883a 	mov	r4,r17
 400425c:	400448c0 	call	400448c <__clzsi2>
 4004260:	00c00284 	movi	r3,10
 4004264:	18801b16 	blt	r3,r2,40042d4 <__extendsfdf2+0x100>
 4004268:	018002c4 	movi	r6,11
 400426c:	308dc83a 	sub	r6,r6,r2
 4004270:	11000544 	addi	r4,r2,21
 4004274:	8986d83a 	srl	r3,r17,r6
 4004278:	8922983a 	sll	r17,r17,r4
 400427c:	0180e244 	movi	r6,905
 4004280:	01400434 	movhi	r5,16
 4004284:	3085c83a 	sub	r2,r6,r2
 4004288:	297fffc4 	addi	r5,r5,-1
 400428c:	194c703a 	and	r6,r3,r5
 4004290:	1141ffcc 	andi	r5,r2,2047
 4004294:	003fe006 	br	4004218 <__alt_data_end+0xfc004218>
 4004298:	88000826 	beq	r17,zero,40042bc <__extendsfdf2+0xe8>
 400429c:	880cd0fa 	srli	r6,r17,3
 40042a0:	00800434 	movhi	r2,16
 40042a4:	10bfffc4 	addi	r2,r2,-1
 40042a8:	31800234 	orhi	r6,r6,8
 40042ac:	8822977a 	slli	r17,r17,29
 40042b0:	308c703a 	and	r6,r6,r2
 40042b4:	0141ffc4 	movi	r5,2047
 40042b8:	003fd706 	br	4004218 <__alt_data_end+0xfc004218>
 40042bc:	0141ffc4 	movi	r5,2047
 40042c0:	000d883a 	mov	r6,zero
 40042c4:	003fd406 	br	4004218 <__alt_data_end+0xfc004218>
 40042c8:	000b883a 	mov	r5,zero
 40042cc:	000d883a 	mov	r6,zero
 40042d0:	003fd106 	br	4004218 <__alt_data_end+0xfc004218>
 40042d4:	11bffd44 	addi	r6,r2,-11
 40042d8:	8986983a 	sll	r3,r17,r6
 40042dc:	0023883a 	mov	r17,zero
 40042e0:	003fe606 	br	400427c <__alt_data_end+0xfc00427c>

040042e4 <__truncdfsf2>:
 40042e4:	2810d53a 	srli	r8,r5,20
 40042e8:	01c00434 	movhi	r7,16
 40042ec:	39ffffc4 	addi	r7,r7,-1
 40042f0:	29ce703a 	and	r7,r5,r7
 40042f4:	4201ffcc 	andi	r8,r8,2047
 40042f8:	380e90fa 	slli	r7,r7,3
 40042fc:	200cd77a 	srli	r6,r4,29
 4004300:	42400044 	addi	r9,r8,1
 4004304:	4a41ffcc 	andi	r9,r9,2047
 4004308:	00c00044 	movi	r3,1
 400430c:	280ad7fa 	srli	r5,r5,31
 4004310:	31ceb03a 	or	r7,r6,r7
 4004314:	200490fa 	slli	r2,r4,3
 4004318:	1a40230e 	bge	r3,r9,40043a8 <__truncdfsf2+0xc4>
 400431c:	40ff2004 	addi	r3,r8,-896
 4004320:	01803f84 	movi	r6,254
 4004324:	30c01516 	blt	r6,r3,400437c <__truncdfsf2+0x98>
 4004328:	00c0380e 	bge	zero,r3,400440c <__truncdfsf2+0x128>
 400432c:	200c91ba 	slli	r6,r4,6
 4004330:	380e90fa 	slli	r7,r7,3
 4004334:	1004d77a 	srli	r2,r2,29
 4004338:	300cc03a 	cmpne	r6,r6,zero
 400433c:	31ccb03a 	or	r6,r6,r7
 4004340:	308cb03a 	or	r6,r6,r2
 4004344:	308001cc 	andi	r2,r6,7
 4004348:	10000426 	beq	r2,zero,400435c <__truncdfsf2+0x78>
 400434c:	308003cc 	andi	r2,r6,15
 4004350:	01000104 	movi	r4,4
 4004354:	11000126 	beq	r2,r4,400435c <__truncdfsf2+0x78>
 4004358:	31800104 	addi	r6,r6,4
 400435c:	3081002c 	andhi	r2,r6,1024
 4004360:	10001626 	beq	r2,zero,40043bc <__truncdfsf2+0xd8>
 4004364:	18c00044 	addi	r3,r3,1
 4004368:	00803fc4 	movi	r2,255
 400436c:	18800326 	beq	r3,r2,400437c <__truncdfsf2+0x98>
 4004370:	300c91ba 	slli	r6,r6,6
 4004374:	300cd27a 	srli	r6,r6,9
 4004378:	00000206 	br	4004384 <__truncdfsf2+0xa0>
 400437c:	00ffffc4 	movi	r3,-1
 4004380:	000d883a 	mov	r6,zero
 4004384:	18c03fcc 	andi	r3,r3,255
 4004388:	180895fa 	slli	r4,r3,23
 400438c:	00c02034 	movhi	r3,128
 4004390:	280a97fa 	slli	r5,r5,31
 4004394:	18ffffc4 	addi	r3,r3,-1
 4004398:	30c6703a 	and	r3,r6,r3
 400439c:	1906b03a 	or	r3,r3,r4
 40043a0:	1944b03a 	or	r2,r3,r5
 40043a4:	f800283a 	ret
 40043a8:	40000b1e 	bne	r8,zero,40043d8 <__truncdfsf2+0xf4>
 40043ac:	388cb03a 	or	r6,r7,r2
 40043b0:	0007883a 	mov	r3,zero
 40043b4:	30000426 	beq	r6,zero,40043c8 <__truncdfsf2+0xe4>
 40043b8:	01800144 	movi	r6,5
 40043bc:	00803fc4 	movi	r2,255
 40043c0:	300cd0fa 	srli	r6,r6,3
 40043c4:	18800a26 	beq	r3,r2,40043f0 <__truncdfsf2+0x10c>
 40043c8:	00802034 	movhi	r2,128
 40043cc:	10bfffc4 	addi	r2,r2,-1
 40043d0:	308c703a 	and	r6,r6,r2
 40043d4:	003feb06 	br	4004384 <__alt_data_end+0xfc004384>
 40043d8:	3888b03a 	or	r4,r7,r2
 40043dc:	203fe726 	beq	r4,zero,400437c <__alt_data_end+0xfc00437c>
 40043e0:	380c90fa 	slli	r6,r7,3
 40043e4:	00c03fc4 	movi	r3,255
 40043e8:	31808034 	orhi	r6,r6,512
 40043ec:	003fd506 	br	4004344 <__alt_data_end+0xfc004344>
 40043f0:	303fe226 	beq	r6,zero,400437c <__alt_data_end+0xfc00437c>
 40043f4:	00802034 	movhi	r2,128
 40043f8:	31801034 	orhi	r6,r6,64
 40043fc:	10bfffc4 	addi	r2,r2,-1
 4004400:	00ffffc4 	movi	r3,-1
 4004404:	308c703a 	and	r6,r6,r2
 4004408:	003fde06 	br	4004384 <__alt_data_end+0xfc004384>
 400440c:	013ffa44 	movi	r4,-23
 4004410:	19000e16 	blt	r3,r4,400444c <__truncdfsf2+0x168>
 4004414:	01000784 	movi	r4,30
 4004418:	20c9c83a 	sub	r4,r4,r3
 400441c:	018007c4 	movi	r6,31
 4004420:	39c02034 	orhi	r7,r7,128
 4004424:	31000b16 	blt	r6,r4,4004454 <__truncdfsf2+0x170>
 4004428:	423f2084 	addi	r8,r8,-894
 400442c:	120c983a 	sll	r6,r2,r8
 4004430:	3a0e983a 	sll	r7,r7,r8
 4004434:	1104d83a 	srl	r2,r2,r4
 4004438:	300cc03a 	cmpne	r6,r6,zero
 400443c:	31ceb03a 	or	r7,r6,r7
 4004440:	388cb03a 	or	r6,r7,r2
 4004444:	0007883a 	mov	r3,zero
 4004448:	003fbe06 	br	4004344 <__alt_data_end+0xfc004344>
 400444c:	0007883a 	mov	r3,zero
 4004450:	003fd906 	br	40043b8 <__alt_data_end+0xfc0043b8>
 4004454:	01bfff84 	movi	r6,-2
 4004458:	30cdc83a 	sub	r6,r6,r3
 400445c:	00c00804 	movi	r3,32
 4004460:	398cd83a 	srl	r6,r7,r6
 4004464:	20c00726 	beq	r4,r3,4004484 <__truncdfsf2+0x1a0>
 4004468:	423f2884 	addi	r8,r8,-862
 400446c:	3a0e983a 	sll	r7,r7,r8
 4004470:	3884b03a 	or	r2,r7,r2
 4004474:	1004c03a 	cmpne	r2,r2,zero
 4004478:	118cb03a 	or	r6,r2,r6
 400447c:	0007883a 	mov	r3,zero
 4004480:	003fb006 	br	4004344 <__alt_data_end+0xfc004344>
 4004484:	000f883a 	mov	r7,zero
 4004488:	003ff906 	br	4004470 <__alt_data_end+0xfc004470>

0400448c <__clzsi2>:
 400448c:	00bfffd4 	movui	r2,65535
 4004490:	11000536 	bltu	r2,r4,40044a8 <__clzsi2+0x1c>
 4004494:	00803fc4 	movi	r2,255
 4004498:	11000f36 	bltu	r2,r4,40044d8 <__clzsi2+0x4c>
 400449c:	00800804 	movi	r2,32
 40044a0:	0007883a 	mov	r3,zero
 40044a4:	00000506 	br	40044bc <__clzsi2+0x30>
 40044a8:	00804034 	movhi	r2,256
 40044ac:	10bfffc4 	addi	r2,r2,-1
 40044b0:	11000c2e 	bgeu	r2,r4,40044e4 <__clzsi2+0x58>
 40044b4:	00800204 	movi	r2,8
 40044b8:	00c00604 	movi	r3,24
 40044bc:	20c8d83a 	srl	r4,r4,r3
 40044c0:	00c10074 	movhi	r3,1025
 40044c4:	18d44744 	addi	r3,r3,20765
 40044c8:	1909883a 	add	r4,r3,r4
 40044cc:	20c00003 	ldbu	r3,0(r4)
 40044d0:	10c5c83a 	sub	r2,r2,r3
 40044d4:	f800283a 	ret
 40044d8:	00800604 	movi	r2,24
 40044dc:	00c00204 	movi	r3,8
 40044e0:	003ff606 	br	40044bc <__alt_data_end+0xfc0044bc>
 40044e4:	00800404 	movi	r2,16
 40044e8:	1007883a 	mov	r3,r2
 40044ec:	003ff306 	br	40044bc <__alt_data_end+0xfc0044bc>

040044f0 <__divsi3>:
 40044f0:	20001b16 	blt	r4,zero,4004560 <__divsi3+0x70>
 40044f4:	000f883a 	mov	r7,zero
 40044f8:	28001616 	blt	r5,zero,4004554 <__divsi3+0x64>
 40044fc:	200d883a 	mov	r6,r4
 4004500:	29001a2e 	bgeu	r5,r4,400456c <__divsi3+0x7c>
 4004504:	00800804 	movi	r2,32
 4004508:	00c00044 	movi	r3,1
 400450c:	00000106 	br	4004514 <__divsi3+0x24>
 4004510:	10000d26 	beq	r2,zero,4004548 <__divsi3+0x58>
 4004514:	294b883a 	add	r5,r5,r5
 4004518:	10bfffc4 	addi	r2,r2,-1
 400451c:	18c7883a 	add	r3,r3,r3
 4004520:	293ffb36 	bltu	r5,r4,4004510 <__alt_data_end+0xfc004510>
 4004524:	0005883a 	mov	r2,zero
 4004528:	18000726 	beq	r3,zero,4004548 <__divsi3+0x58>
 400452c:	0005883a 	mov	r2,zero
 4004530:	31400236 	bltu	r6,r5,400453c <__divsi3+0x4c>
 4004534:	314dc83a 	sub	r6,r6,r5
 4004538:	10c4b03a 	or	r2,r2,r3
 400453c:	1806d07a 	srli	r3,r3,1
 4004540:	280ad07a 	srli	r5,r5,1
 4004544:	183ffa1e 	bne	r3,zero,4004530 <__alt_data_end+0xfc004530>
 4004548:	38000126 	beq	r7,zero,4004550 <__divsi3+0x60>
 400454c:	0085c83a 	sub	r2,zero,r2
 4004550:	f800283a 	ret
 4004554:	014bc83a 	sub	r5,zero,r5
 4004558:	39c0005c 	xori	r7,r7,1
 400455c:	003fe706 	br	40044fc <__alt_data_end+0xfc0044fc>
 4004560:	0109c83a 	sub	r4,zero,r4
 4004564:	01c00044 	movi	r7,1
 4004568:	003fe306 	br	40044f8 <__alt_data_end+0xfc0044f8>
 400456c:	00c00044 	movi	r3,1
 4004570:	003fee06 	br	400452c <__alt_data_end+0xfc00452c>

04004574 <__modsi3>:
 4004574:	20001716 	blt	r4,zero,40045d4 <__modsi3+0x60>
 4004578:	000f883a 	mov	r7,zero
 400457c:	2005883a 	mov	r2,r4
 4004580:	28001216 	blt	r5,zero,40045cc <__modsi3+0x58>
 4004584:	2900162e 	bgeu	r5,r4,40045e0 <__modsi3+0x6c>
 4004588:	01800804 	movi	r6,32
 400458c:	00c00044 	movi	r3,1
 4004590:	00000106 	br	4004598 <__modsi3+0x24>
 4004594:	30000a26 	beq	r6,zero,40045c0 <__modsi3+0x4c>
 4004598:	294b883a 	add	r5,r5,r5
 400459c:	31bfffc4 	addi	r6,r6,-1
 40045a0:	18c7883a 	add	r3,r3,r3
 40045a4:	293ffb36 	bltu	r5,r4,4004594 <__alt_data_end+0xfc004594>
 40045a8:	18000526 	beq	r3,zero,40045c0 <__modsi3+0x4c>
 40045ac:	1806d07a 	srli	r3,r3,1
 40045b0:	11400136 	bltu	r2,r5,40045b8 <__modsi3+0x44>
 40045b4:	1145c83a 	sub	r2,r2,r5
 40045b8:	280ad07a 	srli	r5,r5,1
 40045bc:	183ffb1e 	bne	r3,zero,40045ac <__alt_data_end+0xfc0045ac>
 40045c0:	38000126 	beq	r7,zero,40045c8 <__modsi3+0x54>
 40045c4:	0085c83a 	sub	r2,zero,r2
 40045c8:	f800283a 	ret
 40045cc:	014bc83a 	sub	r5,zero,r5
 40045d0:	003fec06 	br	4004584 <__alt_data_end+0xfc004584>
 40045d4:	0109c83a 	sub	r4,zero,r4
 40045d8:	01c00044 	movi	r7,1
 40045dc:	003fe706 	br	400457c <__alt_data_end+0xfc00457c>
 40045e0:	00c00044 	movi	r3,1
 40045e4:	003ff106 	br	40045ac <__alt_data_end+0xfc0045ac>

040045e8 <__udivsi3>:
 40045e8:	200d883a 	mov	r6,r4
 40045ec:	2900152e 	bgeu	r5,r4,4004644 <__udivsi3+0x5c>
 40045f0:	28001416 	blt	r5,zero,4004644 <__udivsi3+0x5c>
 40045f4:	00800804 	movi	r2,32
 40045f8:	00c00044 	movi	r3,1
 40045fc:	00000206 	br	4004608 <__udivsi3+0x20>
 4004600:	10000e26 	beq	r2,zero,400463c <__udivsi3+0x54>
 4004604:	28000516 	blt	r5,zero,400461c <__udivsi3+0x34>
 4004608:	294b883a 	add	r5,r5,r5
 400460c:	10bfffc4 	addi	r2,r2,-1
 4004610:	18c7883a 	add	r3,r3,r3
 4004614:	293ffa36 	bltu	r5,r4,4004600 <__alt_data_end+0xfc004600>
 4004618:	18000826 	beq	r3,zero,400463c <__udivsi3+0x54>
 400461c:	0005883a 	mov	r2,zero
 4004620:	31400236 	bltu	r6,r5,400462c <__udivsi3+0x44>
 4004624:	314dc83a 	sub	r6,r6,r5
 4004628:	10c4b03a 	or	r2,r2,r3
 400462c:	1806d07a 	srli	r3,r3,1
 4004630:	280ad07a 	srli	r5,r5,1
 4004634:	183ffa1e 	bne	r3,zero,4004620 <__alt_data_end+0xfc004620>
 4004638:	f800283a 	ret
 400463c:	0005883a 	mov	r2,zero
 4004640:	f800283a 	ret
 4004644:	00c00044 	movi	r3,1
 4004648:	003ff406 	br	400461c <__alt_data_end+0xfc00461c>

0400464c <__umodsi3>:
 400464c:	2005883a 	mov	r2,r4
 4004650:	2900122e 	bgeu	r5,r4,400469c <__umodsi3+0x50>
 4004654:	28001116 	blt	r5,zero,400469c <__umodsi3+0x50>
 4004658:	01800804 	movi	r6,32
 400465c:	00c00044 	movi	r3,1
 4004660:	00000206 	br	400466c <__umodsi3+0x20>
 4004664:	30000c26 	beq	r6,zero,4004698 <__umodsi3+0x4c>
 4004668:	28000516 	blt	r5,zero,4004680 <__umodsi3+0x34>
 400466c:	294b883a 	add	r5,r5,r5
 4004670:	31bfffc4 	addi	r6,r6,-1
 4004674:	18c7883a 	add	r3,r3,r3
 4004678:	293ffa36 	bltu	r5,r4,4004664 <__alt_data_end+0xfc004664>
 400467c:	18000626 	beq	r3,zero,4004698 <__umodsi3+0x4c>
 4004680:	1806d07a 	srli	r3,r3,1
 4004684:	11400136 	bltu	r2,r5,400468c <__umodsi3+0x40>
 4004688:	1145c83a 	sub	r2,r2,r5
 400468c:	280ad07a 	srli	r5,r5,1
 4004690:	183ffb1e 	bne	r3,zero,4004680 <__alt_data_end+0xfc004680>
 4004694:	f800283a 	ret
 4004698:	f800283a 	ret
 400469c:	00c00044 	movi	r3,1
 40046a0:	003ff706 	br	4004680 <__alt_data_end+0xfc004680>

040046a4 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
 40046a4:	deffff04 	addi	sp,sp,-4
 40046a8:	df000015 	stw	fp,0(sp)
 40046ac:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
 40046b0:	d0a00917 	ldw	r2,-32732(gp)
}
 40046b4:	e037883a 	mov	sp,fp
 40046b8:	df000017 	ldw	fp,0(sp)
 40046bc:	dec00104 	addi	sp,sp,4
 40046c0:	f800283a 	ret

040046c4 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 40046c4:	defff804 	addi	sp,sp,-32
 40046c8:	dfc00515 	stw	ra,20(sp)
 40046cc:	df000415 	stw	fp,16(sp)
 40046d0:	df000404 	addi	fp,sp,16
 40046d4:	e13ffe15 	stw	r4,-8(fp)
 40046d8:	e17fff15 	stw	r5,-4(fp)
 40046dc:	e1800215 	stw	r6,8(fp)
 40046e0:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 40046e4:	e0800204 	addi	r2,fp,8
 40046e8:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 40046ec:	e0bffe17 	ldw	r2,-8(fp)
 40046f0:	10800217 	ldw	r2,8(r2)
 40046f4:	e0fffd17 	ldw	r3,-12(fp)
 40046f8:	180f883a 	mov	r7,r3
 40046fc:	e1bfff17 	ldw	r6,-4(fp)
 4004700:	100b883a 	mov	r5,r2
 4004704:	e13ffe17 	ldw	r4,-8(fp)
 4004708:	4004d940 	call	4004d94 <___vfprintf_internal_r>
 400470c:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 4004710:	e0bffc17 	ldw	r2,-16(fp)
}
 4004714:	e037883a 	mov	sp,fp
 4004718:	dfc00117 	ldw	ra,4(sp)
 400471c:	df000017 	ldw	fp,0(sp)
 4004720:	dec00404 	addi	sp,sp,16
 4004724:	f800283a 	ret

04004728 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 4004728:	defff704 	addi	sp,sp,-36
 400472c:	dfc00515 	stw	ra,20(sp)
 4004730:	df000415 	stw	fp,16(sp)
 4004734:	df000404 	addi	fp,sp,16
 4004738:	e13fff15 	stw	r4,-4(fp)
 400473c:	e1400215 	stw	r5,8(fp)
 4004740:	e1800315 	stw	r6,12(fp)
 4004744:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 4004748:	d0a00917 	ldw	r2,-32732(gp)
 400474c:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 4004750:	e0800204 	addi	r2,fp,8
 4004754:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 4004758:	d0a00917 	ldw	r2,-32732(gp)
 400475c:	10800217 	ldw	r2,8(r2)
 4004760:	e0fffe17 	ldw	r3,-8(fp)
 4004764:	180d883a 	mov	r6,r3
 4004768:	e17fff17 	ldw	r5,-4(fp)
 400476c:	1009883a 	mov	r4,r2
 4004770:	4004d440 	call	4004d44 <__vfprintf_internal>
 4004774:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 4004778:	e0bffd17 	ldw	r2,-12(fp)
}
 400477c:	e037883a 	mov	sp,fp
 4004780:	dfc00117 	ldw	ra,4(sp)
 4004784:	df000017 	ldw	fp,0(sp)
 4004788:	dec00504 	addi	sp,sp,20
 400478c:	f800283a 	ret

04004790 <_putchar_r>:

int
_DEFUN(_putchar_r, (ptr, c),
       struct _reent *ptr _AND
       int c)
{
 4004790:	defffc04 	addi	sp,sp,-16
 4004794:	dfc00315 	stw	ra,12(sp)
 4004798:	df000215 	stw	fp,8(sp)
 400479c:	df000204 	addi	fp,sp,8
 40047a0:	e13ffe15 	stw	r4,-8(fp)
 40047a4:	e17fff15 	stw	r5,-4(fp)
  _REENT_SMALL_CHECK_INIT (ptr);
  return _putc_r (ptr, c, _stdout_r (ptr));
 40047a8:	e0bffe17 	ldw	r2,-8(fp)
 40047ac:	10800217 	ldw	r2,8(r2)
 40047b0:	100d883a 	mov	r6,r2
 40047b4:	e17fff17 	ldw	r5,-4(fp)
 40047b8:	e13ffe17 	ldw	r4,-8(fp)
 40047bc:	400dfcc0 	call	400dfcc <_putc_r>
}
 40047c0:	e037883a 	mov	sp,fp
 40047c4:	dfc00117 	ldw	ra,4(sp)
 40047c8:	df000017 	ldw	fp,0(sp)
 40047cc:	dec00204 	addi	sp,sp,8
 40047d0:	f800283a 	ret

040047d4 <putchar>:
#ifndef _REENT_ONLY

int
_DEFUN(putchar, (c),
       int c)
{
 40047d4:	defffc04 	addi	sp,sp,-16
 40047d8:	dfc00315 	stw	ra,12(sp)
 40047dc:	df000215 	stw	fp,8(sp)
 40047e0:	df000204 	addi	fp,sp,8
 40047e4:	e13fff15 	stw	r4,-4(fp)
  struct _reent *reent = _REENT;
 40047e8:	d0a00917 	ldw	r2,-32732(gp)
 40047ec:	e0bffe15 	stw	r2,-8(fp)

  _REENT_SMALL_CHECK_INIT (reent);
  return _putc_r (reent, c, _stdout_r (reent));
 40047f0:	e0bffe17 	ldw	r2,-8(fp)
 40047f4:	10800217 	ldw	r2,8(r2)
 40047f8:	100d883a 	mov	r6,r2
 40047fc:	e17fff17 	ldw	r5,-4(fp)
 4004800:	e13ffe17 	ldw	r4,-8(fp)
 4004804:	400dfcc0 	call	400dfcc <_putc_r>
}
 4004808:	e037883a 	mov	sp,fp
 400480c:	dfc00117 	ldw	ra,4(sp)
 4004810:	df000017 	ldw	fp,0(sp)
 4004814:	dec00204 	addi	sp,sp,8
 4004818:	f800283a 	ret

0400481c <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 400481c:	defff104 	addi	sp,sp,-60
 4004820:	dfc00e15 	stw	ra,56(sp)
 4004824:	df000d15 	stw	fp,52(sp)
 4004828:	df000d04 	addi	fp,sp,52
 400482c:	e13ffe15 	stw	r4,-8(fp)
 4004830:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 4004834:	e13fff17 	ldw	r4,-4(fp)
 4004838:	4004a780 	call	4004a78 <strlen>
 400483c:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 4004840:	e0bfff17 	ldw	r2,-4(fp)
 4004844:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 4004848:	e0bff317 	ldw	r2,-52(fp)
 400484c:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 4004850:	00810074 	movhi	r2,1025
 4004854:	10948904 	addi	r2,r2,21028
 4004858:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 400485c:	00800044 	movi	r2,1
 4004860:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 4004864:	e0bff317 	ldw	r2,-52(fp)
 4004868:	10800044 	addi	r2,r2,1
 400486c:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 4004870:	e0bffa04 	addi	r2,fp,-24
 4004874:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 4004878:	00800084 	movi	r2,2
 400487c:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 4004880:	e0bffe17 	ldw	r2,-8(fp)
 4004884:	e0bff415 	stw	r2,-48(fp)
 4004888:	e0bff417 	ldw	r2,-48(fp)
 400488c:	10000526 	beq	r2,zero,40048a4 <_puts_r+0x88>
 4004890:	e0bff417 	ldw	r2,-48(fp)
 4004894:	10800e17 	ldw	r2,56(r2)
 4004898:	1000021e 	bne	r2,zero,40048a4 <_puts_r+0x88>
 400489c:	e13ff417 	ldw	r4,-48(fp)
 40048a0:	4009a000 	call	4009a00 <__sinit>
  fp = _stdout_r (ptr);
 40048a4:	e0bffe17 	ldw	r2,-8(fp)
 40048a8:	10800217 	ldw	r2,8(r2)
 40048ac:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 40048b0:	e0bff517 	ldw	r2,-44(fp)
 40048b4:	1080030b 	ldhu	r2,12(r2)
 40048b8:	10bfffcc 	andi	r2,r2,65535
 40048bc:	1088000c 	andi	r2,r2,8192
 40048c0:	10000c1e 	bne	r2,zero,40048f4 <_puts_r+0xd8>
 40048c4:	e0bff517 	ldw	r2,-44(fp)
 40048c8:	1080030b 	ldhu	r2,12(r2)
 40048cc:	10880014 	ori	r2,r2,8192
 40048d0:	1007883a 	mov	r3,r2
 40048d4:	e0bff517 	ldw	r2,-44(fp)
 40048d8:	10c0030d 	sth	r3,12(r2)
 40048dc:	e0bff517 	ldw	r2,-44(fp)
 40048e0:	10c01917 	ldw	r3,100(r2)
 40048e4:	00b7ffc4 	movi	r2,-8193
 40048e8:	1886703a 	and	r3,r3,r2
 40048ec:	e0bff517 	ldw	r2,-44(fp)
 40048f0:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 40048f4:	e0bff704 	addi	r2,fp,-36
 40048f8:	100d883a 	mov	r6,r2
 40048fc:	e17ff517 	ldw	r5,-44(fp)
 4004900:	e13ffe17 	ldw	r4,-8(fp)
 4004904:	400a34c0 	call	400a34c <__sfvwrite_r>
 4004908:	10000226 	beq	r2,zero,4004914 <_puts_r+0xf8>
 400490c:	00bfffc4 	movi	r2,-1
 4004910:	00000106 	br	4004918 <_puts_r+0xfc>
 4004914:	00800284 	movi	r2,10
 4004918:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 400491c:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 4004920:	e037883a 	mov	sp,fp
 4004924:	dfc00117 	ldw	ra,4(sp)
 4004928:	df000017 	ldw	fp,0(sp)
 400492c:	dec00204 	addi	sp,sp,8
 4004930:	f800283a 	ret

04004934 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 4004934:	defffd04 	addi	sp,sp,-12
 4004938:	dfc00215 	stw	ra,8(sp)
 400493c:	df000115 	stw	fp,4(sp)
 4004940:	df000104 	addi	fp,sp,4
 4004944:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 4004948:	d0a00917 	ldw	r2,-32732(gp)
 400494c:	e17fff17 	ldw	r5,-4(fp)
 4004950:	1009883a 	mov	r4,r2
 4004954:	400481c0 	call	400481c <_puts_r>
}
 4004958:	e037883a 	mov	sp,fp
 400495c:	dfc00117 	ldw	ra,4(sp)
 4004960:	df000017 	ldw	fp,0(sp)
 4004964:	dec00204 	addi	sp,sp,8
 4004968:	f800283a 	ret

0400496c <srand>:
					/* if compiled with -ansi switch.   */	/* AlteraSpecific */
#endif /* !WANT_SMALL_STDIO */							/* AlteraSpecific */

void
_DEFUN (srand, (seed), unsigned int seed)
{
 400496c:	defffd04 	addi	sp,sp,-12
 4004970:	df000215 	stw	fp,8(sp)
 4004974:	df000204 	addi	fp,sp,8
 4004978:	e13fff15 	stw	r4,-4(fp)
  struct _reent *reent = _REENT;
 400497c:	d1200917 	ldw	r4,-32732(gp)
 4004980:	e13ffe15 	stw	r4,-8(fp)

  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) = seed;
 4004984:	e13fff17 	ldw	r4,-4(fp)
 4004988:	2005883a 	mov	r2,r4
 400498c:	0007883a 	mov	r3,zero
 4004990:	e13ffe17 	ldw	r4,-8(fp)
 4004994:	20802915 	stw	r2,164(r4)
 4004998:	20c02a15 	stw	r3,168(r4)
}
 400499c:	0001883a 	nop
 40049a0:	e037883a 	mov	sp,fp
 40049a4:	df000017 	ldw	fp,0(sp)
 40049a8:	dec00104 	addi	sp,sp,4
 40049ac:	f800283a 	ret

040049b0 <rand>:

int
_DEFUN_VOID (rand)
{
 40049b0:	defffb04 	addi	sp,sp,-20
 40049b4:	dfc00415 	stw	ra,16(sp)
 40049b8:	df000315 	stw	fp,12(sp)
 40049bc:	dc400215 	stw	r17,8(sp)
 40049c0:	dc000115 	stw	r16,4(sp)
 40049c4:	df000304 	addi	fp,sp,12
  struct _reent *reent = _REENT;
 40049c8:	d0a00917 	ldw	r2,-32732(gp)
 40049cc:	e0bffd15 	stw	r2,-12(fp)
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
 40049d0:	e13ffd17 	ldw	r4,-12(fp)
 40049d4:	20802917 	ldw	r2,164(r4)
 40049d8:	20c02a17 	ldw	r3,168(r4)
 40049dc:	01932574 	movhi	r6,19605
 40049e0:	319fcb44 	addi	r6,r6,32557
 40049e4:	01d614b4 	movhi	r7,22610
 40049e8:	39fd0b44 	addi	r7,r7,-3027
 40049ec:	1009883a 	mov	r4,r2
 40049f0:	180b883a 	mov	r5,r3
 40049f4:	40113700 	call	4011370 <__muldi3>
 40049f8:	100d883a 	mov	r6,r2
 40049fc:	180f883a 	mov	r7,r3
 4004a00:	3009883a 	mov	r4,r6
 4004a04:	380b883a 	mov	r5,r7
 4004a08:	01800044 	movi	r6,1
 4004a0c:	000f883a 	mov	r7,zero
 4004a10:	2185883a 	add	r2,r4,r6
 4004a14:	1111803a 	cmpltu	r8,r2,r4
 4004a18:	29c7883a 	add	r3,r5,r7
 4004a1c:	40c9883a 	add	r4,r8,r3
 4004a20:	2007883a 	mov	r3,r4
 4004a24:	1009883a 	mov	r4,r2
 4004a28:	180b883a 	mov	r5,r3

  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
 4004a2c:	e0bffd17 	ldw	r2,-12(fp)
 4004a30:	11002915 	stw	r4,164(r2)
 4004a34:	11402a15 	stw	r5,168(r2)
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
  return (int)((_REENT_RAND_NEXT(reent) >> 32) & RAND_MAX);
 4004a38:	e13ffd17 	ldw	r4,-12(fp)
 4004a3c:	20802917 	ldw	r2,164(r4)
 4004a40:	20c02a17 	ldw	r3,168(r4)
 4004a44:	1820d83a 	srl	r16,r3,zero
 4004a48:	0023883a 	mov	r17,zero
 4004a4c:	8007883a 	mov	r3,r16
 4004a50:	00a00034 	movhi	r2,32768
 4004a54:	10bfffc4 	addi	r2,r2,-1
 4004a58:	1884703a 	and	r2,r3,r2
}
 4004a5c:	e6fffe04 	addi	sp,fp,-8
 4004a60:	dfc00317 	ldw	ra,12(sp)
 4004a64:	df000217 	ldw	fp,8(sp)
 4004a68:	dc400117 	ldw	r17,4(sp)
 4004a6c:	dc000017 	ldw	r16,0(sp)
 4004a70:	dec00404 	addi	sp,sp,16
 4004a74:	f800283a 	ret

04004a78 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 4004a78:	defffc04 	addi	sp,sp,-16
 4004a7c:	df000315 	stw	fp,12(sp)
 4004a80:	df000304 	addi	fp,sp,12
 4004a84:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 4004a88:	e0bfff17 	ldw	r2,-4(fp)
 4004a8c:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 4004a90:	00000d06 	br	4004ac8 <strlen+0x50>
    {
      if (!*str)
 4004a94:	e0bfff17 	ldw	r2,-4(fp)
 4004a98:	10800003 	ldbu	r2,0(r2)
 4004a9c:	10803fcc 	andi	r2,r2,255
 4004aa0:	1080201c 	xori	r2,r2,128
 4004aa4:	10bfe004 	addi	r2,r2,-128
 4004aa8:	1000041e 	bne	r2,zero,4004abc <strlen+0x44>
	return str - start;
 4004aac:	e0ffff17 	ldw	r3,-4(fp)
 4004ab0:	e0bffe17 	ldw	r2,-8(fp)
 4004ab4:	1885c83a 	sub	r2,r3,r2
 4004ab8:	00002806 	br	4004b5c <strlen+0xe4>
      str++;
 4004abc:	e0bfff17 	ldw	r2,-4(fp)
 4004ac0:	10800044 	addi	r2,r2,1
 4004ac4:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 4004ac8:	e0bfff17 	ldw	r2,-4(fp)
 4004acc:	108000cc 	andi	r2,r2,3
 4004ad0:	103ff01e 	bne	r2,zero,4004a94 <__alt_data_end+0xfc004a94>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 4004ad4:	e0bfff17 	ldw	r2,-4(fp)
 4004ad8:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 4004adc:	00000306 	br	4004aec <strlen+0x74>
    aligned_addr++;
 4004ae0:	e0bffd17 	ldw	r2,-12(fp)
 4004ae4:	10800104 	addi	r2,r2,4
 4004ae8:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 4004aec:	e0bffd17 	ldw	r2,-12(fp)
 4004af0:	10c00017 	ldw	r3,0(r2)
 4004af4:	00bfbff4 	movhi	r2,65279
 4004af8:	10bfbfc4 	addi	r2,r2,-257
 4004afc:	1887883a 	add	r3,r3,r2
 4004b00:	e0bffd17 	ldw	r2,-12(fp)
 4004b04:	10800017 	ldw	r2,0(r2)
 4004b08:	0084303a 	nor	r2,zero,r2
 4004b0c:	1886703a 	and	r3,r3,r2
 4004b10:	00a02074 	movhi	r2,32897
 4004b14:	10a02004 	addi	r2,r2,-32640
 4004b18:	1884703a 	and	r2,r3,r2
 4004b1c:	103ff026 	beq	r2,zero,4004ae0 <__alt_data_end+0xfc004ae0>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 4004b20:	e0bffd17 	ldw	r2,-12(fp)
 4004b24:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 4004b28:	00000306 	br	4004b38 <strlen+0xc0>
    str++;
 4004b2c:	e0bfff17 	ldw	r2,-4(fp)
 4004b30:	10800044 	addi	r2,r2,1
 4004b34:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 4004b38:	e0bfff17 	ldw	r2,-4(fp)
 4004b3c:	10800003 	ldbu	r2,0(r2)
 4004b40:	10803fcc 	andi	r2,r2,255
 4004b44:	1080201c 	xori	r2,r2,128
 4004b48:	10bfe004 	addi	r2,r2,-128
 4004b4c:	103ff71e 	bne	r2,zero,4004b2c <__alt_data_end+0xfc004b2c>
    str++;
  return str - start;
 4004b50:	e0ffff17 	ldw	r3,-4(fp)
 4004b54:	e0bffe17 	ldw	r2,-8(fp)
 4004b58:	1885c83a 	sub	r2,r3,r2
}
 4004b5c:	e037883a 	mov	sp,fp
 4004b60:	df000017 	ldw	fp,0(sp)
 4004b64:	dec00104 	addi	sp,sp,4
 4004b68:	f800283a 	ret

04004b6c <_system_r>:

int
_DEFUN(_system_r, (ptr, s),
     struct _reent *ptr _AND
     _CONST char *s)
{
 4004b6c:	defffc04 	addi	sp,sp,-16
 4004b70:	dfc00315 	stw	ra,12(sp)
 4004b74:	df000215 	stw	fp,8(sp)
 4004b78:	df000204 	addi	fp,sp,8
 4004b7c:	e13ffe15 	stw	r4,-8(fp)
 4004b80:	e17fff15 	stw	r5,-4(fp)
#if defined (unix) || defined (__CYGWIN__)
  if (s == NULL)
    return 1;
  return do_system (ptr, s);
#else
  if (s == NULL)
 4004b84:	e0bfff17 	ldw	r2,-4(fp)
 4004b88:	1000021e 	bne	r2,zero,4004b94 <_system_r+0x28>
    return 0;
 4004b8c:	0005883a 	mov	r2,zero
 4004b90:	00000506 	br	4004ba8 <_system_r+0x3c>
  errno = ENOSYS;
 4004b94:	40046a40 	call	40046a4 <__errno>
 4004b98:	1007883a 	mov	r3,r2
 4004b9c:	00801604 	movi	r2,88
 4004ba0:	18800015 	stw	r2,0(r3)
  return -1;
 4004ba4:	00bfffc4 	movi	r2,-1
#endif

#endif
}
 4004ba8:	e037883a 	mov	sp,fp
 4004bac:	dfc00117 	ldw	ra,4(sp)
 4004bb0:	df000017 	ldw	fp,0(sp)
 4004bb4:	dec00204 	addi	sp,sp,8
 4004bb8:	f800283a 	ret

04004bbc <system>:
#ifndef _REENT_ONLY

int
_DEFUN(system, (s),
     _CONST char *s)
{
 4004bbc:	defffd04 	addi	sp,sp,-12
 4004bc0:	dfc00215 	stw	ra,8(sp)
 4004bc4:	df000115 	stw	fp,4(sp)
 4004bc8:	df000104 	addi	fp,sp,4
 4004bcc:	e13fff15 	stw	r4,-4(fp)
  return _system_r (_REENT, s);
 4004bd0:	d0a00917 	ldw	r2,-32732(gp)
 4004bd4:	e17fff17 	ldw	r5,-4(fp)
 4004bd8:	1009883a 	mov	r4,r2
 4004bdc:	4004b6c0 	call	4004b6c <_system_r>
}
 4004be0:	e037883a 	mov	sp,fp
 4004be4:	dfc00117 	ldw	ra,4(sp)
 4004be8:	df000017 	ldw	fp,0(sp)
 4004bec:	dec00204 	addi	sp,sp,8
 4004bf0:	f800283a 	ret

04004bf4 <time>:
#include <sys/time.h>

time_t
_DEFUN (time, (t),
	time_t * t)
{
 4004bf4:	defffb04 	addi	sp,sp,-20
 4004bf8:	dfc00415 	stw	ra,16(sp)
 4004bfc:	df000315 	stw	fp,12(sp)
 4004c00:	df000304 	addi	fp,sp,12
 4004c04:	e13fff15 	stw	r4,-4(fp)
  struct timeval now;

  if (_gettimeofday_r (_REENT, &now, NULL) >= 0)
 4004c08:	d0a00917 	ldw	r2,-32732(gp)
 4004c0c:	000d883a 	mov	r6,zero
 4004c10:	e17ffd04 	addi	r5,fp,-12
 4004c14:	1009883a 	mov	r4,r2
 4004c18:	400aadc0 	call	400aadc <_gettimeofday_r>
 4004c1c:	10000716 	blt	r2,zero,4004c3c <time+0x48>
    {
      if (t)
 4004c20:	e0bfff17 	ldw	r2,-4(fp)
 4004c24:	10000326 	beq	r2,zero,4004c34 <time+0x40>
	*t = now.tv_sec;
 4004c28:	e0fffd17 	ldw	r3,-12(fp)
 4004c2c:	e0bfff17 	ldw	r2,-4(fp)
 4004c30:	10c00015 	stw	r3,0(r2)
      return now.tv_sec;
 4004c34:	e0bffd17 	ldw	r2,-12(fp)
 4004c38:	00000106 	br	4004c40 <time+0x4c>
    }
  return -1;
 4004c3c:	00bfffc4 	movi	r2,-1
}
 4004c40:	e037883a 	mov	sp,fp
 4004c44:	dfc00117 	ldw	ra,4(sp)
 4004c48:	df000017 	ldw	fp,0(sp)
 4004c4c:	dec00204 	addi	sp,sp,8
 4004c50:	f800283a 	ret

04004c54 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 4004c54:	defedf04 	addi	sp,sp,-1156
 4004c58:	dfc12015 	stw	ra,1152(sp)
 4004c5c:	df011f15 	stw	fp,1148(sp)
 4004c60:	dc011e15 	stw	r16,1144(sp)
 4004c64:	df011f04 	addi	fp,sp,1148
 4004c68:	e13ffc15 	stw	r4,-16(fp)
 4004c6c:	2821883a 	mov	r16,r5
 4004c70:	e1bffd15 	stw	r6,-12(fp)
 4004c74:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 4004c78:	80c0030b 	ldhu	r3,12(r16)
 4004c7c:	00bfff44 	movi	r2,-3
 4004c80:	1884703a 	and	r2,r3,r2
 4004c84:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 4004c88:	80801917 	ldw	r2,100(r16)
 4004c8c:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 4004c90:	8080038b 	ldhu	r2,14(r16)
 4004c94:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 4004c98:	80800717 	ldw	r2,28(r16)
 4004c9c:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 4004ca0:	80800917 	ldw	r2,36(r16)
 4004ca4:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 4004ca8:	e0befc04 	addi	r2,fp,-1040
 4004cac:	e0bee215 	stw	r2,-1144(fp)
 4004cb0:	e0bee217 	ldw	r2,-1144(fp)
 4004cb4:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 4004cb8:	00810004 	movi	r2,1024
 4004cbc:	e0bee415 	stw	r2,-1136(fp)
 4004cc0:	e0bee417 	ldw	r2,-1136(fp)
 4004cc4:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 4004cc8:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 4004ccc:	e0bee204 	addi	r2,fp,-1144
 4004cd0:	e1fffe17 	ldw	r7,-8(fp)
 4004cd4:	e1bffd17 	ldw	r6,-12(fp)
 4004cd8:	100b883a 	mov	r5,r2
 4004cdc:	e13ffc17 	ldw	r4,-16(fp)
 4004ce0:	4004d940 	call	4004d94 <___vfprintf_internal_r>
 4004ce4:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 4004ce8:	e0bee117 	ldw	r2,-1148(fp)
 4004cec:	10000716 	blt	r2,zero,4004d0c <__sbprintf+0xb8>
 4004cf0:	e0bee204 	addi	r2,fp,-1144
 4004cf4:	100b883a 	mov	r5,r2
 4004cf8:	e13ffc17 	ldw	r4,-16(fp)
 4004cfc:	40095800 	call	4009580 <_fflush_r>
 4004d00:	10000226 	beq	r2,zero,4004d0c <__sbprintf+0xb8>
		ret = EOF;
 4004d04:	00bfffc4 	movi	r2,-1
 4004d08:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 4004d0c:	e0bee50b 	ldhu	r2,-1132(fp)
 4004d10:	10bfffcc 	andi	r2,r2,65535
 4004d14:	1080100c 	andi	r2,r2,64
 4004d18:	10000326 	beq	r2,zero,4004d28 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 4004d1c:	8080030b 	ldhu	r2,12(r16)
 4004d20:	10801014 	ori	r2,r2,64
 4004d24:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 4004d28:	e0bee117 	ldw	r2,-1148(fp)
}
 4004d2c:	e6ffff04 	addi	sp,fp,-4
 4004d30:	dfc00217 	ldw	ra,8(sp)
 4004d34:	df000117 	ldw	fp,4(sp)
 4004d38:	dc000017 	ldw	r16,0(sp)
 4004d3c:	dec00304 	addi	sp,sp,12
 4004d40:	f800283a 	ret

04004d44 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 4004d44:	defffa04 	addi	sp,sp,-24
 4004d48:	dfc00515 	stw	ra,20(sp)
 4004d4c:	df000415 	stw	fp,16(sp)
 4004d50:	df000404 	addi	fp,sp,16
 4004d54:	e13ffd15 	stw	r4,-12(fp)
 4004d58:	e17ffe15 	stw	r5,-8(fp)
 4004d5c:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 4004d60:	d0a00917 	ldw	r2,-32732(gp)
 4004d64:	e1ffff17 	ldw	r7,-4(fp)
 4004d68:	e1bffe17 	ldw	r6,-8(fp)
 4004d6c:	e17ffd17 	ldw	r5,-12(fp)
 4004d70:	1009883a 	mov	r4,r2
 4004d74:	4004d940 	call	4004d94 <___vfprintf_internal_r>
 4004d78:	e0bffc15 	stw	r2,-16(fp)
  return result;
 4004d7c:	e0bffc17 	ldw	r2,-16(fp)
}
 4004d80:	e037883a 	mov	sp,fp
 4004d84:	dfc00117 	ldw	ra,4(sp)
 4004d88:	df000017 	ldw	fp,0(sp)
 4004d8c:	dec00204 	addi	sp,sp,8
 4004d90:	f800283a 	ret

04004d94 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 4004d94:	deffa404 	addi	sp,sp,-368
 4004d98:	dfc05b15 	stw	ra,364(sp)
 4004d9c:	df005a15 	stw	fp,360(sp)
 4004da0:	ddc05915 	stw	r23,356(sp)
 4004da4:	dd805815 	stw	r22,352(sp)
 4004da8:	dd405715 	stw	r21,348(sp)
 4004dac:	dd005615 	stw	r20,344(sp)
 4004db0:	dcc05515 	stw	r19,340(sp)
 4004db4:	dc805415 	stw	r18,336(sp)
 4004db8:	dc405315 	stw	r17,332(sp)
 4004dbc:	dc005215 	stw	r16,328(sp)
 4004dc0:	df005a04 	addi	fp,sp,360
 4004dc4:	e13fe615 	stw	r4,-104(fp)
 4004dc8:	e17fe715 	stw	r5,-100(fp)
 4004dcc:	e1bfe815 	stw	r6,-96(fp)
 4004dd0:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 4004dd4:	e13fe617 	ldw	r4,-104(fp)
 4004dd8:	400ac500 	call	400ac50 <_localeconv_r>
 4004ddc:	10800017 	ldw	r2,0(r2)
 4004de0:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 4004de4:	e13fbb17 	ldw	r4,-276(fp)
 4004de8:	4004a780 	call	4004a78 <strlen>
 4004dec:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 4004df0:	e03fc215 	stw	zero,-248(fp)
 4004df4:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 4004df8:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 4004dfc:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 4004e00:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 4004e04:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 4004e08:	e0bfe617 	ldw	r2,-104(fp)
 4004e0c:	e0bfbd15 	stw	r2,-268(fp)
 4004e10:	e0bfbd17 	ldw	r2,-268(fp)
 4004e14:	10000526 	beq	r2,zero,4004e2c <___vfprintf_internal_r+0x98>
 4004e18:	e0bfbd17 	ldw	r2,-268(fp)
 4004e1c:	10800e17 	ldw	r2,56(r2)
 4004e20:	1000021e 	bne	r2,zero,4004e2c <___vfprintf_internal_r+0x98>
 4004e24:	e13fbd17 	ldw	r4,-268(fp)
 4004e28:	4009a000 	call	4009a00 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 4004e2c:	e0bfe717 	ldw	r2,-100(fp)
 4004e30:	1080030b 	ldhu	r2,12(r2)
 4004e34:	10bfffcc 	andi	r2,r2,65535
 4004e38:	1088000c 	andi	r2,r2,8192
 4004e3c:	10000c1e 	bne	r2,zero,4004e70 <___vfprintf_internal_r+0xdc>
 4004e40:	e0bfe717 	ldw	r2,-100(fp)
 4004e44:	1080030b 	ldhu	r2,12(r2)
 4004e48:	10880014 	ori	r2,r2,8192
 4004e4c:	1007883a 	mov	r3,r2
 4004e50:	e0bfe717 	ldw	r2,-100(fp)
 4004e54:	10c0030d 	sth	r3,12(r2)
 4004e58:	e0bfe717 	ldw	r2,-100(fp)
 4004e5c:	10c01917 	ldw	r3,100(r2)
 4004e60:	00b7ffc4 	movi	r2,-8193
 4004e64:	1886703a 	and	r3,r3,r2
 4004e68:	e0bfe717 	ldw	r2,-100(fp)
 4004e6c:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 4004e70:	e0bfe717 	ldw	r2,-100(fp)
 4004e74:	1080030b 	ldhu	r2,12(r2)
 4004e78:	10bfffcc 	andi	r2,r2,65535
 4004e7c:	1080020c 	andi	r2,r2,8
 4004e80:	10000326 	beq	r2,zero,4004e90 <___vfprintf_internal_r+0xfc>
 4004e84:	e0bfe717 	ldw	r2,-100(fp)
 4004e88:	10800417 	ldw	r2,16(r2)
 4004e8c:	1000061e 	bne	r2,zero,4004ea8 <___vfprintf_internal_r+0x114>
 4004e90:	e17fe717 	ldw	r5,-100(fp)
 4004e94:	e13fe617 	ldw	r4,-104(fp)
 4004e98:	40071b00 	call	40071b0 <__swsetup_r>
 4004e9c:	10000226 	beq	r2,zero,4004ea8 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 4004ea0:	00bfffc4 	movi	r2,-1
 4004ea4:	0007e206 	br	4006e30 <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 4004ea8:	e0bfe717 	ldw	r2,-100(fp)
 4004eac:	1080030b 	ldhu	r2,12(r2)
 4004eb0:	10bfffcc 	andi	r2,r2,65535
 4004eb4:	1080068c 	andi	r2,r2,26
 4004eb8:	10800298 	cmpnei	r2,r2,10
 4004ebc:	10000c1e 	bne	r2,zero,4004ef0 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 4004ec0:	e0bfe717 	ldw	r2,-100(fp)
 4004ec4:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 4004ec8:	10bfffcc 	andi	r2,r2,65535
 4004ecc:	10a0001c 	xori	r2,r2,32768
 4004ed0:	10a00004 	addi	r2,r2,-32768
 4004ed4:	10000616 	blt	r2,zero,4004ef0 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 4004ed8:	e1ffe917 	ldw	r7,-92(fp)
 4004edc:	e1bfe817 	ldw	r6,-96(fp)
 4004ee0:	e17fe717 	ldw	r5,-100(fp)
 4004ee4:	e13fe617 	ldw	r4,-104(fp)
 4004ee8:	4004c540 	call	4004c54 <__sbprintf>
 4004eec:	0007d006 	br	4006e30 <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 4004ef0:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 4004ef4:	e47fcb04 	addi	r17,fp,-212
 4004ef8:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 4004efc:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 4004f00:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 4004f04:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 4004f08:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 4004f0c:	00000106 	br	4004f14 <___vfprintf_internal_r+0x180>
                    fmt += 1;
 4004f10:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 4004f14:	a8800003 	ldbu	r2,0(r21)
 4004f18:	10803fcc 	andi	r2,r2,255
 4004f1c:	1080201c 	xori	r2,r2,128
 4004f20:	10bfe004 	addi	r2,r2,-128
 4004f24:	10000626 	beq	r2,zero,4004f40 <___vfprintf_internal_r+0x1ac>
 4004f28:	a8800003 	ldbu	r2,0(r21)
 4004f2c:	10803fcc 	andi	r2,r2,255
 4004f30:	1080201c 	xori	r2,r2,128
 4004f34:	10bfe004 	addi	r2,r2,-128
 4004f38:	10800958 	cmpnei	r2,r2,37
 4004f3c:	103ff41e 	bne	r2,zero,4004f10 <__alt_data_end+0xfc004f10>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 4004f40:	a807883a 	mov	r3,r21
 4004f44:	9005883a 	mov	r2,r18
 4004f48:	18a1c83a 	sub	r16,r3,r2
 4004f4c:	80001826 	beq	r16,zero,4004fb0 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 4004f50:	8c800015 	stw	r18,0(r17)
 4004f54:	8005883a 	mov	r2,r16
 4004f58:	88800115 	stw	r2,4(r17)
 4004f5c:	e0bfca17 	ldw	r2,-216(fp)
 4004f60:	8007883a 	mov	r3,r16
 4004f64:	10c5883a 	add	r2,r2,r3
 4004f68:	e0bfca15 	stw	r2,-216(fp)
 4004f6c:	8c400204 	addi	r17,r17,8
 4004f70:	e0bfc917 	ldw	r2,-220(fp)
 4004f74:	10800044 	addi	r2,r2,1
 4004f78:	e0bfc915 	stw	r2,-220(fp)
 4004f7c:	e0bfc917 	ldw	r2,-220(fp)
 4004f80:	10800210 	cmplti	r2,r2,8
 4004f84:	1000071e 	bne	r2,zero,4004fa4 <___vfprintf_internal_r+0x210>
 4004f88:	e0bfc804 	addi	r2,fp,-224
 4004f8c:	100d883a 	mov	r6,r2
 4004f90:	e17fe717 	ldw	r5,-100(fp)
 4004f94:	e13fe617 	ldw	r4,-104(fp)
 4004f98:	400f1dc0 	call	400f1dc <__sprint_r>
 4004f9c:	10074d1e 	bne	r2,zero,4006cd4 <___vfprintf_internal_r+0x1f40>
 4004fa0:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 4004fa4:	e0bfac17 	ldw	r2,-336(fp)
 4004fa8:	1405883a 	add	r2,r2,r16
 4004fac:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 4004fb0:	a8800003 	ldbu	r2,0(r21)
 4004fb4:	10803fcc 	andi	r2,r2,255
 4004fb8:	1080201c 	xori	r2,r2,128
 4004fbc:	10bfe004 	addi	r2,r2,-128
 4004fc0:	10073626 	beq	r2,zero,4006c9c <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 4004fc4:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 4004fc8:	ad400044 	addi	r21,r21,1

		flags = 0;
 4004fcc:	0027883a 	mov	r19,zero
		dprec = 0;
 4004fd0:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 4004fd4:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 4004fd8:	00bfffc4 	movi	r2,-1
 4004fdc:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 4004fe0:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 4004fe4:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 4004fe8:	a805883a 	mov	r2,r21
 4004fec:	15400044 	addi	r21,r2,1
 4004ff0:	10800003 	ldbu	r2,0(r2)
 4004ff4:	15003fcc 	andi	r20,r2,255
 4004ff8:	a500201c 	xori	r20,r20,128
 4004ffc:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 4005000:	a0bff804 	addi	r2,r20,-32
 4005004:	10c01668 	cmpgeui	r3,r2,89
 4005008:	1803491e 	bne	r3,zero,4005d30 <___vfprintf_internal_r+0xf9c>
 400500c:	100690ba 	slli	r3,r2,2
 4005010:	00810034 	movhi	r2,1024
 4005014:	10940904 	addi	r2,r2,20516
 4005018:	1885883a 	add	r2,r3,r2
 400501c:	10800017 	ldw	r2,0(r2)
 4005020:	1000683a 	jmp	r2
 4005024:	04005188 	cmpgei	r16,zero,326
 4005028:	04005d30 	cmpltui	r16,zero,372
 400502c:	04005d30 	cmpltui	r16,zero,372
 4005030:	040051a8 	cmpgeui	r16,zero,326
 4005034:	04005d30 	cmpltui	r16,zero,372
 4005038:	04005d30 	cmpltui	r16,zero,372
 400503c:	04005d30 	cmpltui	r16,zero,372
 4005040:	04005d30 	cmpltui	r16,zero,372
 4005044:	04005d30 	cmpltui	r16,zero,372
 4005048:	04005d30 	cmpltui	r16,zero,372
 400504c:	040051b0 	cmpltui	r16,zero,326
 4005050:	040051e4 	muli	r16,zero,327
 4005054:	04005d30 	cmpltui	r16,zero,372
 4005058:	040051dc 	xori	r16,zero,327
 400505c:	040051f0 	cmpltui	r16,zero,327
 4005060:	04005d30 	cmpltui	r16,zero,372
 4005064:	04005284 	movi	r16,330
 4005068:	0400528c 	andi	r16,zero,330
 400506c:	0400528c 	andi	r16,zero,330
 4005070:	0400528c 	andi	r16,zero,330
 4005074:	0400528c 	andi	r16,zero,330
 4005078:	0400528c 	andi	r16,zero,330
 400507c:	0400528c 	andi	r16,zero,330
 4005080:	0400528c 	andi	r16,zero,330
 4005084:	0400528c 	andi	r16,zero,330
 4005088:	0400528c 	andi	r16,zero,330
 400508c:	04005d30 	cmpltui	r16,zero,372
 4005090:	04005d30 	cmpltui	r16,zero,372
 4005094:	04005d30 	cmpltui	r16,zero,372
 4005098:	04005d30 	cmpltui	r16,zero,372
 400509c:	04005d30 	cmpltui	r16,zero,372
 40050a0:	04005d30 	cmpltui	r16,zero,372
 40050a4:	04005d30 	cmpltui	r16,zero,372
 40050a8:	04005d30 	cmpltui	r16,zero,372
 40050ac:	04005d30 	cmpltui	r16,zero,372
 40050b0:	04005d30 	cmpltui	r16,zero,372
 40050b4:	04005334 	movhi	r16,332
 40050b8:	04005434 	movhi	r16,336
 40050bc:	04005d30 	cmpltui	r16,zero,372
 40050c0:	04005434 	movhi	r16,336
 40050c4:	04005d30 	cmpltui	r16,zero,372
 40050c8:	04005d30 	cmpltui	r16,zero,372
 40050cc:	04005d30 	cmpltui	r16,zero,372
 40050d0:	04005d30 	cmpltui	r16,zero,372
 40050d4:	040052c8 	cmpgei	r16,zero,331
 40050d8:	04005d30 	cmpltui	r16,zero,372
 40050dc:	04005d30 	cmpltui	r16,zero,372
 40050e0:	040057d0 	cmplti	r16,zero,351
 40050e4:	04005d30 	cmpltui	r16,zero,372
 40050e8:	04005d30 	cmpltui	r16,zero,372
 40050ec:	04005d30 	cmpltui	r16,zero,372
 40050f0:	04005d30 	cmpltui	r16,zero,372
 40050f4:	04005d30 	cmpltui	r16,zero,372
 40050f8:	0400594c 	andi	r16,zero,357
 40050fc:	04005d30 	cmpltui	r16,zero,372
 4005100:	04005d30 	cmpltui	r16,zero,372
 4005104:	04005a0c 	andi	r16,zero,360
 4005108:	04005d30 	cmpltui	r16,zero,372
 400510c:	04005d30 	cmpltui	r16,zero,372
 4005110:	04005d30 	cmpltui	r16,zero,372
 4005114:	04005d30 	cmpltui	r16,zero,372
 4005118:	04005d30 	cmpltui	r16,zero,372
 400511c:	04005d30 	cmpltui	r16,zero,372
 4005120:	04005d30 	cmpltui	r16,zero,372
 4005124:	04005d30 	cmpltui	r16,zero,372
 4005128:	04005d30 	cmpltui	r16,zero,372
 400512c:	04005d30 	cmpltui	r16,zero,372
 4005130:	0400530c 	andi	r16,zero,332
 4005134:	04005338 	rdprs	r16,zero,332
 4005138:	04005434 	movhi	r16,336
 400513c:	04005434 	movhi	r16,336
 4005140:	04005434 	movhi	r16,336
 4005144:	040052d0 	cmplti	r16,zero,331
 4005148:	04005338 	rdprs	r16,zero,332
 400514c:	04005d30 	cmpltui	r16,zero,372
 4005150:	04005d30 	cmpltui	r16,zero,372
 4005154:	040052d8 	cmpnei	r16,zero,331
 4005158:	04005d30 	cmpltui	r16,zero,372
 400515c:	04005730 	cmpltui	r16,zero,348
 4005160:	040057d4 	movui	r16,351
 4005164:	04005874 	movhi	r16,353
 4005168:	04005304 	movi	r16,332
 400516c:	04005d30 	cmpltui	r16,zero,372
 4005170:	040058bc 	xorhi	r16,zero,354
 4005174:	04005d30 	cmpltui	r16,zero,372
 4005178:	04005950 	cmplti	r16,zero,357
 400517c:	04005d30 	cmpltui	r16,zero,372
 4005180:	04005d30 	cmpltui	r16,zero,372
 4005184:	04005a1c 	xori	r16,zero,360
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 4005188:	e0bfc103 	ldbu	r2,-252(fp)
 400518c:	10803fcc 	andi	r2,r2,255
 4005190:	1080201c 	xori	r2,r2,128
 4005194:	10bfe004 	addi	r2,r2,-128
 4005198:	103f931e 	bne	r2,zero,4004fe8 <__alt_data_end+0xfc004fe8>
				sign = ' ';
 400519c:	00800804 	movi	r2,32
 40051a0:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 40051a4:	003f9006 	br	4004fe8 <__alt_data_end+0xfc004fe8>
		case '#':
			flags |= ALT;
 40051a8:	9cc00054 	ori	r19,r19,1
			goto rflag;
 40051ac:	003f8e06 	br	4004fe8 <__alt_data_end+0xfc004fe8>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 40051b0:	e0bfe917 	ldw	r2,-92(fp)
 40051b4:	10c00104 	addi	r3,r2,4
 40051b8:	e0ffe915 	stw	r3,-92(fp)
 40051bc:	10800017 	ldw	r2,0(r2)
 40051c0:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 40051c4:	e0bfad17 	ldw	r2,-332(fp)
 40051c8:	10000116 	blt	r2,zero,40051d0 <___vfprintf_internal_r+0x43c>
				goto rflag;
 40051cc:	003f8606 	br	4004fe8 <__alt_data_end+0xfc004fe8>
			width = -width;
 40051d0:	e0bfad17 	ldw	r2,-332(fp)
 40051d4:	0085c83a 	sub	r2,zero,r2
 40051d8:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 40051dc:	9cc00114 	ori	r19,r19,4
			goto rflag;
 40051e0:	003f8106 	br	4004fe8 <__alt_data_end+0xfc004fe8>
		case '+':
			sign = '+';
 40051e4:	00800ac4 	movi	r2,43
 40051e8:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 40051ec:	003f7e06 	br	4004fe8 <__alt_data_end+0xfc004fe8>
		case '.':
			if ((ch = *fmt++) == '*') {
 40051f0:	a805883a 	mov	r2,r21
 40051f4:	15400044 	addi	r21,r2,1
 40051f8:	10800003 	ldbu	r2,0(r2)
 40051fc:	15003fcc 	andi	r20,r2,255
 4005200:	a500201c 	xori	r20,r20,128
 4005204:	a53fe004 	addi	r20,r20,-128
 4005208:	a0800a98 	cmpnei	r2,r20,42
 400520c:	10000a1e 	bne	r2,zero,4005238 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 4005210:	e0bfe917 	ldw	r2,-92(fp)
 4005214:	10c00104 	addi	r3,r2,4
 4005218:	e0ffe915 	stw	r3,-92(fp)
 400521c:	10800017 	ldw	r2,0(r2)
 4005220:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 4005224:	e0bfae17 	ldw	r2,-328(fp)
 4005228:	103f6f0e 	bge	r2,zero,4004fe8 <__alt_data_end+0xfc004fe8>
					prec = -1;
 400522c:	00bfffc4 	movi	r2,-1
 4005230:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 4005234:	003f6c06 	br	4004fe8 <__alt_data_end+0xfc004fe8>
			}
			n = 0;
 4005238:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 400523c:	00000906 	br	4005264 <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 4005240:	80c002a4 	muli	r3,r16,10
 4005244:	a0bff404 	addi	r2,r20,-48
 4005248:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 400524c:	a805883a 	mov	r2,r21
 4005250:	15400044 	addi	r21,r2,1
 4005254:	10800003 	ldbu	r2,0(r2)
 4005258:	15003fcc 	andi	r20,r2,255
 400525c:	a500201c 	xori	r20,r20,128
 4005260:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 4005264:	a0bff404 	addi	r2,r20,-48
 4005268:	108002b0 	cmpltui	r2,r2,10
 400526c:	103ff41e 	bne	r2,zero,4005240 <__alt_data_end+0xfc005240>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 4005270:	8005883a 	mov	r2,r16
 4005274:	1000010e 	bge	r2,zero,400527c <___vfprintf_internal_r+0x4e8>
 4005278:	00bfffc4 	movi	r2,-1
 400527c:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 4005280:	003f5f06 	br	4005000 <__alt_data_end+0xfc005000>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 4005284:	9cc02014 	ori	r19,r19,128
			goto rflag;
 4005288:	003f5706 	br	4004fe8 <__alt_data_end+0xfc004fe8>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 400528c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 4005290:	80c002a4 	muli	r3,r16,10
 4005294:	a0bff404 	addi	r2,r20,-48
 4005298:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 400529c:	a805883a 	mov	r2,r21
 40052a0:	15400044 	addi	r21,r2,1
 40052a4:	10800003 	ldbu	r2,0(r2)
 40052a8:	15003fcc 	andi	r20,r2,255
 40052ac:	a500201c 	xori	r20,r20,128
 40052b0:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 40052b4:	a0bff404 	addi	r2,r20,-48
 40052b8:	108002b0 	cmpltui	r2,r2,10
 40052bc:	103ff41e 	bne	r2,zero,4005290 <__alt_data_end+0xfc005290>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 40052c0:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 40052c4:	003f4e06 	br	4005000 <__alt_data_end+0xfc005000>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 40052c8:	9cc00214 	ori	r19,r19,8
			goto rflag;
 40052cc:	003f4606 	br	4004fe8 <__alt_data_end+0xfc004fe8>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 40052d0:	9cc01014 	ori	r19,r19,64
			goto rflag;
 40052d4:	003f4406 	br	4004fe8 <__alt_data_end+0xfc004fe8>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 40052d8:	a8800003 	ldbu	r2,0(r21)
 40052dc:	10803fcc 	andi	r2,r2,255
 40052e0:	1080201c 	xori	r2,r2,128
 40052e4:	10bfe004 	addi	r2,r2,-128
 40052e8:	10801b18 	cmpnei	r2,r2,108
 40052ec:	1000031e 	bne	r2,zero,40052fc <___vfprintf_internal_r+0x568>
				fmt++;
 40052f0:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 40052f4:	9cc00814 	ori	r19,r19,32
 40052f8:	003f3b06 	br	4004fe8 <__alt_data_end+0xfc004fe8>
			} else
#endif
				flags |= LONGINT;
 40052fc:	9cc00414 	ori	r19,r19,16
			goto rflag;
 4005300:	003f3906 	br	4004fe8 <__alt_data_end+0xfc004fe8>
		case 'q': /* extension */
			flags |= QUADINT;
 4005304:	9cc00814 	ori	r19,r19,32
			goto rflag;
 4005308:	003f3706 	br	4004fe8 <__alt_data_end+0xfc004fe8>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 400530c:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 4005310:	e0bfe917 	ldw	r2,-92(fp)
 4005314:	10c00104 	addi	r3,r2,4
 4005318:	e0ffe915 	stw	r3,-92(fp)
 400531c:	10800017 	ldw	r2,0(r2)
 4005320:	90800005 	stb	r2,0(r18)
				size = 1;
 4005324:	00800044 	movi	r2,1
 4005328:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 400532c:	e03fc105 	stb	zero,-252(fp)
			break;
 4005330:	00028806 	br	4005d54 <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 4005334:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 4005338:	9880080c 	andi	r2,r19,32
 400533c:	10000826 	beq	r2,zero,4005360 <___vfprintf_internal_r+0x5cc>
 4005340:	e13fe917 	ldw	r4,-92(fp)
 4005344:	20800204 	addi	r2,r4,8
 4005348:	e0bfe915 	stw	r2,-92(fp)
 400534c:	20800017 	ldw	r2,0(r4)
 4005350:	20c00117 	ldw	r3,4(r4)
 4005354:	e0bfea15 	stw	r2,-88(fp)
 4005358:	e0ffeb15 	stw	r3,-84(fp)
 400535c:	00001e06 	br	40053d8 <___vfprintf_internal_r+0x644>
 4005360:	9880040c 	andi	r2,r19,16
 4005364:	10000826 	beq	r2,zero,4005388 <___vfprintf_internal_r+0x5f4>
 4005368:	e0bfe917 	ldw	r2,-92(fp)
 400536c:	10c00104 	addi	r3,r2,4
 4005370:	e0ffe915 	stw	r3,-92(fp)
 4005374:	10800017 	ldw	r2,0(r2)
 4005378:	e0bfea15 	stw	r2,-88(fp)
 400537c:	1005d7fa 	srai	r2,r2,31
 4005380:	e0bfeb15 	stw	r2,-84(fp)
 4005384:	00001406 	br	40053d8 <___vfprintf_internal_r+0x644>
 4005388:	9880100c 	andi	r2,r19,64
 400538c:	10000b26 	beq	r2,zero,40053bc <___vfprintf_internal_r+0x628>
 4005390:	e0bfe917 	ldw	r2,-92(fp)
 4005394:	10c00104 	addi	r3,r2,4
 4005398:	e0ffe915 	stw	r3,-92(fp)
 400539c:	10800017 	ldw	r2,0(r2)
 40053a0:	10bfffcc 	andi	r2,r2,65535
 40053a4:	10a0001c 	xori	r2,r2,32768
 40053a8:	10a00004 	addi	r2,r2,-32768
 40053ac:	e0bfea15 	stw	r2,-88(fp)
 40053b0:	1005d7fa 	srai	r2,r2,31
 40053b4:	e0bfeb15 	stw	r2,-84(fp)
 40053b8:	00000706 	br	40053d8 <___vfprintf_internal_r+0x644>
 40053bc:	e0bfe917 	ldw	r2,-92(fp)
 40053c0:	10c00104 	addi	r3,r2,4
 40053c4:	e0ffe915 	stw	r3,-92(fp)
 40053c8:	10800017 	ldw	r2,0(r2)
 40053cc:	e0bfea15 	stw	r2,-88(fp)
 40053d0:	1005d7fa 	srai	r2,r2,31
 40053d4:	e0bfeb15 	stw	r2,-84(fp)
 40053d8:	e0bfea17 	ldw	r2,-88(fp)
 40053dc:	e0bfb115 	stw	r2,-316(fp)
 40053e0:	e0ffeb17 	ldw	r3,-84(fp)
 40053e4:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 40053e8:	e0bfb117 	ldw	r2,-316(fp)
 40053ec:	e0ffb217 	ldw	r3,-312(fp)
 40053f0:	18000d0e 	bge	r3,zero,4005428 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 40053f4:	000f883a 	mov	r7,zero
 40053f8:	0011883a 	mov	r8,zero
 40053fc:	e13fb117 	ldw	r4,-316(fp)
 4005400:	e17fb217 	ldw	r5,-312(fp)
 4005404:	3905c83a 	sub	r2,r7,r4
 4005408:	388d803a 	cmpltu	r6,r7,r2
 400540c:	4147c83a 	sub	r3,r8,r5
 4005410:	1989c83a 	sub	r4,r3,r6
 4005414:	2007883a 	mov	r3,r4
 4005418:	e0bfb115 	stw	r2,-316(fp)
 400541c:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 4005420:	00800b44 	movi	r2,45
 4005424:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 4005428:	00800044 	movi	r2,1
 400542c:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 4005430:	0001b706 	br	4005b10 <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 4005434:	9880020c 	andi	r2,r19,8
 4005438:	10000826 	beq	r2,zero,400545c <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 400543c:	e13fe917 	ldw	r4,-92(fp)
 4005440:	20800204 	addi	r2,r4,8
 4005444:	e0bfe915 	stw	r2,-92(fp)
 4005448:	20800017 	ldw	r2,0(r4)
 400544c:	20c00117 	ldw	r3,4(r4)
 4005450:	e0bfc215 	stw	r2,-248(fp)
 4005454:	e0ffc315 	stw	r3,-244(fp)
 4005458:	00000706 	br	4005478 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 400545c:	e13fe917 	ldw	r4,-92(fp)
 4005460:	20800204 	addi	r2,r4,8
 4005464:	e0bfe915 	stw	r2,-92(fp)
 4005468:	20800017 	ldw	r2,0(r4)
 400546c:	20c00117 	ldw	r3,4(r4)
 4005470:	e0bfc215 	stw	r2,-248(fp)
 4005474:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 4005478:	e0bfc217 	ldw	r2,-248(fp)
 400547c:	e0ffc317 	ldw	r3,-244(fp)
 4005480:	1009883a 	mov	r4,r2
 4005484:	180b883a 	mov	r5,r3
 4005488:	4001c680 	call	4001c68 <__fpclassifyd>
 400548c:	10800058 	cmpnei	r2,r2,1
 4005490:	1000161e 	bne	r2,zero,40054ec <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 4005494:	e0bfc217 	ldw	r2,-248(fp)
 4005498:	e0ffc317 	ldw	r3,-244(fp)
 400549c:	000d883a 	mov	r6,zero
 40054a0:	000f883a 	mov	r7,zero
 40054a4:	1009883a 	mov	r4,r2
 40054a8:	180b883a 	mov	r5,r3
 40054ac:	40030cc0 	call	40030cc <__ledf2>
 40054b0:	1000020e 	bge	r2,zero,40054bc <___vfprintf_internal_r+0x728>
					sign = '-';
 40054b4:	00800b44 	movi	r2,45
 40054b8:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 40054bc:	a0801208 	cmpgei	r2,r20,72
 40054c0:	1000031e 	bne	r2,zero,40054d0 <___vfprintf_internal_r+0x73c>
					cp = "INF";
 40054c4:	04810074 	movhi	r18,1025
 40054c8:	94948a04 	addi	r18,r18,21032
 40054cc:	00000206 	br	40054d8 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 40054d0:	04810074 	movhi	r18,1025
 40054d4:	94948b04 	addi	r18,r18,21036
				size = 3;
 40054d8:	008000c4 	movi	r2,3
 40054dc:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 40054e0:	00bfdfc4 	movi	r2,-129
 40054e4:	98a6703a 	and	r19,r19,r2
				break;
 40054e8:	00021a06 	br	4005d54 <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 40054ec:	e0bfc217 	ldw	r2,-248(fp)
 40054f0:	e0ffc317 	ldw	r3,-244(fp)
 40054f4:	1009883a 	mov	r4,r2
 40054f8:	180b883a 	mov	r5,r3
 40054fc:	4001c680 	call	4001c68 <__fpclassifyd>
 4005500:	10000c1e 	bne	r2,zero,4005534 <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 4005504:	a0801208 	cmpgei	r2,r20,72
 4005508:	1000031e 	bne	r2,zero,4005518 <___vfprintf_internal_r+0x784>
					cp = "NAN";
 400550c:	04810074 	movhi	r18,1025
 4005510:	94948c04 	addi	r18,r18,21040
 4005514:	00000206 	br	4005520 <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 4005518:	04810074 	movhi	r18,1025
 400551c:	94948d04 	addi	r18,r18,21044
				size = 3;
 4005520:	008000c4 	movi	r2,3
 4005524:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 4005528:	00bfdfc4 	movi	r2,-129
 400552c:	98a6703a 	and	r19,r19,r2
				break;
 4005530:	00020806 	br	4005d54 <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 4005534:	e0bfae17 	ldw	r2,-328(fp)
 4005538:	10bfffd8 	cmpnei	r2,r2,-1
 400553c:	1000031e 	bne	r2,zero,400554c <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 4005540:	00800184 	movi	r2,6
 4005544:	e0bfae15 	stw	r2,-328(fp)
 4005548:	00000806 	br	400556c <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 400554c:	a08019e0 	cmpeqi	r2,r20,103
 4005550:	1000021e 	bne	r2,zero,400555c <___vfprintf_internal_r+0x7c8>
 4005554:	a08011d8 	cmpnei	r2,r20,71
 4005558:	1000041e 	bne	r2,zero,400556c <___vfprintf_internal_r+0x7d8>
 400555c:	e0bfae17 	ldw	r2,-328(fp)
 4005560:	1000021e 	bne	r2,zero,400556c <___vfprintf_internal_r+0x7d8>
				prec = 1;
 4005564:	00800044 	movi	r2,1
 4005568:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 400556c:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 4005570:	e0bfc217 	ldw	r2,-248(fp)
 4005574:	e0ffc317 	ldw	r3,-244(fp)
 4005578:	dc800515 	stw	r18,20(sp)
 400557c:	e13fc704 	addi	r4,fp,-228
 4005580:	d9000415 	stw	r4,16(sp)
 4005584:	dd000315 	stw	r20,12(sp)
 4005588:	e13fc404 	addi	r4,fp,-240
 400558c:	d9000215 	stw	r4,8(sp)
 4005590:	e13fc144 	addi	r4,fp,-251
 4005594:	d9000115 	stw	r4,4(sp)
 4005598:	dcc00015 	stw	r19,0(sp)
 400559c:	e1ffae17 	ldw	r7,-328(fp)
 40055a0:	100b883a 	mov	r5,r2
 40055a4:	180d883a 	mov	r6,r3
 40055a8:	e13fe617 	ldw	r4,-104(fp)
 40055ac:	4006e640 	call	4006e64 <cvt>
 40055b0:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 40055b4:	a08019e0 	cmpeqi	r2,r20,103
 40055b8:	1000021e 	bne	r2,zero,40055c4 <___vfprintf_internal_r+0x830>
 40055bc:	a08011d8 	cmpnei	r2,r20,71
 40055c0:	1000091e 	bne	r2,zero,40055e8 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 40055c4:	e0bfc417 	ldw	r2,-240(fp)
 40055c8:	10bfff50 	cmplti	r2,r2,-3
 40055cc:	1000031e 	bne	r2,zero,40055dc <___vfprintf_internal_r+0x848>
 40055d0:	e0bfc417 	ldw	r2,-240(fp)
 40055d4:	e0ffae17 	ldw	r3,-328(fp)
 40055d8:	1880020e 	bge	r3,r2,40055e4 <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 40055dc:	a53fff84 	addi	r20,r20,-2
 40055e0:	00000106 	br	40055e8 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 40055e4:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 40055e8:	a0801988 	cmpgei	r2,r20,102
 40055ec:	1000171e 	bne	r2,zero,400564c <___vfprintf_internal_r+0x8b8>
				--expt;
 40055f0:	e0bfc417 	ldw	r2,-240(fp)
 40055f4:	10bfffc4 	addi	r2,r2,-1
 40055f8:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 40055fc:	e0bfc417 	ldw	r2,-240(fp)
 4005600:	e0ffc504 	addi	r3,fp,-236
 4005604:	a00d883a 	mov	r6,r20
 4005608:	100b883a 	mov	r5,r2
 400560c:	1809883a 	mov	r4,r3
 4005610:	40070700 	call	4007070 <exponent>
 4005614:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 4005618:	e0bfc717 	ldw	r2,-228(fp)
 400561c:	e0ffaf17 	ldw	r3,-324(fp)
 4005620:	1885883a 	add	r2,r3,r2
 4005624:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 4005628:	e0bfc717 	ldw	r2,-228(fp)
 400562c:	10800088 	cmpgei	r2,r2,2
 4005630:	1000021e 	bne	r2,zero,400563c <___vfprintf_internal_r+0x8a8>
 4005634:	9880004c 	andi	r2,r19,1
 4005638:	10003526 	beq	r2,zero,4005710 <___vfprintf_internal_r+0x97c>
					++size;
 400563c:	e0bfb617 	ldw	r2,-296(fp)
 4005640:	10800044 	addi	r2,r2,1
 4005644:	e0bfb615 	stw	r2,-296(fp)
 4005648:	00003106 	br	4005710 <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 400564c:	a0801998 	cmpnei	r2,r20,102
 4005650:	1000181e 	bne	r2,zero,40056b4 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 4005654:	e0bfc417 	ldw	r2,-240(fp)
 4005658:	00800c0e 	bge	zero,r2,400568c <___vfprintf_internal_r+0x8f8>
						size = expt;
 400565c:	e0bfc417 	ldw	r2,-240(fp)
 4005660:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 4005664:	e0bfae17 	ldw	r2,-328(fp)
 4005668:	1000021e 	bne	r2,zero,4005674 <___vfprintf_internal_r+0x8e0>
 400566c:	9880004c 	andi	r2,r19,1
 4005670:	10002526 	beq	r2,zero,4005708 <___vfprintf_internal_r+0x974>
							size += prec + 1;
 4005674:	e0bfae17 	ldw	r2,-328(fp)
 4005678:	10800044 	addi	r2,r2,1
 400567c:	e0ffb617 	ldw	r3,-296(fp)
 4005680:	1885883a 	add	r2,r3,r2
 4005684:	e0bfb615 	stw	r2,-296(fp)
 4005688:	00001f06 	br	4005708 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 400568c:	e0bfae17 	ldw	r2,-328(fp)
 4005690:	1000021e 	bne	r2,zero,400569c <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 4005694:	9880004c 	andi	r2,r19,1
 4005698:	10000326 	beq	r2,zero,40056a8 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 400569c:	e0bfae17 	ldw	r2,-328(fp)
 40056a0:	10800084 	addi	r2,r2,2
 40056a4:	00000106 	br	40056ac <___vfprintf_internal_r+0x918>
 40056a8:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 40056ac:	e0bfb615 	stw	r2,-296(fp)
 40056b0:	00001506 	br	4005708 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 40056b4:	e0ffc417 	ldw	r3,-240(fp)
 40056b8:	e0bfc717 	ldw	r2,-228(fp)
 40056bc:	18800816 	blt	r3,r2,40056e0 <___vfprintf_internal_r+0x94c>
					size = expt;
 40056c0:	e0bfc417 	ldw	r2,-240(fp)
 40056c4:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 40056c8:	9880004c 	andi	r2,r19,1
 40056cc:	10000e26 	beq	r2,zero,4005708 <___vfprintf_internal_r+0x974>
						++size;
 40056d0:	e0bfb617 	ldw	r2,-296(fp)
 40056d4:	10800044 	addi	r2,r2,1
 40056d8:	e0bfb615 	stw	r2,-296(fp)
 40056dc:	00000a06 	br	4005708 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 40056e0:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 40056e4:	00800416 	blt	zero,r2,40056f8 <___vfprintf_internal_r+0x964>
 40056e8:	e0bfc417 	ldw	r2,-240(fp)
 40056ec:	00c00084 	movi	r3,2
 40056f0:	1885c83a 	sub	r2,r3,r2
 40056f4:	00000106 	br	40056fc <___vfprintf_internal_r+0x968>
 40056f8:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 40056fc:	e0ffc717 	ldw	r3,-228(fp)
 4005700:	10c5883a 	add	r2,r2,r3
 4005704:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 4005708:	e0bfc417 	ldw	r2,-240(fp)
 400570c:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 4005710:	e0bfc143 	ldbu	r2,-251(fp)
 4005714:	10803fcc 	andi	r2,r2,255
 4005718:	1080201c 	xori	r2,r2,128
 400571c:	10bfe004 	addi	r2,r2,-128
 4005720:	10018b26 	beq	r2,zero,4005d50 <___vfprintf_internal_r+0xfbc>
				sign = '-';
 4005724:	00800b44 	movi	r2,45
 4005728:	e0bfc105 	stb	r2,-252(fp)
			break;
 400572c:	00018806 	br	4005d50 <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 4005730:	9880080c 	andi	r2,r19,32
 4005734:	10000d26 	beq	r2,zero,400576c <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 4005738:	e0bfe917 	ldw	r2,-92(fp)
 400573c:	10c00104 	addi	r3,r2,4
 4005740:	e0ffe915 	stw	r3,-92(fp)
 4005744:	10800017 	ldw	r2,0(r2)
 4005748:	e0ffac17 	ldw	r3,-336(fp)
 400574c:	e0fff015 	stw	r3,-64(fp)
 4005750:	1807d7fa 	srai	r3,r3,31
 4005754:	e0fff115 	stw	r3,-60(fp)
 4005758:	e0fff017 	ldw	r3,-64(fp)
 400575c:	10c00015 	stw	r3,0(r2)
 4005760:	e0fff117 	ldw	r3,-60(fp)
 4005764:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 4005768:	00054b06 	br	4006c98 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 400576c:	9880040c 	andi	r2,r19,16
 4005770:	10000726 	beq	r2,zero,4005790 <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 4005774:	e0bfe917 	ldw	r2,-92(fp)
 4005778:	10c00104 	addi	r3,r2,4
 400577c:	e0ffe915 	stw	r3,-92(fp)
 4005780:	10800017 	ldw	r2,0(r2)
 4005784:	e0ffac17 	ldw	r3,-336(fp)
 4005788:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 400578c:	00054206 	br	4006c98 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 4005790:	9880100c 	andi	r2,r19,64
 4005794:	10000726 	beq	r2,zero,40057b4 <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 4005798:	e0bfe917 	ldw	r2,-92(fp)
 400579c:	10c00104 	addi	r3,r2,4
 40057a0:	e0ffe915 	stw	r3,-92(fp)
 40057a4:	10800017 	ldw	r2,0(r2)
 40057a8:	e0ffac17 	ldw	r3,-336(fp)
 40057ac:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 40057b0:	00053906 	br	4006c98 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 40057b4:	e0bfe917 	ldw	r2,-92(fp)
 40057b8:	10c00104 	addi	r3,r2,4
 40057bc:	e0ffe915 	stw	r3,-92(fp)
 40057c0:	10800017 	ldw	r2,0(r2)
 40057c4:	e0ffac17 	ldw	r3,-336(fp)
 40057c8:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 40057cc:	00053206 	br	4006c98 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 40057d0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 40057d4:	9880080c 	andi	r2,r19,32
 40057d8:	10000626 	beq	r2,zero,40057f4 <___vfprintf_internal_r+0xa60>
 40057dc:	e0bfe917 	ldw	r2,-92(fp)
 40057e0:	10c00204 	addi	r3,r2,8
 40057e4:	e0ffe915 	stw	r3,-92(fp)
 40057e8:	15800017 	ldw	r22,0(r2)
 40057ec:	15c00117 	ldw	r23,4(r2)
 40057f0:	00001c06 	br	4005864 <___vfprintf_internal_r+0xad0>
 40057f4:	9880040c 	andi	r2,r19,16
 40057f8:	10000726 	beq	r2,zero,4005818 <___vfprintf_internal_r+0xa84>
 40057fc:	e0bfe917 	ldw	r2,-92(fp)
 4005800:	10c00104 	addi	r3,r2,4
 4005804:	e0ffe915 	stw	r3,-92(fp)
 4005808:	10800017 	ldw	r2,0(r2)
 400580c:	102d883a 	mov	r22,r2
 4005810:	002f883a 	mov	r23,zero
 4005814:	00001306 	br	4005864 <___vfprintf_internal_r+0xad0>
 4005818:	9880100c 	andi	r2,r19,64
 400581c:	10000b26 	beq	r2,zero,400584c <___vfprintf_internal_r+0xab8>
 4005820:	e0bfe917 	ldw	r2,-92(fp)
 4005824:	10c00104 	addi	r3,r2,4
 4005828:	e0ffe915 	stw	r3,-92(fp)
 400582c:	10800017 	ldw	r2,0(r2)
 4005830:	e0bff215 	stw	r2,-56(fp)
 4005834:	e03ff315 	stw	zero,-52(fp)
 4005838:	e0bff217 	ldw	r2,-56(fp)
 400583c:	15bfffcc 	andi	r22,r2,65535
 4005840:	e0fff317 	ldw	r3,-52(fp)
 4005844:	182e703a 	and	r23,r3,zero
 4005848:	00000606 	br	4005864 <___vfprintf_internal_r+0xad0>
 400584c:	e0bfe917 	ldw	r2,-92(fp)
 4005850:	10c00104 	addi	r3,r2,4
 4005854:	e0ffe915 	stw	r3,-92(fp)
 4005858:	10800017 	ldw	r2,0(r2)
 400585c:	102d883a 	mov	r22,r2
 4005860:	002f883a 	mov	r23,zero
 4005864:	e5bfb115 	stw	r22,-316(fp)
 4005868:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 400586c:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 4005870:	0000a606 	br	4005b0c <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 4005874:	e0bfe917 	ldw	r2,-92(fp)
 4005878:	10c00104 	addi	r3,r2,4
 400587c:	e0ffe915 	stw	r3,-92(fp)
 4005880:	10800017 	ldw	r2,0(r2)
 4005884:	e0bfb115 	stw	r2,-316(fp)
 4005888:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 400588c:	00800084 	movi	r2,2
 4005890:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 4005894:	00810074 	movhi	r2,1025
 4005898:	10948e04 	addi	r2,r2,21048
 400589c:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 40058a0:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 40058a4:	00800c04 	movi	r2,48
 40058a8:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 40058ac:	05001e04 	movi	r20,120
 40058b0:	00801e04 	movi	r2,120
 40058b4:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 40058b8:	00009406 	br	4005b0c <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 40058bc:	e0bfe917 	ldw	r2,-92(fp)
 40058c0:	10c00104 	addi	r3,r2,4
 40058c4:	e0ffe915 	stw	r3,-92(fp)
 40058c8:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 40058cc:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 40058d0:	9000081e 	bne	r18,zero,40058f4 <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 40058d4:	04810074 	movhi	r18,1025
 40058d8:	94949304 	addi	r18,r18,21068
				size = ((unsigned) prec > 6U) ? 6 : prec;
 40058dc:	e0bfae17 	ldw	r2,-328(fp)
 40058e0:	10c001f0 	cmpltui	r3,r2,7
 40058e4:	1800011e 	bne	r3,zero,40058ec <___vfprintf_internal_r+0xb58>
 40058e8:	00800184 	movi	r2,6
 40058ec:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 40058f0:	00011806 	br	4005d54 <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 40058f4:	e0bfae17 	ldw	r2,-328(fp)
 40058f8:	10001016 	blt	r2,zero,400593c <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 40058fc:	e0bfae17 	ldw	r2,-328(fp)
 4005900:	100d883a 	mov	r6,r2
 4005904:	000b883a 	mov	r5,zero
 4005908:	9009883a 	mov	r4,r18
 400590c:	400be440 	call	400be44 <memchr>
 4005910:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 4005914:	e0bfbf17 	ldw	r2,-260(fp)
 4005918:	10000526 	beq	r2,zero,4005930 <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 400591c:	e0bfbf17 	ldw	r2,-260(fp)
 4005920:	9007883a 	mov	r3,r18
 4005924:	10c5c83a 	sub	r2,r2,r3
 4005928:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 400592c:	00010906 	br	4005d54 <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 4005930:	e0bfae17 	ldw	r2,-328(fp)
 4005934:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 4005938:	00010606 	br	4005d54 <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 400593c:	9009883a 	mov	r4,r18
 4005940:	4004a780 	call	4004a78 <strlen>
 4005944:	e0bfb615 	stw	r2,-296(fp)

			break;
 4005948:	00010206 	br	4005d54 <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 400594c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 4005950:	9880080c 	andi	r2,r19,32
 4005954:	10000826 	beq	r2,zero,4005978 <___vfprintf_internal_r+0xbe4>
 4005958:	e0bfe917 	ldw	r2,-92(fp)
 400595c:	10c00204 	addi	r3,r2,8
 4005960:	e0ffe915 	stw	r3,-92(fp)
 4005964:	10c00017 	ldw	r3,0(r2)
 4005968:	e0ffec15 	stw	r3,-80(fp)
 400596c:	10c00117 	ldw	r3,4(r2)
 4005970:	e0ffed15 	stw	r3,-76(fp)
 4005974:	00001e06 	br	40059f0 <___vfprintf_internal_r+0xc5c>
 4005978:	9880040c 	andi	r2,r19,16
 400597c:	10000726 	beq	r2,zero,400599c <___vfprintf_internal_r+0xc08>
 4005980:	e0bfe917 	ldw	r2,-92(fp)
 4005984:	10c00104 	addi	r3,r2,4
 4005988:	e0ffe915 	stw	r3,-92(fp)
 400598c:	10800017 	ldw	r2,0(r2)
 4005990:	e0bfec15 	stw	r2,-80(fp)
 4005994:	e03fed15 	stw	zero,-76(fp)
 4005998:	00001506 	br	40059f0 <___vfprintf_internal_r+0xc5c>
 400599c:	9880100c 	andi	r2,r19,64
 40059a0:	10000d26 	beq	r2,zero,40059d8 <___vfprintf_internal_r+0xc44>
 40059a4:	e0bfe917 	ldw	r2,-92(fp)
 40059a8:	10c00104 	addi	r3,r2,4
 40059ac:	e0ffe915 	stw	r3,-92(fp)
 40059b0:	10800017 	ldw	r2,0(r2)
 40059b4:	e0bff415 	stw	r2,-48(fp)
 40059b8:	e03ff515 	stw	zero,-44(fp)
 40059bc:	e0bff417 	ldw	r2,-48(fp)
 40059c0:	10bfffcc 	andi	r2,r2,65535
 40059c4:	e0bfec15 	stw	r2,-80(fp)
 40059c8:	e0fff517 	ldw	r3,-44(fp)
 40059cc:	1806703a 	and	r3,r3,zero
 40059d0:	e0ffed15 	stw	r3,-76(fp)
 40059d4:	00000606 	br	40059f0 <___vfprintf_internal_r+0xc5c>
 40059d8:	e0bfe917 	ldw	r2,-92(fp)
 40059dc:	10c00104 	addi	r3,r2,4
 40059e0:	e0ffe915 	stw	r3,-92(fp)
 40059e4:	10800017 	ldw	r2,0(r2)
 40059e8:	e0bfec15 	stw	r2,-80(fp)
 40059ec:	e03fed15 	stw	zero,-76(fp)
 40059f0:	e0bfec17 	ldw	r2,-80(fp)
 40059f4:	e0bfb115 	stw	r2,-316(fp)
 40059f8:	e0ffed17 	ldw	r3,-76(fp)
 40059fc:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 4005a00:	00800044 	movi	r2,1
 4005a04:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 4005a08:	00004006 	br	4005b0c <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 4005a0c:	00810074 	movhi	r2,1025
 4005a10:	10949504 	addi	r2,r2,21076
 4005a14:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 4005a18:	00000306 	br	4005a28 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 4005a1c:	00810074 	movhi	r2,1025
 4005a20:	10948e04 	addi	r2,r2,21048
 4005a24:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 4005a28:	9880080c 	andi	r2,r19,32
 4005a2c:	10000826 	beq	r2,zero,4005a50 <___vfprintf_internal_r+0xcbc>
 4005a30:	e0bfe917 	ldw	r2,-92(fp)
 4005a34:	10c00204 	addi	r3,r2,8
 4005a38:	e0ffe915 	stw	r3,-92(fp)
 4005a3c:	10c00017 	ldw	r3,0(r2)
 4005a40:	e0ffee15 	stw	r3,-72(fp)
 4005a44:	10c00117 	ldw	r3,4(r2)
 4005a48:	e0ffef15 	stw	r3,-68(fp)
 4005a4c:	00001e06 	br	4005ac8 <___vfprintf_internal_r+0xd34>
 4005a50:	9880040c 	andi	r2,r19,16
 4005a54:	10000726 	beq	r2,zero,4005a74 <___vfprintf_internal_r+0xce0>
 4005a58:	e0bfe917 	ldw	r2,-92(fp)
 4005a5c:	10c00104 	addi	r3,r2,4
 4005a60:	e0ffe915 	stw	r3,-92(fp)
 4005a64:	10800017 	ldw	r2,0(r2)
 4005a68:	e0bfee15 	stw	r2,-72(fp)
 4005a6c:	e03fef15 	stw	zero,-68(fp)
 4005a70:	00001506 	br	4005ac8 <___vfprintf_internal_r+0xd34>
 4005a74:	9880100c 	andi	r2,r19,64
 4005a78:	10000d26 	beq	r2,zero,4005ab0 <___vfprintf_internal_r+0xd1c>
 4005a7c:	e0bfe917 	ldw	r2,-92(fp)
 4005a80:	10c00104 	addi	r3,r2,4
 4005a84:	e0ffe915 	stw	r3,-92(fp)
 4005a88:	10800017 	ldw	r2,0(r2)
 4005a8c:	e0bff615 	stw	r2,-40(fp)
 4005a90:	e03ff715 	stw	zero,-36(fp)
 4005a94:	e0bff617 	ldw	r2,-40(fp)
 4005a98:	10bfffcc 	andi	r2,r2,65535
 4005a9c:	e0bfee15 	stw	r2,-72(fp)
 4005aa0:	e0fff717 	ldw	r3,-36(fp)
 4005aa4:	1806703a 	and	r3,r3,zero
 4005aa8:	e0ffef15 	stw	r3,-68(fp)
 4005aac:	00000606 	br	4005ac8 <___vfprintf_internal_r+0xd34>
 4005ab0:	e0bfe917 	ldw	r2,-92(fp)
 4005ab4:	10c00104 	addi	r3,r2,4
 4005ab8:	e0ffe915 	stw	r3,-92(fp)
 4005abc:	10800017 	ldw	r2,0(r2)
 4005ac0:	e0bfee15 	stw	r2,-72(fp)
 4005ac4:	e03fef15 	stw	zero,-68(fp)
 4005ac8:	e0bfee17 	ldw	r2,-72(fp)
 4005acc:	e0bfb115 	stw	r2,-316(fp)
 4005ad0:	e0ffef17 	ldw	r3,-68(fp)
 4005ad4:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 4005ad8:	00800084 	movi	r2,2
 4005adc:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 4005ae0:	9880004c 	andi	r2,r19,1
 4005ae4:	10000926 	beq	r2,zero,4005b0c <___vfprintf_internal_r+0xd78>
 4005ae8:	e0bfb117 	ldw	r2,-316(fp)
 4005aec:	e0ffb217 	ldw	r3,-312(fp)
 4005af0:	10c4b03a 	or	r2,r2,r3
 4005af4:	10000526 	beq	r2,zero,4005b0c <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 4005af8:	00800c04 	movi	r2,48
 4005afc:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 4005b00:	a005883a 	mov	r2,r20
 4005b04:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 4005b08:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 4005b0c:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 4005b10:	e0bfae17 	ldw	r2,-328(fp)
 4005b14:	e0bfb415 	stw	r2,-304(fp)
 4005b18:	e0bfb417 	ldw	r2,-304(fp)
 4005b1c:	10000216 	blt	r2,zero,4005b28 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 4005b20:	00bfdfc4 	movi	r2,-129
 4005b24:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 4005b28:	e4bfdb04 	addi	r18,fp,-148
 4005b2c:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 4005b30:	e0bfb117 	ldw	r2,-316(fp)
 4005b34:	e0ffb217 	ldw	r3,-312(fp)
 4005b38:	10c4b03a 	or	r2,r2,r3
 4005b3c:	1000021e 	bne	r2,zero,4005b48 <___vfprintf_internal_r+0xdb4>
 4005b40:	e0bfae17 	ldw	r2,-328(fp)
 4005b44:	10006c26 	beq	r2,zero,4005cf8 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 4005b48:	e0bfb303 	ldbu	r2,-308(fp)
 4005b4c:	10c00060 	cmpeqi	r3,r2,1
 4005b50:	1800211e 	bne	r3,zero,4005bd8 <___vfprintf_internal_r+0xe44>
 4005b54:	10c000a0 	cmpeqi	r3,r2,2
 4005b58:	1800491e 	bne	r3,zero,4005c80 <___vfprintf_internal_r+0xeec>
 4005b5c:	10005d1e 	bne	r2,zero,4005cd4 <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 4005b60:	94bfffc4 	addi	r18,r18,-1
 4005b64:	e0bfb117 	ldw	r2,-316(fp)
 4005b68:	108001cc 	andi	r2,r2,7
 4005b6c:	10800c04 	addi	r2,r2,48
 4005b70:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 4005b74:	e0bfb217 	ldw	r2,-312(fp)
 4005b78:	1004977a 	slli	r2,r2,29
 4005b7c:	e0ffb117 	ldw	r3,-316(fp)
 4005b80:	1806d0fa 	srli	r3,r3,3
 4005b84:	1884b03a 	or	r2,r3,r2
 4005b88:	e0bfb115 	stw	r2,-316(fp)
 4005b8c:	e0bfb217 	ldw	r2,-312(fp)
 4005b90:	1004d0fa 	srli	r2,r2,3
 4005b94:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 4005b98:	e0bfb117 	ldw	r2,-316(fp)
 4005b9c:	e0ffb217 	ldw	r3,-312(fp)
 4005ba0:	10c4b03a 	or	r2,r2,r3
 4005ba4:	103fee1e 	bne	r2,zero,4005b60 <__alt_data_end+0xfc005b60>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 4005ba8:	9880004c 	andi	r2,r19,1
 4005bac:	10005026 	beq	r2,zero,4005cf0 <___vfprintf_internal_r+0xf5c>
 4005bb0:	90800003 	ldbu	r2,0(r18)
 4005bb4:	10803fcc 	andi	r2,r2,255
 4005bb8:	1080201c 	xori	r2,r2,128
 4005bbc:	10bfe004 	addi	r2,r2,-128
 4005bc0:	10800c20 	cmpeqi	r2,r2,48
 4005bc4:	10004a1e 	bne	r2,zero,4005cf0 <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 4005bc8:	94bfffc4 	addi	r18,r18,-1
 4005bcc:	00800c04 	movi	r2,48
 4005bd0:	90800005 	stb	r2,0(r18)
					break;
 4005bd4:	00004606 	br	4005cf0 <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 4005bd8:	e0bfb217 	ldw	r2,-312(fp)
 4005bdc:	10000a1e 	bne	r2,zero,4005c08 <___vfprintf_internal_r+0xe74>
 4005be0:	e0bfb217 	ldw	r2,-312(fp)
 4005be4:	1000031e 	bne	r2,zero,4005bf4 <___vfprintf_internal_r+0xe60>
 4005be8:	e0bfb117 	ldw	r2,-316(fp)
 4005bec:	108002a8 	cmpgeui	r2,r2,10
 4005bf0:	1000051e 	bne	r2,zero,4005c08 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 4005bf4:	94bfffc4 	addi	r18,r18,-1
 4005bf8:	e0bfb117 	ldw	r2,-316(fp)
 4005bfc:	10800c04 	addi	r2,r2,48
 4005c00:	90800005 	stb	r2,0(r18)
						break;
 4005c04:	00003b06 	br	4005cf4 <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 4005c08:	94bfffc4 	addi	r18,r18,-1
 4005c0c:	e0bfb117 	ldw	r2,-316(fp)
 4005c10:	e0ffb217 	ldw	r3,-312(fp)
 4005c14:	01800284 	movi	r6,10
 4005c18:	000f883a 	mov	r7,zero
 4005c1c:	1009883a 	mov	r4,r2
 4005c20:	180b883a 	mov	r5,r3
 4005c24:	40119480 	call	4011948 <__umoddi3>
 4005c28:	1009883a 	mov	r4,r2
 4005c2c:	180b883a 	mov	r5,r3
 4005c30:	2005883a 	mov	r2,r4
 4005c34:	2807883a 	mov	r3,r5
 4005c38:	10800c04 	addi	r2,r2,48
 4005c3c:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 4005c40:	e0bfb117 	ldw	r2,-316(fp)
 4005c44:	e0ffb217 	ldw	r3,-312(fp)
 4005c48:	01800284 	movi	r6,10
 4005c4c:	000f883a 	mov	r7,zero
 4005c50:	1009883a 	mov	r4,r2
 4005c54:	180b883a 	mov	r5,r3
 4005c58:	40113d00 	call	40113d0 <__udivdi3>
 4005c5c:	1009883a 	mov	r4,r2
 4005c60:	180b883a 	mov	r5,r3
 4005c64:	e13fb115 	stw	r4,-316(fp)
 4005c68:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 4005c6c:	e0bfb117 	ldw	r2,-316(fp)
 4005c70:	e0ffb217 	ldw	r3,-312(fp)
 4005c74:	10c4b03a 	or	r2,r2,r3
 4005c78:	103fe31e 	bne	r2,zero,4005c08 <__alt_data_end+0xfc005c08>
					break;
 4005c7c:	00001d06 	br	4005cf4 <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 4005c80:	94bfffc4 	addi	r18,r18,-1
 4005c84:	e0bfb117 	ldw	r2,-316(fp)
 4005c88:	108003cc 	andi	r2,r2,15
 4005c8c:	e0ffb717 	ldw	r3,-292(fp)
 4005c90:	1885883a 	add	r2,r3,r2
 4005c94:	10800003 	ldbu	r2,0(r2)
 4005c98:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 4005c9c:	e0bfb217 	ldw	r2,-312(fp)
 4005ca0:	1004973a 	slli	r2,r2,28
 4005ca4:	e0ffb117 	ldw	r3,-316(fp)
 4005ca8:	1806d13a 	srli	r3,r3,4
 4005cac:	1884b03a 	or	r2,r3,r2
 4005cb0:	e0bfb115 	stw	r2,-316(fp)
 4005cb4:	e0bfb217 	ldw	r2,-312(fp)
 4005cb8:	1004d13a 	srli	r2,r2,4
 4005cbc:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 4005cc0:	e0bfb117 	ldw	r2,-316(fp)
 4005cc4:	e0ffb217 	ldw	r3,-312(fp)
 4005cc8:	10c4b03a 	or	r2,r2,r3
 4005ccc:	103fec1e 	bne	r2,zero,4005c80 <__alt_data_end+0xfc005c80>
					break;
 4005cd0:	00000806 	br	4005cf4 <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 4005cd4:	04810074 	movhi	r18,1025
 4005cd8:	94949a04 	addi	r18,r18,21096
					size = strlen (cp);
 4005cdc:	9009883a 	mov	r4,r18
 4005ce0:	4004a780 	call	4004a78 <strlen>
 4005ce4:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 4005ce8:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 4005cec:	00001906 	br	4005d54 <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 4005cf0:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 4005cf4:	00000706 	br	4005d14 <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 4005cf8:	e0bfb303 	ldbu	r2,-308(fp)
 4005cfc:	1000051e 	bne	r2,zero,4005d14 <___vfprintf_internal_r+0xf80>
 4005d00:	9880004c 	andi	r2,r19,1
 4005d04:	10000326 	beq	r2,zero,4005d14 <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 4005d08:	94bfffc4 	addi	r18,r18,-1
 4005d0c:	00800c04 	movi	r2,48
 4005d10:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 4005d14:	e0bfdb04 	addi	r2,fp,-148
 4005d18:	10800a04 	addi	r2,r2,40
 4005d1c:	1007883a 	mov	r3,r2
 4005d20:	9005883a 	mov	r2,r18
 4005d24:	1885c83a 	sub	r2,r3,r2
 4005d28:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 4005d2c:	00000906 	br	4005d54 <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 4005d30:	a003dc26 	beq	r20,zero,4006ca4 <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 4005d34:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 4005d38:	a005883a 	mov	r2,r20
 4005d3c:	90800005 	stb	r2,0(r18)
			size = 1;
 4005d40:	00800044 	movi	r2,1
 4005d44:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 4005d48:	e03fc105 	stb	zero,-252(fp)
			break;
 4005d4c:	00000106 	br	4005d54 <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 4005d50:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 4005d54:	e0ffb417 	ldw	r3,-304(fp)
 4005d58:	e0bfb617 	ldw	r2,-296(fp)
 4005d5c:	10c0010e 	bge	r2,r3,4005d64 <___vfprintf_internal_r+0xfd0>
 4005d60:	1805883a 	mov	r2,r3
 4005d64:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 4005d68:	e0bfc103 	ldbu	r2,-252(fp)
 4005d6c:	10803fcc 	andi	r2,r2,255
 4005d70:	1080201c 	xori	r2,r2,128
 4005d74:	10bfe004 	addi	r2,r2,-128
 4005d78:	10000326 	beq	r2,zero,4005d88 <___vfprintf_internal_r+0xff4>
			realsz++;
 4005d7c:	e0bfb517 	ldw	r2,-300(fp)
 4005d80:	10800044 	addi	r2,r2,1
 4005d84:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 4005d88:	9880008c 	andi	r2,r19,2
 4005d8c:	10000326 	beq	r2,zero,4005d9c <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 4005d90:	e0bfb517 	ldw	r2,-300(fp)
 4005d94:	10800084 	addi	r2,r2,2
 4005d98:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 4005d9c:	9880210c 	andi	r2,r19,132
 4005da0:	1000351e 	bne	r2,zero,4005e78 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 4005da4:	e0ffad17 	ldw	r3,-332(fp)
 4005da8:	e0bfb517 	ldw	r2,-300(fp)
 4005dac:	18a1c83a 	sub	r16,r3,r2
 4005db0:	0400310e 	bge	zero,r16,4005e78 <___vfprintf_internal_r+0x10e4>
 4005db4:	00001706 	br	4005e14 <___vfprintf_internal_r+0x1080>
 4005db8:	00810074 	movhi	r2,1025
 4005dbc:	1094a184 	addi	r2,r2,21126
 4005dc0:	88800015 	stw	r2,0(r17)
 4005dc4:	00800404 	movi	r2,16
 4005dc8:	88800115 	stw	r2,4(r17)
 4005dcc:	e0bfca17 	ldw	r2,-216(fp)
 4005dd0:	10800404 	addi	r2,r2,16
 4005dd4:	e0bfca15 	stw	r2,-216(fp)
 4005dd8:	8c400204 	addi	r17,r17,8
 4005ddc:	e0bfc917 	ldw	r2,-220(fp)
 4005de0:	10800044 	addi	r2,r2,1
 4005de4:	e0bfc915 	stw	r2,-220(fp)
 4005de8:	e0bfc917 	ldw	r2,-220(fp)
 4005dec:	10800210 	cmplti	r2,r2,8
 4005df0:	1000071e 	bne	r2,zero,4005e10 <___vfprintf_internal_r+0x107c>
 4005df4:	e0bfc804 	addi	r2,fp,-224
 4005df8:	100d883a 	mov	r6,r2
 4005dfc:	e17fe717 	ldw	r5,-100(fp)
 4005e00:	e13fe617 	ldw	r4,-104(fp)
 4005e04:	400f1dc0 	call	400f1dc <__sprint_r>
 4005e08:	1003b41e 	bne	r2,zero,4006cdc <___vfprintf_internal_r+0x1f48>
 4005e0c:	e47fcb04 	addi	r17,fp,-212
 4005e10:	843ffc04 	addi	r16,r16,-16
 4005e14:	80800448 	cmpgei	r2,r16,17
 4005e18:	103fe71e 	bne	r2,zero,4005db8 <__alt_data_end+0xfc005db8>
 4005e1c:	00810074 	movhi	r2,1025
 4005e20:	1094a184 	addi	r2,r2,21126
 4005e24:	88800015 	stw	r2,0(r17)
 4005e28:	8005883a 	mov	r2,r16
 4005e2c:	88800115 	stw	r2,4(r17)
 4005e30:	e0bfca17 	ldw	r2,-216(fp)
 4005e34:	8007883a 	mov	r3,r16
 4005e38:	10c5883a 	add	r2,r2,r3
 4005e3c:	e0bfca15 	stw	r2,-216(fp)
 4005e40:	8c400204 	addi	r17,r17,8
 4005e44:	e0bfc917 	ldw	r2,-220(fp)
 4005e48:	10800044 	addi	r2,r2,1
 4005e4c:	e0bfc915 	stw	r2,-220(fp)
 4005e50:	e0bfc917 	ldw	r2,-220(fp)
 4005e54:	10800210 	cmplti	r2,r2,8
 4005e58:	1000071e 	bne	r2,zero,4005e78 <___vfprintf_internal_r+0x10e4>
 4005e5c:	e0bfc804 	addi	r2,fp,-224
 4005e60:	100d883a 	mov	r6,r2
 4005e64:	e17fe717 	ldw	r5,-100(fp)
 4005e68:	e13fe617 	ldw	r4,-104(fp)
 4005e6c:	400f1dc0 	call	400f1dc <__sprint_r>
 4005e70:	10039c1e 	bne	r2,zero,4006ce4 <___vfprintf_internal_r+0x1f50>
 4005e74:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 4005e78:	e0bfc103 	ldbu	r2,-252(fp)
 4005e7c:	10803fcc 	andi	r2,r2,255
 4005e80:	1080201c 	xori	r2,r2,128
 4005e84:	10bfe004 	addi	r2,r2,-128
 4005e88:	10001526 	beq	r2,zero,4005ee0 <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 4005e8c:	e0bfc104 	addi	r2,fp,-252
 4005e90:	88800015 	stw	r2,0(r17)
 4005e94:	00800044 	movi	r2,1
 4005e98:	88800115 	stw	r2,4(r17)
 4005e9c:	e0bfca17 	ldw	r2,-216(fp)
 4005ea0:	10800044 	addi	r2,r2,1
 4005ea4:	e0bfca15 	stw	r2,-216(fp)
 4005ea8:	8c400204 	addi	r17,r17,8
 4005eac:	e0bfc917 	ldw	r2,-220(fp)
 4005eb0:	10800044 	addi	r2,r2,1
 4005eb4:	e0bfc915 	stw	r2,-220(fp)
 4005eb8:	e0bfc917 	ldw	r2,-220(fp)
 4005ebc:	10800210 	cmplti	r2,r2,8
 4005ec0:	1000071e 	bne	r2,zero,4005ee0 <___vfprintf_internal_r+0x114c>
 4005ec4:	e0bfc804 	addi	r2,fp,-224
 4005ec8:	100d883a 	mov	r6,r2
 4005ecc:	e17fe717 	ldw	r5,-100(fp)
 4005ed0:	e13fe617 	ldw	r4,-104(fp)
 4005ed4:	400f1dc0 	call	400f1dc <__sprint_r>
 4005ed8:	1003841e 	bne	r2,zero,4006cec <___vfprintf_internal_r+0x1f58>
 4005edc:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 4005ee0:	9880008c 	andi	r2,r19,2
 4005ee4:	10001526 	beq	r2,zero,4005f3c <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 4005ee8:	e0bfe504 	addi	r2,fp,-108
 4005eec:	88800015 	stw	r2,0(r17)
 4005ef0:	00800084 	movi	r2,2
 4005ef4:	88800115 	stw	r2,4(r17)
 4005ef8:	e0bfca17 	ldw	r2,-216(fp)
 4005efc:	10800084 	addi	r2,r2,2
 4005f00:	e0bfca15 	stw	r2,-216(fp)
 4005f04:	8c400204 	addi	r17,r17,8
 4005f08:	e0bfc917 	ldw	r2,-220(fp)
 4005f0c:	10800044 	addi	r2,r2,1
 4005f10:	e0bfc915 	stw	r2,-220(fp)
 4005f14:	e0bfc917 	ldw	r2,-220(fp)
 4005f18:	10800210 	cmplti	r2,r2,8
 4005f1c:	1000071e 	bne	r2,zero,4005f3c <___vfprintf_internal_r+0x11a8>
 4005f20:	e0bfc804 	addi	r2,fp,-224
 4005f24:	100d883a 	mov	r6,r2
 4005f28:	e17fe717 	ldw	r5,-100(fp)
 4005f2c:	e13fe617 	ldw	r4,-104(fp)
 4005f30:	400f1dc0 	call	400f1dc <__sprint_r>
 4005f34:	10036f1e 	bne	r2,zero,4006cf4 <___vfprintf_internal_r+0x1f60>
 4005f38:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 4005f3c:	9880210c 	andi	r2,r19,132
 4005f40:	10802018 	cmpnei	r2,r2,128
 4005f44:	1000351e 	bne	r2,zero,400601c <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 4005f48:	e0ffad17 	ldw	r3,-332(fp)
 4005f4c:	e0bfb517 	ldw	r2,-300(fp)
 4005f50:	18a1c83a 	sub	r16,r3,r2
 4005f54:	0400310e 	bge	zero,r16,400601c <___vfprintf_internal_r+0x1288>
 4005f58:	00001706 	br	4005fb8 <___vfprintf_internal_r+0x1224>
 4005f5c:	00810074 	movhi	r2,1025
 4005f60:	1094a584 	addi	r2,r2,21142
 4005f64:	88800015 	stw	r2,0(r17)
 4005f68:	00800404 	movi	r2,16
 4005f6c:	88800115 	stw	r2,4(r17)
 4005f70:	e0bfca17 	ldw	r2,-216(fp)
 4005f74:	10800404 	addi	r2,r2,16
 4005f78:	e0bfca15 	stw	r2,-216(fp)
 4005f7c:	8c400204 	addi	r17,r17,8
 4005f80:	e0bfc917 	ldw	r2,-220(fp)
 4005f84:	10800044 	addi	r2,r2,1
 4005f88:	e0bfc915 	stw	r2,-220(fp)
 4005f8c:	e0bfc917 	ldw	r2,-220(fp)
 4005f90:	10800210 	cmplti	r2,r2,8
 4005f94:	1000071e 	bne	r2,zero,4005fb4 <___vfprintf_internal_r+0x1220>
 4005f98:	e0bfc804 	addi	r2,fp,-224
 4005f9c:	100d883a 	mov	r6,r2
 4005fa0:	e17fe717 	ldw	r5,-100(fp)
 4005fa4:	e13fe617 	ldw	r4,-104(fp)
 4005fa8:	400f1dc0 	call	400f1dc <__sprint_r>
 4005fac:	1003531e 	bne	r2,zero,4006cfc <___vfprintf_internal_r+0x1f68>
 4005fb0:	e47fcb04 	addi	r17,fp,-212
 4005fb4:	843ffc04 	addi	r16,r16,-16
 4005fb8:	80800448 	cmpgei	r2,r16,17
 4005fbc:	103fe71e 	bne	r2,zero,4005f5c <__alt_data_end+0xfc005f5c>
 4005fc0:	00810074 	movhi	r2,1025
 4005fc4:	1094a584 	addi	r2,r2,21142
 4005fc8:	88800015 	stw	r2,0(r17)
 4005fcc:	8005883a 	mov	r2,r16
 4005fd0:	88800115 	stw	r2,4(r17)
 4005fd4:	e0bfca17 	ldw	r2,-216(fp)
 4005fd8:	8007883a 	mov	r3,r16
 4005fdc:	10c5883a 	add	r2,r2,r3
 4005fe0:	e0bfca15 	stw	r2,-216(fp)
 4005fe4:	8c400204 	addi	r17,r17,8
 4005fe8:	e0bfc917 	ldw	r2,-220(fp)
 4005fec:	10800044 	addi	r2,r2,1
 4005ff0:	e0bfc915 	stw	r2,-220(fp)
 4005ff4:	e0bfc917 	ldw	r2,-220(fp)
 4005ff8:	10800210 	cmplti	r2,r2,8
 4005ffc:	1000071e 	bne	r2,zero,400601c <___vfprintf_internal_r+0x1288>
 4006000:	e0bfc804 	addi	r2,fp,-224
 4006004:	100d883a 	mov	r6,r2
 4006008:	e17fe717 	ldw	r5,-100(fp)
 400600c:	e13fe617 	ldw	r4,-104(fp)
 4006010:	400f1dc0 	call	400f1dc <__sprint_r>
 4006014:	10033b1e 	bne	r2,zero,4006d04 <___vfprintf_internal_r+0x1f70>
 4006018:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 400601c:	e0ffb417 	ldw	r3,-304(fp)
 4006020:	e0bfb617 	ldw	r2,-296(fp)
 4006024:	18a1c83a 	sub	r16,r3,r2
 4006028:	0400310e 	bge	zero,r16,40060f0 <___vfprintf_internal_r+0x135c>
 400602c:	00001706 	br	400608c <___vfprintf_internal_r+0x12f8>
 4006030:	00810074 	movhi	r2,1025
 4006034:	1094a584 	addi	r2,r2,21142
 4006038:	88800015 	stw	r2,0(r17)
 400603c:	00800404 	movi	r2,16
 4006040:	88800115 	stw	r2,4(r17)
 4006044:	e0bfca17 	ldw	r2,-216(fp)
 4006048:	10800404 	addi	r2,r2,16
 400604c:	e0bfca15 	stw	r2,-216(fp)
 4006050:	8c400204 	addi	r17,r17,8
 4006054:	e0bfc917 	ldw	r2,-220(fp)
 4006058:	10800044 	addi	r2,r2,1
 400605c:	e0bfc915 	stw	r2,-220(fp)
 4006060:	e0bfc917 	ldw	r2,-220(fp)
 4006064:	10800210 	cmplti	r2,r2,8
 4006068:	1000071e 	bne	r2,zero,4006088 <___vfprintf_internal_r+0x12f4>
 400606c:	e0bfc804 	addi	r2,fp,-224
 4006070:	100d883a 	mov	r6,r2
 4006074:	e17fe717 	ldw	r5,-100(fp)
 4006078:	e13fe617 	ldw	r4,-104(fp)
 400607c:	400f1dc0 	call	400f1dc <__sprint_r>
 4006080:	1003221e 	bne	r2,zero,4006d0c <___vfprintf_internal_r+0x1f78>
 4006084:	e47fcb04 	addi	r17,fp,-212
 4006088:	843ffc04 	addi	r16,r16,-16
 400608c:	80800448 	cmpgei	r2,r16,17
 4006090:	103fe71e 	bne	r2,zero,4006030 <__alt_data_end+0xfc006030>
 4006094:	00810074 	movhi	r2,1025
 4006098:	1094a584 	addi	r2,r2,21142
 400609c:	88800015 	stw	r2,0(r17)
 40060a0:	8005883a 	mov	r2,r16
 40060a4:	88800115 	stw	r2,4(r17)
 40060a8:	e0bfca17 	ldw	r2,-216(fp)
 40060ac:	8007883a 	mov	r3,r16
 40060b0:	10c5883a 	add	r2,r2,r3
 40060b4:	e0bfca15 	stw	r2,-216(fp)
 40060b8:	8c400204 	addi	r17,r17,8
 40060bc:	e0bfc917 	ldw	r2,-220(fp)
 40060c0:	10800044 	addi	r2,r2,1
 40060c4:	e0bfc915 	stw	r2,-220(fp)
 40060c8:	e0bfc917 	ldw	r2,-220(fp)
 40060cc:	10800210 	cmplti	r2,r2,8
 40060d0:	1000071e 	bne	r2,zero,40060f0 <___vfprintf_internal_r+0x135c>
 40060d4:	e0bfc804 	addi	r2,fp,-224
 40060d8:	100d883a 	mov	r6,r2
 40060dc:	e17fe717 	ldw	r5,-100(fp)
 40060e0:	e13fe617 	ldw	r4,-104(fp)
 40060e4:	400f1dc0 	call	400f1dc <__sprint_r>
 40060e8:	10030a1e 	bne	r2,zero,4006d14 <___vfprintf_internal_r+0x1f80>
 40060ec:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 40060f0:	9880400c 	andi	r2,r19,256
 40060f4:	1000161e 	bne	r2,zero,4006150 <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 40060f8:	8c800015 	stw	r18,0(r17)
 40060fc:	e0bfb617 	ldw	r2,-296(fp)
 4006100:	88800115 	stw	r2,4(r17)
 4006104:	e0ffca17 	ldw	r3,-216(fp)
 4006108:	e0bfb617 	ldw	r2,-296(fp)
 400610c:	1885883a 	add	r2,r3,r2
 4006110:	e0bfca15 	stw	r2,-216(fp)
 4006114:	8c400204 	addi	r17,r17,8
 4006118:	e0bfc917 	ldw	r2,-220(fp)
 400611c:	10800044 	addi	r2,r2,1
 4006120:	e0bfc915 	stw	r2,-220(fp)
 4006124:	e0bfc917 	ldw	r2,-220(fp)
 4006128:	10800210 	cmplti	r2,r2,8
 400612c:	10028c1e 	bne	r2,zero,4006b60 <___vfprintf_internal_r+0x1dcc>
 4006130:	e0bfc804 	addi	r2,fp,-224
 4006134:	100d883a 	mov	r6,r2
 4006138:	e17fe717 	ldw	r5,-100(fp)
 400613c:	e13fe617 	ldw	r4,-104(fp)
 4006140:	400f1dc0 	call	400f1dc <__sprint_r>
 4006144:	1002f51e 	bne	r2,zero,4006d1c <___vfprintf_internal_r+0x1f88>
 4006148:	e47fcb04 	addi	r17,fp,-212
 400614c:	00028406 	br	4006b60 <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 4006150:	a0801990 	cmplti	r2,r20,102
 4006154:	1001d11e 	bne	r2,zero,400689c <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 4006158:	e0bfc217 	ldw	r2,-248(fp)
 400615c:	e0ffc317 	ldw	r3,-244(fp)
 4006160:	000d883a 	mov	r6,zero
 4006164:	000f883a 	mov	r7,zero
 4006168:	1009883a 	mov	r4,r2
 400616c:	180b883a 	mov	r5,r3
 4006170:	4002f680 	call	4002f68 <__eqdf2>
 4006174:	1000661e 	bne	r2,zero,4006310 <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 4006178:	00810074 	movhi	r2,1025
 400617c:	1094a104 	addi	r2,r2,21124
 4006180:	88800015 	stw	r2,0(r17)
 4006184:	00800044 	movi	r2,1
 4006188:	88800115 	stw	r2,4(r17)
 400618c:	e0bfca17 	ldw	r2,-216(fp)
 4006190:	10800044 	addi	r2,r2,1
 4006194:	e0bfca15 	stw	r2,-216(fp)
 4006198:	8c400204 	addi	r17,r17,8
 400619c:	e0bfc917 	ldw	r2,-220(fp)
 40061a0:	10800044 	addi	r2,r2,1
 40061a4:	e0bfc915 	stw	r2,-220(fp)
 40061a8:	e0bfc917 	ldw	r2,-220(fp)
 40061ac:	10800210 	cmplti	r2,r2,8
 40061b0:	1000071e 	bne	r2,zero,40061d0 <___vfprintf_internal_r+0x143c>
 40061b4:	e0bfc804 	addi	r2,fp,-224
 40061b8:	100d883a 	mov	r6,r2
 40061bc:	e17fe717 	ldw	r5,-100(fp)
 40061c0:	e13fe617 	ldw	r4,-104(fp)
 40061c4:	400f1dc0 	call	400f1dc <__sprint_r>
 40061c8:	1002d61e 	bne	r2,zero,4006d24 <___vfprintf_internal_r+0x1f90>
 40061cc:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 40061d0:	e0ffc417 	ldw	r3,-240(fp)
 40061d4:	e0bfc717 	ldw	r2,-228(fp)
 40061d8:	18800216 	blt	r3,r2,40061e4 <___vfprintf_internal_r+0x1450>
 40061dc:	9880004c 	andi	r2,r19,1
 40061e0:	10025f26 	beq	r2,zero,4006b60 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 40061e4:	e0bfbb17 	ldw	r2,-276(fp)
 40061e8:	88800015 	stw	r2,0(r17)
 40061ec:	e0bfbc17 	ldw	r2,-272(fp)
 40061f0:	88800115 	stw	r2,4(r17)
 40061f4:	e0ffca17 	ldw	r3,-216(fp)
 40061f8:	e0bfbc17 	ldw	r2,-272(fp)
 40061fc:	1885883a 	add	r2,r3,r2
 4006200:	e0bfca15 	stw	r2,-216(fp)
 4006204:	8c400204 	addi	r17,r17,8
 4006208:	e0bfc917 	ldw	r2,-220(fp)
 400620c:	10800044 	addi	r2,r2,1
 4006210:	e0bfc915 	stw	r2,-220(fp)
 4006214:	e0bfc917 	ldw	r2,-220(fp)
 4006218:	10800210 	cmplti	r2,r2,8
 400621c:	1000071e 	bne	r2,zero,400623c <___vfprintf_internal_r+0x14a8>
 4006220:	e0bfc804 	addi	r2,fp,-224
 4006224:	100d883a 	mov	r6,r2
 4006228:	e17fe717 	ldw	r5,-100(fp)
 400622c:	e13fe617 	ldw	r4,-104(fp)
 4006230:	400f1dc0 	call	400f1dc <__sprint_r>
 4006234:	1002bd1e 	bne	r2,zero,4006d2c <___vfprintf_internal_r+0x1f98>
 4006238:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 400623c:	e0bfc717 	ldw	r2,-228(fp)
 4006240:	143fffc4 	addi	r16,r2,-1
 4006244:	0402460e 	bge	zero,r16,4006b60 <___vfprintf_internal_r+0x1dcc>
 4006248:	00001706 	br	40062a8 <___vfprintf_internal_r+0x1514>
 400624c:	00810074 	movhi	r2,1025
 4006250:	1094a584 	addi	r2,r2,21142
 4006254:	88800015 	stw	r2,0(r17)
 4006258:	00800404 	movi	r2,16
 400625c:	88800115 	stw	r2,4(r17)
 4006260:	e0bfca17 	ldw	r2,-216(fp)
 4006264:	10800404 	addi	r2,r2,16
 4006268:	e0bfca15 	stw	r2,-216(fp)
 400626c:	8c400204 	addi	r17,r17,8
 4006270:	e0bfc917 	ldw	r2,-220(fp)
 4006274:	10800044 	addi	r2,r2,1
 4006278:	e0bfc915 	stw	r2,-220(fp)
 400627c:	e0bfc917 	ldw	r2,-220(fp)
 4006280:	10800210 	cmplti	r2,r2,8
 4006284:	1000071e 	bne	r2,zero,40062a4 <___vfprintf_internal_r+0x1510>
 4006288:	e0bfc804 	addi	r2,fp,-224
 400628c:	100d883a 	mov	r6,r2
 4006290:	e17fe717 	ldw	r5,-100(fp)
 4006294:	e13fe617 	ldw	r4,-104(fp)
 4006298:	400f1dc0 	call	400f1dc <__sprint_r>
 400629c:	1002a51e 	bne	r2,zero,4006d34 <___vfprintf_internal_r+0x1fa0>
 40062a0:	e47fcb04 	addi	r17,fp,-212
 40062a4:	843ffc04 	addi	r16,r16,-16
 40062a8:	80800448 	cmpgei	r2,r16,17
 40062ac:	103fe71e 	bne	r2,zero,400624c <__alt_data_end+0xfc00624c>
 40062b0:	00810074 	movhi	r2,1025
 40062b4:	1094a584 	addi	r2,r2,21142
 40062b8:	88800015 	stw	r2,0(r17)
 40062bc:	8005883a 	mov	r2,r16
 40062c0:	88800115 	stw	r2,4(r17)
 40062c4:	e0bfca17 	ldw	r2,-216(fp)
 40062c8:	8007883a 	mov	r3,r16
 40062cc:	10c5883a 	add	r2,r2,r3
 40062d0:	e0bfca15 	stw	r2,-216(fp)
 40062d4:	8c400204 	addi	r17,r17,8
 40062d8:	e0bfc917 	ldw	r2,-220(fp)
 40062dc:	10800044 	addi	r2,r2,1
 40062e0:	e0bfc915 	stw	r2,-220(fp)
 40062e4:	e0bfc917 	ldw	r2,-220(fp)
 40062e8:	10800210 	cmplti	r2,r2,8
 40062ec:	10021c1e 	bne	r2,zero,4006b60 <___vfprintf_internal_r+0x1dcc>
 40062f0:	e0bfc804 	addi	r2,fp,-224
 40062f4:	100d883a 	mov	r6,r2
 40062f8:	e17fe717 	ldw	r5,-100(fp)
 40062fc:	e13fe617 	ldw	r4,-104(fp)
 4006300:	400f1dc0 	call	400f1dc <__sprint_r>
 4006304:	10028d1e 	bne	r2,zero,4006d3c <___vfprintf_internal_r+0x1fa8>
 4006308:	e47fcb04 	addi	r17,fp,-212
 400630c:	00021406 	br	4006b60 <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 4006310:	e0bfc417 	ldw	r2,-240(fp)
 4006314:	00807c16 	blt	zero,r2,4006508 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 4006318:	00810074 	movhi	r2,1025
 400631c:	1094a104 	addi	r2,r2,21124
 4006320:	88800015 	stw	r2,0(r17)
 4006324:	00800044 	movi	r2,1
 4006328:	88800115 	stw	r2,4(r17)
 400632c:	e0bfca17 	ldw	r2,-216(fp)
 4006330:	10800044 	addi	r2,r2,1
 4006334:	e0bfca15 	stw	r2,-216(fp)
 4006338:	8c400204 	addi	r17,r17,8
 400633c:	e0bfc917 	ldw	r2,-220(fp)
 4006340:	10800044 	addi	r2,r2,1
 4006344:	e0bfc915 	stw	r2,-220(fp)
 4006348:	e0bfc917 	ldw	r2,-220(fp)
 400634c:	10800210 	cmplti	r2,r2,8
 4006350:	1000071e 	bne	r2,zero,4006370 <___vfprintf_internal_r+0x15dc>
 4006354:	e0bfc804 	addi	r2,fp,-224
 4006358:	100d883a 	mov	r6,r2
 400635c:	e17fe717 	ldw	r5,-100(fp)
 4006360:	e13fe617 	ldw	r4,-104(fp)
 4006364:	400f1dc0 	call	400f1dc <__sprint_r>
 4006368:	1002761e 	bne	r2,zero,4006d44 <___vfprintf_internal_r+0x1fb0>
 400636c:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 4006370:	e0bfc417 	ldw	r2,-240(fp)
 4006374:	1000041e 	bne	r2,zero,4006388 <___vfprintf_internal_r+0x15f4>
 4006378:	e0bfc717 	ldw	r2,-228(fp)
 400637c:	1000021e 	bne	r2,zero,4006388 <___vfprintf_internal_r+0x15f4>
 4006380:	9880004c 	andi	r2,r19,1
 4006384:	1001f626 	beq	r2,zero,4006b60 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 4006388:	e0bfbb17 	ldw	r2,-276(fp)
 400638c:	88800015 	stw	r2,0(r17)
 4006390:	e0bfbc17 	ldw	r2,-272(fp)
 4006394:	88800115 	stw	r2,4(r17)
 4006398:	e0ffca17 	ldw	r3,-216(fp)
 400639c:	e0bfbc17 	ldw	r2,-272(fp)
 40063a0:	1885883a 	add	r2,r3,r2
 40063a4:	e0bfca15 	stw	r2,-216(fp)
 40063a8:	8c400204 	addi	r17,r17,8
 40063ac:	e0bfc917 	ldw	r2,-220(fp)
 40063b0:	10800044 	addi	r2,r2,1
 40063b4:	e0bfc915 	stw	r2,-220(fp)
 40063b8:	e0bfc917 	ldw	r2,-220(fp)
 40063bc:	10800210 	cmplti	r2,r2,8
 40063c0:	1000071e 	bne	r2,zero,40063e0 <___vfprintf_internal_r+0x164c>
 40063c4:	e0bfc804 	addi	r2,fp,-224
 40063c8:	100d883a 	mov	r6,r2
 40063cc:	e17fe717 	ldw	r5,-100(fp)
 40063d0:	e13fe617 	ldw	r4,-104(fp)
 40063d4:	400f1dc0 	call	400f1dc <__sprint_r>
 40063d8:	10025c1e 	bne	r2,zero,4006d4c <___vfprintf_internal_r+0x1fb8>
 40063dc:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 40063e0:	e0bfc417 	ldw	r2,-240(fp)
 40063e4:	00a1c83a 	sub	r16,zero,r2
 40063e8:	0400310e 	bge	zero,r16,40064b0 <___vfprintf_internal_r+0x171c>
 40063ec:	00001706 	br	400644c <___vfprintf_internal_r+0x16b8>
 40063f0:	00810074 	movhi	r2,1025
 40063f4:	1094a584 	addi	r2,r2,21142
 40063f8:	88800015 	stw	r2,0(r17)
 40063fc:	00800404 	movi	r2,16
 4006400:	88800115 	stw	r2,4(r17)
 4006404:	e0bfca17 	ldw	r2,-216(fp)
 4006408:	10800404 	addi	r2,r2,16
 400640c:	e0bfca15 	stw	r2,-216(fp)
 4006410:	8c400204 	addi	r17,r17,8
 4006414:	e0bfc917 	ldw	r2,-220(fp)
 4006418:	10800044 	addi	r2,r2,1
 400641c:	e0bfc915 	stw	r2,-220(fp)
 4006420:	e0bfc917 	ldw	r2,-220(fp)
 4006424:	10800210 	cmplti	r2,r2,8
 4006428:	1000071e 	bne	r2,zero,4006448 <___vfprintf_internal_r+0x16b4>
 400642c:	e0bfc804 	addi	r2,fp,-224
 4006430:	100d883a 	mov	r6,r2
 4006434:	e17fe717 	ldw	r5,-100(fp)
 4006438:	e13fe617 	ldw	r4,-104(fp)
 400643c:	400f1dc0 	call	400f1dc <__sprint_r>
 4006440:	1002441e 	bne	r2,zero,4006d54 <___vfprintf_internal_r+0x1fc0>
 4006444:	e47fcb04 	addi	r17,fp,-212
 4006448:	843ffc04 	addi	r16,r16,-16
 400644c:	80800448 	cmpgei	r2,r16,17
 4006450:	103fe71e 	bne	r2,zero,40063f0 <__alt_data_end+0xfc0063f0>
 4006454:	00810074 	movhi	r2,1025
 4006458:	1094a584 	addi	r2,r2,21142
 400645c:	88800015 	stw	r2,0(r17)
 4006460:	8005883a 	mov	r2,r16
 4006464:	88800115 	stw	r2,4(r17)
 4006468:	e0bfca17 	ldw	r2,-216(fp)
 400646c:	8007883a 	mov	r3,r16
 4006470:	10c5883a 	add	r2,r2,r3
 4006474:	e0bfca15 	stw	r2,-216(fp)
 4006478:	8c400204 	addi	r17,r17,8
 400647c:	e0bfc917 	ldw	r2,-220(fp)
 4006480:	10800044 	addi	r2,r2,1
 4006484:	e0bfc915 	stw	r2,-220(fp)
 4006488:	e0bfc917 	ldw	r2,-220(fp)
 400648c:	10800210 	cmplti	r2,r2,8
 4006490:	1000071e 	bne	r2,zero,40064b0 <___vfprintf_internal_r+0x171c>
 4006494:	e0bfc804 	addi	r2,fp,-224
 4006498:	100d883a 	mov	r6,r2
 400649c:	e17fe717 	ldw	r5,-100(fp)
 40064a0:	e13fe617 	ldw	r4,-104(fp)
 40064a4:	400f1dc0 	call	400f1dc <__sprint_r>
 40064a8:	10022c1e 	bne	r2,zero,4006d5c <___vfprintf_internal_r+0x1fc8>
 40064ac:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 40064b0:	8c800015 	stw	r18,0(r17)
 40064b4:	e0bfc717 	ldw	r2,-228(fp)
 40064b8:	88800115 	stw	r2,4(r17)
 40064bc:	e0bfca17 	ldw	r2,-216(fp)
 40064c0:	e0ffc717 	ldw	r3,-228(fp)
 40064c4:	10c5883a 	add	r2,r2,r3
 40064c8:	e0bfca15 	stw	r2,-216(fp)
 40064cc:	8c400204 	addi	r17,r17,8
 40064d0:	e0bfc917 	ldw	r2,-220(fp)
 40064d4:	10800044 	addi	r2,r2,1
 40064d8:	e0bfc915 	stw	r2,-220(fp)
 40064dc:	e0bfc917 	ldw	r2,-220(fp)
 40064e0:	10800210 	cmplti	r2,r2,8
 40064e4:	10019e1e 	bne	r2,zero,4006b60 <___vfprintf_internal_r+0x1dcc>
 40064e8:	e0bfc804 	addi	r2,fp,-224
 40064ec:	100d883a 	mov	r6,r2
 40064f0:	e17fe717 	ldw	r5,-100(fp)
 40064f4:	e13fe617 	ldw	r4,-104(fp)
 40064f8:	400f1dc0 	call	400f1dc <__sprint_r>
 40064fc:	1002191e 	bne	r2,zero,4006d64 <___vfprintf_internal_r+0x1fd0>
 4006500:	e47fcb04 	addi	r17,fp,-212
 4006504:	00019606 	br	4006b60 <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 4006508:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 400650c:	e0bfc717 	ldw	r2,-228(fp)
 4006510:	1007883a 	mov	r3,r2
 4006514:	e0bfc017 	ldw	r2,-256(fp)
 4006518:	10c5883a 	add	r2,r2,r3
 400651c:	1007883a 	mov	r3,r2
 4006520:	9005883a 	mov	r2,r18
 4006524:	1885c83a 	sub	r2,r3,r2
 4006528:	e0bfb915 	stw	r2,-284(fp)
 400652c:	e0bfb917 	ldw	r2,-284(fp)
 4006530:	e0ffb017 	ldw	r3,-320(fp)
 4006534:	1880020e 	bge	r3,r2,4006540 <___vfprintf_internal_r+0x17ac>
 4006538:	e0bfb017 	ldw	r2,-320(fp)
 400653c:	e0bfb915 	stw	r2,-284(fp)
 4006540:	e0bfb917 	ldw	r2,-284(fp)
 4006544:	0080150e 	bge	zero,r2,400659c <___vfprintf_internal_r+0x1808>
 4006548:	8c800015 	stw	r18,0(r17)
 400654c:	e0bfb917 	ldw	r2,-284(fp)
 4006550:	88800115 	stw	r2,4(r17)
 4006554:	e0ffca17 	ldw	r3,-216(fp)
 4006558:	e0bfb917 	ldw	r2,-284(fp)
 400655c:	1885883a 	add	r2,r3,r2
 4006560:	e0bfca15 	stw	r2,-216(fp)
 4006564:	8c400204 	addi	r17,r17,8
 4006568:	e0bfc917 	ldw	r2,-220(fp)
 400656c:	10800044 	addi	r2,r2,1
 4006570:	e0bfc915 	stw	r2,-220(fp)
 4006574:	e0bfc917 	ldw	r2,-220(fp)
 4006578:	10800210 	cmplti	r2,r2,8
 400657c:	1000071e 	bne	r2,zero,400659c <___vfprintf_internal_r+0x1808>
 4006580:	e0bfc804 	addi	r2,fp,-224
 4006584:	100d883a 	mov	r6,r2
 4006588:	e17fe717 	ldw	r5,-100(fp)
 400658c:	e13fe617 	ldw	r4,-104(fp)
 4006590:	400f1dc0 	call	400f1dc <__sprint_r>
 4006594:	1001f51e 	bne	r2,zero,4006d6c <___vfprintf_internal_r+0x1fd8>
 4006598:	e47fcb04 	addi	r17,fp,-212
 400659c:	e0bfb917 	ldw	r2,-284(fp)
 40065a0:	1000010e 	bge	r2,zero,40065a8 <___vfprintf_internal_r+0x1814>
 40065a4:	0005883a 	mov	r2,zero
 40065a8:	e0ffb017 	ldw	r3,-320(fp)
 40065ac:	1885c83a 	sub	r2,r3,r2
 40065b0:	e0bfb915 	stw	r2,-284(fp)
 40065b4:	e0bfb917 	ldw	r2,-284(fp)
 40065b8:	0080340e 	bge	zero,r2,400668c <___vfprintf_internal_r+0x18f8>
 40065bc:	00001906 	br	4006624 <___vfprintf_internal_r+0x1890>
 40065c0:	00810074 	movhi	r2,1025
 40065c4:	1094a584 	addi	r2,r2,21142
 40065c8:	88800015 	stw	r2,0(r17)
 40065cc:	00800404 	movi	r2,16
 40065d0:	88800115 	stw	r2,4(r17)
 40065d4:	e0bfca17 	ldw	r2,-216(fp)
 40065d8:	10800404 	addi	r2,r2,16
 40065dc:	e0bfca15 	stw	r2,-216(fp)
 40065e0:	8c400204 	addi	r17,r17,8
 40065e4:	e0bfc917 	ldw	r2,-220(fp)
 40065e8:	10800044 	addi	r2,r2,1
 40065ec:	e0bfc915 	stw	r2,-220(fp)
 40065f0:	e0bfc917 	ldw	r2,-220(fp)
 40065f4:	10800210 	cmplti	r2,r2,8
 40065f8:	1000071e 	bne	r2,zero,4006618 <___vfprintf_internal_r+0x1884>
 40065fc:	e0bfc804 	addi	r2,fp,-224
 4006600:	100d883a 	mov	r6,r2
 4006604:	e17fe717 	ldw	r5,-100(fp)
 4006608:	e13fe617 	ldw	r4,-104(fp)
 400660c:	400f1dc0 	call	400f1dc <__sprint_r>
 4006610:	1001d81e 	bne	r2,zero,4006d74 <___vfprintf_internal_r+0x1fe0>
 4006614:	e47fcb04 	addi	r17,fp,-212
 4006618:	e0bfb917 	ldw	r2,-284(fp)
 400661c:	10bffc04 	addi	r2,r2,-16
 4006620:	e0bfb915 	stw	r2,-284(fp)
 4006624:	e0bfb917 	ldw	r2,-284(fp)
 4006628:	10800448 	cmpgei	r2,r2,17
 400662c:	103fe41e 	bne	r2,zero,40065c0 <__alt_data_end+0xfc0065c0>
 4006630:	00810074 	movhi	r2,1025
 4006634:	1094a584 	addi	r2,r2,21142
 4006638:	88800015 	stw	r2,0(r17)
 400663c:	e0bfb917 	ldw	r2,-284(fp)
 4006640:	88800115 	stw	r2,4(r17)
 4006644:	e0ffca17 	ldw	r3,-216(fp)
 4006648:	e0bfb917 	ldw	r2,-284(fp)
 400664c:	1885883a 	add	r2,r3,r2
 4006650:	e0bfca15 	stw	r2,-216(fp)
 4006654:	8c400204 	addi	r17,r17,8
 4006658:	e0bfc917 	ldw	r2,-220(fp)
 400665c:	10800044 	addi	r2,r2,1
 4006660:	e0bfc915 	stw	r2,-220(fp)
 4006664:	e0bfc917 	ldw	r2,-220(fp)
 4006668:	10800210 	cmplti	r2,r2,8
 400666c:	1000071e 	bne	r2,zero,400668c <___vfprintf_internal_r+0x18f8>
 4006670:	e0bfc804 	addi	r2,fp,-224
 4006674:	100d883a 	mov	r6,r2
 4006678:	e17fe717 	ldw	r5,-100(fp)
 400667c:	e13fe617 	ldw	r4,-104(fp)
 4006680:	400f1dc0 	call	400f1dc <__sprint_r>
 4006684:	1001bd1e 	bne	r2,zero,4006d7c <___vfprintf_internal_r+0x1fe8>
 4006688:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 400668c:	e0bfb017 	ldw	r2,-320(fp)
 4006690:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 4006694:	e0ffc417 	ldw	r3,-240(fp)
 4006698:	e0bfc717 	ldw	r2,-228(fp)
 400669c:	18800216 	blt	r3,r2,40066a8 <___vfprintf_internal_r+0x1914>
 40066a0:	9880004c 	andi	r2,r19,1
 40066a4:	10001626 	beq	r2,zero,4006700 <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 40066a8:	e0bfbb17 	ldw	r2,-276(fp)
 40066ac:	88800015 	stw	r2,0(r17)
 40066b0:	e0bfbc17 	ldw	r2,-272(fp)
 40066b4:	88800115 	stw	r2,4(r17)
 40066b8:	e0ffca17 	ldw	r3,-216(fp)
 40066bc:	e0bfbc17 	ldw	r2,-272(fp)
 40066c0:	1885883a 	add	r2,r3,r2
 40066c4:	e0bfca15 	stw	r2,-216(fp)
 40066c8:	8c400204 	addi	r17,r17,8
 40066cc:	e0bfc917 	ldw	r2,-220(fp)
 40066d0:	10800044 	addi	r2,r2,1
 40066d4:	e0bfc915 	stw	r2,-220(fp)
 40066d8:	e0bfc917 	ldw	r2,-220(fp)
 40066dc:	10800210 	cmplti	r2,r2,8
 40066e0:	1000071e 	bne	r2,zero,4006700 <___vfprintf_internal_r+0x196c>
 40066e4:	e0bfc804 	addi	r2,fp,-224
 40066e8:	100d883a 	mov	r6,r2
 40066ec:	e17fe717 	ldw	r5,-100(fp)
 40066f0:	e13fe617 	ldw	r4,-104(fp)
 40066f4:	400f1dc0 	call	400f1dc <__sprint_r>
 40066f8:	1001a21e 	bne	r2,zero,4006d84 <___vfprintf_internal_r+0x1ff0>
 40066fc:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 4006700:	e0bfc717 	ldw	r2,-228(fp)
 4006704:	1007883a 	mov	r3,r2
 4006708:	e0bfc017 	ldw	r2,-256(fp)
 400670c:	10c5883a 	add	r2,r2,r3
 4006710:	1007883a 	mov	r3,r2
 4006714:	9005883a 	mov	r2,r18
 4006718:	1885c83a 	sub	r2,r3,r2
 400671c:	e0bfba15 	stw	r2,-280(fp)
 4006720:	e0ffc717 	ldw	r3,-228(fp)
 4006724:	e0bfc417 	ldw	r2,-240(fp)
 4006728:	1887c83a 	sub	r3,r3,r2
 400672c:	e0bfba17 	ldw	r2,-280(fp)
 4006730:	1880040e 	bge	r3,r2,4006744 <___vfprintf_internal_r+0x19b0>
 4006734:	e0ffc717 	ldw	r3,-228(fp)
 4006738:	e0bfc417 	ldw	r2,-240(fp)
 400673c:	1885c83a 	sub	r2,r3,r2
 4006740:	e0bfba15 	stw	r2,-280(fp)
 4006744:	e0bfba17 	ldw	r2,-280(fp)
 4006748:	0080150e 	bge	zero,r2,40067a0 <___vfprintf_internal_r+0x1a0c>
 400674c:	8c800015 	stw	r18,0(r17)
 4006750:	e0bfba17 	ldw	r2,-280(fp)
 4006754:	88800115 	stw	r2,4(r17)
 4006758:	e0ffca17 	ldw	r3,-216(fp)
 400675c:	e0bfba17 	ldw	r2,-280(fp)
 4006760:	1885883a 	add	r2,r3,r2
 4006764:	e0bfca15 	stw	r2,-216(fp)
 4006768:	8c400204 	addi	r17,r17,8
 400676c:	e0bfc917 	ldw	r2,-220(fp)
 4006770:	10800044 	addi	r2,r2,1
 4006774:	e0bfc915 	stw	r2,-220(fp)
 4006778:	e0bfc917 	ldw	r2,-220(fp)
 400677c:	10800210 	cmplti	r2,r2,8
 4006780:	1000071e 	bne	r2,zero,40067a0 <___vfprintf_internal_r+0x1a0c>
 4006784:	e0bfc804 	addi	r2,fp,-224
 4006788:	100d883a 	mov	r6,r2
 400678c:	e17fe717 	ldw	r5,-100(fp)
 4006790:	e13fe617 	ldw	r4,-104(fp)
 4006794:	400f1dc0 	call	400f1dc <__sprint_r>
 4006798:	10017c1e 	bne	r2,zero,4006d8c <___vfprintf_internal_r+0x1ff8>
 400679c:	e47fcb04 	addi	r17,fp,-212
 40067a0:	e0ffc717 	ldw	r3,-228(fp)
 40067a4:	e0bfc417 	ldw	r2,-240(fp)
 40067a8:	1887c83a 	sub	r3,r3,r2
 40067ac:	e0bfba17 	ldw	r2,-280(fp)
 40067b0:	1000010e 	bge	r2,zero,40067b8 <___vfprintf_internal_r+0x1a24>
 40067b4:	0005883a 	mov	r2,zero
 40067b8:	1885c83a 	sub	r2,r3,r2
 40067bc:	e0bfba15 	stw	r2,-280(fp)
 40067c0:	e0bfba17 	ldw	r2,-280(fp)
 40067c4:	0080e60e 	bge	zero,r2,4006b60 <___vfprintf_internal_r+0x1dcc>
 40067c8:	00001906 	br	4006830 <___vfprintf_internal_r+0x1a9c>
 40067cc:	00810074 	movhi	r2,1025
 40067d0:	1094a584 	addi	r2,r2,21142
 40067d4:	88800015 	stw	r2,0(r17)
 40067d8:	00800404 	movi	r2,16
 40067dc:	88800115 	stw	r2,4(r17)
 40067e0:	e0bfca17 	ldw	r2,-216(fp)
 40067e4:	10800404 	addi	r2,r2,16
 40067e8:	e0bfca15 	stw	r2,-216(fp)
 40067ec:	8c400204 	addi	r17,r17,8
 40067f0:	e0bfc917 	ldw	r2,-220(fp)
 40067f4:	10800044 	addi	r2,r2,1
 40067f8:	e0bfc915 	stw	r2,-220(fp)
 40067fc:	e0bfc917 	ldw	r2,-220(fp)
 4006800:	10800210 	cmplti	r2,r2,8
 4006804:	1000071e 	bne	r2,zero,4006824 <___vfprintf_internal_r+0x1a90>
 4006808:	e0bfc804 	addi	r2,fp,-224
 400680c:	100d883a 	mov	r6,r2
 4006810:	e17fe717 	ldw	r5,-100(fp)
 4006814:	e13fe617 	ldw	r4,-104(fp)
 4006818:	400f1dc0 	call	400f1dc <__sprint_r>
 400681c:	10015d1e 	bne	r2,zero,4006d94 <___vfprintf_internal_r+0x2000>
 4006820:	e47fcb04 	addi	r17,fp,-212
 4006824:	e0bfba17 	ldw	r2,-280(fp)
 4006828:	10bffc04 	addi	r2,r2,-16
 400682c:	e0bfba15 	stw	r2,-280(fp)
 4006830:	e0bfba17 	ldw	r2,-280(fp)
 4006834:	10800448 	cmpgei	r2,r2,17
 4006838:	103fe41e 	bne	r2,zero,40067cc <__alt_data_end+0xfc0067cc>
 400683c:	00810074 	movhi	r2,1025
 4006840:	1094a584 	addi	r2,r2,21142
 4006844:	88800015 	stw	r2,0(r17)
 4006848:	e0bfba17 	ldw	r2,-280(fp)
 400684c:	88800115 	stw	r2,4(r17)
 4006850:	e0ffca17 	ldw	r3,-216(fp)
 4006854:	e0bfba17 	ldw	r2,-280(fp)
 4006858:	1885883a 	add	r2,r3,r2
 400685c:	e0bfca15 	stw	r2,-216(fp)
 4006860:	8c400204 	addi	r17,r17,8
 4006864:	e0bfc917 	ldw	r2,-220(fp)
 4006868:	10800044 	addi	r2,r2,1
 400686c:	e0bfc915 	stw	r2,-220(fp)
 4006870:	e0bfc917 	ldw	r2,-220(fp)
 4006874:	10800210 	cmplti	r2,r2,8
 4006878:	1000b91e 	bne	r2,zero,4006b60 <___vfprintf_internal_r+0x1dcc>
 400687c:	e0bfc804 	addi	r2,fp,-224
 4006880:	100d883a 	mov	r6,r2
 4006884:	e17fe717 	ldw	r5,-100(fp)
 4006888:	e13fe617 	ldw	r4,-104(fp)
 400688c:	400f1dc0 	call	400f1dc <__sprint_r>
 4006890:	1001421e 	bne	r2,zero,4006d9c <___vfprintf_internal_r+0x2008>
 4006894:	e47fcb04 	addi	r17,fp,-212
 4006898:	0000b106 	br	4006b60 <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 400689c:	e0bfc717 	ldw	r2,-228(fp)
 40068a0:	10800088 	cmpgei	r2,r2,2
 40068a4:	1000021e 	bne	r2,zero,40068b0 <___vfprintf_internal_r+0x1b1c>
 40068a8:	9880004c 	andi	r2,r19,1
 40068ac:	10008026 	beq	r2,zero,4006ab0 <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 40068b0:	8c800015 	stw	r18,0(r17)
 40068b4:	00800044 	movi	r2,1
 40068b8:	88800115 	stw	r2,4(r17)
 40068bc:	e0bfca17 	ldw	r2,-216(fp)
 40068c0:	10800044 	addi	r2,r2,1
 40068c4:	e0bfca15 	stw	r2,-216(fp)
 40068c8:	8c400204 	addi	r17,r17,8
 40068cc:	e0bfc917 	ldw	r2,-220(fp)
 40068d0:	10800044 	addi	r2,r2,1
 40068d4:	e0bfc915 	stw	r2,-220(fp)
 40068d8:	e0bfc917 	ldw	r2,-220(fp)
 40068dc:	10800210 	cmplti	r2,r2,8
 40068e0:	1000071e 	bne	r2,zero,4006900 <___vfprintf_internal_r+0x1b6c>
 40068e4:	e0bfc804 	addi	r2,fp,-224
 40068e8:	100d883a 	mov	r6,r2
 40068ec:	e17fe717 	ldw	r5,-100(fp)
 40068f0:	e13fe617 	ldw	r4,-104(fp)
 40068f4:	400f1dc0 	call	400f1dc <__sprint_r>
 40068f8:	10012a1e 	bne	r2,zero,4006da4 <___vfprintf_internal_r+0x2010>
 40068fc:	e47fcb04 	addi	r17,fp,-212
					cp++;
 4006900:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 4006904:	e0bfbb17 	ldw	r2,-276(fp)
 4006908:	88800015 	stw	r2,0(r17)
 400690c:	e0bfbc17 	ldw	r2,-272(fp)
 4006910:	88800115 	stw	r2,4(r17)
 4006914:	e0ffca17 	ldw	r3,-216(fp)
 4006918:	e0bfbc17 	ldw	r2,-272(fp)
 400691c:	1885883a 	add	r2,r3,r2
 4006920:	e0bfca15 	stw	r2,-216(fp)
 4006924:	8c400204 	addi	r17,r17,8
 4006928:	e0bfc917 	ldw	r2,-220(fp)
 400692c:	10800044 	addi	r2,r2,1
 4006930:	e0bfc915 	stw	r2,-220(fp)
 4006934:	e0bfc917 	ldw	r2,-220(fp)
 4006938:	10800210 	cmplti	r2,r2,8
 400693c:	1000071e 	bne	r2,zero,400695c <___vfprintf_internal_r+0x1bc8>
 4006940:	e0bfc804 	addi	r2,fp,-224
 4006944:	100d883a 	mov	r6,r2
 4006948:	e17fe717 	ldw	r5,-100(fp)
 400694c:	e13fe617 	ldw	r4,-104(fp)
 4006950:	400f1dc0 	call	400f1dc <__sprint_r>
 4006954:	1001151e 	bne	r2,zero,4006dac <___vfprintf_internal_r+0x2018>
 4006958:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 400695c:	e0bfc217 	ldw	r2,-248(fp)
 4006960:	e0ffc317 	ldw	r3,-244(fp)
 4006964:	000d883a 	mov	r6,zero
 4006968:	000f883a 	mov	r7,zero
 400696c:	1009883a 	mov	r4,r2
 4006970:	180b883a 	mov	r5,r3
 4006974:	4002f680 	call	4002f68 <__eqdf2>
 4006978:	10001826 	beq	r2,zero,40069dc <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 400697c:	8c800015 	stw	r18,0(r17)
 4006980:	e0bfc717 	ldw	r2,-228(fp)
 4006984:	10bfffc4 	addi	r2,r2,-1
 4006988:	88800115 	stw	r2,4(r17)
 400698c:	e0bfca17 	ldw	r2,-216(fp)
 4006990:	e0ffc717 	ldw	r3,-228(fp)
 4006994:	10c5883a 	add	r2,r2,r3
 4006998:	10bfffc4 	addi	r2,r2,-1
 400699c:	e0bfca15 	stw	r2,-216(fp)
 40069a0:	8c400204 	addi	r17,r17,8
 40069a4:	e0bfc917 	ldw	r2,-220(fp)
 40069a8:	10800044 	addi	r2,r2,1
 40069ac:	e0bfc915 	stw	r2,-220(fp)
 40069b0:	e0bfc917 	ldw	r2,-220(fp)
 40069b4:	10800210 	cmplti	r2,r2,8
 40069b8:	1000521e 	bne	r2,zero,4006b04 <___vfprintf_internal_r+0x1d70>
 40069bc:	e0bfc804 	addi	r2,fp,-224
 40069c0:	100d883a 	mov	r6,r2
 40069c4:	e17fe717 	ldw	r5,-100(fp)
 40069c8:	e13fe617 	ldw	r4,-104(fp)
 40069cc:	400f1dc0 	call	400f1dc <__sprint_r>
 40069d0:	1000f81e 	bne	r2,zero,4006db4 <___vfprintf_internal_r+0x2020>
 40069d4:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 40069d8:	00004a06 	br	4006b04 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 40069dc:	e0bfc717 	ldw	r2,-228(fp)
 40069e0:	143fffc4 	addi	r16,r2,-1
 40069e4:	0400470e 	bge	zero,r16,4006b04 <___vfprintf_internal_r+0x1d70>
 40069e8:	00001706 	br	4006a48 <___vfprintf_internal_r+0x1cb4>
 40069ec:	00810074 	movhi	r2,1025
 40069f0:	1094a584 	addi	r2,r2,21142
 40069f4:	88800015 	stw	r2,0(r17)
 40069f8:	00800404 	movi	r2,16
 40069fc:	88800115 	stw	r2,4(r17)
 4006a00:	e0bfca17 	ldw	r2,-216(fp)
 4006a04:	10800404 	addi	r2,r2,16
 4006a08:	e0bfca15 	stw	r2,-216(fp)
 4006a0c:	8c400204 	addi	r17,r17,8
 4006a10:	e0bfc917 	ldw	r2,-220(fp)
 4006a14:	10800044 	addi	r2,r2,1
 4006a18:	e0bfc915 	stw	r2,-220(fp)
 4006a1c:	e0bfc917 	ldw	r2,-220(fp)
 4006a20:	10800210 	cmplti	r2,r2,8
 4006a24:	1000071e 	bne	r2,zero,4006a44 <___vfprintf_internal_r+0x1cb0>
 4006a28:	e0bfc804 	addi	r2,fp,-224
 4006a2c:	100d883a 	mov	r6,r2
 4006a30:	e17fe717 	ldw	r5,-100(fp)
 4006a34:	e13fe617 	ldw	r4,-104(fp)
 4006a38:	400f1dc0 	call	400f1dc <__sprint_r>
 4006a3c:	1000df1e 	bne	r2,zero,4006dbc <___vfprintf_internal_r+0x2028>
 4006a40:	e47fcb04 	addi	r17,fp,-212
 4006a44:	843ffc04 	addi	r16,r16,-16
 4006a48:	80800448 	cmpgei	r2,r16,17
 4006a4c:	103fe71e 	bne	r2,zero,40069ec <__alt_data_end+0xfc0069ec>
 4006a50:	00810074 	movhi	r2,1025
 4006a54:	1094a584 	addi	r2,r2,21142
 4006a58:	88800015 	stw	r2,0(r17)
 4006a5c:	8005883a 	mov	r2,r16
 4006a60:	88800115 	stw	r2,4(r17)
 4006a64:	e0bfca17 	ldw	r2,-216(fp)
 4006a68:	8007883a 	mov	r3,r16
 4006a6c:	10c5883a 	add	r2,r2,r3
 4006a70:	e0bfca15 	stw	r2,-216(fp)
 4006a74:	8c400204 	addi	r17,r17,8
 4006a78:	e0bfc917 	ldw	r2,-220(fp)
 4006a7c:	10800044 	addi	r2,r2,1
 4006a80:	e0bfc915 	stw	r2,-220(fp)
 4006a84:	e0bfc917 	ldw	r2,-220(fp)
 4006a88:	10800210 	cmplti	r2,r2,8
 4006a8c:	10001d1e 	bne	r2,zero,4006b04 <___vfprintf_internal_r+0x1d70>
 4006a90:	e0bfc804 	addi	r2,fp,-224
 4006a94:	100d883a 	mov	r6,r2
 4006a98:	e17fe717 	ldw	r5,-100(fp)
 4006a9c:	e13fe617 	ldw	r4,-104(fp)
 4006aa0:	400f1dc0 	call	400f1dc <__sprint_r>
 4006aa4:	1000c71e 	bne	r2,zero,4006dc4 <___vfprintf_internal_r+0x2030>
 4006aa8:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 4006aac:	00001506 	br	4006b04 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 4006ab0:	8c800015 	stw	r18,0(r17)
 4006ab4:	00800044 	movi	r2,1
 4006ab8:	88800115 	stw	r2,4(r17)
 4006abc:	e0bfca17 	ldw	r2,-216(fp)
 4006ac0:	10800044 	addi	r2,r2,1
 4006ac4:	e0bfca15 	stw	r2,-216(fp)
 4006ac8:	8c400204 	addi	r17,r17,8
 4006acc:	e0bfc917 	ldw	r2,-220(fp)
 4006ad0:	10800044 	addi	r2,r2,1
 4006ad4:	e0bfc915 	stw	r2,-220(fp)
 4006ad8:	e0bfc917 	ldw	r2,-220(fp)
 4006adc:	10800210 	cmplti	r2,r2,8
 4006ae0:	1000091e 	bne	r2,zero,4006b08 <___vfprintf_internal_r+0x1d74>
 4006ae4:	e0bfc804 	addi	r2,fp,-224
 4006ae8:	100d883a 	mov	r6,r2
 4006aec:	e17fe717 	ldw	r5,-100(fp)
 4006af0:	e13fe617 	ldw	r4,-104(fp)
 4006af4:	400f1dc0 	call	400f1dc <__sprint_r>
 4006af8:	1000b41e 	bne	r2,zero,4006dcc <___vfprintf_internal_r+0x2038>
 4006afc:	e47fcb04 	addi	r17,fp,-212
 4006b00:	00000106 	br	4006b08 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 4006b04:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 4006b08:	e0bfc504 	addi	r2,fp,-236
 4006b0c:	88800015 	stw	r2,0(r17)
 4006b10:	e0bfaf17 	ldw	r2,-324(fp)
 4006b14:	88800115 	stw	r2,4(r17)
 4006b18:	e0ffca17 	ldw	r3,-216(fp)
 4006b1c:	e0bfaf17 	ldw	r2,-324(fp)
 4006b20:	1885883a 	add	r2,r3,r2
 4006b24:	e0bfca15 	stw	r2,-216(fp)
 4006b28:	8c400204 	addi	r17,r17,8
 4006b2c:	e0bfc917 	ldw	r2,-220(fp)
 4006b30:	10800044 	addi	r2,r2,1
 4006b34:	e0bfc915 	stw	r2,-220(fp)
 4006b38:	e0bfc917 	ldw	r2,-220(fp)
 4006b3c:	10800210 	cmplti	r2,r2,8
 4006b40:	1000071e 	bne	r2,zero,4006b60 <___vfprintf_internal_r+0x1dcc>
 4006b44:	e0bfc804 	addi	r2,fp,-224
 4006b48:	100d883a 	mov	r6,r2
 4006b4c:	e17fe717 	ldw	r5,-100(fp)
 4006b50:	e13fe617 	ldw	r4,-104(fp)
 4006b54:	400f1dc0 	call	400f1dc <__sprint_r>
 4006b58:	10009e1e 	bne	r2,zero,4006dd4 <___vfprintf_internal_r+0x2040>
 4006b5c:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 4006b60:	9880010c 	andi	r2,r19,4
 4006b64:	10003526 	beq	r2,zero,4006c3c <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 4006b68:	e0ffad17 	ldw	r3,-332(fp)
 4006b6c:	e0bfb517 	ldw	r2,-300(fp)
 4006b70:	18a1c83a 	sub	r16,r3,r2
 4006b74:	0400310e 	bge	zero,r16,4006c3c <___vfprintf_internal_r+0x1ea8>
 4006b78:	00001706 	br	4006bd8 <___vfprintf_internal_r+0x1e44>
 4006b7c:	00810074 	movhi	r2,1025
 4006b80:	1094a184 	addi	r2,r2,21126
 4006b84:	88800015 	stw	r2,0(r17)
 4006b88:	00800404 	movi	r2,16
 4006b8c:	88800115 	stw	r2,4(r17)
 4006b90:	e0bfca17 	ldw	r2,-216(fp)
 4006b94:	10800404 	addi	r2,r2,16
 4006b98:	e0bfca15 	stw	r2,-216(fp)
 4006b9c:	8c400204 	addi	r17,r17,8
 4006ba0:	e0bfc917 	ldw	r2,-220(fp)
 4006ba4:	10800044 	addi	r2,r2,1
 4006ba8:	e0bfc915 	stw	r2,-220(fp)
 4006bac:	e0bfc917 	ldw	r2,-220(fp)
 4006bb0:	10800210 	cmplti	r2,r2,8
 4006bb4:	1000071e 	bne	r2,zero,4006bd4 <___vfprintf_internal_r+0x1e40>
 4006bb8:	e0bfc804 	addi	r2,fp,-224
 4006bbc:	100d883a 	mov	r6,r2
 4006bc0:	e17fe717 	ldw	r5,-100(fp)
 4006bc4:	e13fe617 	ldw	r4,-104(fp)
 4006bc8:	400f1dc0 	call	400f1dc <__sprint_r>
 4006bcc:	1000831e 	bne	r2,zero,4006ddc <___vfprintf_internal_r+0x2048>
 4006bd0:	e47fcb04 	addi	r17,fp,-212
 4006bd4:	843ffc04 	addi	r16,r16,-16
 4006bd8:	80800448 	cmpgei	r2,r16,17
 4006bdc:	103fe71e 	bne	r2,zero,4006b7c <__alt_data_end+0xfc006b7c>
 4006be0:	00810074 	movhi	r2,1025
 4006be4:	1094a184 	addi	r2,r2,21126
 4006be8:	88800015 	stw	r2,0(r17)
 4006bec:	8005883a 	mov	r2,r16
 4006bf0:	88800115 	stw	r2,4(r17)
 4006bf4:	e0bfca17 	ldw	r2,-216(fp)
 4006bf8:	8007883a 	mov	r3,r16
 4006bfc:	10c5883a 	add	r2,r2,r3
 4006c00:	e0bfca15 	stw	r2,-216(fp)
 4006c04:	8c400204 	addi	r17,r17,8
 4006c08:	e0bfc917 	ldw	r2,-220(fp)
 4006c0c:	10800044 	addi	r2,r2,1
 4006c10:	e0bfc915 	stw	r2,-220(fp)
 4006c14:	e0bfc917 	ldw	r2,-220(fp)
 4006c18:	10800210 	cmplti	r2,r2,8
 4006c1c:	1000071e 	bne	r2,zero,4006c3c <___vfprintf_internal_r+0x1ea8>
 4006c20:	e0bfc804 	addi	r2,fp,-224
 4006c24:	100d883a 	mov	r6,r2
 4006c28:	e17fe717 	ldw	r5,-100(fp)
 4006c2c:	e13fe617 	ldw	r4,-104(fp)
 4006c30:	400f1dc0 	call	400f1dc <__sprint_r>
 4006c34:	10006b1e 	bne	r2,zero,4006de4 <___vfprintf_internal_r+0x2050>
 4006c38:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 4006c3c:	e0ffad17 	ldw	r3,-332(fp)
 4006c40:	e0bfb517 	ldw	r2,-300(fp)
 4006c44:	10c0010e 	bge	r2,r3,4006c4c <___vfprintf_internal_r+0x1eb8>
 4006c48:	1805883a 	mov	r2,r3
 4006c4c:	e0ffac17 	ldw	r3,-336(fp)
 4006c50:	1885883a 	add	r2,r3,r2
 4006c54:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 4006c58:	e0bfca17 	ldw	r2,-216(fp)
 4006c5c:	10000626 	beq	r2,zero,4006c78 <___vfprintf_internal_r+0x1ee4>
 4006c60:	e0bfc804 	addi	r2,fp,-224
 4006c64:	100d883a 	mov	r6,r2
 4006c68:	e17fe717 	ldw	r5,-100(fp)
 4006c6c:	e13fe617 	ldw	r4,-104(fp)
 4006c70:	400f1dc0 	call	400f1dc <__sprint_r>
 4006c74:	10005d1e 	bne	r2,zero,4006dec <___vfprintf_internal_r+0x2058>
 4006c78:	e03fc915 	stw	zero,-220(fp)
 4006c7c:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 4006c80:	e0bfb817 	ldw	r2,-288(fp)
 4006c84:	1038a026 	beq	r2,zero,4004f08 <__alt_data_end+0xfc004f08>
			_free_r (data, malloc_buf);
 4006c88:	e17fb817 	ldw	r5,-288(fp)
 4006c8c:	e13fe617 	ldw	r4,-104(fp)
 4006c90:	4009c200 	call	4009c20 <_free_r>
			malloc_buf = NULL;
 4006c94:	e03fb815 	stw	zero,-288(fp)
		}
	}
 4006c98:	00389b06 	br	4004f08 <__alt_data_end+0xfc004f08>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 4006c9c:	0001883a 	nop
 4006ca0:	00000106 	br	4006ca8 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 4006ca4:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 4006ca8:	e0bfca17 	ldw	r2,-216(fp)
 4006cac:	10000626 	beq	r2,zero,4006cc8 <___vfprintf_internal_r+0x1f34>
 4006cb0:	e0bfc804 	addi	r2,fp,-224
 4006cb4:	100d883a 	mov	r6,r2
 4006cb8:	e17fe717 	ldw	r5,-100(fp)
 4006cbc:	e13fe617 	ldw	r4,-104(fp)
 4006cc0:	400f1dc0 	call	400f1dc <__sprint_r>
 4006cc4:	10004b1e 	bne	r2,zero,4006df4 <___vfprintf_internal_r+0x2060>
 4006cc8:	e03fc915 	stw	zero,-220(fp)
 4006ccc:	e47fcb04 	addi	r17,fp,-212
 4006cd0:	00004906 	br	4006df8 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 4006cd4:	0001883a 	nop
 4006cd8:	00004706 	br	4006df8 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 4006cdc:	0001883a 	nop
 4006ce0:	00004506 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006ce4:	0001883a 	nop
 4006ce8:	00004306 	br	4006df8 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 4006cec:	0001883a 	nop
 4006cf0:	00004106 	br	4006df8 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 4006cf4:	0001883a 	nop
 4006cf8:	00003f06 	br	4006df8 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 4006cfc:	0001883a 	nop
 4006d00:	00003d06 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006d04:	0001883a 	nop
 4006d08:	00003b06 	br	4006df8 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 4006d0c:	0001883a 	nop
 4006d10:	00003906 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006d14:	0001883a 	nop
 4006d18:	00003706 	br	4006df8 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 4006d1c:	0001883a 	nop
 4006d20:	00003506 	br	4006df8 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 4006d24:	0001883a 	nop
 4006d28:	00003306 	br	4006df8 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 4006d2c:	0001883a 	nop
 4006d30:	00003106 	br	4006df8 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 4006d34:	0001883a 	nop
 4006d38:	00002f06 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006d3c:	0001883a 	nop
 4006d40:	00002d06 	br	4006df8 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 4006d44:	0001883a 	nop
 4006d48:	00002b06 	br	4006df8 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 4006d4c:	0001883a 	nop
 4006d50:	00002906 	br	4006df8 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 4006d54:	0001883a 	nop
 4006d58:	00002706 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006d5c:	0001883a 	nop
 4006d60:	00002506 	br	4006df8 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 4006d64:	0001883a 	nop
 4006d68:	00002306 	br	4006df8 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 4006d6c:	0001883a 	nop
 4006d70:	00002106 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006d74:	0001883a 	nop
 4006d78:	00001f06 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006d7c:	0001883a 	nop
 4006d80:	00001d06 	br	4006df8 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 4006d84:	0001883a 	nop
 4006d88:	00001b06 	br	4006df8 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 4006d8c:	0001883a 	nop
 4006d90:	00001906 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006d94:	0001883a 	nop
 4006d98:	00001706 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006d9c:	0001883a 	nop
 4006da0:	00001506 	br	4006df8 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 4006da4:	0001883a 	nop
 4006da8:	00001306 	br	4006df8 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 4006dac:	0001883a 	nop
 4006db0:	00001106 	br	4006df8 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 4006db4:	0001883a 	nop
 4006db8:	00000f06 	br	4006df8 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 4006dbc:	0001883a 	nop
 4006dc0:	00000d06 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006dc4:	0001883a 	nop
 4006dc8:	00000b06 	br	4006df8 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 4006dcc:	0001883a 	nop
 4006dd0:	00000906 	br	4006df8 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 4006dd4:	0001883a 	nop
 4006dd8:	00000706 	br	4006df8 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 4006ddc:	0001883a 	nop
 4006de0:	00000506 	br	4006df8 <___vfprintf_internal_r+0x2064>
 4006de4:	0001883a 	nop
 4006de8:	00000306 	br	4006df8 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 4006dec:	0001883a 	nop
 4006df0:	00000106 	br	4006df8 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 4006df4:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 4006df8:	e0bfb817 	ldw	r2,-288(fp)
 4006dfc:	10000326 	beq	r2,zero,4006e0c <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 4006e00:	e17fb817 	ldw	r5,-288(fp)
 4006e04:	e13fe617 	ldw	r4,-104(fp)
 4006e08:	4009c200 	call	4009c20 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 4006e0c:	e0bfe717 	ldw	r2,-100(fp)
 4006e10:	1080030b 	ldhu	r2,12(r2)
 4006e14:	10bfffcc 	andi	r2,r2,65535
 4006e18:	1080100c 	andi	r2,r2,64
 4006e1c:	1000021e 	bne	r2,zero,4006e28 <___vfprintf_internal_r+0x2094>
 4006e20:	e0bfac17 	ldw	r2,-336(fp)
 4006e24:	00000206 	br	4006e30 <___vfprintf_internal_r+0x209c>
 4006e28:	00bfffc4 	movi	r2,-1
 4006e2c:	0001883a 	nop
	/* NOTREACHED */
}
 4006e30:	e6fff804 	addi	sp,fp,-32
 4006e34:	dfc00917 	ldw	ra,36(sp)
 4006e38:	df000817 	ldw	fp,32(sp)
 4006e3c:	ddc00717 	ldw	r23,28(sp)
 4006e40:	dd800617 	ldw	r22,24(sp)
 4006e44:	dd400517 	ldw	r21,20(sp)
 4006e48:	dd000417 	ldw	r20,16(sp)
 4006e4c:	dcc00317 	ldw	r19,12(sp)
 4006e50:	dc800217 	ldw	r18,8(sp)
 4006e54:	dc400117 	ldw	r17,4(sp)
 4006e58:	dc000017 	ldw	r16,0(sp)
 4006e5c:	dec00a04 	addi	sp,sp,40
 4006e60:	f800283a 	ret

04006e64 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 4006e64:	deffef04 	addi	sp,sp,-68
 4006e68:	dfc01015 	stw	ra,64(sp)
 4006e6c:	df000f15 	stw	fp,60(sp)
 4006e70:	df000f04 	addi	fp,sp,60
 4006e74:	e13ffc15 	stw	r4,-16(fp)
 4006e78:	e17ffd15 	stw	r5,-12(fp)
 4006e7c:	e1bffe15 	stw	r6,-8(fp)
 4006e80:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 4006e84:	e0bffd17 	ldw	r2,-12(fp)
 4006e88:	e0bffa15 	stw	r2,-24(fp)
 4006e8c:	e0bffe17 	ldw	r2,-8(fp)
 4006e90:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 4006e94:	e0bffb17 	ldw	r2,-20(fp)
 4006e98:	1000090e 	bge	r2,zero,4006ec0 <cvt+0x5c>
		value = -value;
 4006e9c:	e0bffd17 	ldw	r2,-12(fp)
 4006ea0:	e0bffd15 	stw	r2,-12(fp)
 4006ea4:	e0bffe17 	ldw	r2,-8(fp)
 4006ea8:	10a0003c 	xorhi	r2,r2,32768
 4006eac:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 4006eb0:	e0800317 	ldw	r2,12(fp)
 4006eb4:	00c00b44 	movi	r3,45
 4006eb8:	10c00005 	stb	r3,0(r2)
 4006ebc:	00000206 	br	4006ec8 <cvt+0x64>
	} else
		*sign = '\000';
 4006ec0:	e0800317 	ldw	r2,12(fp)
 4006ec4:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 4006ec8:	e0800517 	ldw	r2,20(fp)
 4006ecc:	108019a0 	cmpeqi	r2,r2,102
 4006ed0:	1000031e 	bne	r2,zero,4006ee0 <cvt+0x7c>
 4006ed4:	e0800517 	ldw	r2,20(fp)
 4006ed8:	10801198 	cmpnei	r2,r2,70
 4006edc:	1000031e 	bne	r2,zero,4006eec <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 4006ee0:	008000c4 	movi	r2,3
 4006ee4:	e0bff515 	stw	r2,-44(fp)
 4006ee8:	00000b06 	br	4006f18 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 4006eec:	e0800517 	ldw	r2,20(fp)
 4006ef0:	10801960 	cmpeqi	r2,r2,101
 4006ef4:	1000031e 	bne	r2,zero,4006f04 <cvt+0xa0>
 4006ef8:	e0800517 	ldw	r2,20(fp)
 4006efc:	10801158 	cmpnei	r2,r2,69
 4006f00:	1000031e 	bne	r2,zero,4006f10 <cvt+0xac>
			ndigits++;
 4006f04:	e0bfff17 	ldw	r2,-4(fp)
 4006f08:	10800044 	addi	r2,r2,1
 4006f0c:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 4006f10:	00800084 	movi	r2,2
 4006f14:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 4006f18:	e0bff904 	addi	r2,fp,-28
 4006f1c:	d8800315 	stw	r2,12(sp)
 4006f20:	e0bff804 	addi	r2,fp,-32
 4006f24:	d8800215 	stw	r2,8(sp)
 4006f28:	e0800417 	ldw	r2,16(fp)
 4006f2c:	d8800115 	stw	r2,4(sp)
 4006f30:	e0bfff17 	ldw	r2,-4(fp)
 4006f34:	d8800015 	stw	r2,0(sp)
 4006f38:	e1fff517 	ldw	r7,-44(fp)
 4006f3c:	e17ffd17 	ldw	r5,-12(fp)
 4006f40:	e1bffe17 	ldw	r6,-8(fp)
 4006f44:	e13ffc17 	ldw	r4,-16(fp)
 4006f48:	40077040 	call	4007704 <_dtoa_r>
 4006f4c:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 4006f50:	e0800517 	ldw	r2,20(fp)
 4006f54:	108019e0 	cmpeqi	r2,r2,103
 4006f58:	1000031e 	bne	r2,zero,4006f68 <cvt+0x104>
 4006f5c:	e0800517 	ldw	r2,20(fp)
 4006f60:	108011d8 	cmpnei	r2,r2,71
 4006f64:	1000031e 	bne	r2,zero,4006f74 <cvt+0x110>
 4006f68:	e0800217 	ldw	r2,8(fp)
 4006f6c:	1080004c 	andi	r2,r2,1
 4006f70:	10003326 	beq	r2,zero,4007040 <cvt+0x1dc>
		bp = digits + ndigits;
 4006f74:	e0bfff17 	ldw	r2,-4(fp)
 4006f78:	e0fff717 	ldw	r3,-36(fp)
 4006f7c:	1885883a 	add	r2,r3,r2
 4006f80:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 4006f84:	e0800517 	ldw	r2,20(fp)
 4006f88:	108019a0 	cmpeqi	r2,r2,102
 4006f8c:	1000031e 	bne	r2,zero,4006f9c <cvt+0x138>
 4006f90:	e0800517 	ldw	r2,20(fp)
 4006f94:	10801198 	cmpnei	r2,r2,70
 4006f98:	1000181e 	bne	r2,zero,4006ffc <cvt+0x198>
			if (*digits == '0' && value)
 4006f9c:	e0bff717 	ldw	r2,-36(fp)
 4006fa0:	10800003 	ldbu	r2,0(r2)
 4006fa4:	10803fcc 	andi	r2,r2,255
 4006fa8:	1080201c 	xori	r2,r2,128
 4006fac:	10bfe004 	addi	r2,r2,-128
 4006fb0:	10800c18 	cmpnei	r2,r2,48
 4006fb4:	10000b1e 	bne	r2,zero,4006fe4 <cvt+0x180>
 4006fb8:	000d883a 	mov	r6,zero
 4006fbc:	000f883a 	mov	r7,zero
 4006fc0:	e13ffd17 	ldw	r4,-12(fp)
 4006fc4:	e17ffe17 	ldw	r5,-8(fp)
 4006fc8:	4002f680 	call	4002f68 <__eqdf2>
 4006fcc:	10000526 	beq	r2,zero,4006fe4 <cvt+0x180>
				*decpt = -ndigits + 1;
 4006fd0:	00c00044 	movi	r3,1
 4006fd4:	e0bfff17 	ldw	r2,-4(fp)
 4006fd8:	1887c83a 	sub	r3,r3,r2
 4006fdc:	e0800417 	ldw	r2,16(fp)
 4006fe0:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 4006fe4:	e0800417 	ldw	r2,16(fp)
 4006fe8:	10800017 	ldw	r2,0(r2)
 4006fec:	1007883a 	mov	r3,r2
 4006ff0:	e0bff617 	ldw	r2,-40(fp)
 4006ff4:	10c5883a 	add	r2,r2,r3
 4006ff8:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 4006ffc:	000d883a 	mov	r6,zero
 4007000:	000f883a 	mov	r7,zero
 4007004:	e13ffd17 	ldw	r4,-12(fp)
 4007008:	e17ffe17 	ldw	r5,-8(fp)
 400700c:	4002f680 	call	4002f68 <__eqdf2>
 4007010:	1000081e 	bne	r2,zero,4007034 <cvt+0x1d0>
			rve = bp;
 4007014:	e0bff617 	ldw	r2,-40(fp)
 4007018:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 400701c:	00000506 	br	4007034 <cvt+0x1d0>
			*rve++ = '0';
 4007020:	e0bff917 	ldw	r2,-28(fp)
 4007024:	10c00044 	addi	r3,r2,1
 4007028:	e0fff915 	stw	r3,-28(fp)
 400702c:	00c00c04 	movi	r3,48
 4007030:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 4007034:	e0fff917 	ldw	r3,-28(fp)
 4007038:	e0bff617 	ldw	r2,-40(fp)
 400703c:	18bff836 	bltu	r3,r2,4007020 <__alt_data_end+0xfc007020>
			*rve++ = '0';
	}
	*length = rve - digits;
 4007040:	e0bff917 	ldw	r2,-28(fp)
 4007044:	1007883a 	mov	r3,r2
 4007048:	e0bff717 	ldw	r2,-36(fp)
 400704c:	1887c83a 	sub	r3,r3,r2
 4007050:	e0800617 	ldw	r2,24(fp)
 4007054:	10c00015 	stw	r3,0(r2)
	return (digits);
 4007058:	e0bff717 	ldw	r2,-36(fp)
}
 400705c:	e037883a 	mov	sp,fp
 4007060:	dfc00117 	ldw	ra,4(sp)
 4007064:	df000017 	ldw	fp,0(sp)
 4007068:	dec00204 	addi	sp,sp,8
 400706c:	f800283a 	ret

04007070 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 4007070:	defff704 	addi	sp,sp,-36
 4007074:	dfc00815 	stw	ra,32(sp)
 4007078:	df000715 	stw	fp,28(sp)
 400707c:	dc400615 	stw	r17,24(sp)
 4007080:	dc000515 	stw	r16,20(sp)
 4007084:	df000704 	addi	fp,sp,28
 4007088:	e13ffb15 	stw	r4,-20(fp)
 400708c:	e17ffc15 	stw	r5,-16(fp)
 4007090:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 4007094:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 4007098:	8805883a 	mov	r2,r17
 400709c:	14400044 	addi	r17,r2,1
 40070a0:	e0fffd17 	ldw	r3,-12(fp)
 40070a4:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 40070a8:	e0bffc17 	ldw	r2,-16(fp)
 40070ac:	1000080e 	bge	r2,zero,40070d0 <exponent+0x60>
		exp = -exp;
 40070b0:	e0bffc17 	ldw	r2,-16(fp)
 40070b4:	0085c83a 	sub	r2,zero,r2
 40070b8:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 40070bc:	8805883a 	mov	r2,r17
 40070c0:	14400044 	addi	r17,r2,1
 40070c4:	00c00b44 	movi	r3,45
 40070c8:	10c00005 	stb	r3,0(r2)
 40070cc:	00000406 	br	40070e0 <exponent+0x70>
	}
	else
		*p++ = '+';
 40070d0:	8805883a 	mov	r2,r17
 40070d4:	14400044 	addi	r17,r2,1
 40070d8:	00c00ac4 	movi	r3,43
 40070dc:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 40070e0:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 40070e4:	e0bffc17 	ldw	r2,-16(fp)
 40070e8:	10800290 	cmplti	r2,r2,10
 40070ec:	10001d1e 	bne	r2,zero,4007164 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 40070f0:	843fffc4 	addi	r16,r16,-1
 40070f4:	e0bffc17 	ldw	r2,-16(fp)
 40070f8:	01400284 	movi	r5,10
 40070fc:	1009883a 	mov	r4,r2
 4007100:	40045740 	call	4004574 <__modsi3>
 4007104:	10800c04 	addi	r2,r2,48
 4007108:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 400710c:	e0bffc17 	ldw	r2,-16(fp)
 4007110:	01400284 	movi	r5,10
 4007114:	1009883a 	mov	r4,r2
 4007118:	40044f00 	call	40044f0 <__divsi3>
 400711c:	e0bffc15 	stw	r2,-16(fp)
 4007120:	e0bffc17 	ldw	r2,-16(fp)
 4007124:	10800288 	cmpgei	r2,r2,10
 4007128:	103ff11e 	bne	r2,zero,40070f0 <__alt_data_end+0xfc0070f0>
		*--t = to_char (exp);
 400712c:	843fffc4 	addi	r16,r16,-1
 4007130:	e0bffc17 	ldw	r2,-16(fp)
 4007134:	10800c04 	addi	r2,r2,48
 4007138:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 400713c:	00000606 	br	4007158 <exponent+0xe8>
 4007140:	8805883a 	mov	r2,r17
 4007144:	14400044 	addi	r17,r2,1
 4007148:	8007883a 	mov	r3,r16
 400714c:	1c000044 	addi	r16,r3,1
 4007150:	18c00003 	ldbu	r3,0(r3)
 4007154:	10c00005 	stb	r3,0(r2)
 4007158:	e0bffac4 	addi	r2,fp,-21
 400715c:	80bff836 	bltu	r16,r2,4007140 <__alt_data_end+0xfc007140>
 4007160:	00000906 	br	4007188 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 4007164:	8805883a 	mov	r2,r17
 4007168:	14400044 	addi	r17,r2,1
 400716c:	00c00c04 	movi	r3,48
 4007170:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 4007174:	8805883a 	mov	r2,r17
 4007178:	14400044 	addi	r17,r2,1
 400717c:	e0fffc17 	ldw	r3,-16(fp)
 4007180:	18c00c04 	addi	r3,r3,48
 4007184:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 4007188:	8807883a 	mov	r3,r17
 400718c:	e0bffb17 	ldw	r2,-20(fp)
 4007190:	1885c83a 	sub	r2,r3,r2
}
 4007194:	e6fffe04 	addi	sp,fp,-8
 4007198:	dfc00317 	ldw	ra,12(sp)
 400719c:	df000217 	ldw	fp,8(sp)
 40071a0:	dc400117 	ldw	r17,4(sp)
 40071a4:	dc000017 	ldw	r16,0(sp)
 40071a8:	dec00404 	addi	sp,sp,16
 40071ac:	f800283a 	ret

040071b0 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 40071b0:	defffb04 	addi	sp,sp,-20
 40071b4:	dfc00415 	stw	ra,16(sp)
 40071b8:	df000315 	stw	fp,12(sp)
 40071bc:	dc000215 	stw	r16,8(sp)
 40071c0:	df000304 	addi	fp,sp,12
 40071c4:	e13ffe15 	stw	r4,-8(fp)
 40071c8:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 40071cc:	d0a00917 	ldw	r2,-32732(gp)
 40071d0:	e0bffd15 	stw	r2,-12(fp)
 40071d4:	e0bffd17 	ldw	r2,-12(fp)
 40071d8:	10000526 	beq	r2,zero,40071f0 <__swsetup_r+0x40>
 40071dc:	e0bffd17 	ldw	r2,-12(fp)
 40071e0:	10800e17 	ldw	r2,56(r2)
 40071e4:	1000021e 	bne	r2,zero,40071f0 <__swsetup_r+0x40>
 40071e8:	e13ffd17 	ldw	r4,-12(fp)
 40071ec:	4009a000 	call	4009a00 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 40071f0:	8080030b 	ldhu	r2,12(r16)
 40071f4:	10bfffcc 	andi	r2,r2,65535
 40071f8:	1080020c 	andi	r2,r2,8
 40071fc:	1000241e 	bne	r2,zero,4007290 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 4007200:	8080030b 	ldhu	r2,12(r16)
 4007204:	10bfffcc 	andi	r2,r2,65535
 4007208:	1080040c 	andi	r2,r2,16
 400720c:	1000081e 	bne	r2,zero,4007230 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 4007210:	e0bffe17 	ldw	r2,-8(fp)
 4007214:	00c00244 	movi	r3,9
 4007218:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 400721c:	8080030b 	ldhu	r2,12(r16)
 4007220:	10801014 	ori	r2,r2,64
 4007224:	8080030d 	sth	r2,12(r16)
	  return EOF;
 4007228:	00bfffc4 	movi	r2,-1
 400722c:	00004206 	br	4007338 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 4007230:	8080030b 	ldhu	r2,12(r16)
 4007234:	10bfffcc 	andi	r2,r2,65535
 4007238:	1080010c 	andi	r2,r2,4
 400723c:	10001126 	beq	r2,zero,4007284 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 4007240:	80800c17 	ldw	r2,48(r16)
 4007244:	10000826 	beq	r2,zero,4007268 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 4007248:	80c00c17 	ldw	r3,48(r16)
 400724c:	80801004 	addi	r2,r16,64
 4007250:	18800426 	beq	r3,r2,4007264 <__swsetup_r+0xb4>
 4007254:	80800c17 	ldw	r2,48(r16)
 4007258:	100b883a 	mov	r5,r2
 400725c:	e13ffe17 	ldw	r4,-8(fp)
 4007260:	4009c200 	call	4009c20 <_free_r>
 4007264:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 4007268:	80c0030b 	ldhu	r3,12(r16)
 400726c:	00bff6c4 	movi	r2,-37
 4007270:	1884703a 	and	r2,r3,r2
 4007274:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 4007278:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 400727c:	80800417 	ldw	r2,16(r16)
 4007280:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 4007284:	8080030b 	ldhu	r2,12(r16)
 4007288:	10800214 	ori	r2,r2,8
 400728c:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 4007290:	80800417 	ldw	r2,16(r16)
 4007294:	10000b1e 	bne	r2,zero,40072c4 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 4007298:	8080030b 	ldhu	r2,12(r16)
 400729c:	10bfffcc 	andi	r2,r2,65535
 40072a0:	1080800c 	andi	r2,r2,512
 40072a4:	10000426 	beq	r2,zero,40072b8 <__swsetup_r+0x108>
 40072a8:	8080030b 	ldhu	r2,12(r16)
 40072ac:	10bfffcc 	andi	r2,r2,65535
 40072b0:	1080200c 	andi	r2,r2,128
 40072b4:	10000326 	beq	r2,zero,40072c4 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 40072b8:	800b883a 	mov	r5,r16
 40072bc:	e13ffe17 	ldw	r4,-8(fp)
 40072c0:	400ace80 	call	400ace8 <__smakebuf_r>

  if (fp->_flags & __SLBF)
 40072c4:	8080030b 	ldhu	r2,12(r16)
 40072c8:	10bfffcc 	andi	r2,r2,65535
 40072cc:	1080004c 	andi	r2,r2,1
 40072d0:	10000526 	beq	r2,zero,40072e8 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 40072d4:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 40072d8:	80800517 	ldw	r2,20(r16)
 40072dc:	0085c83a 	sub	r2,zero,r2
 40072e0:	80800615 	stw	r2,24(r16)
 40072e4:	00000806 	br	4007308 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 40072e8:	8080030b 	ldhu	r2,12(r16)
 40072ec:	10bfffcc 	andi	r2,r2,65535
 40072f0:	1080008c 	andi	r2,r2,2
 40072f4:	1000021e 	bne	r2,zero,4007300 <__swsetup_r+0x150>
 40072f8:	80800517 	ldw	r2,20(r16)
 40072fc:	00000106 	br	4007304 <__swsetup_r+0x154>
 4007300:	0005883a 	mov	r2,zero
 4007304:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 4007308:	80800417 	ldw	r2,16(r16)
 400730c:	1000091e 	bne	r2,zero,4007334 <__swsetup_r+0x184>
 4007310:	8080030b 	ldhu	r2,12(r16)
 4007314:	10bfffcc 	andi	r2,r2,65535
 4007318:	1080200c 	andi	r2,r2,128
 400731c:	10000526 	beq	r2,zero,4007334 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 4007320:	8080030b 	ldhu	r2,12(r16)
 4007324:	10801014 	ori	r2,r2,64
 4007328:	8080030d 	sth	r2,12(r16)
      return EOF;
 400732c:	00bfffc4 	movi	r2,-1
 4007330:	00000106 	br	4007338 <__swsetup_r+0x188>
    }
  return 0;
 4007334:	0005883a 	mov	r2,zero
}
 4007338:	e6ffff04 	addi	sp,fp,-4
 400733c:	dfc00217 	ldw	ra,8(sp)
 4007340:	df000117 	ldw	fp,4(sp)
 4007344:	dc000017 	ldw	r16,0(sp)
 4007348:	dec00304 	addi	sp,sp,12
 400734c:	f800283a 	ret

04007350 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 4007350:	deffef04 	addi	sp,sp,-68
 4007354:	dfc01015 	stw	ra,64(sp)
 4007358:	df000f15 	stw	fp,60(sp)
 400735c:	df000f04 	addi	fp,sp,60
 4007360:	e13ffe15 	stw	r4,-8(fp)
 4007364:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 4007368:	e0bfff17 	ldw	r2,-4(fp)
 400736c:	10800417 	ldw	r2,16(r2)
 4007370:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 4007374:	e0bffe17 	ldw	r2,-8(fp)
 4007378:	10c00417 	ldw	r3,16(r2)
 400737c:	e0bff117 	ldw	r2,-60(fp)
 4007380:	1880020e 	bge	r3,r2,400738c <quorem+0x3c>
    return 0;
 4007384:	0005883a 	mov	r2,zero
 4007388:	0000d906 	br	40076f0 <quorem+0x3a0>
  sx = S->_x;
 400738c:	e0bfff17 	ldw	r2,-4(fp)
 4007390:	10800504 	addi	r2,r2,20
 4007394:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 4007398:	e0bff117 	ldw	r2,-60(fp)
 400739c:	10bfffc4 	addi	r2,r2,-1
 40073a0:	e0bff115 	stw	r2,-60(fp)
 40073a4:	e0bff117 	ldw	r2,-60(fp)
 40073a8:	1085883a 	add	r2,r2,r2
 40073ac:	1085883a 	add	r2,r2,r2
 40073b0:	1007883a 	mov	r3,r2
 40073b4:	e0bff717 	ldw	r2,-36(fp)
 40073b8:	10c5883a 	add	r2,r2,r3
 40073bc:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 40073c0:	e0bffe17 	ldw	r2,-8(fp)
 40073c4:	10800504 	addi	r2,r2,20
 40073c8:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 40073cc:	e0bff117 	ldw	r2,-60(fp)
 40073d0:	1085883a 	add	r2,r2,r2
 40073d4:	1085883a 	add	r2,r2,r2
 40073d8:	1007883a 	mov	r3,r2
 40073dc:	e0bff517 	ldw	r2,-44(fp)
 40073e0:	10c5883a 	add	r2,r2,r3
 40073e4:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 40073e8:	e0bff617 	ldw	r2,-40(fp)
 40073ec:	10c00017 	ldw	r3,0(r2)
 40073f0:	e0bff817 	ldw	r2,-32(fp)
 40073f4:	10800017 	ldw	r2,0(r2)
 40073f8:	10800044 	addi	r2,r2,1
 40073fc:	100b883a 	mov	r5,r2
 4007400:	1809883a 	mov	r4,r3
 4007404:	40045e80 	call	40045e8 <__udivsi3>
 4007408:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 400740c:	e0bff417 	ldw	r2,-48(fp)
 4007410:	10005326 	beq	r2,zero,4007560 <quorem+0x210>
    {
      borrow = 0;
 4007414:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 4007418:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 400741c:	e0bff717 	ldw	r2,-36(fp)
 4007420:	10c00104 	addi	r3,r2,4
 4007424:	e0fff715 	stw	r3,-36(fp)
 4007428:	10800017 	ldw	r2,0(r2)
 400742c:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 4007430:	e0bff917 	ldw	r2,-28(fp)
 4007434:	10ffffcc 	andi	r3,r2,65535
 4007438:	e0bff417 	ldw	r2,-48(fp)
 400743c:	1887383a 	mul	r3,r3,r2
 4007440:	e0bff317 	ldw	r2,-52(fp)
 4007444:	1885883a 	add	r2,r3,r2
 4007448:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 400744c:	e0bff917 	ldw	r2,-28(fp)
 4007450:	1006d43a 	srli	r3,r2,16
 4007454:	e0bff417 	ldw	r2,-48(fp)
 4007458:	1887383a 	mul	r3,r3,r2
 400745c:	e0bffa17 	ldw	r2,-24(fp)
 4007460:	1004d43a 	srli	r2,r2,16
 4007464:	1885883a 	add	r2,r3,r2
 4007468:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 400746c:	e0bffb17 	ldw	r2,-20(fp)
 4007470:	1004d43a 	srli	r2,r2,16
 4007474:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 4007478:	e0bff517 	ldw	r2,-44(fp)
 400747c:	10800017 	ldw	r2,0(r2)
 4007480:	10ffffcc 	andi	r3,r2,65535
 4007484:	e0bffa17 	ldw	r2,-24(fp)
 4007488:	10bfffcc 	andi	r2,r2,65535
 400748c:	1887c83a 	sub	r3,r3,r2
 4007490:	e0bff217 	ldw	r2,-56(fp)
 4007494:	1885883a 	add	r2,r3,r2
 4007498:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 400749c:	e0bffc17 	ldw	r2,-16(fp)
 40074a0:	1005d43a 	srai	r2,r2,16
 40074a4:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 40074a8:	e0bff517 	ldw	r2,-44(fp)
 40074ac:	10800017 	ldw	r2,0(r2)
 40074b0:	1006d43a 	srli	r3,r2,16
 40074b4:	e0bffb17 	ldw	r2,-20(fp)
 40074b8:	10bfffcc 	andi	r2,r2,65535
 40074bc:	1887c83a 	sub	r3,r3,r2
 40074c0:	e0bff217 	ldw	r2,-56(fp)
 40074c4:	1885883a 	add	r2,r3,r2
 40074c8:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 40074cc:	e0bffd17 	ldw	r2,-12(fp)
 40074d0:	1005d43a 	srai	r2,r2,16
 40074d4:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 40074d8:	e0bff517 	ldw	r2,-44(fp)
 40074dc:	10c00104 	addi	r3,r2,4
 40074e0:	e0fff515 	stw	r3,-44(fp)
 40074e4:	e0fffd17 	ldw	r3,-12(fp)
 40074e8:	1808943a 	slli	r4,r3,16
 40074ec:	e0fffc17 	ldw	r3,-16(fp)
 40074f0:	18ffffcc 	andi	r3,r3,65535
 40074f4:	20c6b03a 	or	r3,r4,r3
 40074f8:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 40074fc:	e0bff717 	ldw	r2,-36(fp)
 4007500:	e0fff817 	ldw	r3,-32(fp)
 4007504:	18bfc52e 	bgeu	r3,r2,400741c <__alt_data_end+0xfc00741c>
      if (!*bxe)
 4007508:	e0bff617 	ldw	r2,-40(fp)
 400750c:	10800017 	ldw	r2,0(r2)
 4007510:	1000131e 	bne	r2,zero,4007560 <quorem+0x210>
	{
	  bx = b->_x;
 4007514:	e0bffe17 	ldw	r2,-8(fp)
 4007518:	10800504 	addi	r2,r2,20
 400751c:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 4007520:	00000306 	br	4007530 <quorem+0x1e0>
	    --n;
 4007524:	e0bff117 	ldw	r2,-60(fp)
 4007528:	10bfffc4 	addi	r2,r2,-1
 400752c:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 4007530:	e0bff617 	ldw	r2,-40(fp)
 4007534:	10bfff04 	addi	r2,r2,-4
 4007538:	e0bff615 	stw	r2,-40(fp)
 400753c:	e0bff617 	ldw	r2,-40(fp)
 4007540:	e0fff517 	ldw	r3,-44(fp)
 4007544:	1880032e 	bgeu	r3,r2,4007554 <quorem+0x204>
 4007548:	e0bff617 	ldw	r2,-40(fp)
 400754c:	10800017 	ldw	r2,0(r2)
 4007550:	103ff426 	beq	r2,zero,4007524 <__alt_data_end+0xfc007524>
	    --n;
	  b->_wds = n;
 4007554:	e0bffe17 	ldw	r2,-8(fp)
 4007558:	e0fff117 	ldw	r3,-60(fp)
 400755c:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 4007560:	e17fff17 	ldw	r5,-4(fp)
 4007564:	e13ffe17 	ldw	r4,-8(fp)
 4007568:	400d3340 	call	400d334 <__mcmp>
 400756c:	10005f16 	blt	r2,zero,40076ec <quorem+0x39c>
    {
      q++;
 4007570:	e0bff417 	ldw	r2,-48(fp)
 4007574:	10800044 	addi	r2,r2,1
 4007578:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 400757c:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 4007580:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 4007584:	e0bffe17 	ldw	r2,-8(fp)
 4007588:	10800504 	addi	r2,r2,20
 400758c:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 4007590:	e0bfff17 	ldw	r2,-4(fp)
 4007594:	10800504 	addi	r2,r2,20
 4007598:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 400759c:	e0bff717 	ldw	r2,-36(fp)
 40075a0:	10c00104 	addi	r3,r2,4
 40075a4:	e0fff715 	stw	r3,-36(fp)
 40075a8:	10800017 	ldw	r2,0(r2)
 40075ac:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 40075b0:	e0bff917 	ldw	r2,-28(fp)
 40075b4:	10ffffcc 	andi	r3,r2,65535
 40075b8:	e0bff317 	ldw	r2,-52(fp)
 40075bc:	1885883a 	add	r2,r3,r2
 40075c0:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 40075c4:	e0bff917 	ldw	r2,-28(fp)
 40075c8:	1006d43a 	srli	r3,r2,16
 40075cc:	e0bffa17 	ldw	r2,-24(fp)
 40075d0:	1004d43a 	srli	r2,r2,16
 40075d4:	1885883a 	add	r2,r3,r2
 40075d8:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 40075dc:	e0bffb17 	ldw	r2,-20(fp)
 40075e0:	1004d43a 	srli	r2,r2,16
 40075e4:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 40075e8:	e0bff517 	ldw	r2,-44(fp)
 40075ec:	10800017 	ldw	r2,0(r2)
 40075f0:	10ffffcc 	andi	r3,r2,65535
 40075f4:	e0bffa17 	ldw	r2,-24(fp)
 40075f8:	10bfffcc 	andi	r2,r2,65535
 40075fc:	1887c83a 	sub	r3,r3,r2
 4007600:	e0bff217 	ldw	r2,-56(fp)
 4007604:	1885883a 	add	r2,r3,r2
 4007608:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 400760c:	e0bffc17 	ldw	r2,-16(fp)
 4007610:	1005d43a 	srai	r2,r2,16
 4007614:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 4007618:	e0bff517 	ldw	r2,-44(fp)
 400761c:	10800017 	ldw	r2,0(r2)
 4007620:	1006d43a 	srli	r3,r2,16
 4007624:	e0bffb17 	ldw	r2,-20(fp)
 4007628:	10bfffcc 	andi	r2,r2,65535
 400762c:	1887c83a 	sub	r3,r3,r2
 4007630:	e0bff217 	ldw	r2,-56(fp)
 4007634:	1885883a 	add	r2,r3,r2
 4007638:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 400763c:	e0bffd17 	ldw	r2,-12(fp)
 4007640:	1005d43a 	srai	r2,r2,16
 4007644:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 4007648:	e0bff517 	ldw	r2,-44(fp)
 400764c:	10c00104 	addi	r3,r2,4
 4007650:	e0fff515 	stw	r3,-44(fp)
 4007654:	e0fffd17 	ldw	r3,-12(fp)
 4007658:	1808943a 	slli	r4,r3,16
 400765c:	e0fffc17 	ldw	r3,-16(fp)
 4007660:	18ffffcc 	andi	r3,r3,65535
 4007664:	20c6b03a 	or	r3,r4,r3
 4007668:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 400766c:	e0bff717 	ldw	r2,-36(fp)
 4007670:	e0fff817 	ldw	r3,-32(fp)
 4007674:	18bfc92e 	bgeu	r3,r2,400759c <__alt_data_end+0xfc00759c>
      bx = b->_x;
 4007678:	e0bffe17 	ldw	r2,-8(fp)
 400767c:	10800504 	addi	r2,r2,20
 4007680:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 4007684:	e0bff117 	ldw	r2,-60(fp)
 4007688:	1085883a 	add	r2,r2,r2
 400768c:	1085883a 	add	r2,r2,r2
 4007690:	1007883a 	mov	r3,r2
 4007694:	e0bff517 	ldw	r2,-44(fp)
 4007698:	10c5883a 	add	r2,r2,r3
 400769c:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 40076a0:	e0bff617 	ldw	r2,-40(fp)
 40076a4:	10800017 	ldw	r2,0(r2)
 40076a8:	1000101e 	bne	r2,zero,40076ec <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 40076ac:	00000306 	br	40076bc <quorem+0x36c>
	    --n;
 40076b0:	e0bff117 	ldw	r2,-60(fp)
 40076b4:	10bfffc4 	addi	r2,r2,-1
 40076b8:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 40076bc:	e0bff617 	ldw	r2,-40(fp)
 40076c0:	10bfff04 	addi	r2,r2,-4
 40076c4:	e0bff615 	stw	r2,-40(fp)
 40076c8:	e0bff617 	ldw	r2,-40(fp)
 40076cc:	e0fff517 	ldw	r3,-44(fp)
 40076d0:	1880032e 	bgeu	r3,r2,40076e0 <quorem+0x390>
 40076d4:	e0bff617 	ldw	r2,-40(fp)
 40076d8:	10800017 	ldw	r2,0(r2)
 40076dc:	103ff426 	beq	r2,zero,40076b0 <__alt_data_end+0xfc0076b0>
	    --n;
	  b->_wds = n;
 40076e0:	e0bffe17 	ldw	r2,-8(fp)
 40076e4:	e0fff117 	ldw	r3,-60(fp)
 40076e8:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 40076ec:	e0bff417 	ldw	r2,-48(fp)
}
 40076f0:	e037883a 	mov	sp,fp
 40076f4:	dfc00117 	ldw	ra,4(sp)
 40076f8:	df000017 	ldw	fp,0(sp)
 40076fc:	dec00204 	addi	sp,sp,8
 4007700:	f800283a 	ret

04007704 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 4007704:	deffcc04 	addi	sp,sp,-208
 4007708:	dfc03315 	stw	ra,204(sp)
 400770c:	df003215 	stw	fp,200(sp)
 4007710:	dcc03115 	stw	r19,196(sp)
 4007714:	dc803015 	stw	r18,192(sp)
 4007718:	dc402f15 	stw	r17,188(sp)
 400771c:	dc002e15 	stw	r16,184(sp)
 4007720:	df003204 	addi	fp,sp,200
 4007724:	e13ff815 	stw	r4,-32(fp)
 4007728:	e17ff915 	stw	r5,-28(fp)
 400772c:	e1bffa15 	stw	r6,-24(fp)
 4007730:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 4007734:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 4007738:	e0bff917 	ldw	r2,-28(fp)
 400773c:	e0bff215 	stw	r2,-56(fp)
 4007740:	e0bffa17 	ldw	r2,-24(fp)
 4007744:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 4007748:	e0bff817 	ldw	r2,-32(fp)
 400774c:	10801017 	ldw	r2,64(r2)
 4007750:	10001326 	beq	r2,zero,40077a0 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 4007754:	e0bff817 	ldw	r2,-32(fp)
 4007758:	10801017 	ldw	r2,64(r2)
 400775c:	e0fff817 	ldw	r3,-32(fp)
 4007760:	18c01117 	ldw	r3,68(r3)
 4007764:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 4007768:	e0bff817 	ldw	r2,-32(fp)
 400776c:	10801017 	ldw	r2,64(r2)
 4007770:	e0fff817 	ldw	r3,-32(fp)
 4007774:	18c01117 	ldw	r3,68(r3)
 4007778:	01000044 	movi	r4,1
 400777c:	20c6983a 	sll	r3,r4,r3
 4007780:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 4007784:	e0bff817 	ldw	r2,-32(fp)
 4007788:	10801017 	ldw	r2,64(r2)
 400778c:	100b883a 	mov	r5,r2
 4007790:	e13ff817 	ldw	r4,-32(fp)
 4007794:	400c6840 	call	400c684 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 4007798:	e0bff817 	ldw	r2,-32(fp)
 400779c:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 40077a0:	e0bff317 	ldw	r2,-52(fp)
 40077a4:	1000090e 	bge	r2,zero,40077cc <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 40077a8:	e0800417 	ldw	r2,16(fp)
 40077ac:	00c00044 	movi	r3,1
 40077b0:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 40077b4:	e0fff317 	ldw	r3,-52(fp)
 40077b8:	00a00034 	movhi	r2,32768
 40077bc:	10bfffc4 	addi	r2,r2,-1
 40077c0:	1884703a 	and	r2,r3,r2
 40077c4:	e0bff315 	stw	r2,-52(fp)
 40077c8:	00000206 	br	40077d4 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 40077cc:	e0800417 	ldw	r2,16(fp)
 40077d0:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 40077d4:	e0bff317 	ldw	r2,-52(fp)
 40077d8:	10dffc2c 	andhi	r3,r2,32752
 40077dc:	009ffc34 	movhi	r2,32752
 40077e0:	1880221e 	bne	r3,r2,400786c <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 40077e4:	e0800317 	ldw	r2,12(fp)
 40077e8:	00c9c3c4 	movi	r3,9999
 40077ec:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 40077f0:	e0bff217 	ldw	r2,-56(fp)
 40077f4:	1000081e 	bne	r2,zero,4007818 <_dtoa_r+0x114>
 40077f8:	e0fff317 	ldw	r3,-52(fp)
 40077fc:	00800434 	movhi	r2,16
 4007800:	10bfffc4 	addi	r2,r2,-1
 4007804:	1884703a 	and	r2,r3,r2
 4007808:	1000031e 	bne	r2,zero,4007818 <_dtoa_r+0x114>
 400780c:	00810074 	movhi	r2,1025
 4007810:	1094aa04 	addi	r2,r2,21160
 4007814:	00000206 	br	4007820 <_dtoa_r+0x11c>
 4007818:	00810074 	movhi	r2,1025
 400781c:	1094ad04 	addi	r2,r2,21172
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 4007820:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 4007824:	e0800517 	ldw	r2,20(fp)
 4007828:	10000e26 	beq	r2,zero,4007864 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 400782c:	e0bfe717 	ldw	r2,-100(fp)
 4007830:	108000c4 	addi	r2,r2,3
 4007834:	10800003 	ldbu	r2,0(r2)
 4007838:	10803fcc 	andi	r2,r2,255
 400783c:	1080201c 	xori	r2,r2,128
 4007840:	10bfe004 	addi	r2,r2,-128
 4007844:	10000326 	beq	r2,zero,4007854 <_dtoa_r+0x150>
 4007848:	e0bfe717 	ldw	r2,-100(fp)
 400784c:	10800204 	addi	r2,r2,8
 4007850:	00000206 	br	400785c <_dtoa_r+0x158>
 4007854:	e0bfe717 	ldw	r2,-100(fp)
 4007858:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 400785c:	e0c00517 	ldw	r3,20(fp)
 4007860:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 4007864:	e0bfe717 	ldw	r2,-100(fp)
 4007868:	00067b06 	br	4009258 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 400786c:	e0bff217 	ldw	r2,-56(fp)
 4007870:	e0fff317 	ldw	r3,-52(fp)
 4007874:	000d883a 	mov	r6,zero
 4007878:	000f883a 	mov	r7,zero
 400787c:	1009883a 	mov	r4,r2
 4007880:	180b883a 	mov	r5,r3
 4007884:	4002f680 	call	4002f68 <__eqdf2>
 4007888:	10000e1e 	bne	r2,zero,40078c4 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 400788c:	e0800317 	ldw	r2,12(fp)
 4007890:	00c00044 	movi	r3,1
 4007894:	10c00015 	stw	r3,0(r2)
      s = "0";
 4007898:	00810074 	movhi	r2,1025
 400789c:	1094ae04 	addi	r2,r2,21176
 40078a0:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 40078a4:	e0800517 	ldw	r2,20(fp)
 40078a8:	10000426 	beq	r2,zero,40078bc <_dtoa_r+0x1b8>
	*rve = s + 1;
 40078ac:	e0bfe717 	ldw	r2,-100(fp)
 40078b0:	10c00044 	addi	r3,r2,1
 40078b4:	e0800517 	ldw	r2,20(fp)
 40078b8:	10c00015 	stw	r3,0(r2)
      return s;
 40078bc:	e0bfe717 	ldw	r2,-100(fp)
 40078c0:	00066506 	br	4009258 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 40078c4:	e0bff217 	ldw	r2,-56(fp)
 40078c8:	e0fff317 	ldw	r3,-52(fp)
 40078cc:	e17ff104 	addi	r5,fp,-60
 40078d0:	e13ff004 	addi	r4,fp,-64
 40078d4:	d9000015 	stw	r4,0(sp)
 40078d8:	280f883a 	mov	r7,r5
 40078dc:	100b883a 	mov	r5,r2
 40078e0:	180d883a 	mov	r6,r3
 40078e4:	e13ff817 	ldw	r4,-32(fp)
 40078e8:	400d9bc0 	call	400d9bc <__d2b>
 40078ec:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 40078f0:	e0bff317 	ldw	r2,-52(fp)
 40078f4:	1004d53a 	srli	r2,r2,20
 40078f8:	1081ffcc 	andi	r2,r2,2047
 40078fc:	e0bfd215 	stw	r2,-184(fp)
 4007900:	e0bfd217 	ldw	r2,-184(fp)
 4007904:	10001126 	beq	r2,zero,400794c <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 4007908:	e0bff217 	ldw	r2,-56(fp)
 400790c:	e0fff317 	ldw	r3,-52(fp)
 4007910:	e0bff415 	stw	r2,-48(fp)
 4007914:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 4007918:	e0fff517 	ldw	r3,-44(fp)
 400791c:	00800434 	movhi	r2,16
 4007920:	10bfffc4 	addi	r2,r2,-1
 4007924:	1884703a 	and	r2,r3,r2
 4007928:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 400792c:	e0bff517 	ldw	r2,-44(fp)
 4007930:	108ffc34 	orhi	r2,r2,16368
 4007934:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 4007938:	e0bfd217 	ldw	r2,-184(fp)
 400793c:	10bf0044 	addi	r2,r2,-1023
 4007940:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 4007944:	e03fe015 	stw	zero,-128(fp)
 4007948:	00002806 	br	40079ec <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 400794c:	e0fff017 	ldw	r3,-64(fp)
 4007950:	e0bff117 	ldw	r2,-60(fp)
 4007954:	1885883a 	add	r2,r3,r2
 4007958:	10810c84 	addi	r2,r2,1074
 400795c:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 4007960:	e0bfd217 	ldw	r2,-184(fp)
 4007964:	10800850 	cmplti	r2,r2,33
 4007968:	10000b1e 	bne	r2,zero,4007998 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 400796c:	e0fff317 	ldw	r3,-52(fp)
 4007970:	01001004 	movi	r4,64
 4007974:	e0bfd217 	ldw	r2,-184(fp)
 4007978:	2085c83a 	sub	r2,r4,r2
 400797c:	1886983a 	sll	r3,r3,r2
 4007980:	e13ff217 	ldw	r4,-56(fp)
 4007984:	e0bfd217 	ldw	r2,-184(fp)
 4007988:	10bff804 	addi	r2,r2,-32
 400798c:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 4007990:	1884b03a 	or	r2,r3,r2
 4007994:	00000506 	br	40079ac <_dtoa_r+0x2a8>
 4007998:	e0fff217 	ldw	r3,-56(fp)
 400799c:	01000804 	movi	r4,32
 40079a0:	e0bfd217 	ldw	r2,-184(fp)
 40079a4:	2085c83a 	sub	r2,r4,r2
 40079a8:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 40079ac:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 40079b0:	e13fe817 	ldw	r4,-96(fp)
 40079b4:	4011fdc0 	call	4011fdc <__floatunsidf>
 40079b8:	1009883a 	mov	r4,r2
 40079bc:	180b883a 	mov	r5,r3
 40079c0:	e13ff415 	stw	r4,-48(fp)
 40079c4:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 40079c8:	e0fff517 	ldw	r3,-44(fp)
 40079cc:	00bf8434 	movhi	r2,65040
 40079d0:	1885883a 	add	r2,r3,r2
 40079d4:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 40079d8:	e0bfd217 	ldw	r2,-184(fp)
 40079dc:	10bef344 	addi	r2,r2,-1075
 40079e0:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 40079e4:	00800044 	movi	r2,1
 40079e8:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 40079ec:	e0bff417 	ldw	r2,-48(fp)
 40079f0:	e0fff517 	ldw	r3,-44(fp)
 40079f4:	000d883a 	mov	r6,zero
 40079f8:	01cffe34 	movhi	r7,16376
 40079fc:	1009883a 	mov	r4,r2
 4007a00:	180b883a 	mov	r5,r3
 4007a04:	40038d80 	call	40038d8 <__subdf3>
 4007a08:	1009883a 	mov	r4,r2
 4007a0c:	180b883a 	mov	r5,r3
 4007a10:	2005883a 	mov	r2,r4
 4007a14:	2807883a 	mov	r3,r5
 4007a18:	0198dbf4 	movhi	r6,25455
 4007a1c:	3190d844 	addi	r6,r6,17249
 4007a20:	01cff4f4 	movhi	r7,16339
 4007a24:	39e1e9c4 	addi	r7,r7,-30809
 4007a28:	1009883a 	mov	r4,r2
 4007a2c:	180b883a 	mov	r5,r3
 4007a30:	40031c00 	call	40031c0 <__muldf3>
 4007a34:	1009883a 	mov	r4,r2
 4007a38:	180b883a 	mov	r5,r3
 4007a3c:	2005883a 	mov	r2,r4
 4007a40:	2807883a 	mov	r3,r5
 4007a44:	01a2d874 	movhi	r6,35681
 4007a48:	31b22cc4 	addi	r6,r6,-14157
 4007a4c:	01cff1f4 	movhi	r7,16327
 4007a50:	39e28a04 	addi	r7,r7,-30168
 4007a54:	1009883a 	mov	r4,r2
 4007a58:	180b883a 	mov	r5,r3
 4007a5c:	4001dd40 	call	4001dd4 <__adddf3>
 4007a60:	1009883a 	mov	r4,r2
 4007a64:	180b883a 	mov	r5,r3
 4007a68:	2025883a 	mov	r18,r4
 4007a6c:	2827883a 	mov	r19,r5
 4007a70:	e13fd217 	ldw	r4,-184(fp)
 4007a74:	4011f000 	call	4011f00 <__floatsidf>
 4007a78:	1011883a 	mov	r8,r2
 4007a7c:	1813883a 	mov	r9,r3
 4007a80:	019427f4 	movhi	r6,20639
 4007a84:	319e7ec4 	addi	r6,r6,31227
 4007a88:	01cff4f4 	movhi	r7,16339
 4007a8c:	39d104c4 	addi	r7,r7,17427
 4007a90:	4009883a 	mov	r4,r8
 4007a94:	480b883a 	mov	r5,r9
 4007a98:	40031c00 	call	40031c0 <__muldf3>
 4007a9c:	1009883a 	mov	r4,r2
 4007aa0:	180b883a 	mov	r5,r3
 4007aa4:	2005883a 	mov	r2,r4
 4007aa8:	2807883a 	mov	r3,r5
 4007aac:	100d883a 	mov	r6,r2
 4007ab0:	180f883a 	mov	r7,r3
 4007ab4:	9009883a 	mov	r4,r18
 4007ab8:	980b883a 	mov	r5,r19
 4007abc:	4001dd40 	call	4001dd4 <__adddf3>
 4007ac0:	1009883a 	mov	r4,r2
 4007ac4:	180b883a 	mov	r5,r3
 4007ac8:	e13fe515 	stw	r4,-108(fp)
 4007acc:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 4007ad0:	e13fe517 	ldw	r4,-108(fp)
 4007ad4:	e17fe617 	ldw	r5,-104(fp)
 4007ad8:	4011e800 	call	4011e80 <__fixdfsi>
 4007adc:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 4007ae0:	000d883a 	mov	r6,zero
 4007ae4:	000f883a 	mov	r7,zero
 4007ae8:	e13fe517 	ldw	r4,-108(fp)
 4007aec:	e17fe617 	ldw	r5,-104(fp)
 4007af0:	40030cc0 	call	40030cc <__ledf2>
 4007af4:	10000d0e 	bge	r2,zero,4007b2c <_dtoa_r+0x428>
 4007af8:	e13fd717 	ldw	r4,-164(fp)
 4007afc:	4011f000 	call	4011f00 <__floatsidf>
 4007b00:	1011883a 	mov	r8,r2
 4007b04:	1813883a 	mov	r9,r3
 4007b08:	e1bfe517 	ldw	r6,-108(fp)
 4007b0c:	e1ffe617 	ldw	r7,-104(fp)
 4007b10:	4009883a 	mov	r4,r8
 4007b14:	480b883a 	mov	r5,r9
 4007b18:	4002f680 	call	4002f68 <__eqdf2>
 4007b1c:	10000326 	beq	r2,zero,4007b2c <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 4007b20:	e0bfd717 	ldw	r2,-164(fp)
 4007b24:	10bfffc4 	addi	r2,r2,-1
 4007b28:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 4007b2c:	00800044 	movi	r2,1
 4007b30:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 4007b34:	e0bfd717 	ldw	r2,-164(fp)
 4007b38:	10001616 	blt	r2,zero,4007b94 <_dtoa_r+0x490>
 4007b3c:	e0bfd717 	ldw	r2,-164(fp)
 4007b40:	108005c8 	cmpgei	r2,r2,23
 4007b44:	1000131e 	bne	r2,zero,4007b94 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 4007b48:	e0bff217 	ldw	r2,-56(fp)
 4007b4c:	e0fff317 	ldw	r3,-52(fp)
 4007b50:	01010074 	movhi	r4,1025
 4007b54:	2114b404 	addi	r4,r4,21200
 4007b58:	e17fd717 	ldw	r5,-164(fp)
 4007b5c:	280a90fa 	slli	r5,r5,3
 4007b60:	214d883a 	add	r6,r4,r5
 4007b64:	31000017 	ldw	r4,0(r6)
 4007b68:	31400117 	ldw	r5,4(r6)
 4007b6c:	200d883a 	mov	r6,r4
 4007b70:	280f883a 	mov	r7,r5
 4007b74:	1009883a 	mov	r4,r2
 4007b78:	180b883a 	mov	r5,r3
 4007b7c:	40030cc0 	call	40030cc <__ledf2>
 4007b80:	1000030e 	bge	r2,zero,4007b90 <_dtoa_r+0x48c>
	k--;
 4007b84:	e0bfd717 	ldw	r2,-164(fp)
 4007b88:	10bfffc4 	addi	r2,r2,-1
 4007b8c:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 4007b90:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 4007b94:	e0fff017 	ldw	r3,-64(fp)
 4007b98:	e0bfd217 	ldw	r2,-184(fp)
 4007b9c:	1885c83a 	sub	r2,r3,r2
 4007ba0:	10bfffc4 	addi	r2,r2,-1
 4007ba4:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 4007ba8:	e0bfd617 	ldw	r2,-168(fp)
 4007bac:	10000416 	blt	r2,zero,4007bc0 <_dtoa_r+0x4bc>
    {
      b2 = 0;
 4007bb0:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 4007bb4:	e0bfd617 	ldw	r2,-168(fp)
 4007bb8:	e0bfdc15 	stw	r2,-144(fp)
 4007bbc:	00000406 	br	4007bd0 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 4007bc0:	e0bfd617 	ldw	r2,-168(fp)
 4007bc4:	0085c83a 	sub	r2,zero,r2
 4007bc8:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 4007bcc:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 4007bd0:	e0bfd717 	ldw	r2,-164(fp)
 4007bd4:	10000816 	blt	r2,zero,4007bf8 <_dtoa_r+0x4f4>
    {
      b5 = 0;
 4007bd8:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 4007bdc:	e0bfd717 	ldw	r2,-164(fp)
 4007be0:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 4007be4:	e0ffdc17 	ldw	r3,-144(fp)
 4007be8:	e0bfd717 	ldw	r2,-164(fp)
 4007bec:	1885883a 	add	r2,r3,r2
 4007bf0:	e0bfdc15 	stw	r2,-144(fp)
 4007bf4:	00000806 	br	4007c18 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 4007bf8:	e0ffcf17 	ldw	r3,-196(fp)
 4007bfc:	e0bfd717 	ldw	r2,-164(fp)
 4007c00:	1885c83a 	sub	r2,r3,r2
 4007c04:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 4007c08:	e0bfd717 	ldw	r2,-164(fp)
 4007c0c:	0085c83a 	sub	r2,zero,r2
 4007c10:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 4007c14:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 4007c18:	e0bffb17 	ldw	r2,-20(fp)
 4007c1c:	10000316 	blt	r2,zero,4007c2c <_dtoa_r+0x528>
 4007c20:	e0bffb17 	ldw	r2,-20(fp)
 4007c24:	10800290 	cmplti	r2,r2,10
 4007c28:	1000011e 	bne	r2,zero,4007c30 <_dtoa_r+0x52c>
    mode = 0;
 4007c2c:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 4007c30:	00800044 	movi	r2,1
 4007c34:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 4007c38:	e0bffb17 	ldw	r2,-20(fp)
 4007c3c:	10800190 	cmplti	r2,r2,6
 4007c40:	1000041e 	bne	r2,zero,4007c54 <_dtoa_r+0x550>
    {
      mode -= 4;
 4007c44:	e0bffb17 	ldw	r2,-20(fp)
 4007c48:	10bfff04 	addi	r2,r2,-4
 4007c4c:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 4007c50:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 4007c54:	00800044 	movi	r2,1
 4007c58:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 4007c5c:	00bfffc4 	movi	r2,-1
 4007c60:	e0bfd515 	stw	r2,-172(fp)
 4007c64:	e0bfd517 	ldw	r2,-172(fp)
 4007c68:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 4007c6c:	e0bffb17 	ldw	r2,-20(fp)
 4007c70:	108001a8 	cmpgeui	r2,r2,6
 4007c74:	10002c1e 	bne	r2,zero,4007d28 <_dtoa_r+0x624>
 4007c78:	e0bffb17 	ldw	r2,-20(fp)
 4007c7c:	100690ba 	slli	r3,r2,2
 4007c80:	00810034 	movhi	r2,1024
 4007c84:	109f2504 	addi	r2,r2,31892
 4007c88:	1885883a 	add	r2,r3,r2
 4007c8c:	10800017 	ldw	r2,0(r2)
 4007c90:	1000683a 	jmp	r2
 4007c94:	04007cac 	andhi	r16,zero,498
 4007c98:	04007cac 	andhi	r16,zero,498
 4007c9c:	04007cbc 	xorhi	r16,zero,498
 4007ca0:	04007cec 	andhi	r16,zero,499
 4007ca4:	04007cc0 	call	4007cc <__reset-0x3bff834>
 4007ca8:	04007cf0 	cmpltui	r16,zero,499
    {
    case 0:
    case 1:
      i = 18;
 4007cac:	00800484 	movi	r2,18
 4007cb0:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 4007cb4:	e0000215 	stw	zero,8(fp)
      break;
 4007cb8:	00001b06 	br	4007d28 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 4007cbc:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 4007cc0:	e0800217 	ldw	r2,8(fp)
 4007cc4:	00800216 	blt	zero,r2,4007cd0 <_dtoa_r+0x5cc>
	ndigits = 1;
 4007cc8:	00800044 	movi	r2,1
 4007ccc:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 4007cd0:	e0800217 	ldw	r2,8(fp)
 4007cd4:	e0bfd215 	stw	r2,-184(fp)
 4007cd8:	e0bfd217 	ldw	r2,-184(fp)
 4007cdc:	e0bfd515 	stw	r2,-172(fp)
 4007ce0:	e0bfd517 	ldw	r2,-172(fp)
 4007ce4:	e0bfd415 	stw	r2,-176(fp)
      break;
 4007ce8:	00000f06 	br	4007d28 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 4007cec:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 4007cf0:	e0c00217 	ldw	r3,8(fp)
 4007cf4:	e0bfd717 	ldw	r2,-164(fp)
 4007cf8:	1885883a 	add	r2,r3,r2
 4007cfc:	10800044 	addi	r2,r2,1
 4007d00:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 4007d04:	e0bfd217 	ldw	r2,-184(fp)
 4007d08:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 4007d0c:	e0bfd217 	ldw	r2,-184(fp)
 4007d10:	10bfffc4 	addi	r2,r2,-1
 4007d14:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 4007d18:	e0bfd217 	ldw	r2,-184(fp)
 4007d1c:	00800216 	blt	zero,r2,4007d28 <_dtoa_r+0x624>
	i = 1;
 4007d20:	00800044 	movi	r2,1
 4007d24:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 4007d28:	00800104 	movi	r2,4
 4007d2c:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 4007d30:	e0bff817 	ldw	r2,-32(fp)
 4007d34:	10001115 	stw	zero,68(r2)
 4007d38:	00000806 	br	4007d5c <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 4007d3c:	e0bff817 	ldw	r2,-32(fp)
 4007d40:	10801117 	ldw	r2,68(r2)
 4007d44:	10c00044 	addi	r3,r2,1
 4007d48:	e0bff817 	ldw	r2,-32(fp)
 4007d4c:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 4007d50:	e0bfd617 	ldw	r2,-168(fp)
 4007d54:	1085883a 	add	r2,r2,r2
 4007d58:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 4007d5c:	e0bfd617 	ldw	r2,-168(fp)
 4007d60:	10800504 	addi	r2,r2,20
 4007d64:	e0ffd217 	ldw	r3,-184(fp)
 4007d68:	18bff42e 	bgeu	r3,r2,4007d3c <__alt_data_end+0xfc007d3c>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 4007d6c:	e0bff817 	ldw	r2,-32(fp)
 4007d70:	10801117 	ldw	r2,68(r2)
 4007d74:	100b883a 	mov	r5,r2
 4007d78:	e13ff817 	ldw	r4,-32(fp)
 4007d7c:	400c5540 	call	400c554 <_Balloc>
 4007d80:	1007883a 	mov	r3,r2
 4007d84:	e0bff817 	ldw	r2,-32(fp)
 4007d88:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 4007d8c:	e0bff817 	ldw	r2,-32(fp)
 4007d90:	10801017 	ldw	r2,64(r2)
 4007d94:	e0bfe915 	stw	r2,-92(fp)
 4007d98:	e0bfe917 	ldw	r2,-92(fp)
 4007d9c:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 4007da0:	e0bfd417 	ldw	r2,-176(fp)
 4007da4:	10021616 	blt	r2,zero,4008600 <_dtoa_r+0xefc>
 4007da8:	e0bfd417 	ldw	r2,-176(fp)
 4007dac:	108003c8 	cmpgei	r2,r2,15
 4007db0:	1002131e 	bne	r2,zero,4008600 <_dtoa_r+0xefc>
 4007db4:	e0bfdf17 	ldw	r2,-132(fp)
 4007db8:	10021126 	beq	r2,zero,4008600 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 4007dbc:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 4007dc0:	e0bff217 	ldw	r2,-56(fp)
 4007dc4:	e0fff317 	ldw	r3,-52(fp)
 4007dc8:	e0bff415 	stw	r2,-48(fp)
 4007dcc:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 4007dd0:	e0bfd717 	ldw	r2,-164(fp)
 4007dd4:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 4007dd8:	e0bfd417 	ldw	r2,-176(fp)
 4007ddc:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 4007de0:	00800084 	movi	r2,2
 4007de4:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 4007de8:	e0bfd717 	ldw	r2,-164(fp)
 4007dec:	0080540e 	bge	zero,r2,4007f40 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 4007df0:	e0bfd717 	ldw	r2,-164(fp)
 4007df4:	10c003cc 	andi	r3,r2,15
 4007df8:	00810074 	movhi	r2,1025
 4007dfc:	1094b404 	addi	r2,r2,21200
 4007e00:	180690fa 	slli	r3,r3,3
 4007e04:	10c5883a 	add	r2,r2,r3
 4007e08:	10c00017 	ldw	r3,0(r2)
 4007e0c:	e0ffe515 	stw	r3,-108(fp)
 4007e10:	10800117 	ldw	r2,4(r2)
 4007e14:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 4007e18:	e0bfd717 	ldw	r2,-164(fp)
 4007e1c:	1005d13a 	srai	r2,r2,4
 4007e20:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 4007e24:	e0bfd617 	ldw	r2,-168(fp)
 4007e28:	1080040c 	andi	r2,r2,16
 4007e2c:	10003426 	beq	r2,zero,4007f00 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 4007e30:	e0bfd617 	ldw	r2,-168(fp)
 4007e34:	108003cc 	andi	r2,r2,15
 4007e38:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 4007e3c:	e0bff217 	ldw	r2,-56(fp)
 4007e40:	e0fff317 	ldw	r3,-52(fp)
 4007e44:	01810074 	movhi	r6,1025
 4007e48:	3194e604 	addi	r6,r6,21400
 4007e4c:	31000817 	ldw	r4,32(r6)
 4007e50:	31400917 	ldw	r5,36(r6)
 4007e54:	200d883a 	mov	r6,r4
 4007e58:	280f883a 	mov	r7,r5
 4007e5c:	1009883a 	mov	r4,r2
 4007e60:	180b883a 	mov	r5,r3
 4007e64:	40026800 	call	4002680 <__divdf3>
 4007e68:	1009883a 	mov	r4,r2
 4007e6c:	180b883a 	mov	r5,r3
 4007e70:	2005883a 	mov	r2,r4
 4007e74:	2807883a 	mov	r3,r5
 4007e78:	e0bff215 	stw	r2,-56(fp)
 4007e7c:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 4007e80:	e0bfd317 	ldw	r2,-180(fp)
 4007e84:	10800044 	addi	r2,r2,1
 4007e88:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 4007e8c:	00001c06 	br	4007f00 <_dtoa_r+0x7fc>
	    if (j & 1)
 4007e90:	e0bfd617 	ldw	r2,-168(fp)
 4007e94:	1080004c 	andi	r2,r2,1
 4007e98:	10001326 	beq	r2,zero,4007ee8 <_dtoa_r+0x7e4>
	      {
		ieps++;
 4007e9c:	e0bfd317 	ldw	r2,-180(fp)
 4007ea0:	10800044 	addi	r2,r2,1
 4007ea4:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 4007ea8:	00810074 	movhi	r2,1025
 4007eac:	1094e604 	addi	r2,r2,21400
 4007eb0:	e0ffd217 	ldw	r3,-184(fp)
 4007eb4:	180690fa 	slli	r3,r3,3
 4007eb8:	10c9883a 	add	r4,r2,r3
 4007ebc:	20800017 	ldw	r2,0(r4)
 4007ec0:	20c00117 	ldw	r3,4(r4)
 4007ec4:	100d883a 	mov	r6,r2
 4007ec8:	180f883a 	mov	r7,r3
 4007ecc:	e13fe517 	ldw	r4,-108(fp)
 4007ed0:	e17fe617 	ldw	r5,-104(fp)
 4007ed4:	40031c00 	call	40031c0 <__muldf3>
 4007ed8:	1009883a 	mov	r4,r2
 4007edc:	180b883a 	mov	r5,r3
 4007ee0:	e13fe515 	stw	r4,-108(fp)
 4007ee4:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 4007ee8:	e0bfd617 	ldw	r2,-168(fp)
 4007eec:	1005d07a 	srai	r2,r2,1
 4007ef0:	e0bfd615 	stw	r2,-168(fp)
 4007ef4:	e0bfd217 	ldw	r2,-184(fp)
 4007ef8:	10800044 	addi	r2,r2,1
 4007efc:	e0bfd215 	stw	r2,-184(fp)
 4007f00:	e0bfd617 	ldw	r2,-168(fp)
 4007f04:	103fe21e 	bne	r2,zero,4007e90 <__alt_data_end+0xfc007e90>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 4007f08:	e0bff217 	ldw	r2,-56(fp)
 4007f0c:	e0fff317 	ldw	r3,-52(fp)
 4007f10:	e1bfe517 	ldw	r6,-108(fp)
 4007f14:	e1ffe617 	ldw	r7,-104(fp)
 4007f18:	1009883a 	mov	r4,r2
 4007f1c:	180b883a 	mov	r5,r3
 4007f20:	40026800 	call	4002680 <__divdf3>
 4007f24:	1009883a 	mov	r4,r2
 4007f28:	180b883a 	mov	r5,r3
 4007f2c:	2005883a 	mov	r2,r4
 4007f30:	2807883a 	mov	r3,r5
 4007f34:	e0bff215 	stw	r2,-56(fp)
 4007f38:	e0fff315 	stw	r3,-52(fp)
 4007f3c:	00004006 	br	4008040 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 4007f40:	e0bfd717 	ldw	r2,-164(fp)
 4007f44:	0085c83a 	sub	r2,zero,r2
 4007f48:	e0bfec15 	stw	r2,-80(fp)
 4007f4c:	e0bfec17 	ldw	r2,-80(fp)
 4007f50:	10003b26 	beq	r2,zero,4008040 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 4007f54:	e0bff217 	ldw	r2,-56(fp)
 4007f58:	e0fff317 	ldw	r3,-52(fp)
 4007f5c:	e13fec17 	ldw	r4,-80(fp)
 4007f60:	214003cc 	andi	r5,r4,15
 4007f64:	01010074 	movhi	r4,1025
 4007f68:	2114b404 	addi	r4,r4,21200
 4007f6c:	280a90fa 	slli	r5,r5,3
 4007f70:	214d883a 	add	r6,r4,r5
 4007f74:	31000017 	ldw	r4,0(r6)
 4007f78:	31400117 	ldw	r5,4(r6)
 4007f7c:	200d883a 	mov	r6,r4
 4007f80:	280f883a 	mov	r7,r5
 4007f84:	1009883a 	mov	r4,r2
 4007f88:	180b883a 	mov	r5,r3
 4007f8c:	40031c00 	call	40031c0 <__muldf3>
 4007f90:	1009883a 	mov	r4,r2
 4007f94:	180b883a 	mov	r5,r3
 4007f98:	2005883a 	mov	r2,r4
 4007f9c:	2807883a 	mov	r3,r5
 4007fa0:	e0bff215 	stw	r2,-56(fp)
 4007fa4:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 4007fa8:	e0bfec17 	ldw	r2,-80(fp)
 4007fac:	1005d13a 	srai	r2,r2,4
 4007fb0:	e0bfd615 	stw	r2,-168(fp)
 4007fb4:	00002006 	br	4008038 <_dtoa_r+0x934>
	    if (j & 1)
 4007fb8:	e0bfd617 	ldw	r2,-168(fp)
 4007fbc:	1080004c 	andi	r2,r2,1
 4007fc0:	10001726 	beq	r2,zero,4008020 <_dtoa_r+0x91c>
	      {
		ieps++;
 4007fc4:	e0bfd317 	ldw	r2,-180(fp)
 4007fc8:	10800044 	addi	r2,r2,1
 4007fcc:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 4007fd0:	e0bff217 	ldw	r2,-56(fp)
 4007fd4:	e0fff317 	ldw	r3,-52(fp)
 4007fd8:	01010074 	movhi	r4,1025
 4007fdc:	2114e604 	addi	r4,r4,21400
 4007fe0:	e17fd217 	ldw	r5,-184(fp)
 4007fe4:	280a90fa 	slli	r5,r5,3
 4007fe8:	214d883a 	add	r6,r4,r5
 4007fec:	31000017 	ldw	r4,0(r6)
 4007ff0:	31400117 	ldw	r5,4(r6)
 4007ff4:	200d883a 	mov	r6,r4
 4007ff8:	280f883a 	mov	r7,r5
 4007ffc:	1009883a 	mov	r4,r2
 4008000:	180b883a 	mov	r5,r3
 4008004:	40031c00 	call	40031c0 <__muldf3>
 4008008:	1009883a 	mov	r4,r2
 400800c:	180b883a 	mov	r5,r3
 4008010:	2005883a 	mov	r2,r4
 4008014:	2807883a 	mov	r3,r5
 4008018:	e0bff215 	stw	r2,-56(fp)
 400801c:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 4008020:	e0bfd617 	ldw	r2,-168(fp)
 4008024:	1005d07a 	srai	r2,r2,1
 4008028:	e0bfd615 	stw	r2,-168(fp)
 400802c:	e0bfd217 	ldw	r2,-184(fp)
 4008030:	10800044 	addi	r2,r2,1
 4008034:	e0bfd215 	stw	r2,-184(fp)
 4008038:	e0bfd617 	ldw	r2,-168(fp)
 400803c:	103fde1e 	bne	r2,zero,4007fb8 <__alt_data_end+0xfc007fb8>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 4008040:	e0bfd817 	ldw	r2,-160(fp)
 4008044:	10002126 	beq	r2,zero,40080cc <_dtoa_r+0x9c8>
 4008048:	e0bff217 	ldw	r2,-56(fp)
 400804c:	e0fff317 	ldw	r3,-52(fp)
 4008050:	000d883a 	mov	r6,zero
 4008054:	01cffc34 	movhi	r7,16368
 4008058:	1009883a 	mov	r4,r2
 400805c:	180b883a 	mov	r5,r3
 4008060:	40030cc0 	call	40030cc <__ledf2>
 4008064:	1000190e 	bge	r2,zero,40080cc <_dtoa_r+0x9c8>
 4008068:	e0bfd417 	ldw	r2,-176(fp)
 400806c:	0080170e 	bge	zero,r2,40080cc <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 4008070:	e0bfd517 	ldw	r2,-172(fp)
 4008074:	0081550e 	bge	zero,r2,40085cc <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 4008078:	e0bfd517 	ldw	r2,-172(fp)
 400807c:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 4008080:	e0bfd717 	ldw	r2,-164(fp)
 4008084:	10bfffc4 	addi	r2,r2,-1
 4008088:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 400808c:	e0bff217 	ldw	r2,-56(fp)
 4008090:	e0fff317 	ldw	r3,-52(fp)
 4008094:	000d883a 	mov	r6,zero
 4008098:	01d00934 	movhi	r7,16420
 400809c:	1009883a 	mov	r4,r2
 40080a0:	180b883a 	mov	r5,r3
 40080a4:	40031c00 	call	40031c0 <__muldf3>
 40080a8:	1009883a 	mov	r4,r2
 40080ac:	180b883a 	mov	r5,r3
 40080b0:	2005883a 	mov	r2,r4
 40080b4:	2807883a 	mov	r3,r5
 40080b8:	e0bff215 	stw	r2,-56(fp)
 40080bc:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 40080c0:	e0bfd317 	ldw	r2,-180(fp)
 40080c4:	10800044 	addi	r2,r2,1
 40080c8:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 40080cc:	e13fd317 	ldw	r4,-180(fp)
 40080d0:	4011f000 	call	4011f00 <__floatsidf>
 40080d4:	1011883a 	mov	r8,r2
 40080d8:	1813883a 	mov	r9,r3
 40080dc:	e0bff217 	ldw	r2,-56(fp)
 40080e0:	e0fff317 	ldw	r3,-52(fp)
 40080e4:	100d883a 	mov	r6,r2
 40080e8:	180f883a 	mov	r7,r3
 40080ec:	4009883a 	mov	r4,r8
 40080f0:	480b883a 	mov	r5,r9
 40080f4:	40031c00 	call	40031c0 <__muldf3>
 40080f8:	1009883a 	mov	r4,r2
 40080fc:	180b883a 	mov	r5,r3
 4008100:	2005883a 	mov	r2,r4
 4008104:	2807883a 	mov	r3,r5
 4008108:	000d883a 	mov	r6,zero
 400810c:	01d00734 	movhi	r7,16412
 4008110:	1009883a 	mov	r4,r2
 4008114:	180b883a 	mov	r5,r3
 4008118:	4001dd40 	call	4001dd4 <__adddf3>
 400811c:	1009883a 	mov	r4,r2
 4008120:	180b883a 	mov	r5,r3
 4008124:	2005883a 	mov	r2,r4
 4008128:	2807883a 	mov	r3,r5
 400812c:	e0bff615 	stw	r2,-40(fp)
 4008130:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 4008134:	e0fff717 	ldw	r3,-36(fp)
 4008138:	00bf3034 	movhi	r2,64704
 400813c:	1885883a 	add	r2,r3,r2
 4008140:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 4008144:	e0bfd417 	ldw	r2,-176(fp)
 4008148:	1000271e 	bne	r2,zero,40081e8 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 400814c:	e03fe315 	stw	zero,-116(fp)
 4008150:	e0bfe317 	ldw	r2,-116(fp)
 4008154:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 4008158:	e0bff217 	ldw	r2,-56(fp)
 400815c:	e0fff317 	ldw	r3,-52(fp)
 4008160:	000d883a 	mov	r6,zero
 4008164:	01d00534 	movhi	r7,16404
 4008168:	1009883a 	mov	r4,r2
 400816c:	180b883a 	mov	r5,r3
 4008170:	40038d80 	call	40038d8 <__subdf3>
 4008174:	1009883a 	mov	r4,r2
 4008178:	180b883a 	mov	r5,r3
 400817c:	2005883a 	mov	r2,r4
 4008180:	2807883a 	mov	r3,r5
 4008184:	e0bff215 	stw	r2,-56(fp)
 4008188:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 400818c:	e0bff217 	ldw	r2,-56(fp)
 4008190:	e0fff317 	ldw	r3,-52(fp)
 4008194:	e13ff617 	ldw	r4,-40(fp)
 4008198:	e17ff717 	ldw	r5,-36(fp)
 400819c:	200d883a 	mov	r6,r4
 40081a0:	280f883a 	mov	r7,r5
 40081a4:	1009883a 	mov	r4,r2
 40081a8:	180b883a 	mov	r5,r3
 40081ac:	4002ff00 	call	4002ff0 <__gedf2>
 40081b0:	0082eb16 	blt	zero,r2,4008d60 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 40081b4:	e23ff217 	ldw	r8,-56(fp)
 40081b8:	e27ff317 	ldw	r9,-52(fp)
 40081bc:	e0bff617 	ldw	r2,-40(fp)
 40081c0:	e0fff717 	ldw	r3,-36(fp)
 40081c4:	1021883a 	mov	r16,r2
 40081c8:	1c60003c 	xorhi	r17,r3,32768
 40081cc:	800d883a 	mov	r6,r16
 40081d0:	880f883a 	mov	r7,r17
 40081d4:	4009883a 	mov	r4,r8
 40081d8:	480b883a 	mov	r5,r9
 40081dc:	40030cc0 	call	40030cc <__ledf2>
 40081e0:	1002da16 	blt	r2,zero,4008d4c <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 40081e4:	0000fc06 	br	40085d8 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 40081e8:	e0bfd917 	ldw	r2,-156(fp)
 40081ec:	10007a26 	beq	r2,zero,40083d8 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 40081f0:	e0bfd417 	ldw	r2,-176(fp)
 40081f4:	10ffffc4 	addi	r3,r2,-1
 40081f8:	00810074 	movhi	r2,1025
 40081fc:	1094b404 	addi	r2,r2,21200
 4008200:	180690fa 	slli	r3,r3,3
 4008204:	10c9883a 	add	r4,r2,r3
 4008208:	20800017 	ldw	r2,0(r4)
 400820c:	20c00117 	ldw	r3,4(r4)
 4008210:	100d883a 	mov	r6,r2
 4008214:	180f883a 	mov	r7,r3
 4008218:	0009883a 	mov	r4,zero
 400821c:	014ff834 	movhi	r5,16352
 4008220:	40026800 	call	4002680 <__divdf3>
 4008224:	1009883a 	mov	r4,r2
 4008228:	180b883a 	mov	r5,r3
 400822c:	2011883a 	mov	r8,r4
 4008230:	2813883a 	mov	r9,r5
 4008234:	e0bff617 	ldw	r2,-40(fp)
 4008238:	e0fff717 	ldw	r3,-36(fp)
 400823c:	100d883a 	mov	r6,r2
 4008240:	180f883a 	mov	r7,r3
 4008244:	4009883a 	mov	r4,r8
 4008248:	480b883a 	mov	r5,r9
 400824c:	40038d80 	call	40038d8 <__subdf3>
 4008250:	1009883a 	mov	r4,r2
 4008254:	180b883a 	mov	r5,r3
 4008258:	2005883a 	mov	r2,r4
 400825c:	2807883a 	mov	r3,r5
 4008260:	e0bff615 	stw	r2,-40(fp)
 4008264:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 4008268:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 400826c:	e0bff217 	ldw	r2,-56(fp)
 4008270:	e0fff317 	ldw	r3,-52(fp)
 4008274:	1009883a 	mov	r4,r2
 4008278:	180b883a 	mov	r5,r3
 400827c:	4011e800 	call	4011e80 <__fixdfsi>
 4008280:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 4008284:	e43ff217 	ldw	r16,-56(fp)
 4008288:	e47ff317 	ldw	r17,-52(fp)
 400828c:	e13fed17 	ldw	r4,-76(fp)
 4008290:	4011f000 	call	4011f00 <__floatsidf>
 4008294:	1009883a 	mov	r4,r2
 4008298:	180b883a 	mov	r5,r3
 400829c:	200d883a 	mov	r6,r4
 40082a0:	280f883a 	mov	r7,r5
 40082a4:	8009883a 	mov	r4,r16
 40082a8:	880b883a 	mov	r5,r17
 40082ac:	40038d80 	call	40038d8 <__subdf3>
 40082b0:	1009883a 	mov	r4,r2
 40082b4:	180b883a 	mov	r5,r3
 40082b8:	2005883a 	mov	r2,r4
 40082bc:	2807883a 	mov	r3,r5
 40082c0:	e0bff215 	stw	r2,-56(fp)
 40082c4:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 40082c8:	e0bfe717 	ldw	r2,-100(fp)
 40082cc:	10c00044 	addi	r3,r2,1
 40082d0:	e0ffe715 	stw	r3,-100(fp)
 40082d4:	e0ffed17 	ldw	r3,-76(fp)
 40082d8:	18c00c04 	addi	r3,r3,48
 40082dc:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 40082e0:	e0bff217 	ldw	r2,-56(fp)
 40082e4:	e0fff317 	ldw	r3,-52(fp)
 40082e8:	e13ff617 	ldw	r4,-40(fp)
 40082ec:	e17ff717 	ldw	r5,-36(fp)
 40082f0:	200d883a 	mov	r6,r4
 40082f4:	280f883a 	mov	r7,r5
 40082f8:	1009883a 	mov	r4,r2
 40082fc:	180b883a 	mov	r5,r3
 4008300:	40030cc0 	call	40030cc <__ledf2>
 4008304:	1003c416 	blt	r2,zero,4009218 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 4008308:	e0bff217 	ldw	r2,-56(fp)
 400830c:	e0fff317 	ldw	r3,-52(fp)
 4008310:	100d883a 	mov	r6,r2
 4008314:	180f883a 	mov	r7,r3
 4008318:	0009883a 	mov	r4,zero
 400831c:	014ffc34 	movhi	r5,16368
 4008320:	40038d80 	call	40038d8 <__subdf3>
 4008324:	1009883a 	mov	r4,r2
 4008328:	180b883a 	mov	r5,r3
 400832c:	2011883a 	mov	r8,r4
 4008330:	2813883a 	mov	r9,r5
 4008334:	e0bff617 	ldw	r2,-40(fp)
 4008338:	e0fff717 	ldw	r3,-36(fp)
 400833c:	100d883a 	mov	r6,r2
 4008340:	180f883a 	mov	r7,r3
 4008344:	4009883a 	mov	r4,r8
 4008348:	480b883a 	mov	r5,r9
 400834c:	40030cc0 	call	40030cc <__ledf2>
 4008350:	10012916 	blt	r2,zero,40087f8 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 4008354:	e0bfd217 	ldw	r2,-184(fp)
 4008358:	10800044 	addi	r2,r2,1
 400835c:	e0bfd215 	stw	r2,-184(fp)
 4008360:	e0ffd217 	ldw	r3,-184(fp)
 4008364:	e0bfd417 	ldw	r2,-176(fp)
 4008368:	18809a0e 	bge	r3,r2,40085d4 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 400836c:	e0bff617 	ldw	r2,-40(fp)
 4008370:	e0fff717 	ldw	r3,-36(fp)
 4008374:	000d883a 	mov	r6,zero
 4008378:	01d00934 	movhi	r7,16420
 400837c:	1009883a 	mov	r4,r2
 4008380:	180b883a 	mov	r5,r3
 4008384:	40031c00 	call	40031c0 <__muldf3>
 4008388:	1009883a 	mov	r4,r2
 400838c:	180b883a 	mov	r5,r3
 4008390:	2005883a 	mov	r2,r4
 4008394:	2807883a 	mov	r3,r5
 4008398:	e0bff615 	stw	r2,-40(fp)
 400839c:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 40083a0:	e0bff217 	ldw	r2,-56(fp)
 40083a4:	e0fff317 	ldw	r3,-52(fp)
 40083a8:	000d883a 	mov	r6,zero
 40083ac:	01d00934 	movhi	r7,16420
 40083b0:	1009883a 	mov	r4,r2
 40083b4:	180b883a 	mov	r5,r3
 40083b8:	40031c00 	call	40031c0 <__muldf3>
 40083bc:	1009883a 	mov	r4,r2
 40083c0:	180b883a 	mov	r5,r3
 40083c4:	2005883a 	mov	r2,r4
 40083c8:	2807883a 	mov	r3,r5
 40083cc:	e0bff215 	stw	r2,-56(fp)
 40083d0:	e0fff315 	stw	r3,-52(fp)
	    }
 40083d4:	003fa506 	br	400826c <__alt_data_end+0xfc00826c>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 40083d8:	e0bff617 	ldw	r2,-40(fp)
 40083dc:	e0fff717 	ldw	r3,-36(fp)
 40083e0:	e13fd417 	ldw	r4,-176(fp)
 40083e4:	217fffc4 	addi	r5,r4,-1
 40083e8:	01010074 	movhi	r4,1025
 40083ec:	2114b404 	addi	r4,r4,21200
 40083f0:	280a90fa 	slli	r5,r5,3
 40083f4:	214d883a 	add	r6,r4,r5
 40083f8:	31000017 	ldw	r4,0(r6)
 40083fc:	31400117 	ldw	r5,4(r6)
 4008400:	200d883a 	mov	r6,r4
 4008404:	280f883a 	mov	r7,r5
 4008408:	1009883a 	mov	r4,r2
 400840c:	180b883a 	mov	r5,r3
 4008410:	40031c00 	call	40031c0 <__muldf3>
 4008414:	1009883a 	mov	r4,r2
 4008418:	180b883a 	mov	r5,r3
 400841c:	2005883a 	mov	r2,r4
 4008420:	2807883a 	mov	r3,r5
 4008424:	e0bff615 	stw	r2,-40(fp)
 4008428:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 400842c:	00800044 	movi	r2,1
 4008430:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 4008434:	e0bff217 	ldw	r2,-56(fp)
 4008438:	e0fff317 	ldw	r3,-52(fp)
 400843c:	1009883a 	mov	r4,r2
 4008440:	180b883a 	mov	r5,r3
 4008444:	4011e800 	call	4011e80 <__fixdfsi>
 4008448:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 400844c:	e43ff217 	ldw	r16,-56(fp)
 4008450:	e47ff317 	ldw	r17,-52(fp)
 4008454:	e13fed17 	ldw	r4,-76(fp)
 4008458:	4011f000 	call	4011f00 <__floatsidf>
 400845c:	1009883a 	mov	r4,r2
 4008460:	180b883a 	mov	r5,r3
 4008464:	200d883a 	mov	r6,r4
 4008468:	280f883a 	mov	r7,r5
 400846c:	8009883a 	mov	r4,r16
 4008470:	880b883a 	mov	r5,r17
 4008474:	40038d80 	call	40038d8 <__subdf3>
 4008478:	1009883a 	mov	r4,r2
 400847c:	180b883a 	mov	r5,r3
 4008480:	2005883a 	mov	r2,r4
 4008484:	2807883a 	mov	r3,r5
 4008488:	e0bff215 	stw	r2,-56(fp)
 400848c:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 4008490:	e0bfe717 	ldw	r2,-100(fp)
 4008494:	10c00044 	addi	r3,r2,1
 4008498:	e0ffe715 	stw	r3,-100(fp)
 400849c:	e0ffed17 	ldw	r3,-76(fp)
 40084a0:	18c00c04 	addi	r3,r3,48
 40084a4:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 40084a8:	e0ffd217 	ldw	r3,-184(fp)
 40084ac:	e0bfd417 	ldw	r2,-176(fp)
 40084b0:	1880351e 	bne	r3,r2,4008588 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 40084b4:	e43ff217 	ldw	r16,-56(fp)
 40084b8:	e47ff317 	ldw	r17,-52(fp)
 40084bc:	e0bff617 	ldw	r2,-40(fp)
 40084c0:	e0fff717 	ldw	r3,-36(fp)
 40084c4:	000d883a 	mov	r6,zero
 40084c8:	01cff834 	movhi	r7,16352
 40084cc:	1009883a 	mov	r4,r2
 40084d0:	180b883a 	mov	r5,r3
 40084d4:	4001dd40 	call	4001dd4 <__adddf3>
 40084d8:	1009883a 	mov	r4,r2
 40084dc:	180b883a 	mov	r5,r3
 40084e0:	2005883a 	mov	r2,r4
 40084e4:	2807883a 	mov	r3,r5
 40084e8:	100d883a 	mov	r6,r2
 40084ec:	180f883a 	mov	r7,r3
 40084f0:	8009883a 	mov	r4,r16
 40084f4:	880b883a 	mov	r5,r17
 40084f8:	4002ff00 	call	4002ff0 <__gedf2>
 40084fc:	0080c016 	blt	zero,r2,4008800 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 4008500:	e43ff217 	ldw	r16,-56(fp)
 4008504:	e47ff317 	ldw	r17,-52(fp)
 4008508:	e0bff617 	ldw	r2,-40(fp)
 400850c:	e0fff717 	ldw	r3,-36(fp)
 4008510:	100d883a 	mov	r6,r2
 4008514:	180f883a 	mov	r7,r3
 4008518:	0009883a 	mov	r4,zero
 400851c:	014ff834 	movhi	r5,16352
 4008520:	40038d80 	call	40038d8 <__subdf3>
 4008524:	1009883a 	mov	r4,r2
 4008528:	180b883a 	mov	r5,r3
 400852c:	2005883a 	mov	r2,r4
 4008530:	2807883a 	mov	r3,r5
 4008534:	100d883a 	mov	r6,r2
 4008538:	180f883a 	mov	r7,r3
 400853c:	8009883a 	mov	r4,r16
 4008540:	880b883a 	mov	r5,r17
 4008544:	40030cc0 	call	40030cc <__ledf2>
 4008548:	10000116 	blt	r2,zero,4008550 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 400854c:	00002206 	br	40085d8 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 4008550:	e0bfe717 	ldw	r2,-100(fp)
 4008554:	10bfffc4 	addi	r2,r2,-1
 4008558:	e0bfe715 	stw	r2,-100(fp)
 400855c:	e0bfe717 	ldw	r2,-100(fp)
 4008560:	10800003 	ldbu	r2,0(r2)
 4008564:	10803fcc 	andi	r2,r2,255
 4008568:	1080201c 	xori	r2,r2,128
 400856c:	10bfe004 	addi	r2,r2,-128
 4008570:	10800c20 	cmpeqi	r2,r2,48
 4008574:	103ff61e 	bne	r2,zero,4008550 <__alt_data_end+0xfc008550>
		      s++;
 4008578:	e0bfe717 	ldw	r2,-100(fp)
 400857c:	10800044 	addi	r2,r2,1
 4008580:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 4008584:	00032506 	br	400921c <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 4008588:	e0bfd217 	ldw	r2,-184(fp)
 400858c:	10800044 	addi	r2,r2,1
 4008590:	e0bfd215 	stw	r2,-184(fp)
 4008594:	e0bff217 	ldw	r2,-56(fp)
 4008598:	e0fff317 	ldw	r3,-52(fp)
 400859c:	000d883a 	mov	r6,zero
 40085a0:	01d00934 	movhi	r7,16420
 40085a4:	1009883a 	mov	r4,r2
 40085a8:	180b883a 	mov	r5,r3
 40085ac:	40031c00 	call	40031c0 <__muldf3>
 40085b0:	1009883a 	mov	r4,r2
 40085b4:	180b883a 	mov	r5,r3
 40085b8:	2005883a 	mov	r2,r4
 40085bc:	2807883a 	mov	r3,r5
 40085c0:	e0bff215 	stw	r2,-56(fp)
 40085c4:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 40085c8:	003f9a06 	br	4008434 <__alt_data_end+0xfc008434>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 40085cc:	0001883a 	nop
 40085d0:	00000106 	br	40085d8 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 40085d4:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 40085d8:	e0bfe917 	ldw	r2,-92(fp)
 40085dc:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 40085e0:	e0bff417 	ldw	r2,-48(fp)
 40085e4:	e0fff517 	ldw	r3,-44(fp)
 40085e8:	e0bff215 	stw	r2,-56(fp)
 40085ec:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 40085f0:	e0bfea17 	ldw	r2,-88(fp)
 40085f4:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 40085f8:	e0bfeb17 	ldw	r2,-84(fp)
 40085fc:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 4008600:	e0bff117 	ldw	r2,-60(fp)
 4008604:	1000b816 	blt	r2,zero,40088e8 <_dtoa_r+0x11e4>
 4008608:	e0bfd717 	ldw	r2,-164(fp)
 400860c:	108003c8 	cmpgei	r2,r2,15
 4008610:	1000b51e 	bne	r2,zero,40088e8 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 4008614:	00810074 	movhi	r2,1025
 4008618:	1094b404 	addi	r2,r2,21200
 400861c:	e0ffd717 	ldw	r3,-164(fp)
 4008620:	180690fa 	slli	r3,r3,3
 4008624:	10c5883a 	add	r2,r2,r3
 4008628:	10c00017 	ldw	r3,0(r2)
 400862c:	e0ffe515 	stw	r3,-108(fp)
 4008630:	10800117 	ldw	r2,4(r2)
 4008634:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 4008638:	e0800217 	ldw	r2,8(fp)
 400863c:	1000190e 	bge	r2,zero,40086a4 <_dtoa_r+0xfa0>
 4008640:	e0bfd417 	ldw	r2,-176(fp)
 4008644:	00801716 	blt	zero,r2,40086a4 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 4008648:	e03fe315 	stw	zero,-116(fp)
 400864c:	e0bfe317 	ldw	r2,-116(fp)
 4008650:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 4008654:	e0bfd417 	ldw	r2,-176(fp)
 4008658:	1001bd16 	blt	r2,zero,4008d50 <_dtoa_r+0x164c>
 400865c:	e43ff217 	ldw	r16,-56(fp)
 4008660:	e47ff317 	ldw	r17,-52(fp)
 4008664:	000d883a 	mov	r6,zero
 4008668:	01d00534 	movhi	r7,16404
 400866c:	e13fe517 	ldw	r4,-108(fp)
 4008670:	e17fe617 	ldw	r5,-104(fp)
 4008674:	40031c00 	call	40031c0 <__muldf3>
 4008678:	1009883a 	mov	r4,r2
 400867c:	180b883a 	mov	r5,r3
 4008680:	2005883a 	mov	r2,r4
 4008684:	2807883a 	mov	r3,r5
 4008688:	100d883a 	mov	r6,r2
 400868c:	180f883a 	mov	r7,r3
 4008690:	8009883a 	mov	r4,r16
 4008694:	880b883a 	mov	r5,r17
 4008698:	40030cc0 	call	40030cc <__ledf2>
 400869c:	0081ac0e 	bge	zero,r2,4008d50 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 40086a0:	0001b006 	br	4008d64 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 40086a4:	00800044 	movi	r2,1
 40086a8:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 40086ac:	e0bff217 	ldw	r2,-56(fp)
 40086b0:	e0fff317 	ldw	r3,-52(fp)
 40086b4:	e1bfe517 	ldw	r6,-108(fp)
 40086b8:	e1ffe617 	ldw	r7,-104(fp)
 40086bc:	1009883a 	mov	r4,r2
 40086c0:	180b883a 	mov	r5,r3
 40086c4:	40026800 	call	4002680 <__divdf3>
 40086c8:	1009883a 	mov	r4,r2
 40086cc:	180b883a 	mov	r5,r3
 40086d0:	2005883a 	mov	r2,r4
 40086d4:	2807883a 	mov	r3,r5
 40086d8:	1009883a 	mov	r4,r2
 40086dc:	180b883a 	mov	r5,r3
 40086e0:	4011e800 	call	4011e80 <__fixdfsi>
 40086e4:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 40086e8:	e43ff217 	ldw	r16,-56(fp)
 40086ec:	e47ff317 	ldw	r17,-52(fp)
 40086f0:	e13fed17 	ldw	r4,-76(fp)
 40086f4:	4011f000 	call	4011f00 <__floatsidf>
 40086f8:	1011883a 	mov	r8,r2
 40086fc:	1813883a 	mov	r9,r3
 4008700:	e1bfe517 	ldw	r6,-108(fp)
 4008704:	e1ffe617 	ldw	r7,-104(fp)
 4008708:	4009883a 	mov	r4,r8
 400870c:	480b883a 	mov	r5,r9
 4008710:	40031c00 	call	40031c0 <__muldf3>
 4008714:	1009883a 	mov	r4,r2
 4008718:	180b883a 	mov	r5,r3
 400871c:	2005883a 	mov	r2,r4
 4008720:	2807883a 	mov	r3,r5
 4008724:	100d883a 	mov	r6,r2
 4008728:	180f883a 	mov	r7,r3
 400872c:	8009883a 	mov	r4,r16
 4008730:	880b883a 	mov	r5,r17
 4008734:	40038d80 	call	40038d8 <__subdf3>
 4008738:	1009883a 	mov	r4,r2
 400873c:	180b883a 	mov	r5,r3
 4008740:	2005883a 	mov	r2,r4
 4008744:	2807883a 	mov	r3,r5
 4008748:	e0bff215 	stw	r2,-56(fp)
 400874c:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 4008750:	e0bfe717 	ldw	r2,-100(fp)
 4008754:	10c00044 	addi	r3,r2,1
 4008758:	e0ffe715 	stw	r3,-100(fp)
 400875c:	e0ffed17 	ldw	r3,-76(fp)
 4008760:	18c00c04 	addi	r3,r3,48
 4008764:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 4008768:	e0ffd217 	ldw	r3,-184(fp)
 400876c:	e0bfd417 	ldw	r2,-176(fp)
 4008770:	1880401e 	bne	r3,r2,4008874 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 4008774:	e0bff217 	ldw	r2,-56(fp)
 4008778:	e0fff317 	ldw	r3,-52(fp)
 400877c:	100d883a 	mov	r6,r2
 4008780:	180f883a 	mov	r7,r3
 4008784:	1009883a 	mov	r4,r2
 4008788:	180b883a 	mov	r5,r3
 400878c:	4001dd40 	call	4001dd4 <__adddf3>
 4008790:	1009883a 	mov	r4,r2
 4008794:	180b883a 	mov	r5,r3
 4008798:	2005883a 	mov	r2,r4
 400879c:	2807883a 	mov	r3,r5
 40087a0:	e0bff215 	stw	r2,-56(fp)
 40087a4:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 40087a8:	e0bff217 	ldw	r2,-56(fp)
 40087ac:	e0fff317 	ldw	r3,-52(fp)
 40087b0:	e1bfe517 	ldw	r6,-108(fp)
 40087b4:	e1ffe617 	ldw	r7,-104(fp)
 40087b8:	1009883a 	mov	r4,r2
 40087bc:	180b883a 	mov	r5,r3
 40087c0:	4002ff00 	call	4002ff0 <__gedf2>
 40087c4:	00801a16 	blt	zero,r2,4008830 <_dtoa_r+0x112c>
 40087c8:	e0bff217 	ldw	r2,-56(fp)
 40087cc:	e0fff317 	ldw	r3,-52(fp)
 40087d0:	e1bfe517 	ldw	r6,-108(fp)
 40087d4:	e1ffe617 	ldw	r7,-104(fp)
 40087d8:	1009883a 	mov	r4,r2
 40087dc:	180b883a 	mov	r5,r3
 40087e0:	4002f680 	call	4002f68 <__eqdf2>
 40087e4:	10003c1e 	bne	r2,zero,40088d8 <_dtoa_r+0x11d4>
 40087e8:	e0bfed17 	ldw	r2,-76(fp)
 40087ec:	1080004c 	andi	r2,r2,1
 40087f0:	10003926 	beq	r2,zero,40088d8 <_dtoa_r+0x11d4>
 40087f4:	00000e06 	br	4008830 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 40087f8:	0001883a 	nop
 40087fc:	00000c06 	br	4008830 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 4008800:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 4008804:	00000a06 	br	4008830 <_dtoa_r+0x112c>
		    if (s == s0)
 4008808:	e0ffe717 	ldw	r3,-100(fp)
 400880c:	e0bfe917 	ldw	r2,-92(fp)
 4008810:	1880071e 	bne	r3,r2,4008830 <_dtoa_r+0x112c>
		      {
			k++;
 4008814:	e0bfd717 	ldw	r2,-164(fp)
 4008818:	10800044 	addi	r2,r2,1
 400881c:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 4008820:	e0bfe717 	ldw	r2,-100(fp)
 4008824:	00c00c04 	movi	r3,48
 4008828:	10c00005 	stb	r3,0(r2)
			break;
 400882c:	00000a06 	br	4008858 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 4008830:	e0bfe717 	ldw	r2,-100(fp)
 4008834:	10bfffc4 	addi	r2,r2,-1
 4008838:	e0bfe715 	stw	r2,-100(fp)
 400883c:	e0bfe717 	ldw	r2,-100(fp)
 4008840:	10800003 	ldbu	r2,0(r2)
 4008844:	10803fcc 	andi	r2,r2,255
 4008848:	1080201c 	xori	r2,r2,128
 400884c:	10bfe004 	addi	r2,r2,-128
 4008850:	10800e60 	cmpeqi	r2,r2,57
 4008854:	103fec1e 	bne	r2,zero,4008808 <__alt_data_end+0xfc008808>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 4008858:	e0bfe717 	ldw	r2,-100(fp)
 400885c:	10c00044 	addi	r3,r2,1
 4008860:	e0ffe715 	stw	r3,-100(fp)
 4008864:	10c00003 	ldbu	r3,0(r2)
 4008868:	18c00044 	addi	r3,r3,1
 400886c:	10c00005 	stb	r3,0(r2)
		}
	      break;
 4008870:	00001906 	br	40088d8 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 4008874:	e0bff217 	ldw	r2,-56(fp)
 4008878:	e0fff317 	ldw	r3,-52(fp)
 400887c:	000d883a 	mov	r6,zero
 4008880:	01d00934 	movhi	r7,16420
 4008884:	1009883a 	mov	r4,r2
 4008888:	180b883a 	mov	r5,r3
 400888c:	40031c00 	call	40031c0 <__muldf3>
 4008890:	1009883a 	mov	r4,r2
 4008894:	180b883a 	mov	r5,r3
 4008898:	2005883a 	mov	r2,r4
 400889c:	2807883a 	mov	r3,r5
 40088a0:	e0bff215 	stw	r2,-56(fp)
 40088a4:	e0fff315 	stw	r3,-52(fp)
 40088a8:	e0bff217 	ldw	r2,-56(fp)
 40088ac:	e0fff317 	ldw	r3,-52(fp)
 40088b0:	000d883a 	mov	r6,zero
 40088b4:	000f883a 	mov	r7,zero
 40088b8:	1009883a 	mov	r4,r2
 40088bc:	180b883a 	mov	r5,r3
 40088c0:	4002f680 	call	4002f68 <__eqdf2>
 40088c4:	10000626 	beq	r2,zero,40088e0 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 40088c8:	e0bfd217 	ldw	r2,-184(fp)
 40088cc:	10800044 	addi	r2,r2,1
 40088d0:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 40088d4:	003f7506 	br	40086ac <__alt_data_end+0xfc0086ac>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 40088d8:	0001883a 	nop
 40088dc:	00024f06 	br	400921c <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 40088e0:	0001883a 	nop
	}
      goto ret1;
 40088e4:	00024d06 	br	400921c <_dtoa_r+0x1b18>
    }

  m2 = b2;
 40088e8:	e0bfcf17 	ldw	r2,-196(fp)
 40088ec:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 40088f0:	e0bfd017 	ldw	r2,-192(fp)
 40088f4:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 40088f8:	e03fe215 	stw	zero,-120(fp)
 40088fc:	e0bfe217 	ldw	r2,-120(fp)
 4008900:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 4008904:	e0bfd917 	ldw	r2,-156(fp)
 4008908:	10003a26 	beq	r2,zero,40089f4 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 400890c:	e0bffb17 	ldw	r2,-20(fp)
 4008910:	10800088 	cmpgei	r2,r2,2
 4008914:	10000a1e 	bne	r2,zero,4008940 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 4008918:	e0bfe017 	ldw	r2,-128(fp)
 400891c:	10000326 	beq	r2,zero,400892c <_dtoa_r+0x1228>
 4008920:	e0bff117 	ldw	r2,-60(fp)
 4008924:	10810cc4 	addi	r2,r2,1075
 4008928:	00000306 	br	4008938 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 400892c:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 4008930:	00c00d84 	movi	r3,54
 4008934:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 4008938:	e0bfd215 	stw	r2,-184(fp)
 400893c:	00002106 	br	40089c4 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 4008940:	e0bfd417 	ldw	r2,-176(fp)
 4008944:	10bfffc4 	addi	r2,r2,-1
 4008948:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 400894c:	e0ffdb17 	ldw	r3,-148(fp)
 4008950:	e0bfd617 	ldw	r2,-168(fp)
 4008954:	18800516 	blt	r3,r2,400896c <_dtoa_r+0x1268>
	    m5 -= j;
 4008958:	e0ffdb17 	ldw	r3,-148(fp)
 400895c:	e0bfd617 	ldw	r2,-168(fp)
 4008960:	1885c83a 	sub	r2,r3,r2
 4008964:	e0bfdb15 	stw	r2,-148(fp)
 4008968:	00000d06 	br	40089a0 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 400896c:	e0ffd617 	ldw	r3,-168(fp)
 4008970:	e0bfdb17 	ldw	r2,-148(fp)
 4008974:	1885c83a 	sub	r2,r3,r2
 4008978:	e0bfd615 	stw	r2,-168(fp)
 400897c:	e0bfd617 	ldw	r2,-168(fp)
 4008980:	e0ffdd17 	ldw	r3,-140(fp)
 4008984:	1885883a 	add	r2,r3,r2
 4008988:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 400898c:	e0ffd017 	ldw	r3,-192(fp)
 4008990:	e0bfd617 	ldw	r2,-168(fp)
 4008994:	1885883a 	add	r2,r3,r2
 4008998:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 400899c:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 40089a0:	e0bfd417 	ldw	r2,-176(fp)
 40089a4:	e0bfd215 	stw	r2,-184(fp)
 40089a8:	e0bfd217 	ldw	r2,-184(fp)
 40089ac:	1000050e 	bge	r2,zero,40089c4 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 40089b0:	e0ffda17 	ldw	r3,-152(fp)
 40089b4:	e0bfd217 	ldw	r2,-184(fp)
 40089b8:	1885c83a 	sub	r2,r3,r2
 40089bc:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 40089c0:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 40089c4:	e0ffcf17 	ldw	r3,-196(fp)
 40089c8:	e0bfd217 	ldw	r2,-184(fp)
 40089cc:	1885883a 	add	r2,r3,r2
 40089d0:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 40089d4:	e0ffdc17 	ldw	r3,-144(fp)
 40089d8:	e0bfd217 	ldw	r2,-184(fp)
 40089dc:	1885883a 	add	r2,r3,r2
 40089e0:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 40089e4:	01400044 	movi	r5,1
 40089e8:	e13ff817 	ldw	r4,-32(fp)
 40089ec:	400cb9c0 	call	400cb9c <__i2b>
 40089f0:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 40089f4:	e0bfda17 	ldw	r2,-152(fp)
 40089f8:	0080130e 	bge	zero,r2,4008a48 <_dtoa_r+0x1344>
 40089fc:	e0bfdc17 	ldw	r2,-144(fp)
 4008a00:	0080110e 	bge	zero,r2,4008a48 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 4008a04:	e0ffda17 	ldw	r3,-152(fp)
 4008a08:	e0bfdc17 	ldw	r2,-144(fp)
 4008a0c:	1880010e 	bge	r3,r2,4008a14 <_dtoa_r+0x1310>
 4008a10:	1805883a 	mov	r2,r3
 4008a14:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 4008a18:	e0ffcf17 	ldw	r3,-196(fp)
 4008a1c:	e0bfd217 	ldw	r2,-184(fp)
 4008a20:	1885c83a 	sub	r2,r3,r2
 4008a24:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 4008a28:	e0ffda17 	ldw	r3,-152(fp)
 4008a2c:	e0bfd217 	ldw	r2,-184(fp)
 4008a30:	1885c83a 	sub	r2,r3,r2
 4008a34:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 4008a38:	e0ffdc17 	ldw	r3,-144(fp)
 4008a3c:	e0bfd217 	ldw	r2,-184(fp)
 4008a40:	1885c83a 	sub	r2,r3,r2
 4008a44:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 4008a48:	e0bfd017 	ldw	r2,-192(fp)
 4008a4c:	0080240e 	bge	zero,r2,4008ae0 <_dtoa_r+0x13dc>
    {
      if (leftright)
 4008a50:	e0bfd917 	ldw	r2,-156(fp)
 4008a54:	10001d26 	beq	r2,zero,4008acc <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 4008a58:	e0bfdb17 	ldw	r2,-148(fp)
 4008a5c:	00800f0e 	bge	zero,r2,4008a9c <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 4008a60:	e1bfdb17 	ldw	r6,-148(fp)
 4008a64:	e17fe317 	ldw	r5,-116(fp)
 4008a68:	e13ff817 	ldw	r4,-32(fp)
 4008a6c:	400cfc40 	call	400cfc4 <__pow5mult>
 4008a70:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 4008a74:	e1bfe117 	ldw	r6,-124(fp)
 4008a78:	e17fe317 	ldw	r5,-116(fp)
 4008a7c:	e13ff817 	ldw	r4,-32(fp)
 4008a80:	400cbf40 	call	400cbf4 <__multiply>
 4008a84:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 4008a88:	e17fe117 	ldw	r5,-124(fp)
 4008a8c:	e13ff817 	ldw	r4,-32(fp)
 4008a90:	400c6840 	call	400c684 <_Bfree>
	      b = b1;
 4008a94:	e0bfee17 	ldw	r2,-72(fp)
 4008a98:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 4008a9c:	e0ffd017 	ldw	r3,-192(fp)
 4008aa0:	e0bfdb17 	ldw	r2,-148(fp)
 4008aa4:	1885c83a 	sub	r2,r3,r2
 4008aa8:	e0bfd615 	stw	r2,-168(fp)
 4008aac:	e0bfd617 	ldw	r2,-168(fp)
 4008ab0:	10000b26 	beq	r2,zero,4008ae0 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 4008ab4:	e1bfd617 	ldw	r6,-168(fp)
 4008ab8:	e17fe117 	ldw	r5,-124(fp)
 4008abc:	e13ff817 	ldw	r4,-32(fp)
 4008ac0:	400cfc40 	call	400cfc4 <__pow5mult>
 4008ac4:	e0bfe115 	stw	r2,-124(fp)
 4008ac8:	00000506 	br	4008ae0 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 4008acc:	e1bfd017 	ldw	r6,-192(fp)
 4008ad0:	e17fe117 	ldw	r5,-124(fp)
 4008ad4:	e13ff817 	ldw	r4,-32(fp)
 4008ad8:	400cfc40 	call	400cfc4 <__pow5mult>
 4008adc:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 4008ae0:	01400044 	movi	r5,1
 4008ae4:	e13ff817 	ldw	r4,-32(fp)
 4008ae8:	400cb9c0 	call	400cb9c <__i2b>
 4008aec:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 4008af0:	e0bfdd17 	ldw	r2,-140(fp)
 4008af4:	0080050e 	bge	zero,r2,4008b0c <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 4008af8:	e1bfdd17 	ldw	r6,-140(fp)
 4008afc:	e17fe417 	ldw	r5,-112(fp)
 4008b00:	e13ff817 	ldw	r4,-32(fp)
 4008b04:	400cfc40 	call	400cfc4 <__pow5mult>
 4008b08:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 4008b0c:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 4008b10:	e0bffb17 	ldw	r2,-20(fp)
 4008b14:	10800088 	cmpgei	r2,r2,2
 4008b18:	1000121e 	bne	r2,zero,4008b64 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 4008b1c:	e0bff217 	ldw	r2,-56(fp)
 4008b20:	1000101e 	bne	r2,zero,4008b64 <_dtoa_r+0x1460>
 4008b24:	e0fff317 	ldw	r3,-52(fp)
 4008b28:	00800434 	movhi	r2,16
 4008b2c:	10bfffc4 	addi	r2,r2,-1
 4008b30:	1884703a 	and	r2,r3,r2
 4008b34:	10000b1e 	bne	r2,zero,4008b64 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 4008b38:	e0bff317 	ldw	r2,-52(fp)
 4008b3c:	109ffc2c 	andhi	r2,r2,32752
 4008b40:	10000826 	beq	r2,zero,4008b64 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 4008b44:	e0bfcf17 	ldw	r2,-196(fp)
 4008b48:	10800044 	addi	r2,r2,1
 4008b4c:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 4008b50:	e0bfdc17 	ldw	r2,-144(fp)
 4008b54:	10800044 	addi	r2,r2,1
 4008b58:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 4008b5c:	00800044 	movi	r2,1
 4008b60:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 4008b64:	e0bfdd17 	ldw	r2,-140(fp)
 4008b68:	10000f26 	beq	r2,zero,4008ba8 <_dtoa_r+0x14a4>
 4008b6c:	e0bfe417 	ldw	r2,-112(fp)
 4008b70:	10800417 	ldw	r2,16(r2)
 4008b74:	10bfffc4 	addi	r2,r2,-1
 4008b78:	e0ffe417 	ldw	r3,-112(fp)
 4008b7c:	10800144 	addi	r2,r2,5
 4008b80:	1085883a 	add	r2,r2,r2
 4008b84:	1085883a 	add	r2,r2,r2
 4008b88:	1885883a 	add	r2,r3,r2
 4008b8c:	10800017 	ldw	r2,0(r2)
 4008b90:	1009883a 	mov	r4,r2
 4008b94:	400ca200 	call	400ca20 <__hi0bits>
 4008b98:	1007883a 	mov	r3,r2
 4008b9c:	00800804 	movi	r2,32
 4008ba0:	10c5c83a 	sub	r2,r2,r3
 4008ba4:	00000106 	br	4008bac <_dtoa_r+0x14a8>
 4008ba8:	00800044 	movi	r2,1
 4008bac:	e0ffdc17 	ldw	r3,-144(fp)
 4008bb0:	10c5883a 	add	r2,r2,r3
 4008bb4:	108007cc 	andi	r2,r2,31
 4008bb8:	e0bfd215 	stw	r2,-184(fp)
 4008bbc:	e0bfd217 	ldw	r2,-184(fp)
 4008bc0:	10000426 	beq	r2,zero,4008bd4 <_dtoa_r+0x14d0>
    i = 32 - i;
 4008bc4:	00c00804 	movi	r3,32
 4008bc8:	e0bfd217 	ldw	r2,-184(fp)
 4008bcc:	1885c83a 	sub	r2,r3,r2
 4008bd0:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 4008bd4:	e0bfd217 	ldw	r2,-184(fp)
 4008bd8:	10800150 	cmplti	r2,r2,5
 4008bdc:	1000101e 	bne	r2,zero,4008c20 <_dtoa_r+0x151c>
    {
      i -= 4;
 4008be0:	e0bfd217 	ldw	r2,-184(fp)
 4008be4:	10bfff04 	addi	r2,r2,-4
 4008be8:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 4008bec:	e0ffcf17 	ldw	r3,-196(fp)
 4008bf0:	e0bfd217 	ldw	r2,-184(fp)
 4008bf4:	1885883a 	add	r2,r3,r2
 4008bf8:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 4008bfc:	e0ffda17 	ldw	r3,-152(fp)
 4008c00:	e0bfd217 	ldw	r2,-184(fp)
 4008c04:	1885883a 	add	r2,r3,r2
 4008c08:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 4008c0c:	e0ffdc17 	ldw	r3,-144(fp)
 4008c10:	e0bfd217 	ldw	r2,-184(fp)
 4008c14:	1885883a 	add	r2,r3,r2
 4008c18:	e0bfdc15 	stw	r2,-144(fp)
 4008c1c:	00001206 	br	4008c68 <_dtoa_r+0x1564>
    }
  else if (i < 4)
 4008c20:	e0bfd217 	ldw	r2,-184(fp)
 4008c24:	10800108 	cmpgei	r2,r2,4
 4008c28:	10000f1e 	bne	r2,zero,4008c68 <_dtoa_r+0x1564>
    {
      i += 28;
 4008c2c:	e0bfd217 	ldw	r2,-184(fp)
 4008c30:	10800704 	addi	r2,r2,28
 4008c34:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 4008c38:	e0ffcf17 	ldw	r3,-196(fp)
 4008c3c:	e0bfd217 	ldw	r2,-184(fp)
 4008c40:	1885883a 	add	r2,r3,r2
 4008c44:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 4008c48:	e0ffda17 	ldw	r3,-152(fp)
 4008c4c:	e0bfd217 	ldw	r2,-184(fp)
 4008c50:	1885883a 	add	r2,r3,r2
 4008c54:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 4008c58:	e0ffdc17 	ldw	r3,-144(fp)
 4008c5c:	e0bfd217 	ldw	r2,-184(fp)
 4008c60:	1885883a 	add	r2,r3,r2
 4008c64:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 4008c68:	e0bfcf17 	ldw	r2,-196(fp)
 4008c6c:	0080050e 	bge	zero,r2,4008c84 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 4008c70:	e1bfcf17 	ldw	r6,-196(fp)
 4008c74:	e17fe117 	ldw	r5,-124(fp)
 4008c78:	e13ff817 	ldw	r4,-32(fp)
 4008c7c:	400d13c0 	call	400d13c <__lshift>
 4008c80:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 4008c84:	e0bfdc17 	ldw	r2,-144(fp)
 4008c88:	0080050e 	bge	zero,r2,4008ca0 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 4008c8c:	e1bfdc17 	ldw	r6,-144(fp)
 4008c90:	e17fe417 	ldw	r5,-112(fp)
 4008c94:	e13ff817 	ldw	r4,-32(fp)
 4008c98:	400d13c0 	call	400d13c <__lshift>
 4008c9c:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 4008ca0:	e0bfd817 	ldw	r2,-160(fp)
 4008ca4:	10001726 	beq	r2,zero,4008d04 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 4008ca8:	e17fe417 	ldw	r5,-112(fp)
 4008cac:	e13fe117 	ldw	r4,-124(fp)
 4008cb0:	400d3340 	call	400d334 <__mcmp>
 4008cb4:	1000130e 	bge	r2,zero,4008d04 <_dtoa_r+0x1600>
	{
	  k--;
 4008cb8:	e0bfd717 	ldw	r2,-164(fp)
 4008cbc:	10bfffc4 	addi	r2,r2,-1
 4008cc0:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 4008cc4:	000f883a 	mov	r7,zero
 4008cc8:	01800284 	movi	r6,10
 4008ccc:	e17fe117 	ldw	r5,-124(fp)
 4008cd0:	e13ff817 	ldw	r4,-32(fp)
 4008cd4:	400c7000 	call	400c700 <__multadd>
 4008cd8:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 4008cdc:	e0bfd917 	ldw	r2,-156(fp)
 4008ce0:	10000626 	beq	r2,zero,4008cfc <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 4008ce4:	000f883a 	mov	r7,zero
 4008ce8:	01800284 	movi	r6,10
 4008cec:	e17fe317 	ldw	r5,-116(fp)
 4008cf0:	e13ff817 	ldw	r4,-32(fp)
 4008cf4:	400c7000 	call	400c700 <__multadd>
 4008cf8:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 4008cfc:	e0bfd517 	ldw	r2,-172(fp)
 4008d00:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 4008d04:	e0bfd417 	ldw	r2,-176(fp)
 4008d08:	00801f16 	blt	zero,r2,4008d88 <_dtoa_r+0x1684>
 4008d0c:	e0bffb17 	ldw	r2,-20(fp)
 4008d10:	108000d0 	cmplti	r2,r2,3
 4008d14:	10001c1e 	bne	r2,zero,4008d88 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 4008d18:	e0bfd417 	ldw	r2,-176(fp)
 4008d1c:	10000c16 	blt	r2,zero,4008d50 <_dtoa_r+0x164c>
 4008d20:	000f883a 	mov	r7,zero
 4008d24:	01800144 	movi	r6,5
 4008d28:	e17fe417 	ldw	r5,-112(fp)
 4008d2c:	e13ff817 	ldw	r4,-32(fp)
 4008d30:	400c7000 	call	400c700 <__multadd>
 4008d34:	e0bfe415 	stw	r2,-112(fp)
 4008d38:	e17fe417 	ldw	r5,-112(fp)
 4008d3c:	e13fe117 	ldw	r4,-124(fp)
 4008d40:	400d3340 	call	400d334 <__mcmp>
 4008d44:	00800716 	blt	zero,r2,4008d64 <_dtoa_r+0x1660>
 4008d48:	00000106 	br	4008d50 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 4008d4c:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 4008d50:	e0800217 	ldw	r2,8(fp)
 4008d54:	0084303a 	nor	r2,zero,r2
 4008d58:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 4008d5c:	00011d06 	br	40091d4 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 4008d60:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 4008d64:	e0bfe717 	ldw	r2,-100(fp)
 4008d68:	10c00044 	addi	r3,r2,1
 4008d6c:	e0ffe715 	stw	r3,-100(fp)
 4008d70:	00c00c44 	movi	r3,49
 4008d74:	10c00005 	stb	r3,0(r2)
      k++;
 4008d78:	e0bfd717 	ldw	r2,-164(fp)
 4008d7c:	10800044 	addi	r2,r2,1
 4008d80:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 4008d84:	00011306 	br	40091d4 <_dtoa_r+0x1ad0>
    }
  if (leftright)
 4008d88:	e0bfd917 	ldw	r2,-156(fp)
 4008d8c:	1000ba26 	beq	r2,zero,4009078 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 4008d90:	e0bfda17 	ldw	r2,-152(fp)
 4008d94:	0080050e 	bge	zero,r2,4008dac <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 4008d98:	e1bfda17 	ldw	r6,-152(fp)
 4008d9c:	e17fe317 	ldw	r5,-116(fp)
 4008da0:	e13ff817 	ldw	r4,-32(fp)
 4008da4:	400d13c0 	call	400d13c <__lshift>
 4008da8:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 4008dac:	e0bfe317 	ldw	r2,-116(fp)
 4008db0:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 4008db4:	e0bfde17 	ldw	r2,-136(fp)
 4008db8:	10001826 	beq	r2,zero,4008e1c <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 4008dbc:	e0bfe317 	ldw	r2,-116(fp)
 4008dc0:	10800117 	ldw	r2,4(r2)
 4008dc4:	100b883a 	mov	r5,r2
 4008dc8:	e13ff817 	ldw	r4,-32(fp)
 4008dcc:	400c5540 	call	400c554 <_Balloc>
 4008dd0:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 4008dd4:	e0bfe317 	ldw	r2,-116(fp)
 4008dd8:	10c00304 	addi	r3,r2,12
 4008ddc:	e0bfe217 	ldw	r2,-120(fp)
 4008de0:	11000304 	addi	r4,r2,12
 4008de4:	e0bfe217 	ldw	r2,-120(fp)
 4008de8:	10800417 	ldw	r2,16(r2)
 4008dec:	10800084 	addi	r2,r2,2
 4008df0:	1085883a 	add	r2,r2,r2
 4008df4:	1085883a 	add	r2,r2,r2
 4008df8:	100d883a 	mov	r6,r2
 4008dfc:	200b883a 	mov	r5,r4
 4008e00:	1809883a 	mov	r4,r3
 4008e04:	400c0000 	call	400c000 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 4008e08:	01800044 	movi	r6,1
 4008e0c:	e17fe317 	ldw	r5,-116(fp)
 4008e10:	e13ff817 	ldw	r4,-32(fp)
 4008e14:	400d13c0 	call	400d13c <__lshift>
 4008e18:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 4008e1c:	00800044 	movi	r2,1
 4008e20:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 4008e24:	e17fe417 	ldw	r5,-112(fp)
 4008e28:	e13fe117 	ldw	r4,-124(fp)
 4008e2c:	40073500 	call	4007350 <quorem>
 4008e30:	10800c04 	addi	r2,r2,48
 4008e34:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 4008e38:	e17fe217 	ldw	r5,-120(fp)
 4008e3c:	e13fe117 	ldw	r4,-124(fp)
 4008e40:	400d3340 	call	400d334 <__mcmp>
 4008e44:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 4008e48:	e1bfe317 	ldw	r6,-116(fp)
 4008e4c:	e17fe417 	ldw	r5,-112(fp)
 4008e50:	e13ff817 	ldw	r4,-32(fp)
 4008e54:	400d4480 	call	400d448 <__mdiff>
 4008e58:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 4008e5c:	e0bfef17 	ldw	r2,-68(fp)
 4008e60:	10800317 	ldw	r2,12(r2)
 4008e64:	1000041e 	bne	r2,zero,4008e78 <_dtoa_r+0x1774>
 4008e68:	e17fef17 	ldw	r5,-68(fp)
 4008e6c:	e13fe117 	ldw	r4,-124(fp)
 4008e70:	400d3340 	call	400d334 <__mcmp>
 4008e74:	00000106 	br	4008e7c <_dtoa_r+0x1778>
 4008e78:	00800044 	movi	r2,1
 4008e7c:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 4008e80:	e17fef17 	ldw	r5,-68(fp)
 4008e84:	e13ff817 	ldw	r4,-32(fp)
 4008e88:	400c6840 	call	400c684 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 4008e8c:	e0bfec17 	ldw	r2,-80(fp)
 4008e90:	1000131e 	bne	r2,zero,4008ee0 <_dtoa_r+0x17dc>
 4008e94:	e0bffb17 	ldw	r2,-20(fp)
 4008e98:	1000111e 	bne	r2,zero,4008ee0 <_dtoa_r+0x17dc>
 4008e9c:	e0bff217 	ldw	r2,-56(fp)
 4008ea0:	1080004c 	andi	r2,r2,1
 4008ea4:	10000e1e 	bne	r2,zero,4008ee0 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 4008ea8:	e0bfd117 	ldw	r2,-188(fp)
 4008eac:	10800e58 	cmpnei	r2,r2,57
 4008eb0:	10003726 	beq	r2,zero,4008f90 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 4008eb4:	e0bfd617 	ldw	r2,-168(fp)
 4008eb8:	0080030e 	bge	zero,r2,4008ec8 <_dtoa_r+0x17c4>
		dig++;
 4008ebc:	e0bfd117 	ldw	r2,-188(fp)
 4008ec0:	10800044 	addi	r2,r2,1
 4008ec4:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 4008ec8:	e0bfe717 	ldw	r2,-100(fp)
 4008ecc:	10c00044 	addi	r3,r2,1
 4008ed0:	e0ffe715 	stw	r3,-100(fp)
 4008ed4:	e0ffd117 	ldw	r3,-188(fp)
 4008ed8:	10c00005 	stb	r3,0(r2)
	      goto ret;
 4008edc:	0000bd06 	br	40091d4 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 4008ee0:	e0bfd617 	ldw	r2,-168(fp)
 4008ee4:	10000716 	blt	r2,zero,4008f04 <_dtoa_r+0x1800>
 4008ee8:	e0bfd617 	ldw	r2,-168(fp)
 4008eec:	1000221e 	bne	r2,zero,4008f78 <_dtoa_r+0x1874>
 4008ef0:	e0bffb17 	ldw	r2,-20(fp)
 4008ef4:	1000201e 	bne	r2,zero,4008f78 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 4008ef8:	e0bff217 	ldw	r2,-56(fp)
 4008efc:	1080004c 	andi	r2,r2,1
 4008f00:	10001d1e 	bne	r2,zero,4008f78 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 4008f04:	e0bfec17 	ldw	r2,-80(fp)
 4008f08:	0080150e 	bge	zero,r2,4008f60 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 4008f0c:	01800044 	movi	r6,1
 4008f10:	e17fe117 	ldw	r5,-124(fp)
 4008f14:	e13ff817 	ldw	r4,-32(fp)
 4008f18:	400d13c0 	call	400d13c <__lshift>
 4008f1c:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 4008f20:	e17fe417 	ldw	r5,-112(fp)
 4008f24:	e13fe117 	ldw	r4,-124(fp)
 4008f28:	400d3340 	call	400d334 <__mcmp>
 4008f2c:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 4008f30:	e0bfec17 	ldw	r2,-80(fp)
 4008f34:	00800516 	blt	zero,r2,4008f4c <_dtoa_r+0x1848>
 4008f38:	e0bfec17 	ldw	r2,-80(fp)
 4008f3c:	1000081e 	bne	r2,zero,4008f60 <_dtoa_r+0x185c>
 4008f40:	e0bfd117 	ldw	r2,-188(fp)
 4008f44:	1080004c 	andi	r2,r2,1
 4008f48:	10000526 	beq	r2,zero,4008f60 <_dtoa_r+0x185c>
		      && dig++ == '9')
 4008f4c:	e0bfd117 	ldw	r2,-188(fp)
 4008f50:	10c00044 	addi	r3,r2,1
 4008f54:	e0ffd115 	stw	r3,-188(fp)
 4008f58:	10800e58 	cmpnei	r2,r2,57
 4008f5c:	10000e26 	beq	r2,zero,4008f98 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 4008f60:	e0bfe717 	ldw	r2,-100(fp)
 4008f64:	10c00044 	addi	r3,r2,1
 4008f68:	e0ffe715 	stw	r3,-100(fp)
 4008f6c:	e0ffd117 	ldw	r3,-188(fp)
 4008f70:	10c00005 	stb	r3,0(r2)
	      goto ret;
 4008f74:	00009706 	br	40091d4 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 4008f78:	e0bfec17 	ldw	r2,-80(fp)
 4008f7c:	0080140e 	bge	zero,r2,4008fd0 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 4008f80:	e0bfd117 	ldw	r2,-188(fp)
 4008f84:	10800e58 	cmpnei	r2,r2,57
 4008f88:	10000a1e 	bne	r2,zero,4008fb4 <_dtoa_r+0x18b0>
 4008f8c:	00000306 	br	4008f9c <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 4008f90:	0001883a 	nop
 4008f94:	00000106 	br	4008f9c <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 4008f98:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 4008f9c:	e0bfe717 	ldw	r2,-100(fp)
 4008fa0:	10c00044 	addi	r3,r2,1
 4008fa4:	e0ffe715 	stw	r3,-100(fp)
 4008fa8:	00c00e44 	movi	r3,57
 4008fac:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 4008fb0:	00005d06 	br	4009128 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 4008fb4:	e0bfe717 	ldw	r2,-100(fp)
 4008fb8:	10c00044 	addi	r3,r2,1
 4008fbc:	e0ffe715 	stw	r3,-100(fp)
 4008fc0:	e0ffd117 	ldw	r3,-188(fp)
 4008fc4:	18c00044 	addi	r3,r3,1
 4008fc8:	10c00005 	stb	r3,0(r2)
	      goto ret;
 4008fcc:	00008106 	br	40091d4 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 4008fd0:	e0bfe717 	ldw	r2,-100(fp)
 4008fd4:	10c00044 	addi	r3,r2,1
 4008fd8:	e0ffe715 	stw	r3,-100(fp)
 4008fdc:	e0ffd117 	ldw	r3,-188(fp)
 4008fe0:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 4008fe4:	e0ffd217 	ldw	r3,-184(fp)
 4008fe8:	e0bfd417 	ldw	r2,-176(fp)
 4008fec:	18803b26 	beq	r3,r2,40090dc <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 4008ff0:	000f883a 	mov	r7,zero
 4008ff4:	01800284 	movi	r6,10
 4008ff8:	e17fe117 	ldw	r5,-124(fp)
 4008ffc:	e13ff817 	ldw	r4,-32(fp)
 4009000:	400c7000 	call	400c700 <__multadd>
 4009004:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 4009008:	e0ffe217 	ldw	r3,-120(fp)
 400900c:	e0bfe317 	ldw	r2,-116(fp)
 4009010:	1880091e 	bne	r3,r2,4009038 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 4009014:	000f883a 	mov	r7,zero
 4009018:	01800284 	movi	r6,10
 400901c:	e17fe317 	ldw	r5,-116(fp)
 4009020:	e13ff817 	ldw	r4,-32(fp)
 4009024:	400c7000 	call	400c700 <__multadd>
 4009028:	e0bfe315 	stw	r2,-116(fp)
 400902c:	e0bfe317 	ldw	r2,-116(fp)
 4009030:	e0bfe215 	stw	r2,-120(fp)
 4009034:	00000c06 	br	4009068 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 4009038:	000f883a 	mov	r7,zero
 400903c:	01800284 	movi	r6,10
 4009040:	e17fe217 	ldw	r5,-120(fp)
 4009044:	e13ff817 	ldw	r4,-32(fp)
 4009048:	400c7000 	call	400c700 <__multadd>
 400904c:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 4009050:	000f883a 	mov	r7,zero
 4009054:	01800284 	movi	r6,10
 4009058:	e17fe317 	ldw	r5,-116(fp)
 400905c:	e13ff817 	ldw	r4,-32(fp)
 4009060:	400c7000 	call	400c700 <__multadd>
 4009064:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 4009068:	e0bfd217 	ldw	r2,-184(fp)
 400906c:	10800044 	addi	r2,r2,1
 4009070:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 4009074:	003f6b06 	br	4008e24 <__alt_data_end+0xfc008e24>
    }
  else
    for (i = 1;; i++)
 4009078:	00800044 	movi	r2,1
 400907c:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 4009080:	e43fe717 	ldw	r16,-100(fp)
 4009084:	80800044 	addi	r2,r16,1
 4009088:	e0bfe715 	stw	r2,-100(fp)
 400908c:	e17fe417 	ldw	r5,-112(fp)
 4009090:	e13fe117 	ldw	r4,-124(fp)
 4009094:	40073500 	call	4007350 <quorem>
 4009098:	10800c04 	addi	r2,r2,48
 400909c:	e0bfd115 	stw	r2,-188(fp)
 40090a0:	e0bfd117 	ldw	r2,-188(fp)
 40090a4:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 40090a8:	e0ffd217 	ldw	r3,-184(fp)
 40090ac:	e0bfd417 	ldw	r2,-176(fp)
 40090b0:	18800c0e 	bge	r3,r2,40090e4 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 40090b4:	000f883a 	mov	r7,zero
 40090b8:	01800284 	movi	r6,10
 40090bc:	e17fe117 	ldw	r5,-124(fp)
 40090c0:	e13ff817 	ldw	r4,-32(fp)
 40090c4:	400c7000 	call	400c700 <__multadd>
 40090c8:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 40090cc:	e0bfd217 	ldw	r2,-184(fp)
 40090d0:	10800044 	addi	r2,r2,1
 40090d4:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 40090d8:	003fe906 	br	4009080 <__alt_data_end+0xfc009080>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 40090dc:	0001883a 	nop
 40090e0:	00000106 	br	40090e8 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 40090e4:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 40090e8:	01800044 	movi	r6,1
 40090ec:	e17fe117 	ldw	r5,-124(fp)
 40090f0:	e13ff817 	ldw	r4,-32(fp)
 40090f4:	400d13c0 	call	400d13c <__lshift>
 40090f8:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 40090fc:	e17fe417 	ldw	r5,-112(fp)
 4009100:	e13fe117 	ldw	r4,-124(fp)
 4009104:	400d3340 	call	400d334 <__mcmp>
 4009108:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 400910c:	e0bfd617 	ldw	r2,-168(fp)
 4009110:	00801216 	blt	zero,r2,400915c <_dtoa_r+0x1a58>
 4009114:	e0bfd617 	ldw	r2,-168(fp)
 4009118:	1000211e 	bne	r2,zero,40091a0 <_dtoa_r+0x1a9c>
 400911c:	e0bfd117 	ldw	r2,-188(fp)
 4009120:	1080004c 	andi	r2,r2,1
 4009124:	10001e26 	beq	r2,zero,40091a0 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 4009128:	00000c06 	br	400915c <_dtoa_r+0x1a58>
	if (s == s0)
 400912c:	e0ffe717 	ldw	r3,-100(fp)
 4009130:	e0bfe917 	ldw	r2,-92(fp)
 4009134:	1880091e 	bne	r3,r2,400915c <_dtoa_r+0x1a58>
	  {
	    k++;
 4009138:	e0bfd717 	ldw	r2,-164(fp)
 400913c:	10800044 	addi	r2,r2,1
 4009140:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 4009144:	e0bfe717 	ldw	r2,-100(fp)
 4009148:	10c00044 	addi	r3,r2,1
 400914c:	e0ffe715 	stw	r3,-100(fp)
 4009150:	00c00c44 	movi	r3,49
 4009154:	10c00005 	stb	r3,0(r2)
	    goto ret;
 4009158:	00001e06 	br	40091d4 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 400915c:	e0bfe717 	ldw	r2,-100(fp)
 4009160:	10bfffc4 	addi	r2,r2,-1
 4009164:	e0bfe715 	stw	r2,-100(fp)
 4009168:	e0bfe717 	ldw	r2,-100(fp)
 400916c:	10800003 	ldbu	r2,0(r2)
 4009170:	10803fcc 	andi	r2,r2,255
 4009174:	1080201c 	xori	r2,r2,128
 4009178:	10bfe004 	addi	r2,r2,-128
 400917c:	10800e60 	cmpeqi	r2,r2,57
 4009180:	103fea1e 	bne	r2,zero,400912c <__alt_data_end+0xfc00912c>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 4009184:	e0bfe717 	ldw	r2,-100(fp)
 4009188:	10c00044 	addi	r3,r2,1
 400918c:	e0ffe715 	stw	r3,-100(fp)
 4009190:	10c00003 	ldbu	r3,0(r2)
 4009194:	18c00044 	addi	r3,r3,1
 4009198:	10c00005 	stb	r3,0(r2)
 400919c:	00000d06 	br	40091d4 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 40091a0:	e0bfe717 	ldw	r2,-100(fp)
 40091a4:	10bfffc4 	addi	r2,r2,-1
 40091a8:	e0bfe715 	stw	r2,-100(fp)
 40091ac:	e0bfe717 	ldw	r2,-100(fp)
 40091b0:	10800003 	ldbu	r2,0(r2)
 40091b4:	10803fcc 	andi	r2,r2,255
 40091b8:	1080201c 	xori	r2,r2,128
 40091bc:	10bfe004 	addi	r2,r2,-128
 40091c0:	10800c20 	cmpeqi	r2,r2,48
 40091c4:	103ff61e 	bne	r2,zero,40091a0 <__alt_data_end+0xfc0091a0>
      s++;
 40091c8:	e0bfe717 	ldw	r2,-100(fp)
 40091cc:	10800044 	addi	r2,r2,1
 40091d0:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 40091d4:	e17fe417 	ldw	r5,-112(fp)
 40091d8:	e13ff817 	ldw	r4,-32(fp)
 40091dc:	400c6840 	call	400c684 <_Bfree>
  if (mhi)
 40091e0:	e0bfe317 	ldw	r2,-116(fp)
 40091e4:	10000d26 	beq	r2,zero,400921c <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 40091e8:	e0bfe217 	ldw	r2,-120(fp)
 40091ec:	10000626 	beq	r2,zero,4009208 <_dtoa_r+0x1b04>
 40091f0:	e0ffe217 	ldw	r3,-120(fp)
 40091f4:	e0bfe317 	ldw	r2,-116(fp)
 40091f8:	18800326 	beq	r3,r2,4009208 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 40091fc:	e17fe217 	ldw	r5,-120(fp)
 4009200:	e13ff817 	ldw	r4,-32(fp)
 4009204:	400c6840 	call	400c684 <_Bfree>
      Bfree (ptr, mhi);
 4009208:	e17fe317 	ldw	r5,-116(fp)
 400920c:	e13ff817 	ldw	r4,-32(fp)
 4009210:	400c6840 	call	400c684 <_Bfree>
 4009214:	00000106 	br	400921c <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 4009218:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 400921c:	e17fe117 	ldw	r5,-124(fp)
 4009220:	e13ff817 	ldw	r4,-32(fp)
 4009224:	400c6840 	call	400c684 <_Bfree>
  *s = 0;
 4009228:	e0bfe717 	ldw	r2,-100(fp)
 400922c:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 4009230:	e0bfd717 	ldw	r2,-164(fp)
 4009234:	10c00044 	addi	r3,r2,1
 4009238:	e0800317 	ldw	r2,12(fp)
 400923c:	10c00015 	stw	r3,0(r2)
  if (rve)
 4009240:	e0800517 	ldw	r2,20(fp)
 4009244:	10000326 	beq	r2,zero,4009254 <_dtoa_r+0x1b50>
    *rve = s;
 4009248:	e0800517 	ldw	r2,20(fp)
 400924c:	e0ffe717 	ldw	r3,-100(fp)
 4009250:	10c00015 	stw	r3,0(r2)
  return s0;
 4009254:	e0bfe917 	ldw	r2,-92(fp)
}
 4009258:	e6fffc04 	addi	sp,fp,-16
 400925c:	dfc00517 	ldw	ra,20(sp)
 4009260:	df000417 	ldw	fp,16(sp)
 4009264:	dcc00317 	ldw	r19,12(sp)
 4009268:	dc800217 	ldw	r18,8(sp)
 400926c:	dc400117 	ldw	r17,4(sp)
 4009270:	dc000017 	ldw	r16,0(sp)
 4009274:	dec00604 	addi	sp,sp,24
 4009278:	f800283a 	ret

0400927c <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 400927c:	defff504 	addi	sp,sp,-44
 4009280:	dfc00a15 	stw	ra,40(sp)
 4009284:	df000915 	stw	fp,36(sp)
 4009288:	dcc00815 	stw	r19,32(sp)
 400928c:	dc800715 	stw	r18,28(sp)
 4009290:	dc400615 	stw	r17,24(sp)
 4009294:	dc000515 	stw	r16,20(sp)
 4009298:	df000904 	addi	fp,sp,36
 400929c:	e13ffb15 	stw	r4,-20(fp)
 40092a0:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 40092a4:	8080030b 	ldhu	r2,12(r16)
 40092a8:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 40092ac:	e0bff90b 	ldhu	r2,-28(fp)
 40092b0:	10bfffcc 	andi	r2,r2,65535
 40092b4:	1080020c 	andi	r2,r2,8
 40092b8:	1000831e 	bne	r2,zero,40094c8 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 40092bc:	8080030b 	ldhu	r2,12(r16)
 40092c0:	10820014 	ori	r2,r2,2048
 40092c4:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 40092c8:	80800117 	ldw	r2,4(r16)
 40092cc:	00800216 	blt	zero,r2,40092d8 <__sflush_r+0x5c>
 40092d0:	80800f17 	ldw	r2,60(r16)
 40092d4:	00807a0e 	bge	zero,r2,40094c0 <__sflush_r+0x244>
 40092d8:	80800a17 	ldw	r2,40(r16)
 40092dc:	10007826 	beq	r2,zero,40094c0 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 40092e0:	e0bffb17 	ldw	r2,-20(fp)
 40092e4:	10800017 	ldw	r2,0(r2)
 40092e8:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 40092ec:	e0bffb17 	ldw	r2,-20(fp)
 40092f0:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 40092f4:	8080030b 	ldhu	r2,12(r16)
 40092f8:	10bfffcc 	andi	r2,r2,65535
 40092fc:	1084000c 	andi	r2,r2,4096
 4009300:	10000326 	beq	r2,zero,4009310 <__sflush_r+0x94>
	    curoff = fp->_offset;
 4009304:	80801417 	ldw	r2,80(r16)
 4009308:	e0bff715 	stw	r2,-36(fp)
 400930c:	00002206 	br	4009398 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 4009310:	80800a17 	ldw	r2,40(r16)
 4009314:	80c00717 	ldw	r3,28(r16)
 4009318:	01c00044 	movi	r7,1
 400931c:	000d883a 	mov	r6,zero
 4009320:	180b883a 	mov	r5,r3
 4009324:	e13ffb17 	ldw	r4,-20(fp)
 4009328:	103ee83a 	callr	r2
 400932c:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 4009330:	e0bff717 	ldw	r2,-36(fp)
 4009334:	10bfffd8 	cmpnei	r2,r2,-1
 4009338:	1000171e 	bne	r2,zero,4009398 <__sflush_r+0x11c>
 400933c:	e0bffb17 	ldw	r2,-20(fp)
 4009340:	10800017 	ldw	r2,0(r2)
 4009344:	10001426 	beq	r2,zero,4009398 <__sflush_r+0x11c>
		{
		  int result = EOF;
 4009348:	00bfffc4 	movi	r2,-1
 400934c:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 4009350:	e0bffb17 	ldw	r2,-20(fp)
 4009354:	10800017 	ldw	r2,0(r2)
 4009358:	10800760 	cmpeqi	r2,r2,29
 400935c:	1000041e 	bne	r2,zero,4009370 <__sflush_r+0xf4>
 4009360:	e0bffb17 	ldw	r2,-20(fp)
 4009364:	10800017 	ldw	r2,0(r2)
 4009368:	10800598 	cmpnei	r2,r2,22
 400936c:	1000051e 	bne	r2,zero,4009384 <__sflush_r+0x108>
		    {
		      result = 0;
 4009370:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 4009374:	e0bffb17 	ldw	r2,-20(fp)
 4009378:	e0fffa17 	ldw	r3,-24(fp)
 400937c:	10c00015 	stw	r3,0(r2)
 4009380:	00000306 	br	4009390 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 4009384:	8080030b 	ldhu	r2,12(r16)
 4009388:	10801014 	ori	r2,r2,64
 400938c:	8080030d 	sth	r2,12(r16)
		  return result;
 4009390:	e0bff817 	ldw	r2,-32(fp)
 4009394:	00007106 	br	400955c <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 4009398:	8080030b 	ldhu	r2,12(r16)
 400939c:	10bfffcc 	andi	r2,r2,65535
 40093a0:	1080010c 	andi	r2,r2,4
 40093a4:	10000a26 	beq	r2,zero,40093d0 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 40093a8:	80800117 	ldw	r2,4(r16)
 40093ac:	e0fff717 	ldw	r3,-36(fp)
 40093b0:	1885c83a 	sub	r2,r3,r2
 40093b4:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 40093b8:	80800c17 	ldw	r2,48(r16)
 40093bc:	10000426 	beq	r2,zero,40093d0 <__sflush_r+0x154>
                curoff -= fp->_ur;
 40093c0:	80800f17 	ldw	r2,60(r16)
 40093c4:	e0fff717 	ldw	r3,-36(fp)
 40093c8:	1885c83a 	sub	r2,r3,r2
 40093cc:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 40093d0:	80800a17 	ldw	r2,40(r16)
 40093d4:	80c00717 	ldw	r3,28(r16)
 40093d8:	000f883a 	mov	r7,zero
 40093dc:	e1bff717 	ldw	r6,-36(fp)
 40093e0:	180b883a 	mov	r5,r3
 40093e4:	e13ffb17 	ldw	r4,-20(fp)
 40093e8:	103ee83a 	callr	r2
 40093ec:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 40093f0:	e0bff717 	ldw	r2,-36(fp)
 40093f4:	10bfffd8 	cmpnei	r2,r2,-1
 40093f8:	10000b1e 	bne	r2,zero,4009428 <__sflush_r+0x1ac>
 40093fc:	e0bffb17 	ldw	r2,-20(fp)
 4009400:	10800017 	ldw	r2,0(r2)
 4009404:	10000826 	beq	r2,zero,4009428 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 4009408:	e0bffb17 	ldw	r2,-20(fp)
 400940c:	10800017 	ldw	r2,0(r2)
 4009410:	10800760 	cmpeqi	r2,r2,29
 4009414:	1000041e 	bne	r2,zero,4009428 <__sflush_r+0x1ac>
 4009418:	e0bffb17 	ldw	r2,-20(fp)
 400941c:	10800017 	ldw	r2,0(r2)
 4009420:	10800598 	cmpnei	r2,r2,22
 4009424:	1000211e 	bne	r2,zero,40094ac <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 4009428:	80c0030b 	ldhu	r3,12(r16)
 400942c:	00bdffc4 	movi	r2,-2049
 4009430:	1884703a 	and	r2,r3,r2
 4009434:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 4009438:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 400943c:	80800417 	ldw	r2,16(r16)
 4009440:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 4009444:	8080030b 	ldhu	r2,12(r16)
 4009448:	10bfffcc 	andi	r2,r2,65535
 400944c:	1084000c 	andi	r2,r2,4096
 4009450:	10000826 	beq	r2,zero,4009474 <__sflush_r+0x1f8>
 4009454:	e0bff717 	ldw	r2,-36(fp)
 4009458:	10bfffd8 	cmpnei	r2,r2,-1
 400945c:	1000031e 	bne	r2,zero,400946c <__sflush_r+0x1f0>
 4009460:	e0bffb17 	ldw	r2,-20(fp)
 4009464:	10800017 	ldw	r2,0(r2)
 4009468:	1000021e 	bne	r2,zero,4009474 <__sflush_r+0x1f8>
		fp->_offset = curoff;
 400946c:	e0bff717 	ldw	r2,-36(fp)
 4009470:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 4009474:	e0bffb17 	ldw	r2,-20(fp)
 4009478:	e0fffa17 	ldw	r3,-24(fp)
 400947c:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 4009480:	80800c17 	ldw	r2,48(r16)
 4009484:	10000e26 	beq	r2,zero,40094c0 <__sflush_r+0x244>
		FREEUB (ptr, fp);
 4009488:	80c00c17 	ldw	r3,48(r16)
 400948c:	80801004 	addi	r2,r16,64
 4009490:	18800426 	beq	r3,r2,40094a4 <__sflush_r+0x228>
 4009494:	80800c17 	ldw	r2,48(r16)
 4009498:	100b883a 	mov	r5,r2
 400949c:	e13ffb17 	ldw	r4,-20(fp)
 40094a0:	4009c200 	call	4009c20 <_free_r>
 40094a4:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 40094a8:	00000506 	br	40094c0 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 40094ac:	8080030b 	ldhu	r2,12(r16)
 40094b0:	10801014 	ori	r2,r2,64
 40094b4:	8080030d 	sth	r2,12(r16)
	      return EOF;
 40094b8:	00bfffc4 	movi	r2,-1
 40094bc:	00002706 	br	400955c <__sflush_r+0x2e0>
	    }
	}
      return 0;
 40094c0:	0005883a 	mov	r2,zero
 40094c4:	00002506 	br	400955c <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 40094c8:	84400417 	ldw	r17,16(r16)
 40094cc:	8800021e 	bne	r17,zero,40094d8 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 40094d0:	0005883a 	mov	r2,zero
 40094d4:	00002106 	br	400955c <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 40094d8:	80800017 	ldw	r2,0(r16)
 40094dc:	1007883a 	mov	r3,r2
 40094e0:	8805883a 	mov	r2,r17
 40094e4:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 40094e8:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 40094ec:	e0bff90b 	ldhu	r2,-28(fp)
 40094f0:	10bfffcc 	andi	r2,r2,65535
 40094f4:	108000cc 	andi	r2,r2,3
 40094f8:	1000021e 	bne	r2,zero,4009504 <__sflush_r+0x288>
 40094fc:	80800517 	ldw	r2,20(r16)
 4009500:	00000106 	br	4009508 <__sflush_r+0x28c>
 4009504:	0005883a 	mov	r2,zero
 4009508:	80800215 	stw	r2,8(r16)

  while (n > 0)
 400950c:	00001106 	br	4009554 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 4009510:	80800917 	ldw	r2,36(r16)
 4009514:	80c00717 	ldw	r3,28(r16)
 4009518:	900f883a 	mov	r7,r18
 400951c:	880d883a 	mov	r6,r17
 4009520:	180b883a 	mov	r5,r3
 4009524:	e13ffb17 	ldw	r4,-20(fp)
 4009528:	103ee83a 	callr	r2
 400952c:	1027883a 	mov	r19,r2
      if (t <= 0)
 4009530:	04c00516 	blt	zero,r19,4009548 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 4009534:	8080030b 	ldhu	r2,12(r16)
 4009538:	10801014 	ori	r2,r2,64
 400953c:	8080030d 	sth	r2,12(r16)
          return EOF;
 4009540:	00bfffc4 	movi	r2,-1
 4009544:	00000506 	br	400955c <__sflush_r+0x2e0>
	}
      p += t;
 4009548:	9805883a 	mov	r2,r19
 400954c:	88a3883a 	add	r17,r17,r2
      n -= t;
 4009550:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 4009554:	04bfee16 	blt	zero,r18,4009510 <__alt_data_end+0xfc009510>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 4009558:	0005883a 	mov	r2,zero
}
 400955c:	e6fffc04 	addi	sp,fp,-16
 4009560:	dfc00517 	ldw	ra,20(sp)
 4009564:	df000417 	ldw	fp,16(sp)
 4009568:	dcc00317 	ldw	r19,12(sp)
 400956c:	dc800217 	ldw	r18,8(sp)
 4009570:	dc400117 	ldw	r17,4(sp)
 4009574:	dc000017 	ldw	r16,0(sp)
 4009578:	dec00604 	addi	sp,sp,24
 400957c:	f800283a 	ret

04009580 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 4009580:	defffa04 	addi	sp,sp,-24
 4009584:	dfc00515 	stw	ra,20(sp)
 4009588:	df000415 	stw	fp,16(sp)
 400958c:	dc000315 	stw	r16,12(sp)
 4009590:	df000404 	addi	fp,sp,16
 4009594:	e13ffe15 	stw	r4,-8(fp)
 4009598:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 400959c:	e0bffe17 	ldw	r2,-8(fp)
 40095a0:	e0bffc15 	stw	r2,-16(fp)
 40095a4:	e0bffc17 	ldw	r2,-16(fp)
 40095a8:	10000526 	beq	r2,zero,40095c0 <_fflush_r+0x40>
 40095ac:	e0bffc17 	ldw	r2,-16(fp)
 40095b0:	10800e17 	ldw	r2,56(r2)
 40095b4:	1000021e 	bne	r2,zero,40095c0 <_fflush_r+0x40>
 40095b8:	e13ffc17 	ldw	r4,-16(fp)
 40095bc:	4009a000 	call	4009a00 <__sinit>

  if (!fp->_flags)
 40095c0:	8080030b 	ldhu	r2,12(r16)
 40095c4:	10bfffcc 	andi	r2,r2,65535
 40095c8:	10a0001c 	xori	r2,r2,32768
 40095cc:	10a00004 	addi	r2,r2,-32768
 40095d0:	1000021e 	bne	r2,zero,40095dc <_fflush_r+0x5c>
    return 0;
 40095d4:	0005883a 	mov	r2,zero
 40095d8:	00000506 	br	40095f0 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 40095dc:	800b883a 	mov	r5,r16
 40095e0:	e13ffe17 	ldw	r4,-8(fp)
 40095e4:	400927c0 	call	400927c <__sflush_r>
 40095e8:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 40095ec:	e0bffd17 	ldw	r2,-12(fp)
}
 40095f0:	e6ffff04 	addi	sp,fp,-4
 40095f4:	dfc00217 	ldw	ra,8(sp)
 40095f8:	df000117 	ldw	fp,4(sp)
 40095fc:	dc000017 	ldw	r16,0(sp)
 4009600:	dec00304 	addi	sp,sp,12
 4009604:	f800283a 	ret

04009608 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 4009608:	defffe04 	addi	sp,sp,-8
 400960c:	dfc00115 	stw	ra,4(sp)
 4009610:	df000015 	stw	fp,0(sp)
 4009614:	d839883a 	mov	fp,sp
 4009618:	2005883a 	mov	r2,r4
  if (fp == NULL)
 400961c:	1000061e 	bne	r2,zero,4009638 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 4009620:	d0a00a17 	ldw	r2,-32728(gp)
 4009624:	01410074 	movhi	r5,1025
 4009628:	29656004 	addi	r5,r5,-27264
 400962c:	1009883a 	mov	r4,r2
 4009630:	400aa000 	call	400aa00 <_fwalk_reent>
 4009634:	00000406 	br	4009648 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 4009638:	d0e00917 	ldw	r3,-32732(gp)
 400963c:	100b883a 	mov	r5,r2
 4009640:	1809883a 	mov	r4,r3
 4009644:	40095800 	call	4009580 <_fflush_r>
}
 4009648:	e037883a 	mov	sp,fp
 400964c:	dfc00117 	ldw	ra,4(sp)
 4009650:	df000017 	ldw	fp,0(sp)
 4009654:	dec00204 	addi	sp,sp,8
 4009658:	f800283a 	ret

0400965c <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 400965c:	defffa04 	addi	sp,sp,-24
 4009660:	dfc00515 	stw	ra,20(sp)
 4009664:	df000415 	stw	fp,16(sp)
 4009668:	df000404 	addi	fp,sp,16
 400966c:	e13ffc15 	stw	r4,-16(fp)
 4009670:	e17ffd15 	stw	r5,-12(fp)
 4009674:	e1bffe15 	stw	r6,-8(fp)
 4009678:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 400967c:	e0bffc17 	ldw	r2,-16(fp)
 4009680:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 4009684:	e0bffc17 	ldw	r2,-16(fp)
 4009688:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 400968c:	e0bffc17 	ldw	r2,-16(fp)
 4009690:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 4009694:	e0bffd17 	ldw	r2,-12(fp)
 4009698:	1007883a 	mov	r3,r2
 400969c:	e0bffc17 	ldw	r2,-16(fp)
 40096a0:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 40096a4:	e0bffc17 	ldw	r2,-16(fp)
 40096a8:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 40096ac:	e0bffe17 	ldw	r2,-8(fp)
 40096b0:	1007883a 	mov	r3,r2
 40096b4:	e0bffc17 	ldw	r2,-16(fp)
 40096b8:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 40096bc:	e0bffc17 	ldw	r2,-16(fp)
 40096c0:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 40096c4:	e0bffc17 	ldw	r2,-16(fp)
 40096c8:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 40096cc:	e0bffc17 	ldw	r2,-16(fp)
 40096d0:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 40096d4:	e0bffc17 	ldw	r2,-16(fp)
 40096d8:	10801704 	addi	r2,r2,92
 40096dc:	01800204 	movi	r6,8
 40096e0:	000b883a 	mov	r5,zero
 40096e4:	1009883a 	mov	r4,r2
 40096e8:	400c3900 	call	400c390 <memset>
  ptr->_cookie = ptr;
 40096ec:	e0bffc17 	ldw	r2,-16(fp)
 40096f0:	e0fffc17 	ldw	r3,-16(fp)
 40096f4:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 40096f8:	e0fffc17 	ldw	r3,-16(fp)
 40096fc:	00810074 	movhi	r2,1025
 4009700:	10bb8a04 	addi	r2,r2,-4568
 4009704:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 4009708:	e0fffc17 	ldw	r3,-16(fp)
 400970c:	00810074 	movhi	r2,1025
 4009710:	10bbbd04 	addi	r2,r2,-4364
 4009714:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 4009718:	e0fffc17 	ldw	r3,-16(fp)
 400971c:	00810074 	movhi	r2,1025
 4009720:	10bbea04 	addi	r2,r2,-4184
 4009724:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 4009728:	e0fffc17 	ldw	r3,-16(fp)
 400972c:	00810074 	movhi	r2,1025
 4009730:	10bc1204 	addi	r2,r2,-4024
 4009734:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 4009738:	0001883a 	nop
 400973c:	e037883a 	mov	sp,fp
 4009740:	dfc00117 	ldw	ra,4(sp)
 4009744:	df000017 	ldw	fp,0(sp)
 4009748:	dec00204 	addi	sp,sp,8
 400974c:	f800283a 	ret

04009750 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 4009750:	defffb04 	addi	sp,sp,-20
 4009754:	dfc00415 	stw	ra,16(sp)
 4009758:	df000315 	stw	fp,12(sp)
 400975c:	dc000215 	stw	r16,8(sp)
 4009760:	df000304 	addi	fp,sp,12
 4009764:	e13ffe15 	stw	r4,-8(fp)
 4009768:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 400976c:	80bfffc4 	addi	r2,r16,-1
 4009770:	10801a24 	muli	r2,r2,104
 4009774:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 4009778:	100b883a 	mov	r5,r2
 400977c:	e13ffe17 	ldw	r4,-8(fp)
 4009780:	400b2c80 	call	400b2c8 <_malloc_r>
 4009784:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 4009788:	e0bffd17 	ldw	r2,-12(fp)
 400978c:	1000021e 	bne	r2,zero,4009798 <__sfmoreglue+0x48>
    return NULL;
 4009790:	0005883a 	mov	r2,zero
 4009794:	00001106 	br	40097dc <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 4009798:	e0bffd17 	ldw	r2,-12(fp)
 400979c:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 40097a0:	e0bffd17 	ldw	r2,-12(fp)
 40097a4:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 40097a8:	e0bffd17 	ldw	r2,-12(fp)
 40097ac:	10c00304 	addi	r3,r2,12
 40097b0:	e0bffd17 	ldw	r2,-12(fp)
 40097b4:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 40097b8:	e0bffd17 	ldw	r2,-12(fp)
 40097bc:	10800304 	addi	r2,r2,12
 40097c0:	8007883a 	mov	r3,r16
 40097c4:	18c01a24 	muli	r3,r3,104
 40097c8:	180d883a 	mov	r6,r3
 40097cc:	000b883a 	mov	r5,zero
 40097d0:	1009883a 	mov	r4,r2
 40097d4:	400c3900 	call	400c390 <memset>
  return &g->glue;
 40097d8:	e0bffd17 	ldw	r2,-12(fp)
}
 40097dc:	e6ffff04 	addi	sp,fp,-4
 40097e0:	dfc00217 	ldw	ra,8(sp)
 40097e4:	df000117 	ldw	fp,4(sp)
 40097e8:	dc000017 	ldw	r16,0(sp)
 40097ec:	dec00304 	addi	sp,sp,12
 40097f0:	f800283a 	ret

040097f4 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 40097f4:	defffa04 	addi	sp,sp,-24
 40097f8:	dfc00515 	stw	ra,20(sp)
 40097fc:	df000415 	stw	fp,16(sp)
 4009800:	df000404 	addi	fp,sp,16
 4009804:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 4009808:	4009ad80 	call	4009ad8 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 400980c:	d0a00a17 	ldw	r2,-32728(gp)
 4009810:	10800e17 	ldw	r2,56(r2)
 4009814:	1000031e 	bne	r2,zero,4009824 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 4009818:	d0a00a17 	ldw	r2,-32728(gp)
 400981c:	1009883a 	mov	r4,r2
 4009820:	4009a000 	call	4009a00 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 4009824:	d0a00a17 	ldw	r2,-32728(gp)
 4009828:	1080b804 	addi	r2,r2,736
 400982c:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 4009830:	e0bffe17 	ldw	r2,-8(fp)
 4009834:	10800217 	ldw	r2,8(r2)
 4009838:	e0bffc15 	stw	r2,-16(fp)
 400983c:	e0bffe17 	ldw	r2,-8(fp)
 4009840:	10800117 	ldw	r2,4(r2)
 4009844:	e0bffd15 	stw	r2,-12(fp)
 4009848:	00000906 	br	4009870 <__sfp+0x7c>
	if (fp->_flags == 0)
 400984c:	e0bffc17 	ldw	r2,-16(fp)
 4009850:	1080030b 	ldhu	r2,12(r2)
 4009854:	10bfffcc 	andi	r2,r2,65535
 4009858:	10a0001c 	xori	r2,r2,32768
 400985c:	10a00004 	addi	r2,r2,-32768
 4009860:	10001f26 	beq	r2,zero,40098e0 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 4009864:	e0bffc17 	ldw	r2,-16(fp)
 4009868:	10801a04 	addi	r2,r2,104
 400986c:	e0bffc15 	stw	r2,-16(fp)
 4009870:	e0bffd17 	ldw	r2,-12(fp)
 4009874:	10bfffc4 	addi	r2,r2,-1
 4009878:	e0bffd15 	stw	r2,-12(fp)
 400987c:	e0bffd17 	ldw	r2,-12(fp)
 4009880:	103ff20e 	bge	r2,zero,400984c <__alt_data_end+0xfc00984c>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 4009884:	e0bffe17 	ldw	r2,-8(fp)
 4009888:	10800017 	ldw	r2,0(r2)
 400988c:	1000091e 	bne	r2,zero,40098b4 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 4009890:	01400104 	movi	r5,4
 4009894:	e13fff17 	ldw	r4,-4(fp)
 4009898:	40097500 	call	4009750 <__sfmoreglue>
 400989c:	1007883a 	mov	r3,r2
 40098a0:	e0bffe17 	ldw	r2,-8(fp)
 40098a4:	10c00015 	stw	r3,0(r2)
 40098a8:	e0bffe17 	ldw	r2,-8(fp)
 40098ac:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 40098b0:	10000426 	beq	r2,zero,40098c4 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 40098b4:	e0bffe17 	ldw	r2,-8(fp)
 40098b8:	10800017 	ldw	r2,0(r2)
 40098bc:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 40098c0:	003fdb06 	br	4009830 <__alt_data_end+0xfc009830>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 40098c4:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 40098c8:	4009af80 	call	4009af8 <__sfp_lock_release>
  d->_errno = ENOMEM;
 40098cc:	e0bfff17 	ldw	r2,-4(fp)
 40098d0:	00c00304 	movi	r3,12
 40098d4:	10c00015 	stw	r3,0(r2)
  return NULL;
 40098d8:	0005883a 	mov	r2,zero
 40098dc:	00002506 	br	4009974 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 40098e0:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 40098e4:	e0bffc17 	ldw	r2,-16(fp)
 40098e8:	00ffffc4 	movi	r3,-1
 40098ec:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 40098f0:	e0bffc17 	ldw	r2,-16(fp)
 40098f4:	00c00044 	movi	r3,1
 40098f8:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 40098fc:	e0bffc17 	ldw	r2,-16(fp)
 4009900:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 4009904:	4009af80 	call	4009af8 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 4009908:	e0bffc17 	ldw	r2,-16(fp)
 400990c:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 4009910:	e0bffc17 	ldw	r2,-16(fp)
 4009914:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 4009918:	e0bffc17 	ldw	r2,-16(fp)
 400991c:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 4009920:	e0bffc17 	ldw	r2,-16(fp)
 4009924:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 4009928:	e0bffc17 	ldw	r2,-16(fp)
 400992c:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 4009930:	e0bffc17 	ldw	r2,-16(fp)
 4009934:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 4009938:	e0bffc17 	ldw	r2,-16(fp)
 400993c:	10801704 	addi	r2,r2,92
 4009940:	01800204 	movi	r6,8
 4009944:	000b883a 	mov	r5,zero
 4009948:	1009883a 	mov	r4,r2
 400994c:	400c3900 	call	400c390 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 4009950:	e0bffc17 	ldw	r2,-16(fp)
 4009954:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 4009958:	e0bffc17 	ldw	r2,-16(fp)
 400995c:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 4009960:	e0bffc17 	ldw	r2,-16(fp)
 4009964:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 4009968:	e0bffc17 	ldw	r2,-16(fp)
 400996c:	10001215 	stw	zero,72(r2)

  return fp;
 4009970:	e0bffc17 	ldw	r2,-16(fp)
}
 4009974:	e037883a 	mov	sp,fp
 4009978:	dfc00117 	ldw	ra,4(sp)
 400997c:	df000017 	ldw	fp,0(sp)
 4009980:	dec00204 	addi	sp,sp,8
 4009984:	f800283a 	ret

04009988 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 4009988:	defffc04 	addi	sp,sp,-16
 400998c:	dfc00315 	stw	ra,12(sp)
 4009990:	df000215 	stw	fp,8(sp)
 4009994:	df000204 	addi	fp,sp,8
 4009998:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 400999c:	00810074 	movhi	r2,1025
 40099a0:	1082be04 	addi	r2,r2,2808
 40099a4:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 40099a8:	e17ffe17 	ldw	r5,-8(fp)
 40099ac:	e13fff17 	ldw	r4,-4(fp)
 40099b0:	400aa000 	call	400aa00 <_fwalk_reent>
}
 40099b4:	0001883a 	nop
 40099b8:	e037883a 	mov	sp,fp
 40099bc:	dfc00117 	ldw	ra,4(sp)
 40099c0:	df000017 	ldw	fp,0(sp)
 40099c4:	dec00204 	addi	sp,sp,8
 40099c8:	f800283a 	ret

040099cc <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 40099cc:	defffe04 	addi	sp,sp,-8
 40099d0:	dfc00115 	stw	ra,4(sp)
 40099d4:	df000015 	stw	fp,0(sp)
 40099d8:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 40099dc:	d0a00a17 	ldw	r2,-32728(gp)
 40099e0:	1009883a 	mov	r4,r2
 40099e4:	40099880 	call	4009988 <_cleanup_r>
}
 40099e8:	0001883a 	nop
 40099ec:	e037883a 	mov	sp,fp
 40099f0:	dfc00117 	ldw	ra,4(sp)
 40099f4:	df000017 	ldw	fp,0(sp)
 40099f8:	dec00204 	addi	sp,sp,8
 40099fc:	f800283a 	ret

04009a00 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 4009a00:	defffd04 	addi	sp,sp,-12
 4009a04:	dfc00215 	stw	ra,8(sp)
 4009a08:	df000115 	stw	fp,4(sp)
 4009a0c:	df000104 	addi	fp,sp,4
 4009a10:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 4009a14:	4009b180 	call	4009b18 <__sinit_lock_acquire>

  if (s->__sdidinit)
 4009a18:	e0bfff17 	ldw	r2,-4(fp)
 4009a1c:	10800e17 	ldw	r2,56(r2)
 4009a20:	10000226 	beq	r2,zero,4009a2c <__sinit+0x2c>
    {
      __sinit_lock_release ();
 4009a24:	4009b380 	call	4009b38 <__sinit_lock_release>
      return;
 4009a28:	00002606 	br	4009ac4 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 4009a2c:	e0ffff17 	ldw	r3,-4(fp)
 4009a30:	00810074 	movhi	r2,1025
 4009a34:	10a66204 	addi	r2,r2,-26232
 4009a38:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 4009a3c:	e0bfff17 	ldw	r2,-4(fp)
 4009a40:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 4009a44:	e0bfff17 	ldw	r2,-4(fp)
 4009a48:	00c000c4 	movi	r3,3
 4009a4c:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 4009a50:	e0bfff17 	ldw	r2,-4(fp)
 4009a54:	10c0bb04 	addi	r3,r2,748
 4009a58:	e0bfff17 	ldw	r2,-4(fp)
 4009a5c:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 4009a60:	e0bfff17 	ldw	r2,-4(fp)
 4009a64:	10800117 	ldw	r2,4(r2)
 4009a68:	e1ffff17 	ldw	r7,-4(fp)
 4009a6c:	000d883a 	mov	r6,zero
 4009a70:	01400104 	movi	r5,4
 4009a74:	1009883a 	mov	r4,r2
 4009a78:	400965c0 	call	400965c <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 4009a7c:	e0bfff17 	ldw	r2,-4(fp)
 4009a80:	10800217 	ldw	r2,8(r2)
 4009a84:	e1ffff17 	ldw	r7,-4(fp)
 4009a88:	01800044 	movi	r6,1
 4009a8c:	01400284 	movi	r5,10
 4009a90:	1009883a 	mov	r4,r2
 4009a94:	400965c0 	call	400965c <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 4009a98:	e0bfff17 	ldw	r2,-4(fp)
 4009a9c:	10800317 	ldw	r2,12(r2)
 4009aa0:	e1ffff17 	ldw	r7,-4(fp)
 4009aa4:	01800084 	movi	r6,2
 4009aa8:	01400484 	movi	r5,18
 4009aac:	1009883a 	mov	r4,r2
 4009ab0:	400965c0 	call	400965c <std>

  s->__sdidinit = 1;
 4009ab4:	e0bfff17 	ldw	r2,-4(fp)
 4009ab8:	00c00044 	movi	r3,1
 4009abc:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 4009ac0:	4009b380 	call	4009b38 <__sinit_lock_release>
}
 4009ac4:	e037883a 	mov	sp,fp
 4009ac8:	dfc00117 	ldw	ra,4(sp)
 4009acc:	df000017 	ldw	fp,0(sp)
 4009ad0:	dec00204 	addi	sp,sp,8
 4009ad4:	f800283a 	ret

04009ad8 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 4009ad8:	deffff04 	addi	sp,sp,-4
 4009adc:	df000015 	stw	fp,0(sp)
 4009ae0:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 4009ae4:	0001883a 	nop
 4009ae8:	e037883a 	mov	sp,fp
 4009aec:	df000017 	ldw	fp,0(sp)
 4009af0:	dec00104 	addi	sp,sp,4
 4009af4:	f800283a 	ret

04009af8 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 4009af8:	deffff04 	addi	sp,sp,-4
 4009afc:	df000015 	stw	fp,0(sp)
 4009b00:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 4009b04:	0001883a 	nop
 4009b08:	e037883a 	mov	sp,fp
 4009b0c:	df000017 	ldw	fp,0(sp)
 4009b10:	dec00104 	addi	sp,sp,4
 4009b14:	f800283a 	ret

04009b18 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 4009b18:	deffff04 	addi	sp,sp,-4
 4009b1c:	df000015 	stw	fp,0(sp)
 4009b20:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 4009b24:	0001883a 	nop
 4009b28:	e037883a 	mov	sp,fp
 4009b2c:	df000017 	ldw	fp,0(sp)
 4009b30:	dec00104 	addi	sp,sp,4
 4009b34:	f800283a 	ret

04009b38 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 4009b38:	deffff04 	addi	sp,sp,-4
 4009b3c:	df000015 	stw	fp,0(sp)
 4009b40:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 4009b44:	0001883a 	nop
 4009b48:	e037883a 	mov	sp,fp
 4009b4c:	df000017 	ldw	fp,0(sp)
 4009b50:	dec00104 	addi	sp,sp,4
 4009b54:	f800283a 	ret

04009b58 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 4009b58:	defffe04 	addi	sp,sp,-8
 4009b5c:	df000115 	stw	fp,4(sp)
 4009b60:	df000104 	addi	fp,sp,4
 4009b64:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 4009b68:	0005883a 	mov	r2,zero
}
 4009b6c:	e037883a 	mov	sp,fp
 4009b70:	df000017 	ldw	fp,0(sp)
 4009b74:	dec00104 	addi	sp,sp,4
 4009b78:	f800283a 	ret

04009b7c <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 4009b7c:	defffe04 	addi	sp,sp,-8
 4009b80:	df000115 	stw	fp,4(sp)
 4009b84:	df000104 	addi	fp,sp,4
 4009b88:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 4009b8c:	0005883a 	mov	r2,zero
}
 4009b90:	e037883a 	mov	sp,fp
 4009b94:	df000017 	ldw	fp,0(sp)
 4009b98:	dec00104 	addi	sp,sp,4
 4009b9c:	f800283a 	ret

04009ba0 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 4009ba0:	defffe04 	addi	sp,sp,-8
 4009ba4:	dfc00115 	stw	ra,4(sp)
 4009ba8:	df000015 	stw	fp,0(sp)
 4009bac:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 4009bb0:	4009ad80 	call	4009ad8 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 4009bb4:	d0a00917 	ldw	r2,-32732(gp)
 4009bb8:	01410074 	movhi	r5,1025
 4009bbc:	2966d604 	addi	r5,r5,-25768
 4009bc0:	1009883a 	mov	r4,r2
 4009bc4:	400a9280 	call	400a928 <_fwalk>
}
 4009bc8:	0001883a 	nop
 4009bcc:	e037883a 	mov	sp,fp
 4009bd0:	dfc00117 	ldw	ra,4(sp)
 4009bd4:	df000017 	ldw	fp,0(sp)
 4009bd8:	dec00204 	addi	sp,sp,8
 4009bdc:	f800283a 	ret

04009be0 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 4009be0:	defffe04 	addi	sp,sp,-8
 4009be4:	dfc00115 	stw	ra,4(sp)
 4009be8:	df000015 	stw	fp,0(sp)
 4009bec:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 4009bf0:	d0a00917 	ldw	r2,-32732(gp)
 4009bf4:	01410074 	movhi	r5,1025
 4009bf8:	2966df04 	addi	r5,r5,-25732
 4009bfc:	1009883a 	mov	r4,r2
 4009c00:	400a9280 	call	400a928 <_fwalk>

  __sfp_lock_release ();
 4009c04:	4009af80 	call	4009af8 <__sfp_lock_release>
}
 4009c08:	0001883a 	nop
 4009c0c:	e037883a 	mov	sp,fp
 4009c10:	dfc00117 	ldw	ra,4(sp)
 4009c14:	df000017 	ldw	fp,0(sp)
 4009c18:	dec00204 	addi	sp,sp,8
 4009c1c:	f800283a 	ret

04009c20 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 4009c20:	defff204 	addi	sp,sp,-56
 4009c24:	dfc00d15 	stw	ra,52(sp)
 4009c28:	df000c15 	stw	fp,48(sp)
 4009c2c:	df000c04 	addi	fp,sp,48
 4009c30:	e13ffe15 	stw	r4,-8(fp)
 4009c34:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 4009c38:	e0bfff17 	ldw	r2,-4(fp)
 4009c3c:	10014a26 	beq	r2,zero,400a168 <_free_r+0x548>
    return;

  MALLOC_LOCK;
 4009c40:	e13ffe17 	ldw	r4,-8(fp)
 4009c44:	40127f40 	call	40127f4 <__malloc_lock>

  p = mem2chunk(mem);
 4009c48:	e0bfff17 	ldw	r2,-4(fp)
 4009c4c:	10bffe04 	addi	r2,r2,-8
 4009c50:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 4009c54:	e0bff417 	ldw	r2,-48(fp)
 4009c58:	10800117 	ldw	r2,4(r2)
 4009c5c:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 4009c60:	e0fff917 	ldw	r3,-28(fp)
 4009c64:	00bfff84 	movi	r2,-2
 4009c68:	1884703a 	and	r2,r3,r2
 4009c6c:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 4009c70:	e0fff417 	ldw	r3,-48(fp)
 4009c74:	e0bff517 	ldw	r2,-44(fp)
 4009c78:	1885883a 	add	r2,r3,r2
 4009c7c:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 4009c80:	e0bffa17 	ldw	r2,-24(fp)
 4009c84:	10c00117 	ldw	r3,4(r2)
 4009c88:	00bfff04 	movi	r2,-4
 4009c8c:	1884703a 	and	r2,r3,r2
 4009c90:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 4009c94:	00810074 	movhi	r2,1025
 4009c98:	10968a04 	addi	r2,r2,23080
 4009c9c:	10c00217 	ldw	r3,8(r2)
 4009ca0:	e0bffa17 	ldw	r2,-24(fp)
 4009ca4:	1880311e 	bne	r3,r2,4009d6c <_free_r+0x14c>
  {
    sz += nextsz;
 4009ca8:	e0fff517 	ldw	r3,-44(fp)
 4009cac:	e0bffb17 	ldw	r2,-20(fp)
 4009cb0:	1885883a 	add	r2,r3,r2
 4009cb4:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 4009cb8:	e0bff917 	ldw	r2,-28(fp)
 4009cbc:	1080004c 	andi	r2,r2,1
 4009cc0:	1000181e 	bne	r2,zero,4009d24 <_free_r+0x104>
    {
      prevsz = p->prev_size;
 4009cc4:	e0bff417 	ldw	r2,-48(fp)
 4009cc8:	10800017 	ldw	r2,0(r2)
 4009ccc:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 4009cd0:	e0bffc17 	ldw	r2,-16(fp)
 4009cd4:	0085c83a 	sub	r2,zero,r2
 4009cd8:	e0fff417 	ldw	r3,-48(fp)
 4009cdc:	1885883a 	add	r2,r3,r2
 4009ce0:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 4009ce4:	e0fff517 	ldw	r3,-44(fp)
 4009ce8:	e0bffc17 	ldw	r2,-16(fp)
 4009cec:	1885883a 	add	r2,r3,r2
 4009cf0:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 4009cf4:	e0bff417 	ldw	r2,-48(fp)
 4009cf8:	10800317 	ldw	r2,12(r2)
 4009cfc:	e0bff615 	stw	r2,-40(fp)
 4009d00:	e0bff417 	ldw	r2,-48(fp)
 4009d04:	10800217 	ldw	r2,8(r2)
 4009d08:	e0bff715 	stw	r2,-36(fp)
 4009d0c:	e0bff717 	ldw	r2,-36(fp)
 4009d10:	e0fff617 	ldw	r3,-40(fp)
 4009d14:	10c00315 	stw	r3,12(r2)
 4009d18:	e0bff617 	ldw	r2,-40(fp)
 4009d1c:	e0fff717 	ldw	r3,-36(fp)
 4009d20:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 4009d24:	e0bff517 	ldw	r2,-44(fp)
 4009d28:	10c00054 	ori	r3,r2,1
 4009d2c:	e0bff417 	ldw	r2,-48(fp)
 4009d30:	10c00115 	stw	r3,4(r2)
    top = p;
 4009d34:	00810074 	movhi	r2,1025
 4009d38:	10968a04 	addi	r2,r2,23080
 4009d3c:	e0fff417 	ldw	r3,-48(fp)
 4009d40:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 4009d44:	d0a00c17 	ldw	r2,-32720(gp)
 4009d48:	e0fff517 	ldw	r3,-44(fp)
 4009d4c:	18800436 	bltu	r3,r2,4009d60 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 4009d50:	d0a6eb17 	ldw	r2,-25684(gp)
 4009d54:	100b883a 	mov	r5,r2
 4009d58:	e13ffe17 	ldw	r4,-8(fp)
 4009d5c:	400a1800 	call	400a180 <_malloc_trim_r>
    MALLOC_UNLOCK;
 4009d60:	e13ffe17 	ldw	r4,-8(fp)
 4009d64:	40128180 	call	4012818 <__malloc_unlock>
    return;
 4009d68:	00010006 	br	400a16c <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 4009d6c:	e0bffa17 	ldw	r2,-24(fp)
 4009d70:	e0fffb17 	ldw	r3,-20(fp)
 4009d74:	10c00115 	stw	r3,4(r2)

  islr = 0;
 4009d78:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 4009d7c:	e0bff917 	ldw	r2,-28(fp)
 4009d80:	1080004c 	andi	r2,r2,1
 4009d84:	1000201e 	bne	r2,zero,4009e08 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 4009d88:	e0bff417 	ldw	r2,-48(fp)
 4009d8c:	10800017 	ldw	r2,0(r2)
 4009d90:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 4009d94:	e0bffc17 	ldw	r2,-16(fp)
 4009d98:	0085c83a 	sub	r2,zero,r2
 4009d9c:	e0fff417 	ldw	r3,-48(fp)
 4009da0:	1885883a 	add	r2,r3,r2
 4009da4:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 4009da8:	e0fff517 	ldw	r3,-44(fp)
 4009dac:	e0bffc17 	ldw	r2,-16(fp)
 4009db0:	1885883a 	add	r2,r3,r2
 4009db4:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 4009db8:	e0bff417 	ldw	r2,-48(fp)
 4009dbc:	10c00217 	ldw	r3,8(r2)
 4009dc0:	00810074 	movhi	r2,1025
 4009dc4:	10968c04 	addi	r2,r2,23088
 4009dc8:	1880031e 	bne	r3,r2,4009dd8 <_free_r+0x1b8>
      islr = 1;
 4009dcc:	00800044 	movi	r2,1
 4009dd0:	e0bff815 	stw	r2,-32(fp)
 4009dd4:	00000c06 	br	4009e08 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 4009dd8:	e0bff417 	ldw	r2,-48(fp)
 4009ddc:	10800317 	ldw	r2,12(r2)
 4009de0:	e0bff615 	stw	r2,-40(fp)
 4009de4:	e0bff417 	ldw	r2,-48(fp)
 4009de8:	10800217 	ldw	r2,8(r2)
 4009dec:	e0bff715 	stw	r2,-36(fp)
 4009df0:	e0bff717 	ldw	r2,-36(fp)
 4009df4:	e0fff617 	ldw	r3,-40(fp)
 4009df8:	10c00315 	stw	r3,12(r2)
 4009dfc:	e0bff617 	ldw	r2,-40(fp)
 4009e00:	e0fff717 	ldw	r3,-36(fp)
 4009e04:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 4009e08:	e0fffa17 	ldw	r3,-24(fp)
 4009e0c:	e0bffb17 	ldw	r2,-20(fp)
 4009e10:	1885883a 	add	r2,r3,r2
 4009e14:	10800117 	ldw	r2,4(r2)
 4009e18:	1080004c 	andi	r2,r2,1
 4009e1c:	10002a1e 	bne	r2,zero,4009ec8 <_free_r+0x2a8>
  {
    sz += nextsz;
 4009e20:	e0fff517 	ldw	r3,-44(fp)
 4009e24:	e0bffb17 	ldw	r2,-20(fp)
 4009e28:	1885883a 	add	r2,r3,r2
 4009e2c:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 4009e30:	e0bff817 	ldw	r2,-32(fp)
 4009e34:	1000181e 	bne	r2,zero,4009e98 <_free_r+0x278>
 4009e38:	e0bffa17 	ldw	r2,-24(fp)
 4009e3c:	10c00217 	ldw	r3,8(r2)
 4009e40:	00810074 	movhi	r2,1025
 4009e44:	10968c04 	addi	r2,r2,23088
 4009e48:	1880131e 	bne	r3,r2,4009e98 <_free_r+0x278>
    {
      islr = 1;
 4009e4c:	00800044 	movi	r2,1
 4009e50:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 4009e54:	00c10074 	movhi	r3,1025
 4009e58:	18d68c04 	addi	r3,r3,23088
 4009e5c:	00810074 	movhi	r2,1025
 4009e60:	10968c04 	addi	r2,r2,23088
 4009e64:	e13ff417 	ldw	r4,-48(fp)
 4009e68:	11000315 	stw	r4,12(r2)
 4009e6c:	10800317 	ldw	r2,12(r2)
 4009e70:	18800215 	stw	r2,8(r3)
 4009e74:	00810074 	movhi	r2,1025
 4009e78:	10968c04 	addi	r2,r2,23088
 4009e7c:	e0fff417 	ldw	r3,-48(fp)
 4009e80:	18800315 	stw	r2,12(r3)
 4009e84:	e0bff417 	ldw	r2,-48(fp)
 4009e88:	10c00317 	ldw	r3,12(r2)
 4009e8c:	e0bff417 	ldw	r2,-48(fp)
 4009e90:	10c00215 	stw	r3,8(r2)
 4009e94:	00000c06 	br	4009ec8 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 4009e98:	e0bffa17 	ldw	r2,-24(fp)
 4009e9c:	10800317 	ldw	r2,12(r2)
 4009ea0:	e0bff615 	stw	r2,-40(fp)
 4009ea4:	e0bffa17 	ldw	r2,-24(fp)
 4009ea8:	10800217 	ldw	r2,8(r2)
 4009eac:	e0bff715 	stw	r2,-36(fp)
 4009eb0:	e0bff717 	ldw	r2,-36(fp)
 4009eb4:	e0fff617 	ldw	r3,-40(fp)
 4009eb8:	10c00315 	stw	r3,12(r2)
 4009ebc:	e0bff617 	ldw	r2,-40(fp)
 4009ec0:	e0fff717 	ldw	r3,-36(fp)
 4009ec4:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 4009ec8:	e0bff517 	ldw	r2,-44(fp)
 4009ecc:	10c00054 	ori	r3,r2,1
 4009ed0:	e0bff417 	ldw	r2,-48(fp)
 4009ed4:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 4009ed8:	e0fff417 	ldw	r3,-48(fp)
 4009edc:	e0bff517 	ldw	r2,-44(fp)
 4009ee0:	1885883a 	add	r2,r3,r2
 4009ee4:	e0fff517 	ldw	r3,-44(fp)
 4009ee8:	10c00015 	stw	r3,0(r2)
  if (!islr)
 4009eec:	e0bff817 	ldw	r2,-32(fp)
 4009ef0:	10009a1e 	bne	r2,zero,400a15c <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 4009ef4:	e0bff517 	ldw	r2,-44(fp)
 4009ef8:	10808028 	cmpgeui	r2,r2,512
 4009efc:	10002c1e 	bne	r2,zero,4009fb0 <_free_r+0x390>
 4009f00:	e0bff517 	ldw	r2,-44(fp)
 4009f04:	1004d0fa 	srli	r2,r2,3
 4009f08:	e0bffd15 	stw	r2,-12(fp)
 4009f0c:	00c10074 	movhi	r3,1025
 4009f10:	18d68a04 	addi	r3,r3,23080
 4009f14:	00810074 	movhi	r2,1025
 4009f18:	10968a04 	addi	r2,r2,23080
 4009f1c:	11000117 	ldw	r4,4(r2)
 4009f20:	e0bffd17 	ldw	r2,-12(fp)
 4009f24:	1000010e 	bge	r2,zero,4009f2c <_free_r+0x30c>
 4009f28:	108000c4 	addi	r2,r2,3
 4009f2c:	1005d0ba 	srai	r2,r2,2
 4009f30:	100b883a 	mov	r5,r2
 4009f34:	00800044 	movi	r2,1
 4009f38:	1144983a 	sll	r2,r2,r5
 4009f3c:	2084b03a 	or	r2,r4,r2
 4009f40:	18800115 	stw	r2,4(r3)
 4009f44:	e0bffd17 	ldw	r2,-12(fp)
 4009f48:	10800044 	addi	r2,r2,1
 4009f4c:	1085883a 	add	r2,r2,r2
 4009f50:	1085883a 	add	r2,r2,r2
 4009f54:	1087883a 	add	r3,r2,r2
 4009f58:	00810074 	movhi	r2,1025
 4009f5c:	10968a04 	addi	r2,r2,23080
 4009f60:	1885883a 	add	r2,r3,r2
 4009f64:	10bffe04 	addi	r2,r2,-8
 4009f68:	e0bff615 	stw	r2,-40(fp)
 4009f6c:	e0bff617 	ldw	r2,-40(fp)
 4009f70:	10800217 	ldw	r2,8(r2)
 4009f74:	e0bff715 	stw	r2,-36(fp)
 4009f78:	e0bff417 	ldw	r2,-48(fp)
 4009f7c:	e0fff617 	ldw	r3,-40(fp)
 4009f80:	10c00315 	stw	r3,12(r2)
 4009f84:	e0bff417 	ldw	r2,-48(fp)
 4009f88:	e0fff717 	ldw	r3,-36(fp)
 4009f8c:	10c00215 	stw	r3,8(r2)
 4009f90:	e0bff617 	ldw	r2,-40(fp)
 4009f94:	e0fff417 	ldw	r3,-48(fp)
 4009f98:	10c00215 	stw	r3,8(r2)
 4009f9c:	e0bff617 	ldw	r2,-40(fp)
 4009fa0:	10c00217 	ldw	r3,8(r2)
 4009fa4:	e0bff717 	ldw	r2,-36(fp)
 4009fa8:	10c00315 	stw	r3,12(r2)
 4009fac:	00006b06 	br	400a15c <_free_r+0x53c>
 4009fb0:	e0bff517 	ldw	r2,-44(fp)
 4009fb4:	1004d27a 	srli	r2,r2,9
 4009fb8:	1000031e 	bne	r2,zero,4009fc8 <_free_r+0x3a8>
 4009fbc:	e0bff517 	ldw	r2,-44(fp)
 4009fc0:	1004d0fa 	srli	r2,r2,3
 4009fc4:	00002906 	br	400a06c <_free_r+0x44c>
 4009fc8:	e0bff517 	ldw	r2,-44(fp)
 4009fcc:	1004d27a 	srli	r2,r2,9
 4009fd0:	10800168 	cmpgeui	r2,r2,5
 4009fd4:	1000041e 	bne	r2,zero,4009fe8 <_free_r+0x3c8>
 4009fd8:	e0bff517 	ldw	r2,-44(fp)
 4009fdc:	1004d1ba 	srli	r2,r2,6
 4009fe0:	10800e04 	addi	r2,r2,56
 4009fe4:	00002106 	br	400a06c <_free_r+0x44c>
 4009fe8:	e0bff517 	ldw	r2,-44(fp)
 4009fec:	1004d27a 	srli	r2,r2,9
 4009ff0:	10800568 	cmpgeui	r2,r2,21
 4009ff4:	1000041e 	bne	r2,zero,400a008 <_free_r+0x3e8>
 4009ff8:	e0bff517 	ldw	r2,-44(fp)
 4009ffc:	1004d27a 	srli	r2,r2,9
 400a000:	108016c4 	addi	r2,r2,91
 400a004:	00001906 	br	400a06c <_free_r+0x44c>
 400a008:	e0bff517 	ldw	r2,-44(fp)
 400a00c:	1004d27a 	srli	r2,r2,9
 400a010:	10801568 	cmpgeui	r2,r2,85
 400a014:	1000041e 	bne	r2,zero,400a028 <_free_r+0x408>
 400a018:	e0bff517 	ldw	r2,-44(fp)
 400a01c:	1004d33a 	srli	r2,r2,12
 400a020:	10801b84 	addi	r2,r2,110
 400a024:	00001106 	br	400a06c <_free_r+0x44c>
 400a028:	e0bff517 	ldw	r2,-44(fp)
 400a02c:	1004d27a 	srli	r2,r2,9
 400a030:	10805568 	cmpgeui	r2,r2,341
 400a034:	1000041e 	bne	r2,zero,400a048 <_free_r+0x428>
 400a038:	e0bff517 	ldw	r2,-44(fp)
 400a03c:	1004d3fa 	srli	r2,r2,15
 400a040:	10801dc4 	addi	r2,r2,119
 400a044:	00000906 	br	400a06c <_free_r+0x44c>
 400a048:	e0bff517 	ldw	r2,-44(fp)
 400a04c:	1004d27a 	srli	r2,r2,9
 400a050:	10815568 	cmpgeui	r2,r2,1365
 400a054:	1000041e 	bne	r2,zero,400a068 <_free_r+0x448>
 400a058:	e0bff517 	ldw	r2,-44(fp)
 400a05c:	1004d4ba 	srli	r2,r2,18
 400a060:	10801f04 	addi	r2,r2,124
 400a064:	00000106 	br	400a06c <_free_r+0x44c>
 400a068:	00801f84 	movi	r2,126
 400a06c:	e0bffd15 	stw	r2,-12(fp)
 400a070:	e0bffd17 	ldw	r2,-12(fp)
 400a074:	10800044 	addi	r2,r2,1
 400a078:	1085883a 	add	r2,r2,r2
 400a07c:	1085883a 	add	r2,r2,r2
 400a080:	1087883a 	add	r3,r2,r2
 400a084:	00810074 	movhi	r2,1025
 400a088:	10968a04 	addi	r2,r2,23080
 400a08c:	1885883a 	add	r2,r3,r2
 400a090:	10bffe04 	addi	r2,r2,-8
 400a094:	e0bff615 	stw	r2,-40(fp)
 400a098:	e0bff617 	ldw	r2,-40(fp)
 400a09c:	10800217 	ldw	r2,8(r2)
 400a0a0:	e0bff715 	stw	r2,-36(fp)
 400a0a4:	e0fff717 	ldw	r3,-36(fp)
 400a0a8:	e0bff617 	ldw	r2,-40(fp)
 400a0ac:	1880121e 	bne	r3,r2,400a0f8 <_free_r+0x4d8>
 400a0b0:	00c10074 	movhi	r3,1025
 400a0b4:	18d68a04 	addi	r3,r3,23080
 400a0b8:	00810074 	movhi	r2,1025
 400a0bc:	10968a04 	addi	r2,r2,23080
 400a0c0:	11000117 	ldw	r4,4(r2)
 400a0c4:	e0bffd17 	ldw	r2,-12(fp)
 400a0c8:	1000010e 	bge	r2,zero,400a0d0 <_free_r+0x4b0>
 400a0cc:	108000c4 	addi	r2,r2,3
 400a0d0:	1005d0ba 	srai	r2,r2,2
 400a0d4:	100b883a 	mov	r5,r2
 400a0d8:	00800044 	movi	r2,1
 400a0dc:	1144983a 	sll	r2,r2,r5
 400a0e0:	2084b03a 	or	r2,r4,r2
 400a0e4:	18800115 	stw	r2,4(r3)
 400a0e8:	00000f06 	br	400a128 <_free_r+0x508>
 400a0ec:	e0bff717 	ldw	r2,-36(fp)
 400a0f0:	10800217 	ldw	r2,8(r2)
 400a0f4:	e0bff715 	stw	r2,-36(fp)
 400a0f8:	e0fff717 	ldw	r3,-36(fp)
 400a0fc:	e0bff617 	ldw	r2,-40(fp)
 400a100:	18800626 	beq	r3,r2,400a11c <_free_r+0x4fc>
 400a104:	e0bff717 	ldw	r2,-36(fp)
 400a108:	10c00117 	ldw	r3,4(r2)
 400a10c:	00bfff04 	movi	r2,-4
 400a110:	1884703a 	and	r2,r3,r2
 400a114:	e0fff517 	ldw	r3,-44(fp)
 400a118:	18bff436 	bltu	r3,r2,400a0ec <__alt_data_end+0xfc00a0ec>
 400a11c:	e0bff717 	ldw	r2,-36(fp)
 400a120:	10800317 	ldw	r2,12(r2)
 400a124:	e0bff615 	stw	r2,-40(fp)
 400a128:	e0bff417 	ldw	r2,-48(fp)
 400a12c:	e0fff617 	ldw	r3,-40(fp)
 400a130:	10c00315 	stw	r3,12(r2)
 400a134:	e0bff417 	ldw	r2,-48(fp)
 400a138:	e0fff717 	ldw	r3,-36(fp)
 400a13c:	10c00215 	stw	r3,8(r2)
 400a140:	e0bff617 	ldw	r2,-40(fp)
 400a144:	e0fff417 	ldw	r3,-48(fp)
 400a148:	10c00215 	stw	r3,8(r2)
 400a14c:	e0bff617 	ldw	r2,-40(fp)
 400a150:	10c00217 	ldw	r3,8(r2)
 400a154:	e0bff717 	ldw	r2,-36(fp)
 400a158:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 400a15c:	e13ffe17 	ldw	r4,-8(fp)
 400a160:	40128180 	call	4012818 <__malloc_unlock>
 400a164:	00000106 	br	400a16c <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 400a168:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 400a16c:	e037883a 	mov	sp,fp
 400a170:	dfc00117 	ldw	ra,4(sp)
 400a174:	df000017 	ldw	fp,0(sp)
 400a178:	dec00204 	addi	sp,sp,8
 400a17c:	f800283a 	ret

0400a180 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 400a180:	defff704 	addi	sp,sp,-36
 400a184:	dfc00815 	stw	ra,32(sp)
 400a188:	df000715 	stw	fp,28(sp)
 400a18c:	df000704 	addi	fp,sp,28
 400a190:	e13ffe15 	stw	r4,-8(fp)
 400a194:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 400a198:	00840004 	movi	r2,4096
 400a19c:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 400a1a0:	e13ffe17 	ldw	r4,-8(fp)
 400a1a4:	40127f40 	call	40127f4 <__malloc_lock>

  top_size = chunksize(top);
 400a1a8:	00810074 	movhi	r2,1025
 400a1ac:	10968a04 	addi	r2,r2,23080
 400a1b0:	10800217 	ldw	r2,8(r2)
 400a1b4:	10800117 	ldw	r2,4(r2)
 400a1b8:	1007883a 	mov	r3,r2
 400a1bc:	00bfff04 	movi	r2,-4
 400a1c0:	1884703a 	and	r2,r3,r2
 400a1c4:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 400a1c8:	e0fffa17 	ldw	r3,-24(fp)
 400a1cc:	e0bfff17 	ldw	r2,-4(fp)
 400a1d0:	1887c83a 	sub	r3,r3,r2
 400a1d4:	e0bff917 	ldw	r2,-28(fp)
 400a1d8:	1885883a 	add	r2,r3,r2
 400a1dc:	10bffbc4 	addi	r2,r2,-17
 400a1e0:	e17ff917 	ldw	r5,-28(fp)
 400a1e4:	1009883a 	mov	r4,r2
 400a1e8:	40045e80 	call	40045e8 <__udivsi3>
 400a1ec:	10ffffc4 	addi	r3,r2,-1
 400a1f0:	e0bff917 	ldw	r2,-28(fp)
 400a1f4:	1885383a 	mul	r2,r3,r2
 400a1f8:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 400a1fc:	e0bff917 	ldw	r2,-28(fp)
 400a200:	e0fffb17 	ldw	r3,-20(fp)
 400a204:	1880040e 	bge	r3,r2,400a218 <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 400a208:	e13ffe17 	ldw	r4,-8(fp)
 400a20c:	40128180 	call	4012818 <__malloc_unlock>
    return 0;
 400a210:	0005883a 	mov	r2,zero
 400a214:	00004806 	br	400a338 <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 400a218:	000b883a 	mov	r5,zero
 400a21c:	e13ffe17 	ldw	r4,-8(fp)
 400a220:	400edc80 	call	400edc8 <_sbrk_r>
 400a224:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 400a228:	00810074 	movhi	r2,1025
 400a22c:	10968a04 	addi	r2,r2,23080
 400a230:	10c00217 	ldw	r3,8(r2)
 400a234:	e0bffa17 	ldw	r2,-24(fp)
 400a238:	1887883a 	add	r3,r3,r2
 400a23c:	e0bffc17 	ldw	r2,-16(fp)
 400a240:	18800426 	beq	r3,r2,400a254 <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 400a244:	e13ffe17 	ldw	r4,-8(fp)
 400a248:	40128180 	call	4012818 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 400a24c:	0005883a 	mov	r2,zero
 400a250:	00003906 	br	400a338 <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 400a254:	e0bffb17 	ldw	r2,-20(fp)
 400a258:	0085c83a 	sub	r2,zero,r2
 400a25c:	100b883a 	mov	r5,r2
 400a260:	e13ffe17 	ldw	r4,-8(fp)
 400a264:	400edc80 	call	400edc8 <_sbrk_r>
 400a268:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 400a26c:	e0bffd17 	ldw	r2,-12(fp)
 400a270:	10bfffd8 	cmpnei	r2,r2,-1
 400a274:	10001d1e 	bne	r2,zero,400a2ec <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 400a278:	000b883a 	mov	r5,zero
 400a27c:	e13ffe17 	ldw	r4,-8(fp)
 400a280:	400edc80 	call	400edc8 <_sbrk_r>
 400a284:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 400a288:	e0fffc17 	ldw	r3,-16(fp)
 400a28c:	00810074 	movhi	r2,1025
 400a290:	10968a04 	addi	r2,r2,23080
 400a294:	10800217 	ldw	r2,8(r2)
 400a298:	1885c83a 	sub	r2,r3,r2
 400a29c:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 400a2a0:	e0bffa17 	ldw	r2,-24(fp)
 400a2a4:	10800410 	cmplti	r2,r2,16
 400a2a8:	10000c1e 	bne	r2,zero,400a2dc <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 400a2ac:	e0bffc17 	ldw	r2,-16(fp)
 400a2b0:	d0e00d17 	ldw	r3,-32716(gp)
 400a2b4:	10c7c83a 	sub	r3,r2,r3
 400a2b8:	008100b4 	movhi	r2,1026
 400a2bc:	10a30804 	addi	r2,r2,-29664
 400a2c0:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 400a2c4:	00810074 	movhi	r2,1025
 400a2c8:	10968a04 	addi	r2,r2,23080
 400a2cc:	10800217 	ldw	r2,8(r2)
 400a2d0:	e0fffa17 	ldw	r3,-24(fp)
 400a2d4:	18c00054 	ori	r3,r3,1
 400a2d8:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 400a2dc:	e13ffe17 	ldw	r4,-8(fp)
 400a2e0:	40128180 	call	4012818 <__malloc_unlock>
        return 0; 
 400a2e4:	0005883a 	mov	r2,zero
 400a2e8:	00001306 	br	400a338 <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 400a2ec:	00810074 	movhi	r2,1025
 400a2f0:	10968a04 	addi	r2,r2,23080
 400a2f4:	10800217 	ldw	r2,8(r2)
 400a2f8:	e13ffa17 	ldw	r4,-24(fp)
 400a2fc:	e0fffb17 	ldw	r3,-20(fp)
 400a300:	20c7c83a 	sub	r3,r4,r3
 400a304:	18c00054 	ori	r3,r3,1
 400a308:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 400a30c:	008100b4 	movhi	r2,1026
 400a310:	10a30804 	addi	r2,r2,-29664
 400a314:	10c00017 	ldw	r3,0(r2)
 400a318:	e0bffb17 	ldw	r2,-20(fp)
 400a31c:	1887c83a 	sub	r3,r3,r2
 400a320:	008100b4 	movhi	r2,1026
 400a324:	10a30804 	addi	r2,r2,-29664
 400a328:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 400a32c:	e13ffe17 	ldw	r4,-8(fp)
 400a330:	40128180 	call	4012818 <__malloc_unlock>
        return 1;
 400a334:	00800044 	movi	r2,1
      }
    }
  }
}
 400a338:	e037883a 	mov	sp,fp
 400a33c:	dfc00117 	ldw	ra,4(sp)
 400a340:	df000017 	ldw	fp,0(sp)
 400a344:	dec00204 	addi	sp,sp,8
 400a348:	f800283a 	ret

0400a34c <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 400a34c:	defff004 	addi	sp,sp,-64
 400a350:	dfc00f15 	stw	ra,60(sp)
 400a354:	df000e15 	stw	fp,56(sp)
 400a358:	dd800d15 	stw	r22,52(sp)
 400a35c:	dd400c15 	stw	r21,48(sp)
 400a360:	dd000b15 	stw	r20,44(sp)
 400a364:	dcc00a15 	stw	r19,40(sp)
 400a368:	dc800915 	stw	r18,36(sp)
 400a36c:	dc400815 	stw	r17,32(sp)
 400a370:	dc000715 	stw	r16,28(sp)
 400a374:	df000e04 	addi	fp,sp,56
 400a378:	e13ff815 	stw	r4,-32(fp)
 400a37c:	2821883a 	mov	r16,r5
 400a380:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 400a384:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 400a388:	ac800217 	ldw	r18,8(r21)
 400a38c:	9000021e 	bne	r18,zero,400a398 <__sfvwrite_r+0x4c>
    return 0;
 400a390:	0005883a 	mov	r2,zero
 400a394:	00015806 	br	400a8f8 <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 400a398:	8080030b 	ldhu	r2,12(r16)
 400a39c:	10bfffcc 	andi	r2,r2,65535
 400a3a0:	1080020c 	andi	r2,r2,8
 400a3a4:	10000226 	beq	r2,zero,400a3b0 <__sfvwrite_r+0x64>
 400a3a8:	80800417 	ldw	r2,16(r16)
 400a3ac:	1000061e 	bne	r2,zero,400a3c8 <__sfvwrite_r+0x7c>
 400a3b0:	800b883a 	mov	r5,r16
 400a3b4:	e13ff817 	ldw	r4,-32(fp)
 400a3b8:	40071b00 	call	40071b0 <__swsetup_r>
 400a3bc:	10000226 	beq	r2,zero,400a3c8 <__sfvwrite_r+0x7c>
    return EOF;
 400a3c0:	00bfffc4 	movi	r2,-1
 400a3c4:	00014c06 	br	400a8f8 <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 400a3c8:	ad000017 	ldw	r20,0(r21)
  len = 0;
 400a3cc:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 400a3d0:	8080030b 	ldhu	r2,12(r16)
 400a3d4:	10bfffcc 	andi	r2,r2,65535
 400a3d8:	1080008c 	andi	r2,r2,2
 400a3dc:	10001f26 	beq	r2,zero,400a45c <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 400a3e0:	00000306 	br	400a3f0 <__sfvwrite_r+0xa4>
 400a3e4:	a4c00017 	ldw	r19,0(r20)
 400a3e8:	a4800117 	ldw	r18,4(r20)
 400a3ec:	a5000204 	addi	r20,r20,8
 400a3f0:	903ffc26 	beq	r18,zero,400a3e4 <__alt_data_end+0xfc00a3e4>
	  w = fp->_write (ptr, fp->_cookie, p,
 400a3f4:	82000917 	ldw	r8,36(r16)
 400a3f8:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 400a3fc:	9005883a 	mov	r2,r18
 400a400:	00e00034 	movhi	r3,32768
 400a404:	18ff0004 	addi	r3,r3,-1024
 400a408:	1880022e 	bgeu	r3,r2,400a414 <__sfvwrite_r+0xc8>
 400a40c:	00a00034 	movhi	r2,32768
 400a410:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 400a414:	100f883a 	mov	r7,r2
 400a418:	980d883a 	mov	r6,r19
 400a41c:	200b883a 	mov	r5,r4
 400a420:	e13ff817 	ldw	r4,-32(fp)
 400a424:	403ee83a 	callr	r8
 400a428:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 400a42c:	0441290e 	bge	zero,r17,400a8d4 <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 400a430:	8805883a 	mov	r2,r17
 400a434:	98a7883a 	add	r19,r19,r2
	  len -= w;
 400a438:	8805883a 	mov	r2,r17
 400a43c:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 400a440:	a8800217 	ldw	r2,8(r21)
 400a444:	8807883a 	mov	r3,r17
 400a448:	10c5c83a 	sub	r2,r2,r3
 400a44c:	a8800215 	stw	r2,8(r21)
 400a450:	a8800217 	ldw	r2,8(r21)
 400a454:	103fe61e 	bne	r2,zero,400a3f0 <__alt_data_end+0xfc00a3f0>
 400a458:	00011c06 	br	400a8cc <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 400a45c:	8080030b 	ldhu	r2,12(r16)
 400a460:	10bfffcc 	andi	r2,r2,65535
 400a464:	1080004c 	andi	r2,r2,1
 400a468:	1000b51e 	bne	r2,zero,400a740 <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 400a46c:	00000306 	br	400a47c <__sfvwrite_r+0x130>
 400a470:	a4c00017 	ldw	r19,0(r20)
 400a474:	a4800117 	ldw	r18,4(r20)
 400a478:	a5000204 	addi	r20,r20,8
 400a47c:	903ffc26 	beq	r18,zero,400a470 <__alt_data_end+0xfc00a470>
	  w = fp->_w;
 400a480:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 400a484:	8080030b 	ldhu	r2,12(r16)
 400a488:	10bfffcc 	andi	r2,r2,65535
 400a48c:	1080800c 	andi	r2,r2,512
 400a490:	10006b26 	beq	r2,zero,400a640 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 400a494:	8805883a 	mov	r2,r17
 400a498:	90805736 	bltu	r18,r2,400a5f8 <__sfvwrite_r+0x2ac>
 400a49c:	8080030b 	ldhu	r2,12(r16)
 400a4a0:	10bfffcc 	andi	r2,r2,65535
 400a4a4:	1081200c 	andi	r2,r2,1152
 400a4a8:	10005326 	beq	r2,zero,400a5f8 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 400a4ac:	80800017 	ldw	r2,0(r16)
 400a4b0:	1007883a 	mov	r3,r2
 400a4b4:	80800417 	ldw	r2,16(r16)
 400a4b8:	1885c83a 	sub	r2,r3,r2
 400a4bc:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 400a4c0:	80c00517 	ldw	r3,20(r16)
 400a4c4:	1805883a 	mov	r2,r3
 400a4c8:	1085883a 	add	r2,r2,r2
 400a4cc:	10c5883a 	add	r2,r2,r3
 400a4d0:	1006d7fa 	srli	r3,r2,31
 400a4d4:	1885883a 	add	r2,r3,r2
 400a4d8:	1005d07a 	srai	r2,r2,1
 400a4dc:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 400a4e0:	e0bff617 	ldw	r2,-40(fp)
 400a4e4:	1485883a 	add	r2,r2,r18
 400a4e8:	10800044 	addi	r2,r2,1
 400a4ec:	e0fff517 	ldw	r3,-44(fp)
 400a4f0:	1880042e 	bgeu	r3,r2,400a504 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 400a4f4:	e0bff617 	ldw	r2,-40(fp)
 400a4f8:	1485883a 	add	r2,r2,r18
 400a4fc:	10800044 	addi	r2,r2,1
 400a500:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 400a504:	8080030b 	ldhu	r2,12(r16)
 400a508:	10bfffcc 	andi	r2,r2,65535
 400a50c:	1081000c 	andi	r2,r2,1024
 400a510:	10001726 	beq	r2,zero,400a570 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 400a514:	e0bff517 	ldw	r2,-44(fp)
 400a518:	100b883a 	mov	r5,r2
 400a51c:	e13ff817 	ldw	r4,-32(fp)
 400a520:	400b2c80 	call	400b2c8 <_malloc_r>
 400a524:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 400a528:	e0bff417 	ldw	r2,-48(fp)
 400a52c:	1000041e 	bne	r2,zero,400a540 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 400a530:	e0bff817 	ldw	r2,-32(fp)
 400a534:	00c00304 	movi	r3,12
 400a538:	10c00015 	stw	r3,0(r2)
			  goto err;
 400a53c:	0000ea06 	br	400a8e8 <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 400a540:	80800417 	ldw	r2,16(r16)
 400a544:	e0fff617 	ldw	r3,-40(fp)
 400a548:	180d883a 	mov	r6,r3
 400a54c:	100b883a 	mov	r5,r2
 400a550:	e13ff417 	ldw	r4,-48(fp)
 400a554:	400c0000 	call	400c000 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 400a558:	80c0030b 	ldhu	r3,12(r16)
 400a55c:	00bedfc4 	movi	r2,-1153
 400a560:	1884703a 	and	r2,r3,r2
 400a564:	10802014 	ori	r2,r2,128
 400a568:	8080030d 	sth	r2,12(r16)
 400a56c:	00001506 	br	400a5c4 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 400a570:	80800417 	ldw	r2,16(r16)
 400a574:	e0fff517 	ldw	r3,-44(fp)
 400a578:	180d883a 	mov	r6,r3
 400a57c:	100b883a 	mov	r5,r2
 400a580:	e13ff817 	ldw	r4,-32(fp)
 400a584:	400e1d80 	call	400e1d8 <_realloc_r>
 400a588:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 400a58c:	e0bff417 	ldw	r2,-48(fp)
 400a590:	10000c1e 	bne	r2,zero,400a5c4 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 400a594:	80800417 	ldw	r2,16(r16)
 400a598:	100b883a 	mov	r5,r2
 400a59c:	e13ff817 	ldw	r4,-32(fp)
 400a5a0:	4009c200 	call	4009c20 <_free_r>
			  fp->_flags &=  ~__SMBF;
 400a5a4:	80c0030b 	ldhu	r3,12(r16)
 400a5a8:	00bfdfc4 	movi	r2,-129
 400a5ac:	1884703a 	and	r2,r3,r2
 400a5b0:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 400a5b4:	e0bff817 	ldw	r2,-32(fp)
 400a5b8:	00c00304 	movi	r3,12
 400a5bc:	10c00015 	stw	r3,0(r2)
			  goto err;
 400a5c0:	0000c906 	br	400a8e8 <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 400a5c4:	e0bff417 	ldw	r2,-48(fp)
 400a5c8:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 400a5cc:	e0bff617 	ldw	r2,-40(fp)
 400a5d0:	e0fff417 	ldw	r3,-48(fp)
 400a5d4:	1885883a 	add	r2,r3,r2
 400a5d8:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 400a5dc:	e0bff517 	ldw	r2,-44(fp)
 400a5e0:	80800515 	stw	r2,20(r16)
		  w = len;
 400a5e4:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 400a5e8:	e0fff517 	ldw	r3,-44(fp)
 400a5ec:	e0bff617 	ldw	r2,-40(fp)
 400a5f0:	1885c83a 	sub	r2,r3,r2
 400a5f4:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 400a5f8:	8805883a 	mov	r2,r17
 400a5fc:	9080012e 	bgeu	r18,r2,400a604 <__sfvwrite_r+0x2b8>
		w = len;
 400a600:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 400a604:	80800017 	ldw	r2,0(r16)
 400a608:	8807883a 	mov	r3,r17
 400a60c:	180d883a 	mov	r6,r3
 400a610:	980b883a 	mov	r5,r19
 400a614:	1009883a 	mov	r4,r2
 400a618:	400c1880 	call	400c188 <memmove>
	      fp->_w -= w;
 400a61c:	80800217 	ldw	r2,8(r16)
 400a620:	1445c83a 	sub	r2,r2,r17
 400a624:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 400a628:	80800017 	ldw	r2,0(r16)
 400a62c:	8807883a 	mov	r3,r17
 400a630:	10c5883a 	add	r2,r2,r3
 400a634:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 400a638:	9023883a 	mov	r17,r18
 400a63c:	00003506 	br	400a714 <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 400a640:	80800017 	ldw	r2,0(r16)
 400a644:	80c00417 	ldw	r3,16(r16)
 400a648:	18800236 	bltu	r3,r2,400a654 <__sfvwrite_r+0x308>
 400a64c:	80800517 	ldw	r2,20(r16)
 400a650:	9080182e 	bgeu	r18,r2,400a6b4 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 400a654:	8805883a 	mov	r2,r17
 400a658:	9080012e 	bgeu	r18,r2,400a660 <__sfvwrite_r+0x314>
 400a65c:	9005883a 	mov	r2,r18
 400a660:	1023883a 	mov	r17,r2
	      COPY (w);
 400a664:	80800017 	ldw	r2,0(r16)
 400a668:	8807883a 	mov	r3,r17
 400a66c:	180d883a 	mov	r6,r3
 400a670:	980b883a 	mov	r5,r19
 400a674:	1009883a 	mov	r4,r2
 400a678:	400c1880 	call	400c188 <memmove>
	      fp->_w -= w;
 400a67c:	80800217 	ldw	r2,8(r16)
 400a680:	1445c83a 	sub	r2,r2,r17
 400a684:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 400a688:	80800017 	ldw	r2,0(r16)
 400a68c:	8807883a 	mov	r3,r17
 400a690:	10c5883a 	add	r2,r2,r3
 400a694:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 400a698:	80800217 	ldw	r2,8(r16)
 400a69c:	10001c1e 	bne	r2,zero,400a710 <__sfvwrite_r+0x3c4>
 400a6a0:	800b883a 	mov	r5,r16
 400a6a4:	e13ff817 	ldw	r4,-32(fp)
 400a6a8:	40095800 	call	4009580 <_fflush_r>
 400a6ac:	10001826 	beq	r2,zero,400a710 <__sfvwrite_r+0x3c4>
		goto err;
 400a6b0:	00008d06 	br	400a8e8 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 400a6b4:	9005883a 	mov	r2,r18
 400a6b8:	00e00034 	movhi	r3,32768
 400a6bc:	10c00236 	bltu	r2,r3,400a6c8 <__sfvwrite_r+0x37c>
 400a6c0:	00a00034 	movhi	r2,32768
 400a6c4:	10bfffc4 	addi	r2,r2,-1
 400a6c8:	1007883a 	mov	r3,r2
 400a6cc:	80800517 	ldw	r2,20(r16)
 400a6d0:	100b883a 	mov	r5,r2
 400a6d4:	1809883a 	mov	r4,r3
 400a6d8:	40044f00 	call	40044f0 <__divsi3>
 400a6dc:	1007883a 	mov	r3,r2
 400a6e0:	80800517 	ldw	r2,20(r16)
 400a6e4:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 400a6e8:	80800917 	ldw	r2,36(r16)
 400a6ec:	80c00717 	ldw	r3,28(r16)
 400a6f0:	880f883a 	mov	r7,r17
 400a6f4:	980d883a 	mov	r6,r19
 400a6f8:	180b883a 	mov	r5,r3
 400a6fc:	e13ff817 	ldw	r4,-32(fp)
 400a700:	103ee83a 	callr	r2
 400a704:	1023883a 	mov	r17,r2
	      if (w <= 0)
 400a708:	0440740e 	bge	zero,r17,400a8dc <__sfvwrite_r+0x590>
 400a70c:	00000106 	br	400a714 <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 400a710:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 400a714:	8805883a 	mov	r2,r17
 400a718:	98a7883a 	add	r19,r19,r2
	  len -= w;
 400a71c:	8805883a 	mov	r2,r17
 400a720:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 400a724:	a8800217 	ldw	r2,8(r21)
 400a728:	8807883a 	mov	r3,r17
 400a72c:	10c5c83a 	sub	r2,r2,r3
 400a730:	a8800215 	stw	r2,8(r21)
 400a734:	a8800217 	ldw	r2,8(r21)
 400a738:	103f501e 	bne	r2,zero,400a47c <__alt_data_end+0xfc00a47c>
 400a73c:	00006306 	br	400a8cc <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 400a740:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 400a744:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 400a748:	00000406 	br	400a75c <__sfvwrite_r+0x410>
 400a74c:	e03ff215 	stw	zero,-56(fp)
 400a750:	a4c00017 	ldw	r19,0(r20)
 400a754:	a4800117 	ldw	r18,4(r20)
 400a758:	a5000204 	addi	r20,r20,8
 400a75c:	903ffb26 	beq	r18,zero,400a74c <__alt_data_end+0xfc00a74c>
	  if (!nlknown)
 400a760:	e0bff217 	ldw	r2,-56(fp)
 400a764:	1000111e 	bne	r2,zero,400a7ac <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 400a768:	900d883a 	mov	r6,r18
 400a76c:	01400284 	movi	r5,10
 400a770:	9809883a 	mov	r4,r19
 400a774:	400be440 	call	400be44 <memchr>
 400a778:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 400a77c:	e0bff717 	ldw	r2,-36(fp)
 400a780:	10000626 	beq	r2,zero,400a79c <__sfvwrite_r+0x450>
 400a784:	e0bff717 	ldw	r2,-36(fp)
 400a788:	10800044 	addi	r2,r2,1
 400a78c:	1007883a 	mov	r3,r2
 400a790:	9805883a 	mov	r2,r19
 400a794:	1885c83a 	sub	r2,r3,r2
 400a798:	00000106 	br	400a7a0 <__sfvwrite_r+0x454>
 400a79c:	90800044 	addi	r2,r18,1
 400a7a0:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 400a7a4:	00800044 	movi	r2,1
 400a7a8:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 400a7ac:	e0bff317 	ldw	r2,-52(fp)
 400a7b0:	9080012e 	bgeu	r18,r2,400a7b8 <__sfvwrite_r+0x46c>
 400a7b4:	9005883a 	mov	r2,r18
 400a7b8:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 400a7bc:	80c00217 	ldw	r3,8(r16)
 400a7c0:	80800517 	ldw	r2,20(r16)
 400a7c4:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 400a7c8:	80800017 	ldw	r2,0(r16)
 400a7cc:	80c00417 	ldw	r3,16(r16)
 400a7d0:	1880102e 	bgeu	r3,r2,400a814 <__sfvwrite_r+0x4c8>
 400a7d4:	8d800f0e 	bge	r17,r22,400a814 <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 400a7d8:	80800017 	ldw	r2,0(r16)
 400a7dc:	8807883a 	mov	r3,r17
 400a7e0:	180d883a 	mov	r6,r3
 400a7e4:	980b883a 	mov	r5,r19
 400a7e8:	1009883a 	mov	r4,r2
 400a7ec:	400c1880 	call	400c188 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 400a7f0:	80800017 	ldw	r2,0(r16)
 400a7f4:	8807883a 	mov	r3,r17
 400a7f8:	10c5883a 	add	r2,r2,r3
 400a7fc:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 400a800:	800b883a 	mov	r5,r16
 400a804:	e13ff817 	ldw	r4,-32(fp)
 400a808:	40095800 	call	4009580 <_fflush_r>
 400a80c:	10001b26 	beq	r2,zero,400a87c <__sfvwrite_r+0x530>
		goto err;
 400a810:	00003506 	br	400a8e8 <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 400a814:	84400517 	ldw	r17,20(r16)
 400a818:	b4400a16 	blt	r22,r17,400a844 <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 400a81c:	80800917 	ldw	r2,36(r16)
 400a820:	80c00717 	ldw	r3,28(r16)
 400a824:	880f883a 	mov	r7,r17
 400a828:	980d883a 	mov	r6,r19
 400a82c:	180b883a 	mov	r5,r3
 400a830:	e13ff817 	ldw	r4,-32(fp)
 400a834:	103ee83a 	callr	r2
 400a838:	1023883a 	mov	r17,r2
	      if (w <= 0)
 400a83c:	04400f16 	blt	zero,r17,400a87c <__sfvwrite_r+0x530>
		goto err;
 400a840:	00002906 	br	400a8e8 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 400a844:	b023883a 	mov	r17,r22
	      COPY (w);
 400a848:	80800017 	ldw	r2,0(r16)
 400a84c:	8807883a 	mov	r3,r17
 400a850:	180d883a 	mov	r6,r3
 400a854:	980b883a 	mov	r5,r19
 400a858:	1009883a 	mov	r4,r2
 400a85c:	400c1880 	call	400c188 <memmove>
	      fp->_w -= w;
 400a860:	80800217 	ldw	r2,8(r16)
 400a864:	1445c83a 	sub	r2,r2,r17
 400a868:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 400a86c:	80800017 	ldw	r2,0(r16)
 400a870:	8807883a 	mov	r3,r17
 400a874:	10c5883a 	add	r2,r2,r3
 400a878:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 400a87c:	e0bff317 	ldw	r2,-52(fp)
 400a880:	1445c83a 	sub	r2,r2,r17
 400a884:	e0bff315 	stw	r2,-52(fp)
 400a888:	e0bff317 	ldw	r2,-52(fp)
 400a88c:	1000051e 	bne	r2,zero,400a8a4 <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 400a890:	800b883a 	mov	r5,r16
 400a894:	e13ff817 	ldw	r4,-32(fp)
 400a898:	40095800 	call	4009580 <_fflush_r>
 400a89c:	1000111e 	bne	r2,zero,400a8e4 <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 400a8a0:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 400a8a4:	8805883a 	mov	r2,r17
 400a8a8:	98a7883a 	add	r19,r19,r2
	  len -= w;
 400a8ac:	8805883a 	mov	r2,r17
 400a8b0:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 400a8b4:	a8800217 	ldw	r2,8(r21)
 400a8b8:	8807883a 	mov	r3,r17
 400a8bc:	10c5c83a 	sub	r2,r2,r3
 400a8c0:	a8800215 	stw	r2,8(r21)
 400a8c4:	a8800217 	ldw	r2,8(r21)
 400a8c8:	103fa41e 	bne	r2,zero,400a75c <__alt_data_end+0xfc00a75c>
    }
  return 0;
 400a8cc:	0005883a 	mov	r2,zero
 400a8d0:	00000906 	br	400a8f8 <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 400a8d4:	0001883a 	nop
 400a8d8:	00000306 	br	400a8e8 <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 400a8dc:	0001883a 	nop
 400a8e0:	00000106 	br	400a8e8 <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 400a8e4:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 400a8e8:	8080030b 	ldhu	r2,12(r16)
 400a8ec:	10801014 	ori	r2,r2,64
 400a8f0:	8080030d 	sth	r2,12(r16)
  return EOF;
 400a8f4:	00bfffc4 	movi	r2,-1
}
 400a8f8:	e6fff904 	addi	sp,fp,-28
 400a8fc:	dfc00817 	ldw	ra,32(sp)
 400a900:	df000717 	ldw	fp,28(sp)
 400a904:	dd800617 	ldw	r22,24(sp)
 400a908:	dd400517 	ldw	r21,20(sp)
 400a90c:	dd000417 	ldw	r20,16(sp)
 400a910:	dcc00317 	ldw	r19,12(sp)
 400a914:	dc800217 	ldw	r18,8(sp)
 400a918:	dc400117 	ldw	r17,4(sp)
 400a91c:	dc000017 	ldw	r16,0(sp)
 400a920:	dec00904 	addi	sp,sp,36
 400a924:	f800283a 	ret

0400a928 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 400a928:	defff804 	addi	sp,sp,-32
 400a92c:	dfc00715 	stw	ra,28(sp)
 400a930:	df000615 	stw	fp,24(sp)
 400a934:	dd000515 	stw	r20,20(sp)
 400a938:	dcc00415 	stw	r19,16(sp)
 400a93c:	dc800315 	stw	r18,12(sp)
 400a940:	dc400215 	stw	r17,8(sp)
 400a944:	dc000115 	stw	r16,4(sp)
 400a948:	df000604 	addi	fp,sp,24
 400a94c:	e13ffa15 	stw	r4,-24(fp)
 400a950:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 400a954:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 400a958:	e0bffa17 	ldw	r2,-24(fp)
 400a95c:	1440b804 	addi	r17,r2,736
 400a960:	00001b06 	br	400a9d0 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 400a964:	8c000217 	ldw	r16,8(r17)
 400a968:	8c800117 	ldw	r18,4(r17)
 400a96c:	00001506 	br	400a9c4 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 400a970:	8080030b 	ldhu	r2,12(r16)
 400a974:	10bfffcc 	andi	r2,r2,65535
 400a978:	10a0001c 	xori	r2,r2,32768
 400a97c:	10a00004 	addi	r2,r2,-32768
 400a980:	10000f26 	beq	r2,zero,400a9c0 <_fwalk+0x98>
 400a984:	8080030b 	ldhu	r2,12(r16)
 400a988:	10bfffcc 	andi	r2,r2,65535
 400a98c:	10a0001c 	xori	r2,r2,32768
 400a990:	10a00004 	addi	r2,r2,-32768
 400a994:	10800060 	cmpeqi	r2,r2,1
 400a998:	1000091e 	bne	r2,zero,400a9c0 <_fwalk+0x98>
 400a99c:	8080038b 	ldhu	r2,14(r16)
 400a9a0:	10bfffcc 	andi	r2,r2,65535
 400a9a4:	10a0001c 	xori	r2,r2,32768
 400a9a8:	10a00004 	addi	r2,r2,-32768
 400a9ac:	10bfffe0 	cmpeqi	r2,r2,-1
 400a9b0:	1000031e 	bne	r2,zero,400a9c0 <_fwalk+0x98>
	ret |= (*function) (fp);
 400a9b4:	8009883a 	mov	r4,r16
 400a9b8:	a03ee83a 	callr	r20
 400a9bc:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 400a9c0:	84001a04 	addi	r16,r16,104
 400a9c4:	94bfffc4 	addi	r18,r18,-1
 400a9c8:	903fe90e 	bge	r18,zero,400a970 <__alt_data_end+0xfc00a970>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 400a9cc:	8c400017 	ldw	r17,0(r17)
 400a9d0:	883fe41e 	bne	r17,zero,400a964 <__alt_data_end+0xfc00a964>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 400a9d4:	9805883a 	mov	r2,r19
}
 400a9d8:	e6fffb04 	addi	sp,fp,-20
 400a9dc:	dfc00617 	ldw	ra,24(sp)
 400a9e0:	df000517 	ldw	fp,20(sp)
 400a9e4:	dd000417 	ldw	r20,16(sp)
 400a9e8:	dcc00317 	ldw	r19,12(sp)
 400a9ec:	dc800217 	ldw	r18,8(sp)
 400a9f0:	dc400117 	ldw	r17,4(sp)
 400a9f4:	dc000017 	ldw	r16,0(sp)
 400a9f8:	dec00704 	addi	sp,sp,28
 400a9fc:	f800283a 	ret

0400aa00 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 400aa00:	defff804 	addi	sp,sp,-32
 400aa04:	dfc00715 	stw	ra,28(sp)
 400aa08:	df000615 	stw	fp,24(sp)
 400aa0c:	dd000515 	stw	r20,20(sp)
 400aa10:	dcc00415 	stw	r19,16(sp)
 400aa14:	dc800315 	stw	r18,12(sp)
 400aa18:	dc400215 	stw	r17,8(sp)
 400aa1c:	dc000115 	stw	r16,4(sp)
 400aa20:	df000604 	addi	fp,sp,24
 400aa24:	e13ffa15 	stw	r4,-24(fp)
 400aa28:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 400aa2c:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 400aa30:	e0bffa17 	ldw	r2,-24(fp)
 400aa34:	1440b804 	addi	r17,r2,736
 400aa38:	00001c06 	br	400aaac <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 400aa3c:	8c000217 	ldw	r16,8(r17)
 400aa40:	8c800117 	ldw	r18,4(r17)
 400aa44:	00001606 	br	400aaa0 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 400aa48:	8080030b 	ldhu	r2,12(r16)
 400aa4c:	10bfffcc 	andi	r2,r2,65535
 400aa50:	10a0001c 	xori	r2,r2,32768
 400aa54:	10a00004 	addi	r2,r2,-32768
 400aa58:	10001026 	beq	r2,zero,400aa9c <_fwalk_reent+0x9c>
 400aa5c:	8080030b 	ldhu	r2,12(r16)
 400aa60:	10bfffcc 	andi	r2,r2,65535
 400aa64:	10a0001c 	xori	r2,r2,32768
 400aa68:	10a00004 	addi	r2,r2,-32768
 400aa6c:	10800060 	cmpeqi	r2,r2,1
 400aa70:	10000a1e 	bne	r2,zero,400aa9c <_fwalk_reent+0x9c>
 400aa74:	8080038b 	ldhu	r2,14(r16)
 400aa78:	10bfffcc 	andi	r2,r2,65535
 400aa7c:	10a0001c 	xori	r2,r2,32768
 400aa80:	10a00004 	addi	r2,r2,-32768
 400aa84:	10bfffe0 	cmpeqi	r2,r2,-1
 400aa88:	1000041e 	bne	r2,zero,400aa9c <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 400aa8c:	800b883a 	mov	r5,r16
 400aa90:	e13ffa17 	ldw	r4,-24(fp)
 400aa94:	a03ee83a 	callr	r20
 400aa98:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 400aa9c:	84001a04 	addi	r16,r16,104
 400aaa0:	94bfffc4 	addi	r18,r18,-1
 400aaa4:	903fe80e 	bge	r18,zero,400aa48 <__alt_data_end+0xfc00aa48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 400aaa8:	8c400017 	ldw	r17,0(r17)
 400aaac:	883fe31e 	bne	r17,zero,400aa3c <__alt_data_end+0xfc00aa3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 400aab0:	9805883a 	mov	r2,r19
}
 400aab4:	e6fffb04 	addi	sp,fp,-20
 400aab8:	dfc00617 	ldw	ra,24(sp)
 400aabc:	df000517 	ldw	fp,20(sp)
 400aac0:	dd000417 	ldw	r20,16(sp)
 400aac4:	dcc00317 	ldw	r19,12(sp)
 400aac8:	dc800217 	ldw	r18,8(sp)
 400aacc:	dc400117 	ldw	r17,4(sp)
 400aad0:	dc000017 	ldw	r16,0(sp)
 400aad4:	dec00704 	addi	sp,sp,28
 400aad8:	f800283a 	ret

0400aadc <_gettimeofday_r>:
int
_DEFUN (_gettimeofday_r, (ptr, ptimeval, ptimezone),
     struct _reent *ptr _AND
     struct timeval *ptimeval _AND
     void *ptimezone)
{
 400aadc:	defffa04 	addi	sp,sp,-24
 400aae0:	dfc00515 	stw	ra,20(sp)
 400aae4:	df000415 	stw	fp,16(sp)
 400aae8:	df000404 	addi	fp,sp,16
 400aaec:	e13ffd15 	stw	r4,-12(fp)
 400aaf0:	e17ffe15 	stw	r5,-8(fp)
 400aaf4:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 400aaf8:	d026e615 	stw	zero,-25704(gp)
  if ((ret = _gettimeofday (ptimeval, ptimezone)) == -1 && errno != 0)
 400aafc:	e17fff17 	ldw	r5,-4(fp)
 400ab00:	e13ffe17 	ldw	r4,-8(fp)
 400ab04:	40122a80 	call	40122a8 <gettimeofday>
 400ab08:	e0bffc15 	stw	r2,-16(fp)
 400ab0c:	e0bffc17 	ldw	r2,-16(fp)
 400ab10:	10bfffd8 	cmpnei	r2,r2,-1
 400ab14:	1000051e 	bne	r2,zero,400ab2c <_gettimeofday_r+0x50>
 400ab18:	d0a6e617 	ldw	r2,-25704(gp)
 400ab1c:	10000326 	beq	r2,zero,400ab2c <_gettimeofday_r+0x50>
    ptr->_errno = errno;
 400ab20:	d0e6e617 	ldw	r3,-25704(gp)
 400ab24:	e0bffd17 	ldw	r2,-12(fp)
 400ab28:	10c00015 	stw	r3,0(r2)
  return ret;
 400ab2c:	e0bffc17 	ldw	r2,-16(fp)
}
 400ab30:	e037883a 	mov	sp,fp
 400ab34:	dfc00117 	ldw	ra,4(sp)
 400ab38:	df000017 	ldw	fp,0(sp)
 400ab3c:	dec00204 	addi	sp,sp,8
 400ab40:	f800283a 	ret

0400ab44 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 400ab44:	defffb04 	addi	sp,sp,-20
 400ab48:	dfc00415 	stw	ra,16(sp)
 400ab4c:	df000315 	stw	fp,12(sp)
 400ab50:	df000304 	addi	fp,sp,12
 400ab54:	e13ffd15 	stw	r4,-12(fp)
 400ab58:	e17ffe15 	stw	r5,-8(fp)
 400ab5c:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 400ab60:	e0bfff17 	ldw	r2,-4(fp)
 400ab64:	10001126 	beq	r2,zero,400abac <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 400ab68:	01410074 	movhi	r5,1025
 400ab6c:	2954b104 	addi	r5,r5,21188
 400ab70:	e13fff17 	ldw	r4,-4(fp)
 400ab74:	400f09c0 	call	400f09c <strcmp>
 400ab78:	10000c26 	beq	r2,zero,400abac <_setlocale_r+0x68>
 400ab7c:	01410074 	movhi	r5,1025
 400ab80:	2954b304 	addi	r5,r5,21196
 400ab84:	e13fff17 	ldw	r4,-4(fp)
 400ab88:	400f09c0 	call	400f09c <strcmp>
 400ab8c:	10000726 	beq	r2,zero,400abac <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 400ab90:	01410074 	movhi	r5,1025
 400ab94:	2954b004 	addi	r5,r5,21184
 400ab98:	e13fff17 	ldw	r4,-4(fp)
 400ab9c:	400f09c0 	call	400f09c <strcmp>
 400aba0:	10000226 	beq	r2,zero,400abac <_setlocale_r+0x68>
        return NULL;
 400aba4:	0005883a 	mov	r2,zero
 400aba8:	00000206 	br	400abb4 <_setlocale_r+0x70>
    }
  return "C";
 400abac:	00810074 	movhi	r2,1025
 400abb0:	1094b304 	addi	r2,r2,21196
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 400abb4:	e037883a 	mov	sp,fp
 400abb8:	dfc00117 	ldw	ra,4(sp)
 400abbc:	df000017 	ldw	fp,0(sp)
 400abc0:	dec00204 	addi	sp,sp,8
 400abc4:	f800283a 	ret

0400abc8 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 400abc8:	deffff04 	addi	sp,sp,-4
 400abcc:	df000015 	stw	fp,0(sp)
 400abd0:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 400abd4:	00810074 	movhi	r2,1025
 400abd8:	10967a04 	addi	r2,r2,23016
#endif
}
 400abdc:	e037883a 	mov	sp,fp
 400abe0:	df000017 	ldw	fp,0(sp)
 400abe4:	dec00104 	addi	sp,sp,4
 400abe8:	f800283a 	ret

0400abec <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 400abec:	deffff04 	addi	sp,sp,-4
 400abf0:	df000015 	stw	fp,0(sp)
 400abf4:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 400abf8:	d0a00b17 	ldw	r2,-32724(gp)
#endif
}
 400abfc:	e037883a 	mov	sp,fp
 400ac00:	df000017 	ldw	fp,0(sp)
 400ac04:	dec00104 	addi	sp,sp,4
 400ac08:	f800283a 	ret

0400ac0c <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 400ac0c:	deffff04 	addi	sp,sp,-4
 400ac10:	df000015 	stw	fp,0(sp)
 400ac14:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 400ac18:	00810074 	movhi	r2,1025
 400ac1c:	10968204 	addi	r2,r2,23048
#endif
}
 400ac20:	e037883a 	mov	sp,fp
 400ac24:	df000017 	ldw	fp,0(sp)
 400ac28:	dec00104 	addi	sp,sp,4
 400ac2c:	f800283a 	ret

0400ac30 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 400ac30:	deffff04 	addi	sp,sp,-4
 400ac34:	df000015 	stw	fp,0(sp)
 400ac38:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 400ac3c:	d0a6ea17 	ldw	r2,-25688(gp)
}
 400ac40:	e037883a 	mov	sp,fp
 400ac44:	df000017 	ldw	fp,0(sp)
 400ac48:	dec00104 	addi	sp,sp,4
 400ac4c:	f800283a 	ret

0400ac50 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 400ac50:	defffe04 	addi	sp,sp,-8
 400ac54:	df000115 	stw	fp,4(sp)
 400ac58:	df000104 	addi	fp,sp,4
 400ac5c:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 400ac60:	00810074 	movhi	r2,1025
 400ac64:	10966c04 	addi	r2,r2,22960
}
 400ac68:	e037883a 	mov	sp,fp
 400ac6c:	df000017 	ldw	fp,0(sp)
 400ac70:	dec00104 	addi	sp,sp,4
 400ac74:	f800283a 	ret

0400ac78 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 400ac78:	defffc04 	addi	sp,sp,-16
 400ac7c:	dfc00315 	stw	ra,12(sp)
 400ac80:	df000215 	stw	fp,8(sp)
 400ac84:	df000204 	addi	fp,sp,8
 400ac88:	e13ffe15 	stw	r4,-8(fp)
 400ac8c:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 400ac90:	d0a00917 	ldw	r2,-32732(gp)
 400ac94:	e1bfff17 	ldw	r6,-4(fp)
 400ac98:	e17ffe17 	ldw	r5,-8(fp)
 400ac9c:	1009883a 	mov	r4,r2
 400aca0:	400ab440 	call	400ab44 <_setlocale_r>
}
 400aca4:	e037883a 	mov	sp,fp
 400aca8:	dfc00117 	ldw	ra,4(sp)
 400acac:	df000017 	ldw	fp,0(sp)
 400acb0:	dec00204 	addi	sp,sp,8
 400acb4:	f800283a 	ret

0400acb8 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 400acb8:	defffe04 	addi	sp,sp,-8
 400acbc:	dfc00115 	stw	ra,4(sp)
 400acc0:	df000015 	stw	fp,0(sp)
 400acc4:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 400acc8:	d0a00917 	ldw	r2,-32732(gp)
 400accc:	1009883a 	mov	r4,r2
 400acd0:	400ac500 	call	400ac50 <_localeconv_r>
}
 400acd4:	e037883a 	mov	sp,fp
 400acd8:	dfc00117 	ldw	ra,4(sp)
 400acdc:	df000017 	ldw	fp,0(sp)
 400ace0:	dec00204 	addi	sp,sp,8
 400ace4:	f800283a 	ret

0400ace8 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 400ace8:	deffea04 	addi	sp,sp,-88
 400acec:	dfc01515 	stw	ra,84(sp)
 400acf0:	df001415 	stw	fp,80(sp)
 400acf4:	dcc01315 	stw	r19,76(sp)
 400acf8:	dc801215 	stw	r18,72(sp)
 400acfc:	dc401115 	stw	r17,68(sp)
 400ad00:	dc001015 	stw	r16,64(sp)
 400ad04:	df001404 	addi	fp,sp,80
 400ad08:	e13ffb15 	stw	r4,-20(fp)
 400ad0c:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 400ad10:	8080030b 	ldhu	r2,12(r16)
 400ad14:	10bfffcc 	andi	r2,r2,65535
 400ad18:	1080008c 	andi	r2,r2,2
 400ad1c:	10000726 	beq	r2,zero,400ad3c <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 400ad20:	808010c4 	addi	r2,r16,67
 400ad24:	80800015 	stw	r2,0(r16)
 400ad28:	80800017 	ldw	r2,0(r16)
 400ad2c:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 400ad30:	00800044 	movi	r2,1
 400ad34:	80800515 	stw	r2,20(r16)
 400ad38:	00006d06 	br	400aef0 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 400ad3c:	8080038b 	ldhu	r2,14(r16)
 400ad40:	10bfffcc 	andi	r2,r2,65535
 400ad44:	10a0001c 	xori	r2,r2,32768
 400ad48:	10a00004 	addi	r2,r2,-32768
 400ad4c:	10000916 	blt	r2,zero,400ad74 <__smakebuf_r+0x8c>
 400ad50:	8080038b 	ldhu	r2,14(r16)
 400ad54:	10bfffcc 	andi	r2,r2,65535
 400ad58:	10a0001c 	xori	r2,r2,32768
 400ad5c:	10a00004 	addi	r2,r2,-32768
 400ad60:	e1bfec04 	addi	r6,fp,-80
 400ad64:	100b883a 	mov	r5,r2
 400ad68:	e13ffb17 	ldw	r4,-20(fp)
 400ad6c:	4010f400 	call	4010f40 <_fstat_r>
 400ad70:	10000c0e 	bge	r2,zero,400ada4 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 400ad74:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 400ad78:	8080030b 	ldhu	r2,12(r16)
 400ad7c:	10bfffcc 	andi	r2,r2,65535
 400ad80:	1080200c 	andi	r2,r2,128
 400ad84:	10000226 	beq	r2,zero,400ad90 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 400ad88:	04401004 	movi	r17,64
 400ad8c:	00000106 	br	400ad94 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 400ad90:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 400ad94:	8080030b 	ldhu	r2,12(r16)
 400ad98:	10820014 	ori	r2,r2,2048
 400ad9c:	8080030d 	sth	r2,12(r16)
 400ada0:	00001606 	br	400adfc <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 400ada4:	e0bfed17 	ldw	r2,-76(fp)
 400ada8:	10bc000c 	andi	r2,r2,61440
 400adac:	10880020 	cmpeqi	r2,r2,8192
 400adb0:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 400adb4:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 400adb8:	e0bfed17 	ldw	r2,-76(fp)
 400adbc:	10fc000c 	andi	r3,r2,61440
 400adc0:	00a00014 	movui	r2,32768
 400adc4:	18800a1e 	bne	r3,r2,400adf0 <__smakebuf_r+0x108>
 400adc8:	80c00a17 	ldw	r3,40(r16)
 400adcc:	00810074 	movhi	r2,1025
 400add0:	10bbea04 	addi	r2,r2,-4184
 400add4:	1880061e 	bne	r3,r2,400adf0 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 400add8:	8080030b 	ldhu	r2,12(r16)
 400addc:	10810014 	ori	r2,r2,1024
 400ade0:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 400ade4:	00810004 	movi	r2,1024
 400ade8:	80801315 	stw	r2,76(r16)
 400adec:	00000306 	br	400adfc <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 400adf0:	8080030b 	ldhu	r2,12(r16)
 400adf4:	10820014 	ori	r2,r2,2048
 400adf8:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 400adfc:	90001126 	beq	r18,zero,400ae44 <__smakebuf_r+0x15c>
 400ae00:	8080038b 	ldhu	r2,14(r16)
 400ae04:	10bfffcc 	andi	r2,r2,65535
 400ae08:	10a0001c 	xori	r2,r2,32768
 400ae0c:	10a00004 	addi	r2,r2,-32768
 400ae10:	100b883a 	mov	r5,r2
 400ae14:	e13ffb17 	ldw	r4,-20(fp)
 400ae18:	4010fa80 	call	4010fa8 <_isatty_r>
 400ae1c:	10000926 	beq	r2,zero,400ae44 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 400ae20:	8080030b 	ldhu	r2,12(r16)
 400ae24:	10800054 	ori	r2,r2,1
 400ae28:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 400ae2c:	808010c4 	addi	r2,r16,67
 400ae30:	80800015 	stw	r2,0(r16)
 400ae34:	80800017 	ldw	r2,0(r16)
 400ae38:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 400ae3c:	00800044 	movi	r2,1
 400ae40:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 400ae44:	880b883a 	mov	r5,r17
 400ae48:	e13ffb17 	ldw	r4,-20(fp)
 400ae4c:	400b2c80 	call	400b2c8 <_malloc_r>
 400ae50:	1027883a 	mov	r19,r2
 400ae54:	98000e1e 	bne	r19,zero,400ae90 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 400ae58:	8080030b 	ldhu	r2,12(r16)
 400ae5c:	10bfffcc 	andi	r2,r2,65535
 400ae60:	1080800c 	andi	r2,r2,512
 400ae64:	1000221e 	bne	r2,zero,400aef0 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 400ae68:	8080030b 	ldhu	r2,12(r16)
 400ae6c:	10800094 	ori	r2,r2,2
 400ae70:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 400ae74:	808010c4 	addi	r2,r16,67
 400ae78:	80800015 	stw	r2,0(r16)
 400ae7c:	80800017 	ldw	r2,0(r16)
 400ae80:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 400ae84:	00800044 	movi	r2,1
 400ae88:	80800515 	stw	r2,20(r16)
 400ae8c:	00001806 	br	400aef0 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 400ae90:	e0fffb17 	ldw	r3,-20(fp)
 400ae94:	00810074 	movhi	r2,1025
 400ae98:	10a66204 	addi	r2,r2,-26232
 400ae9c:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 400aea0:	8080030b 	ldhu	r2,12(r16)
 400aea4:	10802014 	ori	r2,r2,128
 400aea8:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 400aeac:	84c00015 	stw	r19,0(r16)
 400aeb0:	80800017 	ldw	r2,0(r16)
 400aeb4:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 400aeb8:	8805883a 	mov	r2,r17
 400aebc:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 400aec0:	90000b26 	beq	r18,zero,400aef0 <__smakebuf_r+0x208>
 400aec4:	8080038b 	ldhu	r2,14(r16)
 400aec8:	10bfffcc 	andi	r2,r2,65535
 400aecc:	10a0001c 	xori	r2,r2,32768
 400aed0:	10a00004 	addi	r2,r2,-32768
 400aed4:	100b883a 	mov	r5,r2
 400aed8:	e13ffb17 	ldw	r4,-20(fp)
 400aedc:	4010fa80 	call	4010fa8 <_isatty_r>
 400aee0:	10000326 	beq	r2,zero,400aef0 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 400aee4:	8080030b 	ldhu	r2,12(r16)
 400aee8:	10800054 	ori	r2,r2,1
 400aeec:	8080030d 	sth	r2,12(r16)
    }
}
 400aef0:	e6fffc04 	addi	sp,fp,-16
 400aef4:	dfc00517 	ldw	ra,20(sp)
 400aef8:	df000417 	ldw	fp,16(sp)
 400aefc:	dcc00317 	ldw	r19,12(sp)
 400af00:	dc800217 	ldw	r18,8(sp)
 400af04:	dc400117 	ldw	r17,4(sp)
 400af08:	dc000017 	ldw	r16,0(sp)
 400af0c:	dec00604 	addi	sp,sp,24
 400af10:	f800283a 	ret

0400af14 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 400af14:	defff104 	addi	sp,sp,-60
 400af18:	dfc00e15 	stw	ra,56(sp)
 400af1c:	df000d15 	stw	fp,52(sp)
 400af20:	df000d04 	addi	fp,sp,52
 400af24:	e13ffe15 	stw	r4,-8(fp)
 400af28:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 400af2c:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 400af30:	00810074 	movhi	r2,1025
 400af34:	10968a04 	addi	r2,r2,23080
 400af38:	10800217 	ldw	r2,8(r2)
 400af3c:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 400af40:	e0bff817 	ldw	r2,-32(fp)
 400af44:	10c00117 	ldw	r3,4(r2)
 400af48:	00bfff04 	movi	r2,-4
 400af4c:	1884703a 	and	r2,r3,r2
 400af50:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 400af54:	e0fff817 	ldw	r3,-32(fp)
 400af58:	e0bff917 	ldw	r2,-28(fp)
 400af5c:	1885883a 	add	r2,r3,r2
 400af60:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 400af64:	d0e6eb17 	ldw	r3,-25684(gp)
 400af68:	e0bfff17 	ldw	r2,-4(fp)
 400af6c:	1885883a 	add	r2,r3,r2
 400af70:	10800404 	addi	r2,r2,16
 400af74:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 400af78:	00840004 	movi	r2,4096
 400af7c:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 400af80:	d0a00d17 	ldw	r2,-32716(gp)
 400af84:	10bfffe0 	cmpeqi	r2,r2,-1
 400af88:	1000081e 	bne	r2,zero,400afac <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 400af8c:	e0fffb17 	ldw	r3,-20(fp)
 400af90:	e0bff617 	ldw	r2,-40(fp)
 400af94:	1885883a 	add	r2,r3,r2
 400af98:	10ffffc4 	addi	r3,r2,-1
 400af9c:	e0bffb17 	ldw	r2,-20(fp)
 400afa0:	0085c83a 	sub	r2,zero,r2
 400afa4:	1884703a 	and	r2,r3,r2
 400afa8:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 400afac:	e0bff617 	ldw	r2,-40(fp)
 400afb0:	100b883a 	mov	r5,r2
 400afb4:	e13ffe17 	ldw	r4,-8(fp)
 400afb8:	400edc80 	call	400edc8 <_sbrk_r>
 400afbc:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 400afc0:	e0bff317 	ldw	r2,-52(fp)
 400afc4:	10bfffe0 	cmpeqi	r2,r2,-1
 400afc8:	1000b91e 	bne	r2,zero,400b2b0 <malloc_extend_top+0x39c>
 400afcc:	e0fff317 	ldw	r3,-52(fp)
 400afd0:	e0bffa17 	ldw	r2,-24(fp)
 400afd4:	1880042e 	bgeu	r3,r2,400afe8 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 400afd8:	00810074 	movhi	r2,1025
 400afdc:	10968a04 	addi	r2,r2,23080
 400afe0:	e0fff817 	ldw	r3,-32(fp)
 400afe4:	1880b21e 	bne	r3,r2,400b2b0 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 400afe8:	008100b4 	movhi	r2,1026
 400afec:	10a30804 	addi	r2,r2,-29664
 400aff0:	10800017 	ldw	r2,0(r2)
 400aff4:	1007883a 	mov	r3,r2
 400aff8:	e0bff617 	ldw	r2,-40(fp)
 400affc:	1885883a 	add	r2,r3,r2
 400b000:	1007883a 	mov	r3,r2
 400b004:	008100b4 	movhi	r2,1026
 400b008:	10a30804 	addi	r2,r2,-29664
 400b00c:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 400b010:	e0fff317 	ldw	r3,-52(fp)
 400b014:	e0bffa17 	ldw	r2,-24(fp)
 400b018:	1880101e 	bne	r3,r2,400b05c <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 400b01c:	e0bffb17 	ldw	r2,-20(fp)
 400b020:	10ffffc4 	addi	r3,r2,-1
 400b024:	e0bffa17 	ldw	r2,-24(fp)
 400b028:	1884703a 	and	r2,r3,r2
 400b02c:	10000b1e 	bne	r2,zero,400b05c <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 400b030:	e0fff617 	ldw	r3,-40(fp)
 400b034:	e0bff917 	ldw	r2,-28(fp)
 400b038:	1885883a 	add	r2,r3,r2
 400b03c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 400b040:	00810074 	movhi	r2,1025
 400b044:	10968a04 	addi	r2,r2,23080
 400b048:	10800217 	ldw	r2,8(r2)
 400b04c:	e0fffc17 	ldw	r3,-16(fp)
 400b050:	18c00054 	ori	r3,r3,1
 400b054:	10c00115 	stw	r3,4(r2)
 400b058:	00008006 	br	400b25c <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 400b05c:	d0a00d17 	ldw	r2,-32716(gp)
 400b060:	10bfffd8 	cmpnei	r2,r2,-1
 400b064:	1000031e 	bne	r2,zero,400b074 <malloc_extend_top+0x160>
      sbrk_base = brk;
 400b068:	e0bff317 	ldw	r2,-52(fp)
 400b06c:	d0a00d15 	stw	r2,-32716(gp)
 400b070:	00000a06 	br	400b09c <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 400b074:	008100b4 	movhi	r2,1026
 400b078:	10a30804 	addi	r2,r2,-29664
 400b07c:	10c00017 	ldw	r3,0(r2)
 400b080:	e13ff317 	ldw	r4,-52(fp)
 400b084:	e0bffa17 	ldw	r2,-24(fp)
 400b088:	2085c83a 	sub	r2,r4,r2
 400b08c:	1887883a 	add	r3,r3,r2
 400b090:	008100b4 	movhi	r2,1026
 400b094:	10a30804 	addi	r2,r2,-29664
 400b098:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 400b09c:	e0bff317 	ldw	r2,-52(fp)
 400b0a0:	10800204 	addi	r2,r2,8
 400b0a4:	108001cc 	andi	r2,r2,7
 400b0a8:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 400b0ac:	e0bffd17 	ldw	r2,-12(fp)
 400b0b0:	10000926 	beq	r2,zero,400b0d8 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 400b0b4:	00c00204 	movi	r3,8
 400b0b8:	e0bffd17 	ldw	r2,-12(fp)
 400b0bc:	1885c83a 	sub	r2,r3,r2
 400b0c0:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 400b0c4:	e0fff317 	ldw	r3,-52(fp)
 400b0c8:	e0bff417 	ldw	r2,-48(fp)
 400b0cc:	1885883a 	add	r2,r3,r2
 400b0d0:	e0bff315 	stw	r2,-52(fp)
 400b0d4:	00000106 	br	400b0dc <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 400b0d8:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 400b0dc:	e0fff317 	ldw	r3,-52(fp)
 400b0e0:	e0bff617 	ldw	r2,-40(fp)
 400b0e4:	1885883a 	add	r2,r3,r2
 400b0e8:	1007883a 	mov	r3,r2
 400b0ec:	e0bffb17 	ldw	r2,-20(fp)
 400b0f0:	10bfffc4 	addi	r2,r2,-1
 400b0f4:	1884703a 	and	r2,r3,r2
 400b0f8:	e0fffb17 	ldw	r3,-20(fp)
 400b0fc:	1885c83a 	sub	r2,r3,r2
 400b100:	e0fff417 	ldw	r3,-48(fp)
 400b104:	1885883a 	add	r2,r3,r2
 400b108:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 400b10c:	e0bff417 	ldw	r2,-48(fp)
 400b110:	100b883a 	mov	r5,r2
 400b114:	e13ffe17 	ldw	r4,-8(fp)
 400b118:	400edc80 	call	400edc8 <_sbrk_r>
 400b11c:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 400b120:	e0bff517 	ldw	r2,-44(fp)
 400b124:	10bfffd8 	cmpnei	r2,r2,-1
 400b128:	1000051e 	bne	r2,zero,400b140 <malloc_extend_top+0x22c>
      {
	correction = 0;
 400b12c:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 400b130:	00800044 	movi	r2,1
 400b134:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 400b138:	e0bff317 	ldw	r2,-52(fp)
 400b13c:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 400b140:	008100b4 	movhi	r2,1026
 400b144:	10a30804 	addi	r2,r2,-29664
 400b148:	10800017 	ldw	r2,0(r2)
 400b14c:	1007883a 	mov	r3,r2
 400b150:	e0bff417 	ldw	r2,-48(fp)
 400b154:	1885883a 	add	r2,r3,r2
 400b158:	1007883a 	mov	r3,r2
 400b15c:	008100b4 	movhi	r2,1026
 400b160:	10a30804 	addi	r2,r2,-29664
 400b164:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 400b168:	00810074 	movhi	r2,1025
 400b16c:	10968a04 	addi	r2,r2,23080
 400b170:	e0fff317 	ldw	r3,-52(fp)
 400b174:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 400b178:	e0fff517 	ldw	r3,-44(fp)
 400b17c:	e0bff317 	ldw	r2,-52(fp)
 400b180:	1885c83a 	sub	r2,r3,r2
 400b184:	1007883a 	mov	r3,r2
 400b188:	e0bff417 	ldw	r2,-48(fp)
 400b18c:	1885883a 	add	r2,r3,r2
 400b190:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 400b194:	00810074 	movhi	r2,1025
 400b198:	10968a04 	addi	r2,r2,23080
 400b19c:	10800217 	ldw	r2,8(r2)
 400b1a0:	e0fffc17 	ldw	r3,-16(fp)
 400b1a4:	18c00054 	ori	r3,r3,1
 400b1a8:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 400b1ac:	00810074 	movhi	r2,1025
 400b1b0:	10968a04 	addi	r2,r2,23080
 400b1b4:	e0fff817 	ldw	r3,-32(fp)
 400b1b8:	18802826 	beq	r3,r2,400b25c <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 400b1bc:	e0bff917 	ldw	r2,-28(fp)
 400b1c0:	10800428 	cmpgeui	r2,r2,16
 400b1c4:	1000061e 	bne	r2,zero,400b1e0 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 400b1c8:	00810074 	movhi	r2,1025
 400b1cc:	10968a04 	addi	r2,r2,23080
 400b1d0:	10800217 	ldw	r2,8(r2)
 400b1d4:	00c00044 	movi	r3,1
 400b1d8:	10c00115 	stw	r3,4(r2)
        return;
 400b1dc:	00003506 	br	400b2b4 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 400b1e0:	e0bff917 	ldw	r2,-28(fp)
 400b1e4:	10fffd04 	addi	r3,r2,-12
 400b1e8:	00bffe04 	movi	r2,-8
 400b1ec:	1884703a 	and	r2,r3,r2
 400b1f0:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 400b1f4:	e0bff817 	ldw	r2,-32(fp)
 400b1f8:	10800117 	ldw	r2,4(r2)
 400b1fc:	10c0004c 	andi	r3,r2,1
 400b200:	e0bff917 	ldw	r2,-28(fp)
 400b204:	1886b03a 	or	r3,r3,r2
 400b208:	e0bff817 	ldw	r2,-32(fp)
 400b20c:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 400b210:	e0fff817 	ldw	r3,-32(fp)
 400b214:	e0bff917 	ldw	r2,-28(fp)
 400b218:	1885883a 	add	r2,r3,r2
 400b21c:	00c00144 	movi	r3,5
 400b220:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 400b224:	e0bff917 	ldw	r2,-28(fp)
 400b228:	10800104 	addi	r2,r2,4
 400b22c:	e0fff817 	ldw	r3,-32(fp)
 400b230:	1885883a 	add	r2,r3,r2
 400b234:	00c00144 	movi	r3,5
 400b238:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 400b23c:	e0bff917 	ldw	r2,-28(fp)
 400b240:	10800430 	cmpltui	r2,r2,16
 400b244:	1000051e 	bne	r2,zero,400b25c <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 400b248:	e0bff817 	ldw	r2,-32(fp)
 400b24c:	10800204 	addi	r2,r2,8
 400b250:	100b883a 	mov	r5,r2
 400b254:	e13ffe17 	ldw	r4,-8(fp)
 400b258:	4009c200 	call	4009c20 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 400b25c:	008100b4 	movhi	r2,1026
 400b260:	10a30804 	addi	r2,r2,-29664
 400b264:	10800017 	ldw	r2,0(r2)
 400b268:	1007883a 	mov	r3,r2
 400b26c:	d0a6ec17 	ldw	r2,-25680(gp)
 400b270:	10c0042e 	bgeu	r2,r3,400b284 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 400b274:	008100b4 	movhi	r2,1026
 400b278:	10a30804 	addi	r2,r2,-29664
 400b27c:	10800017 	ldw	r2,0(r2)
 400b280:	d0a6ec15 	stw	r2,-25680(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 400b284:	008100b4 	movhi	r2,1026
 400b288:	10a30804 	addi	r2,r2,-29664
 400b28c:	10800017 	ldw	r2,0(r2)
 400b290:	1007883a 	mov	r3,r2
 400b294:	d0a6ed17 	ldw	r2,-25676(gp)
 400b298:	10c0062e 	bgeu	r2,r3,400b2b4 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 400b29c:	008100b4 	movhi	r2,1026
 400b2a0:	10a30804 	addi	r2,r2,-29664
 400b2a4:	10800017 	ldw	r2,0(r2)
 400b2a8:	d0a6ed15 	stw	r2,-25676(gp)
 400b2ac:	00000106 	br	400b2b4 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 400b2b0:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 400b2b4:	e037883a 	mov	sp,fp
 400b2b8:	dfc00117 	ldw	ra,4(sp)
 400b2bc:	df000017 	ldw	fp,0(sp)
 400b2c0:	dec00204 	addi	sp,sp,8
 400b2c4:	f800283a 	ret

0400b2c8 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 400b2c8:	deffef04 	addi	sp,sp,-68
 400b2cc:	dfc01015 	stw	ra,64(sp)
 400b2d0:	df000f15 	stw	fp,60(sp)
 400b2d4:	df000f04 	addi	fp,sp,60
 400b2d8:	e13ffe15 	stw	r4,-8(fp)
 400b2dc:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 400b2e0:	e0bfff17 	ldw	r2,-4(fp)
 400b2e4:	108002c4 	addi	r2,r2,11
 400b2e8:	108005f0 	cmpltui	r2,r2,23
 400b2ec:	1000051e 	bne	r2,zero,400b304 <_malloc_r+0x3c>
 400b2f0:	e0bfff17 	ldw	r2,-4(fp)
 400b2f4:	10c002c4 	addi	r3,r2,11
 400b2f8:	00bffe04 	movi	r2,-8
 400b2fc:	1884703a 	and	r2,r3,r2
 400b300:	00000106 	br	400b308 <_malloc_r+0x40>
 400b304:	00800404 	movi	r2,16
 400b308:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 400b30c:	e0bffa17 	ldw	r2,-24(fp)
 400b310:	10000316 	blt	r2,zero,400b320 <_malloc_r+0x58>
 400b314:	e0fffa17 	ldw	r3,-24(fp)
 400b318:	e0bfff17 	ldw	r2,-4(fp)
 400b31c:	1880052e 	bgeu	r3,r2,400b334 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 400b320:	e0bffe17 	ldw	r2,-8(fp)
 400b324:	00c00304 	movi	r3,12
 400b328:	10c00015 	stw	r3,0(r2)
    return 0;
 400b32c:	0005883a 	mov	r2,zero
 400b330:	0002bf06 	br	400be30 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 400b334:	e13ffe17 	ldw	r4,-8(fp)
 400b338:	40127f40 	call	40127f4 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 400b33c:	e0bffa17 	ldw	r2,-24(fp)
 400b340:	10807e28 	cmpgeui	r2,r2,504
 400b344:	10003f1e 	bne	r2,zero,400b444 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 400b348:	e0bffa17 	ldw	r2,-24(fp)
 400b34c:	1004d0fa 	srli	r2,r2,3
 400b350:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 400b354:	e0bff217 	ldw	r2,-56(fp)
 400b358:	10800044 	addi	r2,r2,1
 400b35c:	1085883a 	add	r2,r2,r2
 400b360:	1085883a 	add	r2,r2,r2
 400b364:	1087883a 	add	r3,r2,r2
 400b368:	00810074 	movhi	r2,1025
 400b36c:	10968a04 	addi	r2,r2,23080
 400b370:	1885883a 	add	r2,r3,r2
 400b374:	10bffe04 	addi	r2,r2,-8
 400b378:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 400b37c:	e0bff917 	ldw	r2,-28(fp)
 400b380:	10800317 	ldw	r2,12(r2)
 400b384:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 400b388:	e0fff117 	ldw	r3,-60(fp)
 400b38c:	e0bff917 	ldw	r2,-28(fp)
 400b390:	1880061e 	bne	r3,r2,400b3ac <_malloc_r+0xe4>
    {
      q = next_bin(q);
 400b394:	e0bff917 	ldw	r2,-28(fp)
 400b398:	10800204 	addi	r2,r2,8
 400b39c:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 400b3a0:	e0bff917 	ldw	r2,-28(fp)
 400b3a4:	10800317 	ldw	r2,12(r2)
 400b3a8:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 400b3ac:	e0fff117 	ldw	r3,-60(fp)
 400b3b0:	e0bff917 	ldw	r2,-28(fp)
 400b3b4:	18801f26 	beq	r3,r2,400b434 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 400b3b8:	e0bff117 	ldw	r2,-60(fp)
 400b3bc:	10c00117 	ldw	r3,4(r2)
 400b3c0:	00bfff04 	movi	r2,-4
 400b3c4:	1884703a 	and	r2,r3,r2
 400b3c8:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 400b3cc:	e0bff117 	ldw	r2,-60(fp)
 400b3d0:	10800317 	ldw	r2,12(r2)
 400b3d4:	e0bff815 	stw	r2,-32(fp)
 400b3d8:	e0bff117 	ldw	r2,-60(fp)
 400b3dc:	10800217 	ldw	r2,8(r2)
 400b3e0:	e0bff715 	stw	r2,-36(fp)
 400b3e4:	e0bff717 	ldw	r2,-36(fp)
 400b3e8:	e0fff817 	ldw	r3,-32(fp)
 400b3ec:	10c00315 	stw	r3,12(r2)
 400b3f0:	e0bff817 	ldw	r2,-32(fp)
 400b3f4:	e0fff717 	ldw	r3,-36(fp)
 400b3f8:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 400b3fc:	e0fff117 	ldw	r3,-60(fp)
 400b400:	e0bffb17 	ldw	r2,-20(fp)
 400b404:	1885883a 	add	r2,r3,r2
 400b408:	e13ff117 	ldw	r4,-60(fp)
 400b40c:	e0fffb17 	ldw	r3,-20(fp)
 400b410:	20c7883a 	add	r3,r4,r3
 400b414:	18c00117 	ldw	r3,4(r3)
 400b418:	18c00054 	ori	r3,r3,1
 400b41c:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 400b420:	e13ffe17 	ldw	r4,-8(fp)
 400b424:	40128180 	call	4012818 <__malloc_unlock>
      return chunk2mem(victim);
 400b428:	e0bff117 	ldw	r2,-60(fp)
 400b42c:	10800204 	addi	r2,r2,8
 400b430:	00027f06 	br	400be30 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 400b434:	e0bff217 	ldw	r2,-56(fp)
 400b438:	10800084 	addi	r2,r2,2
 400b43c:	e0bff215 	stw	r2,-56(fp)
 400b440:	00007306 	br	400b610 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 400b444:	e0bffa17 	ldw	r2,-24(fp)
 400b448:	1004d27a 	srli	r2,r2,9
 400b44c:	1000031e 	bne	r2,zero,400b45c <_malloc_r+0x194>
 400b450:	e0bffa17 	ldw	r2,-24(fp)
 400b454:	1004d0fa 	srli	r2,r2,3
 400b458:	00002906 	br	400b500 <_malloc_r+0x238>
 400b45c:	e0bffa17 	ldw	r2,-24(fp)
 400b460:	1004d27a 	srli	r2,r2,9
 400b464:	10800168 	cmpgeui	r2,r2,5
 400b468:	1000041e 	bne	r2,zero,400b47c <_malloc_r+0x1b4>
 400b46c:	e0bffa17 	ldw	r2,-24(fp)
 400b470:	1004d1ba 	srli	r2,r2,6
 400b474:	10800e04 	addi	r2,r2,56
 400b478:	00002106 	br	400b500 <_malloc_r+0x238>
 400b47c:	e0bffa17 	ldw	r2,-24(fp)
 400b480:	1004d27a 	srli	r2,r2,9
 400b484:	10800568 	cmpgeui	r2,r2,21
 400b488:	1000041e 	bne	r2,zero,400b49c <_malloc_r+0x1d4>
 400b48c:	e0bffa17 	ldw	r2,-24(fp)
 400b490:	1004d27a 	srli	r2,r2,9
 400b494:	108016c4 	addi	r2,r2,91
 400b498:	00001906 	br	400b500 <_malloc_r+0x238>
 400b49c:	e0bffa17 	ldw	r2,-24(fp)
 400b4a0:	1004d27a 	srli	r2,r2,9
 400b4a4:	10801568 	cmpgeui	r2,r2,85
 400b4a8:	1000041e 	bne	r2,zero,400b4bc <_malloc_r+0x1f4>
 400b4ac:	e0bffa17 	ldw	r2,-24(fp)
 400b4b0:	1004d33a 	srli	r2,r2,12
 400b4b4:	10801b84 	addi	r2,r2,110
 400b4b8:	00001106 	br	400b500 <_malloc_r+0x238>
 400b4bc:	e0bffa17 	ldw	r2,-24(fp)
 400b4c0:	1004d27a 	srli	r2,r2,9
 400b4c4:	10805568 	cmpgeui	r2,r2,341
 400b4c8:	1000041e 	bne	r2,zero,400b4dc <_malloc_r+0x214>
 400b4cc:	e0bffa17 	ldw	r2,-24(fp)
 400b4d0:	1004d3fa 	srli	r2,r2,15
 400b4d4:	10801dc4 	addi	r2,r2,119
 400b4d8:	00000906 	br	400b500 <_malloc_r+0x238>
 400b4dc:	e0bffa17 	ldw	r2,-24(fp)
 400b4e0:	1004d27a 	srli	r2,r2,9
 400b4e4:	10815568 	cmpgeui	r2,r2,1365
 400b4e8:	1000041e 	bne	r2,zero,400b4fc <_malloc_r+0x234>
 400b4ec:	e0bffa17 	ldw	r2,-24(fp)
 400b4f0:	1004d4ba 	srli	r2,r2,18
 400b4f4:	10801f04 	addi	r2,r2,124
 400b4f8:	00000106 	br	400b500 <_malloc_r+0x238>
 400b4fc:	00801f84 	movi	r2,126
 400b500:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 400b504:	e0bff217 	ldw	r2,-56(fp)
 400b508:	10800044 	addi	r2,r2,1
 400b50c:	1085883a 	add	r2,r2,r2
 400b510:	1085883a 	add	r2,r2,r2
 400b514:	1087883a 	add	r3,r2,r2
 400b518:	00810074 	movhi	r2,1025
 400b51c:	10968a04 	addi	r2,r2,23080
 400b520:	1885883a 	add	r2,r3,r2
 400b524:	10bffe04 	addi	r2,r2,-8
 400b528:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 400b52c:	e0bff317 	ldw	r2,-52(fp)
 400b530:	10800317 	ldw	r2,12(r2)
 400b534:	e0bff115 	stw	r2,-60(fp)
 400b538:	00002f06 	br	400b5f8 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 400b53c:	e0bff117 	ldw	r2,-60(fp)
 400b540:	10c00117 	ldw	r3,4(r2)
 400b544:	00bfff04 	movi	r2,-4
 400b548:	1884703a 	and	r2,r3,r2
 400b54c:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 400b550:	e0fffb17 	ldw	r3,-20(fp)
 400b554:	e0bffa17 	ldw	r2,-24(fp)
 400b558:	1885c83a 	sub	r2,r3,r2
 400b55c:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 400b560:	e0bff417 	ldw	r2,-48(fp)
 400b564:	10800410 	cmplti	r2,r2,16
 400b568:	1000041e 	bne	r2,zero,400b57c <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 400b56c:	e0bff217 	ldw	r2,-56(fp)
 400b570:	10bfffc4 	addi	r2,r2,-1
 400b574:	e0bff215 	stw	r2,-56(fp)
        break;   
 400b578:	00002206 	br	400b604 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 400b57c:	e0bff417 	ldw	r2,-48(fp)
 400b580:	10001a16 	blt	r2,zero,400b5ec <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 400b584:	e0bff117 	ldw	r2,-60(fp)
 400b588:	10800317 	ldw	r2,12(r2)
 400b58c:	e0bff815 	stw	r2,-32(fp)
 400b590:	e0bff117 	ldw	r2,-60(fp)
 400b594:	10800217 	ldw	r2,8(r2)
 400b598:	e0bff715 	stw	r2,-36(fp)
 400b59c:	e0bff717 	ldw	r2,-36(fp)
 400b5a0:	e0fff817 	ldw	r3,-32(fp)
 400b5a4:	10c00315 	stw	r3,12(r2)
 400b5a8:	e0bff817 	ldw	r2,-32(fp)
 400b5ac:	e0fff717 	ldw	r3,-36(fp)
 400b5b0:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 400b5b4:	e0fff117 	ldw	r3,-60(fp)
 400b5b8:	e0bffb17 	ldw	r2,-20(fp)
 400b5bc:	1885883a 	add	r2,r3,r2
 400b5c0:	e13ff117 	ldw	r4,-60(fp)
 400b5c4:	e0fffb17 	ldw	r3,-20(fp)
 400b5c8:	20c7883a 	add	r3,r4,r3
 400b5cc:	18c00117 	ldw	r3,4(r3)
 400b5d0:	18c00054 	ori	r3,r3,1
 400b5d4:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 400b5d8:	e13ffe17 	ldw	r4,-8(fp)
 400b5dc:	40128180 	call	4012818 <__malloc_unlock>
        return chunk2mem(victim);
 400b5e0:	e0bff117 	ldw	r2,-60(fp)
 400b5e4:	10800204 	addi	r2,r2,8
 400b5e8:	00021106 	br	400be30 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 400b5ec:	e0bff117 	ldw	r2,-60(fp)
 400b5f0:	10800317 	ldw	r2,12(r2)
 400b5f4:	e0bff115 	stw	r2,-60(fp)
 400b5f8:	e0fff117 	ldw	r3,-60(fp)
 400b5fc:	e0bff317 	ldw	r2,-52(fp)
 400b600:	18bfce1e 	bne	r3,r2,400b53c <__alt_data_end+0xfc00b53c>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 400b604:	e0bff217 	ldw	r2,-56(fp)
 400b608:	10800044 	addi	r2,r2,1
 400b60c:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 400b610:	00810074 	movhi	r2,1025
 400b614:	10968c04 	addi	r2,r2,23088
 400b618:	10800217 	ldw	r2,8(r2)
 400b61c:	e0bff115 	stw	r2,-60(fp)
 400b620:	00810074 	movhi	r2,1025
 400b624:	10968c04 	addi	r2,r2,23088
 400b628:	e0fff117 	ldw	r3,-60(fp)
 400b62c:	1880e626 	beq	r3,r2,400b9c8 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 400b630:	e0bff117 	ldw	r2,-60(fp)
 400b634:	10c00117 	ldw	r3,4(r2)
 400b638:	00bfff04 	movi	r2,-4
 400b63c:	1884703a 	and	r2,r3,r2
 400b640:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 400b644:	e0fffb17 	ldw	r3,-20(fp)
 400b648:	e0bffa17 	ldw	r2,-24(fp)
 400b64c:	1885c83a 	sub	r2,r3,r2
 400b650:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 400b654:	e0bff417 	ldw	r2,-48(fp)
 400b658:	10800410 	cmplti	r2,r2,16
 400b65c:	1000271e 	bne	r2,zero,400b6fc <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 400b660:	e0fff117 	ldw	r3,-60(fp)
 400b664:	e0bffa17 	ldw	r2,-24(fp)
 400b668:	1885883a 	add	r2,r3,r2
 400b66c:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 400b670:	e0bffa17 	ldw	r2,-24(fp)
 400b674:	10c00054 	ori	r3,r2,1
 400b678:	e0bff117 	ldw	r2,-60(fp)
 400b67c:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 400b680:	00c10074 	movhi	r3,1025
 400b684:	18d68c04 	addi	r3,r3,23088
 400b688:	00810074 	movhi	r2,1025
 400b68c:	10968c04 	addi	r2,r2,23088
 400b690:	e13ffc17 	ldw	r4,-16(fp)
 400b694:	11000315 	stw	r4,12(r2)
 400b698:	10800317 	ldw	r2,12(r2)
 400b69c:	18800215 	stw	r2,8(r3)
 400b6a0:	00810074 	movhi	r2,1025
 400b6a4:	10968c04 	addi	r2,r2,23088
 400b6a8:	e0fffc17 	ldw	r3,-16(fp)
 400b6ac:	18800315 	stw	r2,12(r3)
 400b6b0:	e0bffc17 	ldw	r2,-16(fp)
 400b6b4:	10c00317 	ldw	r3,12(r2)
 400b6b8:	e0bffc17 	ldw	r2,-16(fp)
 400b6bc:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 400b6c0:	e0bff417 	ldw	r2,-48(fp)
 400b6c4:	10800054 	ori	r2,r2,1
 400b6c8:	1007883a 	mov	r3,r2
 400b6cc:	e0bffc17 	ldw	r2,-16(fp)
 400b6d0:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 400b6d4:	e0bff417 	ldw	r2,-48(fp)
 400b6d8:	e0fffc17 	ldw	r3,-16(fp)
 400b6dc:	1885883a 	add	r2,r3,r2
 400b6e0:	e0fff417 	ldw	r3,-48(fp)
 400b6e4:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 400b6e8:	e13ffe17 	ldw	r4,-8(fp)
 400b6ec:	40128180 	call	4012818 <__malloc_unlock>
      return chunk2mem(victim);
 400b6f0:	e0bff117 	ldw	r2,-60(fp)
 400b6f4:	10800204 	addi	r2,r2,8
 400b6f8:	0001cd06 	br	400be30 <_malloc_r+0xb68>
    }

    clear_last_remainder;
 400b6fc:	00c10074 	movhi	r3,1025
 400b700:	18d68c04 	addi	r3,r3,23088
 400b704:	00810074 	movhi	r2,1025
 400b708:	10968c04 	addi	r2,r2,23088
 400b70c:	01010074 	movhi	r4,1025
 400b710:	21168c04 	addi	r4,r4,23088
 400b714:	11000315 	stw	r4,12(r2)
 400b718:	10800317 	ldw	r2,12(r2)
 400b71c:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 400b720:	e0bff417 	ldw	r2,-48(fp)
 400b724:	10000e16 	blt	r2,zero,400b760 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 400b728:	e0fff117 	ldw	r3,-60(fp)
 400b72c:	e0bffb17 	ldw	r2,-20(fp)
 400b730:	1885883a 	add	r2,r3,r2
 400b734:	e13ff117 	ldw	r4,-60(fp)
 400b738:	e0fffb17 	ldw	r3,-20(fp)
 400b73c:	20c7883a 	add	r3,r4,r3
 400b740:	18c00117 	ldw	r3,4(r3)
 400b744:	18c00054 	ori	r3,r3,1
 400b748:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 400b74c:	e13ffe17 	ldw	r4,-8(fp)
 400b750:	40128180 	call	4012818 <__malloc_unlock>
      return chunk2mem(victim);
 400b754:	e0bff117 	ldw	r2,-60(fp)
 400b758:	10800204 	addi	r2,r2,8
 400b75c:	0001b406 	br	400be30 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 400b760:	e0bffb17 	ldw	r2,-20(fp)
 400b764:	10808028 	cmpgeui	r2,r2,512
 400b768:	10002c1e 	bne	r2,zero,400b81c <_malloc_r+0x554>
 400b76c:	e0bffb17 	ldw	r2,-20(fp)
 400b770:	1004d0fa 	srli	r2,r2,3
 400b774:	e0bffd15 	stw	r2,-12(fp)
 400b778:	00c10074 	movhi	r3,1025
 400b77c:	18d68a04 	addi	r3,r3,23080
 400b780:	00810074 	movhi	r2,1025
 400b784:	10968a04 	addi	r2,r2,23080
 400b788:	11000117 	ldw	r4,4(r2)
 400b78c:	e0bffd17 	ldw	r2,-12(fp)
 400b790:	1000010e 	bge	r2,zero,400b798 <_malloc_r+0x4d0>
 400b794:	108000c4 	addi	r2,r2,3
 400b798:	1005d0ba 	srai	r2,r2,2
 400b79c:	100b883a 	mov	r5,r2
 400b7a0:	00800044 	movi	r2,1
 400b7a4:	1144983a 	sll	r2,r2,r5
 400b7a8:	2084b03a 	or	r2,r4,r2
 400b7ac:	18800115 	stw	r2,4(r3)
 400b7b0:	e0bffd17 	ldw	r2,-12(fp)
 400b7b4:	10800044 	addi	r2,r2,1
 400b7b8:	1085883a 	add	r2,r2,r2
 400b7bc:	1085883a 	add	r2,r2,r2
 400b7c0:	1087883a 	add	r3,r2,r2
 400b7c4:	00810074 	movhi	r2,1025
 400b7c8:	10968a04 	addi	r2,r2,23080
 400b7cc:	1885883a 	add	r2,r3,r2
 400b7d0:	10bffe04 	addi	r2,r2,-8
 400b7d4:	e0bff815 	stw	r2,-32(fp)
 400b7d8:	e0bff817 	ldw	r2,-32(fp)
 400b7dc:	10800217 	ldw	r2,8(r2)
 400b7e0:	e0bff715 	stw	r2,-36(fp)
 400b7e4:	e0bff117 	ldw	r2,-60(fp)
 400b7e8:	e0fff817 	ldw	r3,-32(fp)
 400b7ec:	10c00315 	stw	r3,12(r2)
 400b7f0:	e0bff117 	ldw	r2,-60(fp)
 400b7f4:	e0fff717 	ldw	r3,-36(fp)
 400b7f8:	10c00215 	stw	r3,8(r2)
 400b7fc:	e0bff817 	ldw	r2,-32(fp)
 400b800:	e0fff117 	ldw	r3,-60(fp)
 400b804:	10c00215 	stw	r3,8(r2)
 400b808:	e0bff817 	ldw	r2,-32(fp)
 400b80c:	10c00217 	ldw	r3,8(r2)
 400b810:	e0bff717 	ldw	r2,-36(fp)
 400b814:	10c00315 	stw	r3,12(r2)
 400b818:	00006b06 	br	400b9c8 <_malloc_r+0x700>
 400b81c:	e0bffb17 	ldw	r2,-20(fp)
 400b820:	1004d27a 	srli	r2,r2,9
 400b824:	1000031e 	bne	r2,zero,400b834 <_malloc_r+0x56c>
 400b828:	e0bffb17 	ldw	r2,-20(fp)
 400b82c:	1004d0fa 	srli	r2,r2,3
 400b830:	00002906 	br	400b8d8 <_malloc_r+0x610>
 400b834:	e0bffb17 	ldw	r2,-20(fp)
 400b838:	1004d27a 	srli	r2,r2,9
 400b83c:	10800168 	cmpgeui	r2,r2,5
 400b840:	1000041e 	bne	r2,zero,400b854 <_malloc_r+0x58c>
 400b844:	e0bffb17 	ldw	r2,-20(fp)
 400b848:	1004d1ba 	srli	r2,r2,6
 400b84c:	10800e04 	addi	r2,r2,56
 400b850:	00002106 	br	400b8d8 <_malloc_r+0x610>
 400b854:	e0bffb17 	ldw	r2,-20(fp)
 400b858:	1004d27a 	srli	r2,r2,9
 400b85c:	10800568 	cmpgeui	r2,r2,21
 400b860:	1000041e 	bne	r2,zero,400b874 <_malloc_r+0x5ac>
 400b864:	e0bffb17 	ldw	r2,-20(fp)
 400b868:	1004d27a 	srli	r2,r2,9
 400b86c:	108016c4 	addi	r2,r2,91
 400b870:	00001906 	br	400b8d8 <_malloc_r+0x610>
 400b874:	e0bffb17 	ldw	r2,-20(fp)
 400b878:	1004d27a 	srli	r2,r2,9
 400b87c:	10801568 	cmpgeui	r2,r2,85
 400b880:	1000041e 	bne	r2,zero,400b894 <_malloc_r+0x5cc>
 400b884:	e0bffb17 	ldw	r2,-20(fp)
 400b888:	1004d33a 	srli	r2,r2,12
 400b88c:	10801b84 	addi	r2,r2,110
 400b890:	00001106 	br	400b8d8 <_malloc_r+0x610>
 400b894:	e0bffb17 	ldw	r2,-20(fp)
 400b898:	1004d27a 	srli	r2,r2,9
 400b89c:	10805568 	cmpgeui	r2,r2,341
 400b8a0:	1000041e 	bne	r2,zero,400b8b4 <_malloc_r+0x5ec>
 400b8a4:	e0bffb17 	ldw	r2,-20(fp)
 400b8a8:	1004d3fa 	srli	r2,r2,15
 400b8ac:	10801dc4 	addi	r2,r2,119
 400b8b0:	00000906 	br	400b8d8 <_malloc_r+0x610>
 400b8b4:	e0bffb17 	ldw	r2,-20(fp)
 400b8b8:	1004d27a 	srli	r2,r2,9
 400b8bc:	10815568 	cmpgeui	r2,r2,1365
 400b8c0:	1000041e 	bne	r2,zero,400b8d4 <_malloc_r+0x60c>
 400b8c4:	e0bffb17 	ldw	r2,-20(fp)
 400b8c8:	1004d4ba 	srli	r2,r2,18
 400b8cc:	10801f04 	addi	r2,r2,124
 400b8d0:	00000106 	br	400b8d8 <_malloc_r+0x610>
 400b8d4:	00801f84 	movi	r2,126
 400b8d8:	e0bffd15 	stw	r2,-12(fp)
 400b8dc:	e0bffd17 	ldw	r2,-12(fp)
 400b8e0:	10800044 	addi	r2,r2,1
 400b8e4:	1085883a 	add	r2,r2,r2
 400b8e8:	1085883a 	add	r2,r2,r2
 400b8ec:	1087883a 	add	r3,r2,r2
 400b8f0:	00810074 	movhi	r2,1025
 400b8f4:	10968a04 	addi	r2,r2,23080
 400b8f8:	1885883a 	add	r2,r3,r2
 400b8fc:	10bffe04 	addi	r2,r2,-8
 400b900:	e0bff815 	stw	r2,-32(fp)
 400b904:	e0bff817 	ldw	r2,-32(fp)
 400b908:	10800217 	ldw	r2,8(r2)
 400b90c:	e0bff715 	stw	r2,-36(fp)
 400b910:	e0fff717 	ldw	r3,-36(fp)
 400b914:	e0bff817 	ldw	r2,-32(fp)
 400b918:	1880121e 	bne	r3,r2,400b964 <_malloc_r+0x69c>
 400b91c:	00c10074 	movhi	r3,1025
 400b920:	18d68a04 	addi	r3,r3,23080
 400b924:	00810074 	movhi	r2,1025
 400b928:	10968a04 	addi	r2,r2,23080
 400b92c:	11000117 	ldw	r4,4(r2)
 400b930:	e0bffd17 	ldw	r2,-12(fp)
 400b934:	1000010e 	bge	r2,zero,400b93c <_malloc_r+0x674>
 400b938:	108000c4 	addi	r2,r2,3
 400b93c:	1005d0ba 	srai	r2,r2,2
 400b940:	100b883a 	mov	r5,r2
 400b944:	00800044 	movi	r2,1
 400b948:	1144983a 	sll	r2,r2,r5
 400b94c:	2084b03a 	or	r2,r4,r2
 400b950:	18800115 	stw	r2,4(r3)
 400b954:	00000f06 	br	400b994 <_malloc_r+0x6cc>
 400b958:	e0bff717 	ldw	r2,-36(fp)
 400b95c:	10800217 	ldw	r2,8(r2)
 400b960:	e0bff715 	stw	r2,-36(fp)
 400b964:	e0fff717 	ldw	r3,-36(fp)
 400b968:	e0bff817 	ldw	r2,-32(fp)
 400b96c:	18800626 	beq	r3,r2,400b988 <_malloc_r+0x6c0>
 400b970:	e0bff717 	ldw	r2,-36(fp)
 400b974:	10c00117 	ldw	r3,4(r2)
 400b978:	00bfff04 	movi	r2,-4
 400b97c:	1884703a 	and	r2,r3,r2
 400b980:	e0fffb17 	ldw	r3,-20(fp)
 400b984:	18bff436 	bltu	r3,r2,400b958 <__alt_data_end+0xfc00b958>
 400b988:	e0bff717 	ldw	r2,-36(fp)
 400b98c:	10800317 	ldw	r2,12(r2)
 400b990:	e0bff815 	stw	r2,-32(fp)
 400b994:	e0bff117 	ldw	r2,-60(fp)
 400b998:	e0fff817 	ldw	r3,-32(fp)
 400b99c:	10c00315 	stw	r3,12(r2)
 400b9a0:	e0bff117 	ldw	r2,-60(fp)
 400b9a4:	e0fff717 	ldw	r3,-36(fp)
 400b9a8:	10c00215 	stw	r3,8(r2)
 400b9ac:	e0bff817 	ldw	r2,-32(fp)
 400b9b0:	e0fff117 	ldw	r3,-60(fp)
 400b9b4:	10c00215 	stw	r3,8(r2)
 400b9b8:	e0bff817 	ldw	r2,-32(fp)
 400b9bc:	10c00217 	ldw	r3,8(r2)
 400b9c0:	e0bff717 	ldw	r2,-36(fp)
 400b9c4:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 400b9c8:	e0bff217 	ldw	r2,-56(fp)
 400b9cc:	1000010e 	bge	r2,zero,400b9d4 <_malloc_r+0x70c>
 400b9d0:	108000c4 	addi	r2,r2,3
 400b9d4:	1005d0ba 	srai	r2,r2,2
 400b9d8:	1007883a 	mov	r3,r2
 400b9dc:	00800044 	movi	r2,1
 400b9e0:	10c4983a 	sll	r2,r2,r3
 400b9e4:	e0bff515 	stw	r2,-44(fp)
 400b9e8:	00810074 	movhi	r2,1025
 400b9ec:	10968a04 	addi	r2,r2,23080
 400b9f0:	10c00117 	ldw	r3,4(r2)
 400b9f4:	e0bff517 	ldw	r2,-44(fp)
 400b9f8:	1880c636 	bltu	r3,r2,400bd14 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 400b9fc:	00810074 	movhi	r2,1025
 400ba00:	10968a04 	addi	r2,r2,23080
 400ba04:	10c00117 	ldw	r3,4(r2)
 400ba08:	e0bff517 	ldw	r2,-44(fp)
 400ba0c:	1884703a 	and	r2,r3,r2
 400ba10:	1000151e 	bne	r2,zero,400ba68 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 400ba14:	e0fff217 	ldw	r3,-56(fp)
 400ba18:	00bfff04 	movi	r2,-4
 400ba1c:	1884703a 	and	r2,r3,r2
 400ba20:	10800104 	addi	r2,r2,4
 400ba24:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 400ba28:	e0bff517 	ldw	r2,-44(fp)
 400ba2c:	1085883a 	add	r2,r2,r2
 400ba30:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 400ba34:	00000606 	br	400ba50 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 400ba38:	e0bff217 	ldw	r2,-56(fp)
 400ba3c:	10800104 	addi	r2,r2,4
 400ba40:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 400ba44:	e0bff517 	ldw	r2,-44(fp)
 400ba48:	1085883a 	add	r2,r2,r2
 400ba4c:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 400ba50:	00810074 	movhi	r2,1025
 400ba54:	10968a04 	addi	r2,r2,23080
 400ba58:	10c00117 	ldw	r3,4(r2)
 400ba5c:	e0bff517 	ldw	r2,-44(fp)
 400ba60:	1884703a 	and	r2,r3,r2
 400ba64:	103ff426 	beq	r2,zero,400ba38 <__alt_data_end+0xfc00ba38>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 400ba68:	e0bff217 	ldw	r2,-56(fp)
 400ba6c:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 400ba70:	e0bff217 	ldw	r2,-56(fp)
 400ba74:	10800044 	addi	r2,r2,1
 400ba78:	1085883a 	add	r2,r2,r2
 400ba7c:	1085883a 	add	r2,r2,r2
 400ba80:	1087883a 	add	r3,r2,r2
 400ba84:	00810074 	movhi	r2,1025
 400ba88:	10968a04 	addi	r2,r2,23080
 400ba8c:	1885883a 	add	r2,r3,r2
 400ba90:	10bffe04 	addi	r2,r2,-8
 400ba94:	e0bff315 	stw	r2,-52(fp)
 400ba98:	e0bff317 	ldw	r2,-52(fp)
 400ba9c:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 400baa0:	e0bff317 	ldw	r2,-52(fp)
 400baa4:	10800317 	ldw	r2,12(r2)
 400baa8:	e0bff115 	stw	r2,-60(fp)
 400baac:	00005e06 	br	400bc28 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 400bab0:	e0bff117 	ldw	r2,-60(fp)
 400bab4:	10c00117 	ldw	r3,4(r2)
 400bab8:	00bfff04 	movi	r2,-4
 400babc:	1884703a 	and	r2,r3,r2
 400bac0:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 400bac4:	e0fffb17 	ldw	r3,-20(fp)
 400bac8:	e0bffa17 	ldw	r2,-24(fp)
 400bacc:	1885c83a 	sub	r2,r3,r2
 400bad0:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 400bad4:	e0bff417 	ldw	r2,-48(fp)
 400bad8:	10800410 	cmplti	r2,r2,16
 400badc:	1000331e 	bne	r2,zero,400bbac <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 400bae0:	e0fff117 	ldw	r3,-60(fp)
 400bae4:	e0bffa17 	ldw	r2,-24(fp)
 400bae8:	1885883a 	add	r2,r3,r2
 400baec:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 400baf0:	e0bffa17 	ldw	r2,-24(fp)
 400baf4:	10c00054 	ori	r3,r2,1
 400baf8:	e0bff117 	ldw	r2,-60(fp)
 400bafc:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 400bb00:	e0bff117 	ldw	r2,-60(fp)
 400bb04:	10800317 	ldw	r2,12(r2)
 400bb08:	e0bff815 	stw	r2,-32(fp)
 400bb0c:	e0bff117 	ldw	r2,-60(fp)
 400bb10:	10800217 	ldw	r2,8(r2)
 400bb14:	e0bff715 	stw	r2,-36(fp)
 400bb18:	e0bff717 	ldw	r2,-36(fp)
 400bb1c:	e0fff817 	ldw	r3,-32(fp)
 400bb20:	10c00315 	stw	r3,12(r2)
 400bb24:	e0bff817 	ldw	r2,-32(fp)
 400bb28:	e0fff717 	ldw	r3,-36(fp)
 400bb2c:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 400bb30:	00c10074 	movhi	r3,1025
 400bb34:	18d68c04 	addi	r3,r3,23088
 400bb38:	00810074 	movhi	r2,1025
 400bb3c:	10968c04 	addi	r2,r2,23088
 400bb40:	e13ffc17 	ldw	r4,-16(fp)
 400bb44:	11000315 	stw	r4,12(r2)
 400bb48:	10800317 	ldw	r2,12(r2)
 400bb4c:	18800215 	stw	r2,8(r3)
 400bb50:	00810074 	movhi	r2,1025
 400bb54:	10968c04 	addi	r2,r2,23088
 400bb58:	e0fffc17 	ldw	r3,-16(fp)
 400bb5c:	18800315 	stw	r2,12(r3)
 400bb60:	e0bffc17 	ldw	r2,-16(fp)
 400bb64:	10c00317 	ldw	r3,12(r2)
 400bb68:	e0bffc17 	ldw	r2,-16(fp)
 400bb6c:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 400bb70:	e0bff417 	ldw	r2,-48(fp)
 400bb74:	10800054 	ori	r2,r2,1
 400bb78:	1007883a 	mov	r3,r2
 400bb7c:	e0bffc17 	ldw	r2,-16(fp)
 400bb80:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 400bb84:	e0bff417 	ldw	r2,-48(fp)
 400bb88:	e0fffc17 	ldw	r3,-16(fp)
 400bb8c:	1885883a 	add	r2,r3,r2
 400bb90:	e0fff417 	ldw	r3,-48(fp)
 400bb94:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 400bb98:	e13ffe17 	ldw	r4,-8(fp)
 400bb9c:	40128180 	call	4012818 <__malloc_unlock>
            return chunk2mem(victim);
 400bba0:	e0bff117 	ldw	r2,-60(fp)
 400bba4:	10800204 	addi	r2,r2,8
 400bba8:	0000a106 	br	400be30 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 400bbac:	e0bff417 	ldw	r2,-48(fp)
 400bbb0:	10001a16 	blt	r2,zero,400bc1c <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 400bbb4:	e0fff117 	ldw	r3,-60(fp)
 400bbb8:	e0bffb17 	ldw	r2,-20(fp)
 400bbbc:	1885883a 	add	r2,r3,r2
 400bbc0:	e13ff117 	ldw	r4,-60(fp)
 400bbc4:	e0fffb17 	ldw	r3,-20(fp)
 400bbc8:	20c7883a 	add	r3,r4,r3
 400bbcc:	18c00117 	ldw	r3,4(r3)
 400bbd0:	18c00054 	ori	r3,r3,1
 400bbd4:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 400bbd8:	e0bff117 	ldw	r2,-60(fp)
 400bbdc:	10800317 	ldw	r2,12(r2)
 400bbe0:	e0bff815 	stw	r2,-32(fp)
 400bbe4:	e0bff117 	ldw	r2,-60(fp)
 400bbe8:	10800217 	ldw	r2,8(r2)
 400bbec:	e0bff715 	stw	r2,-36(fp)
 400bbf0:	e0bff717 	ldw	r2,-36(fp)
 400bbf4:	e0fff817 	ldw	r3,-32(fp)
 400bbf8:	10c00315 	stw	r3,12(r2)
 400bbfc:	e0bff817 	ldw	r2,-32(fp)
 400bc00:	e0fff717 	ldw	r3,-36(fp)
 400bc04:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 400bc08:	e13ffe17 	ldw	r4,-8(fp)
 400bc0c:	40128180 	call	4012818 <__malloc_unlock>
            return chunk2mem(victim);
 400bc10:	e0bff117 	ldw	r2,-60(fp)
 400bc14:	10800204 	addi	r2,r2,8
 400bc18:	00008506 	br	400be30 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 400bc1c:	e0bff117 	ldw	r2,-60(fp)
 400bc20:	10800317 	ldw	r2,12(r2)
 400bc24:	e0bff115 	stw	r2,-60(fp)
 400bc28:	e0fff117 	ldw	r3,-60(fp)
 400bc2c:	e0bff317 	ldw	r2,-52(fp)
 400bc30:	18bf9f1e 	bne	r3,r2,400bab0 <__alt_data_end+0xfc00bab0>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 400bc34:	e0bff317 	ldw	r2,-52(fp)
 400bc38:	10800204 	addi	r2,r2,8
 400bc3c:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 400bc40:	e0bff217 	ldw	r2,-56(fp)
 400bc44:	10800044 	addi	r2,r2,1
 400bc48:	e0bff215 	stw	r2,-56(fp)
 400bc4c:	e0bff217 	ldw	r2,-56(fp)
 400bc50:	108000cc 	andi	r2,r2,3
 400bc54:	103f921e 	bne	r2,zero,400baa0 <__alt_data_end+0xfc00baa0>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 400bc58:	e0bff617 	ldw	r2,-40(fp)
 400bc5c:	108000cc 	andi	r2,r2,3
 400bc60:	10000a1e 	bne	r2,zero,400bc8c <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 400bc64:	00810074 	movhi	r2,1025
 400bc68:	10968a04 	addi	r2,r2,23080
 400bc6c:	00c10074 	movhi	r3,1025
 400bc70:	18d68a04 	addi	r3,r3,23080
 400bc74:	19000117 	ldw	r4,4(r3)
 400bc78:	e0fff517 	ldw	r3,-44(fp)
 400bc7c:	00c6303a 	nor	r3,zero,r3
 400bc80:	20c6703a 	and	r3,r4,r3
 400bc84:	10c00115 	stw	r3,4(r2)
          break;
 400bc88:	00000a06 	br	400bcb4 <_malloc_r+0x9ec>
        }
        --startidx;
 400bc8c:	e0bff617 	ldw	r2,-40(fp)
 400bc90:	10bfffc4 	addi	r2,r2,-1
 400bc94:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 400bc98:	e0bff917 	ldw	r2,-28(fp)
 400bc9c:	10bffe04 	addi	r2,r2,-8
 400bca0:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 400bca4:	e0bff917 	ldw	r2,-28(fp)
 400bca8:	10c00217 	ldw	r3,8(r2)
 400bcac:	e0bff917 	ldw	r2,-28(fp)
 400bcb0:	18bfe926 	beq	r3,r2,400bc58 <__alt_data_end+0xfc00bc58>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 400bcb4:	e0bff517 	ldw	r2,-44(fp)
 400bcb8:	1085883a 	add	r2,r2,r2
 400bcbc:	e0bff515 	stw	r2,-44(fp)
 400bcc0:	00810074 	movhi	r2,1025
 400bcc4:	10968a04 	addi	r2,r2,23080
 400bcc8:	10c00117 	ldw	r3,4(r2)
 400bccc:	e0bff517 	ldw	r2,-44(fp)
 400bcd0:	18801036 	bltu	r3,r2,400bd14 <_malloc_r+0xa4c>
 400bcd4:	e0bff517 	ldw	r2,-44(fp)
 400bcd8:	10000e26 	beq	r2,zero,400bd14 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 400bcdc:	00000606 	br	400bcf8 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 400bce0:	e0bff217 	ldw	r2,-56(fp)
 400bce4:	10800104 	addi	r2,r2,4
 400bce8:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 400bcec:	e0bff517 	ldw	r2,-44(fp)
 400bcf0:	1085883a 	add	r2,r2,r2
 400bcf4:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 400bcf8:	00810074 	movhi	r2,1025
 400bcfc:	10968a04 	addi	r2,r2,23080
 400bd00:	10c00117 	ldw	r3,4(r2)
 400bd04:	e0bff517 	ldw	r2,-44(fp)
 400bd08:	1884703a 	and	r2,r3,r2
 400bd0c:	103ff426 	beq	r2,zero,400bce0 <__alt_data_end+0xfc00bce0>
          block <<= 1;
        }
      }
      else
        break;
    }
 400bd10:	003f5506 	br	400ba68 <__alt_data_end+0xfc00ba68>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 400bd14:	00810074 	movhi	r2,1025
 400bd18:	10968a04 	addi	r2,r2,23080
 400bd1c:	10800217 	ldw	r2,8(r2)
 400bd20:	10c00117 	ldw	r3,4(r2)
 400bd24:	00bfff04 	movi	r2,-4
 400bd28:	1886703a 	and	r3,r3,r2
 400bd2c:	e0bffa17 	ldw	r2,-24(fp)
 400bd30:	1885c83a 	sub	r2,r3,r2
 400bd34:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 400bd38:	00810074 	movhi	r2,1025
 400bd3c:	10968a04 	addi	r2,r2,23080
 400bd40:	10800217 	ldw	r2,8(r2)
 400bd44:	10c00117 	ldw	r3,4(r2)
 400bd48:	00bfff04 	movi	r2,-4
 400bd4c:	1886703a 	and	r3,r3,r2
 400bd50:	e0bffa17 	ldw	r2,-24(fp)
 400bd54:	18800336 	bltu	r3,r2,400bd64 <_malloc_r+0xa9c>
 400bd58:	e0bff417 	ldw	r2,-48(fp)
 400bd5c:	10800408 	cmpgei	r2,r2,16
 400bd60:	10001b1e 	bne	r2,zero,400bdd0 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 400bd64:	e17ffa17 	ldw	r5,-24(fp)
 400bd68:	e13ffe17 	ldw	r4,-8(fp)
 400bd6c:	400af140 	call	400af14 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 400bd70:	00810074 	movhi	r2,1025
 400bd74:	10968a04 	addi	r2,r2,23080
 400bd78:	10800217 	ldw	r2,8(r2)
 400bd7c:	10c00117 	ldw	r3,4(r2)
 400bd80:	00bfff04 	movi	r2,-4
 400bd84:	1886703a 	and	r3,r3,r2
 400bd88:	e0bffa17 	ldw	r2,-24(fp)
 400bd8c:	1885c83a 	sub	r2,r3,r2
 400bd90:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 400bd94:	00810074 	movhi	r2,1025
 400bd98:	10968a04 	addi	r2,r2,23080
 400bd9c:	10800217 	ldw	r2,8(r2)
 400bda0:	10c00117 	ldw	r3,4(r2)
 400bda4:	00bfff04 	movi	r2,-4
 400bda8:	1886703a 	and	r3,r3,r2
 400bdac:	e0bffa17 	ldw	r2,-24(fp)
 400bdb0:	18800336 	bltu	r3,r2,400bdc0 <_malloc_r+0xaf8>
 400bdb4:	e0bff417 	ldw	r2,-48(fp)
 400bdb8:	10800408 	cmpgei	r2,r2,16
 400bdbc:	1000041e 	bne	r2,zero,400bdd0 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 400bdc0:	e13ffe17 	ldw	r4,-8(fp)
 400bdc4:	40128180 	call	4012818 <__malloc_unlock>
      return 0; /* propagate failure */
 400bdc8:	0005883a 	mov	r2,zero
 400bdcc:	00001806 	br	400be30 <_malloc_r+0xb68>
    }
  }

  victim = top;
 400bdd0:	00810074 	movhi	r2,1025
 400bdd4:	10968a04 	addi	r2,r2,23080
 400bdd8:	10800217 	ldw	r2,8(r2)
 400bddc:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 400bde0:	e0bffa17 	ldw	r2,-24(fp)
 400bde4:	10c00054 	ori	r3,r2,1
 400bde8:	e0bff117 	ldw	r2,-60(fp)
 400bdec:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 400bdf0:	00810074 	movhi	r2,1025
 400bdf4:	10968a04 	addi	r2,r2,23080
 400bdf8:	e13ff117 	ldw	r4,-60(fp)
 400bdfc:	e0fffa17 	ldw	r3,-24(fp)
 400be00:	20c7883a 	add	r3,r4,r3
 400be04:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 400be08:	00810074 	movhi	r2,1025
 400be0c:	10968a04 	addi	r2,r2,23080
 400be10:	10800217 	ldw	r2,8(r2)
 400be14:	e0fff417 	ldw	r3,-48(fp)
 400be18:	18c00054 	ori	r3,r3,1
 400be1c:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 400be20:	e13ffe17 	ldw	r4,-8(fp)
 400be24:	40128180 	call	4012818 <__malloc_unlock>
  return chunk2mem(victim);
 400be28:	e0bff117 	ldw	r2,-60(fp)
 400be2c:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 400be30:	e037883a 	mov	sp,fp
 400be34:	dfc00117 	ldw	ra,4(sp)
 400be38:	df000017 	ldw	fp,0(sp)
 400be3c:	dec00204 	addi	sp,sp,8
 400be40:	f800283a 	ret

0400be44 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 400be44:	defff704 	addi	sp,sp,-36
 400be48:	df000815 	stw	fp,32(sp)
 400be4c:	df000804 	addi	fp,sp,32
 400be50:	e13ffd15 	stw	r4,-12(fp)
 400be54:	e17ffe15 	stw	r5,-8(fp)
 400be58:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 400be5c:	e0bffd17 	ldw	r2,-12(fp)
 400be60:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 400be64:	e0bffe17 	ldw	r2,-8(fp)
 400be68:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 400be6c:	00001006 	br	400beb0 <memchr+0x6c>
    {
      if (!length--)
 400be70:	e0bfff17 	ldw	r2,-4(fp)
 400be74:	10ffffc4 	addi	r3,r2,-1
 400be78:	e0ffff15 	stw	r3,-4(fp)
 400be7c:	1000021e 	bne	r2,zero,400be88 <memchr+0x44>
        return NULL;
 400be80:	0005883a 	mov	r2,zero
 400be84:	00005a06 	br	400bff0 <memchr+0x1ac>
      if (*src == d)
 400be88:	e0bff817 	ldw	r2,-32(fp)
 400be8c:	10800003 	ldbu	r2,0(r2)
 400be90:	10c03fcc 	andi	r3,r2,255
 400be94:	e0bffc03 	ldbu	r2,-16(fp)
 400be98:	1880021e 	bne	r3,r2,400bea4 <memchr+0x60>
        return (void *) src;
 400be9c:	e0bff817 	ldw	r2,-32(fp)
 400bea0:	00005306 	br	400bff0 <memchr+0x1ac>
      src++;
 400bea4:	e0bff817 	ldw	r2,-32(fp)
 400bea8:	10800044 	addi	r2,r2,1
 400beac:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 400beb0:	e0bff817 	ldw	r2,-32(fp)
 400beb4:	108000cc 	andi	r2,r2,3
 400beb8:	103fed1e 	bne	r2,zero,400be70 <__alt_data_end+0xfc00be70>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 400bebc:	e0bfff17 	ldw	r2,-4(fp)
 400bec0:	10800130 	cmpltui	r2,r2,4
 400bec4:	1000451e 	bne	r2,zero,400bfdc <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 400bec8:	e0bff817 	ldw	r2,-32(fp)
 400becc:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 400bed0:	e0bffc03 	ldbu	r2,-16(fp)
 400bed4:	1006923a 	slli	r3,r2,8
 400bed8:	e0bffc03 	ldbu	r2,-16(fp)
 400bedc:	1884b03a 	or	r2,r3,r2
 400bee0:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 400bee4:	e0bffa17 	ldw	r2,-24(fp)
 400bee8:	1004943a 	slli	r2,r2,16
 400beec:	e0fffa17 	ldw	r3,-24(fp)
 400bef0:	1884b03a 	or	r2,r3,r2
 400bef4:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 400bef8:	00800804 	movi	r2,32
 400befc:	e0bffb15 	stw	r2,-20(fp)
 400bf00:	00000906 	br	400bf28 <memchr+0xe4>
        mask = (mask << i) | mask;
 400bf04:	e0fffa17 	ldw	r3,-24(fp)
 400bf08:	e0bffb17 	ldw	r2,-20(fp)
 400bf0c:	1884983a 	sll	r2,r3,r2
 400bf10:	e0fffa17 	ldw	r3,-24(fp)
 400bf14:	1884b03a 	or	r2,r3,r2
 400bf18:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 400bf1c:	e0bffb17 	ldw	r2,-20(fp)
 400bf20:	1085883a 	add	r2,r2,r2
 400bf24:	e0bffb15 	stw	r2,-20(fp)
 400bf28:	e0bffb17 	ldw	r2,-20(fp)
 400bf2c:	10800830 	cmpltui	r2,r2,32
 400bf30:	103ff41e 	bne	r2,zero,400bf04 <__alt_data_end+0xfc00bf04>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 400bf34:	00001706 	br	400bf94 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 400bf38:	e0bff917 	ldw	r2,-28(fp)
 400bf3c:	10c00017 	ldw	r3,0(r2)
 400bf40:	e0bffa17 	ldw	r2,-24(fp)
 400bf44:	1886f03a 	xor	r3,r3,r2
 400bf48:	00bfbff4 	movhi	r2,65279
 400bf4c:	10bfbfc4 	addi	r2,r2,-257
 400bf50:	1887883a 	add	r3,r3,r2
 400bf54:	e0bff917 	ldw	r2,-28(fp)
 400bf58:	11000017 	ldw	r4,0(r2)
 400bf5c:	e0bffa17 	ldw	r2,-24(fp)
 400bf60:	2084f03a 	xor	r2,r4,r2
 400bf64:	0084303a 	nor	r2,zero,r2
 400bf68:	1886703a 	and	r3,r3,r2
 400bf6c:	00a02074 	movhi	r2,32897
 400bf70:	10a02004 	addi	r2,r2,-32640
 400bf74:	1884703a 	and	r2,r3,r2
 400bf78:	10000a1e 	bne	r2,zero,400bfa4 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 400bf7c:	e0bfff17 	ldw	r2,-4(fp)
 400bf80:	10bfff04 	addi	r2,r2,-4
 400bf84:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 400bf88:	e0bff917 	ldw	r2,-28(fp)
 400bf8c:	10800104 	addi	r2,r2,4
 400bf90:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 400bf94:	e0bfff17 	ldw	r2,-4(fp)
 400bf98:	10800128 	cmpgeui	r2,r2,4
 400bf9c:	103fe61e 	bne	r2,zero,400bf38 <__alt_data_end+0xfc00bf38>
 400bfa0:	00000106 	br	400bfa8 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 400bfa4:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 400bfa8:	e0bff917 	ldw	r2,-28(fp)
 400bfac:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 400bfb0:	00000a06 	br	400bfdc <memchr+0x198>
    {
      if (*src == d)
 400bfb4:	e0bff817 	ldw	r2,-32(fp)
 400bfb8:	10800003 	ldbu	r2,0(r2)
 400bfbc:	10c03fcc 	andi	r3,r2,255
 400bfc0:	e0bffc03 	ldbu	r2,-16(fp)
 400bfc4:	1880021e 	bne	r3,r2,400bfd0 <memchr+0x18c>
        return (void *) src;
 400bfc8:	e0bff817 	ldw	r2,-32(fp)
 400bfcc:	00000806 	br	400bff0 <memchr+0x1ac>
      src++;
 400bfd0:	e0bff817 	ldw	r2,-32(fp)
 400bfd4:	10800044 	addi	r2,r2,1
 400bfd8:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 400bfdc:	e0bfff17 	ldw	r2,-4(fp)
 400bfe0:	10ffffc4 	addi	r3,r2,-1
 400bfe4:	e0ffff15 	stw	r3,-4(fp)
 400bfe8:	103ff21e 	bne	r2,zero,400bfb4 <__alt_data_end+0xfc00bfb4>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 400bfec:	0005883a 	mov	r2,zero
}
 400bff0:	e037883a 	mov	sp,fp
 400bff4:	df000017 	ldw	fp,0(sp)
 400bff8:	dec00104 	addi	sp,sp,4
 400bffc:	f800283a 	ret

0400c000 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 400c000:	defff804 	addi	sp,sp,-32
 400c004:	df000715 	stw	fp,28(sp)
 400c008:	df000704 	addi	fp,sp,28
 400c00c:	e13ffd15 	stw	r4,-12(fp)
 400c010:	e17ffe15 	stw	r5,-8(fp)
 400c014:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 400c018:	e0bffd17 	ldw	r2,-12(fp)
 400c01c:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 400c020:	e0bffe17 	ldw	r2,-8(fp)
 400c024:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 400c028:	e0bfff17 	ldw	r2,-4(fp)
 400c02c:	10800430 	cmpltui	r2,r2,16
 400c030:	10004c1e 	bne	r2,zero,400c164 <memcpy+0x164>
 400c034:	e0fffa17 	ldw	r3,-24(fp)
 400c038:	e0bff917 	ldw	r2,-28(fp)
 400c03c:	1884b03a 	or	r2,r3,r2
 400c040:	108000cc 	andi	r2,r2,3
 400c044:	1000471e 	bne	r2,zero,400c164 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 400c048:	e0bff917 	ldw	r2,-28(fp)
 400c04c:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 400c050:	e0bffa17 	ldw	r2,-24(fp)
 400c054:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 400c058:	00002306 	br	400c0e8 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 400c05c:	e0bffb17 	ldw	r2,-20(fp)
 400c060:	10c00104 	addi	r3,r2,4
 400c064:	e0fffb15 	stw	r3,-20(fp)
 400c068:	e0fffc17 	ldw	r3,-16(fp)
 400c06c:	19000104 	addi	r4,r3,4
 400c070:	e13ffc15 	stw	r4,-16(fp)
 400c074:	18c00017 	ldw	r3,0(r3)
 400c078:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 400c07c:	e0bffb17 	ldw	r2,-20(fp)
 400c080:	10c00104 	addi	r3,r2,4
 400c084:	e0fffb15 	stw	r3,-20(fp)
 400c088:	e0fffc17 	ldw	r3,-16(fp)
 400c08c:	19000104 	addi	r4,r3,4
 400c090:	e13ffc15 	stw	r4,-16(fp)
 400c094:	18c00017 	ldw	r3,0(r3)
 400c098:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 400c09c:	e0bffb17 	ldw	r2,-20(fp)
 400c0a0:	10c00104 	addi	r3,r2,4
 400c0a4:	e0fffb15 	stw	r3,-20(fp)
 400c0a8:	e0fffc17 	ldw	r3,-16(fp)
 400c0ac:	19000104 	addi	r4,r3,4
 400c0b0:	e13ffc15 	stw	r4,-16(fp)
 400c0b4:	18c00017 	ldw	r3,0(r3)
 400c0b8:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 400c0bc:	e0bffb17 	ldw	r2,-20(fp)
 400c0c0:	10c00104 	addi	r3,r2,4
 400c0c4:	e0fffb15 	stw	r3,-20(fp)
 400c0c8:	e0fffc17 	ldw	r3,-16(fp)
 400c0cc:	19000104 	addi	r4,r3,4
 400c0d0:	e13ffc15 	stw	r4,-16(fp)
 400c0d4:	18c00017 	ldw	r3,0(r3)
 400c0d8:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 400c0dc:	e0bfff17 	ldw	r2,-4(fp)
 400c0e0:	10bffc04 	addi	r2,r2,-16
 400c0e4:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 400c0e8:	e0bfff17 	ldw	r2,-4(fp)
 400c0ec:	10800428 	cmpgeui	r2,r2,16
 400c0f0:	103fda1e 	bne	r2,zero,400c05c <__alt_data_end+0xfc00c05c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 400c0f4:	00000b06 	br	400c124 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 400c0f8:	e0bffb17 	ldw	r2,-20(fp)
 400c0fc:	10c00104 	addi	r3,r2,4
 400c100:	e0fffb15 	stw	r3,-20(fp)
 400c104:	e0fffc17 	ldw	r3,-16(fp)
 400c108:	19000104 	addi	r4,r3,4
 400c10c:	e13ffc15 	stw	r4,-16(fp)
 400c110:	18c00017 	ldw	r3,0(r3)
 400c114:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 400c118:	e0bfff17 	ldw	r2,-4(fp)
 400c11c:	10bfff04 	addi	r2,r2,-4
 400c120:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 400c124:	e0bfff17 	ldw	r2,-4(fp)
 400c128:	10800128 	cmpgeui	r2,r2,4
 400c12c:	103ff21e 	bne	r2,zero,400c0f8 <__alt_data_end+0xfc00c0f8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 400c130:	e0bffb17 	ldw	r2,-20(fp)
 400c134:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 400c138:	e0bffc17 	ldw	r2,-16(fp)
 400c13c:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 400c140:	00000806 	br	400c164 <memcpy+0x164>
    *dst++ = *src++;
 400c144:	e0bff917 	ldw	r2,-28(fp)
 400c148:	10c00044 	addi	r3,r2,1
 400c14c:	e0fff915 	stw	r3,-28(fp)
 400c150:	e0fffa17 	ldw	r3,-24(fp)
 400c154:	19000044 	addi	r4,r3,1
 400c158:	e13ffa15 	stw	r4,-24(fp)
 400c15c:	18c00003 	ldbu	r3,0(r3)
 400c160:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 400c164:	e0bfff17 	ldw	r2,-4(fp)
 400c168:	10ffffc4 	addi	r3,r2,-1
 400c16c:	e0ffff15 	stw	r3,-4(fp)
 400c170:	103ff41e 	bne	r2,zero,400c144 <__alt_data_end+0xfc00c144>
    *dst++ = *src++;

  return dst0;
 400c174:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 400c178:	e037883a 	mov	sp,fp
 400c17c:	df000017 	ldw	fp,0(sp)
 400c180:	dec00104 	addi	sp,sp,4
 400c184:	f800283a 	ret

0400c188 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 400c188:	defff804 	addi	sp,sp,-32
 400c18c:	df000715 	stw	fp,28(sp)
 400c190:	df000704 	addi	fp,sp,28
 400c194:	e13ffd15 	stw	r4,-12(fp)
 400c198:	e17ffe15 	stw	r5,-8(fp)
 400c19c:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 400c1a0:	e0bffd17 	ldw	r2,-12(fp)
 400c1a4:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 400c1a8:	e0bffe17 	ldw	r2,-8(fp)
 400c1ac:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 400c1b0:	e0fffa17 	ldw	r3,-24(fp)
 400c1b4:	e0bff917 	ldw	r2,-28(fp)
 400c1b8:	18801d2e 	bgeu	r3,r2,400c230 <memmove+0xa8>
 400c1bc:	e0fffa17 	ldw	r3,-24(fp)
 400c1c0:	e0bfff17 	ldw	r2,-4(fp)
 400c1c4:	1885883a 	add	r2,r3,r2
 400c1c8:	e0fff917 	ldw	r3,-28(fp)
 400c1cc:	1880182e 	bgeu	r3,r2,400c230 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 400c1d0:	e0fffa17 	ldw	r3,-24(fp)
 400c1d4:	e0bfff17 	ldw	r2,-4(fp)
 400c1d8:	1885883a 	add	r2,r3,r2
 400c1dc:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 400c1e0:	e0fff917 	ldw	r3,-28(fp)
 400c1e4:	e0bfff17 	ldw	r2,-4(fp)
 400c1e8:	1885883a 	add	r2,r3,r2
 400c1ec:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 400c1f0:	00000a06 	br	400c21c <memmove+0x94>
	{
	  *--dst = *--src;
 400c1f4:	e0bff917 	ldw	r2,-28(fp)
 400c1f8:	10bfffc4 	addi	r2,r2,-1
 400c1fc:	e0bff915 	stw	r2,-28(fp)
 400c200:	e0bffa17 	ldw	r2,-24(fp)
 400c204:	10bfffc4 	addi	r2,r2,-1
 400c208:	e0bffa15 	stw	r2,-24(fp)
 400c20c:	e0bffa17 	ldw	r2,-24(fp)
 400c210:	10c00003 	ldbu	r3,0(r2)
 400c214:	e0bff917 	ldw	r2,-28(fp)
 400c218:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 400c21c:	e0bfff17 	ldw	r2,-4(fp)
 400c220:	10ffffc4 	addi	r3,r2,-1
 400c224:	e0ffff15 	stw	r3,-4(fp)
 400c228:	103ff21e 	bne	r2,zero,400c1f4 <__alt_data_end+0xfc00c1f4>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 400c22c:	00005306 	br	400c37c <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 400c230:	e0bfff17 	ldw	r2,-4(fp)
 400c234:	10800430 	cmpltui	r2,r2,16
 400c238:	10004c1e 	bne	r2,zero,400c36c <memmove+0x1e4>
 400c23c:	e0fffa17 	ldw	r3,-24(fp)
 400c240:	e0bff917 	ldw	r2,-28(fp)
 400c244:	1884b03a 	or	r2,r3,r2
 400c248:	108000cc 	andi	r2,r2,3
 400c24c:	1000471e 	bne	r2,zero,400c36c <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 400c250:	e0bff917 	ldw	r2,-28(fp)
 400c254:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 400c258:	e0bffa17 	ldw	r2,-24(fp)
 400c25c:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 400c260:	00002306 	br	400c2f0 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 400c264:	e0bffb17 	ldw	r2,-20(fp)
 400c268:	10c00104 	addi	r3,r2,4
 400c26c:	e0fffb15 	stw	r3,-20(fp)
 400c270:	e0fffc17 	ldw	r3,-16(fp)
 400c274:	19000104 	addi	r4,r3,4
 400c278:	e13ffc15 	stw	r4,-16(fp)
 400c27c:	18c00017 	ldw	r3,0(r3)
 400c280:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 400c284:	e0bffb17 	ldw	r2,-20(fp)
 400c288:	10c00104 	addi	r3,r2,4
 400c28c:	e0fffb15 	stw	r3,-20(fp)
 400c290:	e0fffc17 	ldw	r3,-16(fp)
 400c294:	19000104 	addi	r4,r3,4
 400c298:	e13ffc15 	stw	r4,-16(fp)
 400c29c:	18c00017 	ldw	r3,0(r3)
 400c2a0:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 400c2a4:	e0bffb17 	ldw	r2,-20(fp)
 400c2a8:	10c00104 	addi	r3,r2,4
 400c2ac:	e0fffb15 	stw	r3,-20(fp)
 400c2b0:	e0fffc17 	ldw	r3,-16(fp)
 400c2b4:	19000104 	addi	r4,r3,4
 400c2b8:	e13ffc15 	stw	r4,-16(fp)
 400c2bc:	18c00017 	ldw	r3,0(r3)
 400c2c0:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 400c2c4:	e0bffb17 	ldw	r2,-20(fp)
 400c2c8:	10c00104 	addi	r3,r2,4
 400c2cc:	e0fffb15 	stw	r3,-20(fp)
 400c2d0:	e0fffc17 	ldw	r3,-16(fp)
 400c2d4:	19000104 	addi	r4,r3,4
 400c2d8:	e13ffc15 	stw	r4,-16(fp)
 400c2dc:	18c00017 	ldw	r3,0(r3)
 400c2e0:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 400c2e4:	e0bfff17 	ldw	r2,-4(fp)
 400c2e8:	10bffc04 	addi	r2,r2,-16
 400c2ec:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 400c2f0:	e0bfff17 	ldw	r2,-4(fp)
 400c2f4:	10800428 	cmpgeui	r2,r2,16
 400c2f8:	103fda1e 	bne	r2,zero,400c264 <__alt_data_end+0xfc00c264>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 400c2fc:	00000b06 	br	400c32c <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 400c300:	e0bffb17 	ldw	r2,-20(fp)
 400c304:	10c00104 	addi	r3,r2,4
 400c308:	e0fffb15 	stw	r3,-20(fp)
 400c30c:	e0fffc17 	ldw	r3,-16(fp)
 400c310:	19000104 	addi	r4,r3,4
 400c314:	e13ffc15 	stw	r4,-16(fp)
 400c318:	18c00017 	ldw	r3,0(r3)
 400c31c:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 400c320:	e0bfff17 	ldw	r2,-4(fp)
 400c324:	10bfff04 	addi	r2,r2,-4
 400c328:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 400c32c:	e0bfff17 	ldw	r2,-4(fp)
 400c330:	10800128 	cmpgeui	r2,r2,4
 400c334:	103ff21e 	bne	r2,zero,400c300 <__alt_data_end+0xfc00c300>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 400c338:	e0bffb17 	ldw	r2,-20(fp)
 400c33c:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 400c340:	e0bffc17 	ldw	r2,-16(fp)
 400c344:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 400c348:	00000806 	br	400c36c <memmove+0x1e4>
        {
          *dst++ = *src++;
 400c34c:	e0bff917 	ldw	r2,-28(fp)
 400c350:	10c00044 	addi	r3,r2,1
 400c354:	e0fff915 	stw	r3,-28(fp)
 400c358:	e0fffa17 	ldw	r3,-24(fp)
 400c35c:	19000044 	addi	r4,r3,1
 400c360:	e13ffa15 	stw	r4,-24(fp)
 400c364:	18c00003 	ldbu	r3,0(r3)
 400c368:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 400c36c:	e0bfff17 	ldw	r2,-4(fp)
 400c370:	10ffffc4 	addi	r3,r2,-1
 400c374:	e0ffff15 	stw	r3,-4(fp)
 400c378:	103ff41e 	bne	r2,zero,400c34c <__alt_data_end+0xfc00c34c>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 400c37c:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 400c380:	e037883a 	mov	sp,fp
 400c384:	df000017 	ldw	fp,0(sp)
 400c388:	dec00104 	addi	sp,sp,4
 400c38c:	f800283a 	ret

0400c390 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 400c390:	defff704 	addi	sp,sp,-36
 400c394:	df000815 	stw	fp,32(sp)
 400c398:	df000804 	addi	fp,sp,32
 400c39c:	e13ffd15 	stw	r4,-12(fp)
 400c3a0:	e17ffe15 	stw	r5,-8(fp)
 400c3a4:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 400c3a8:	e0bffd17 	ldw	r2,-12(fp)
 400c3ac:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 400c3b0:	e0bffe17 	ldw	r2,-8(fp)
 400c3b4:	10803fcc 	andi	r2,r2,255
 400c3b8:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 400c3bc:	00000c06 	br	400c3f0 <memset+0x60>
    {
      if (n--)
 400c3c0:	e0bfff17 	ldw	r2,-4(fp)
 400c3c4:	10ffffc4 	addi	r3,r2,-1
 400c3c8:	e0ffff15 	stw	r3,-4(fp)
 400c3cc:	10000626 	beq	r2,zero,400c3e8 <memset+0x58>
        *s++ = (char) c;
 400c3d0:	e0bff817 	ldw	r2,-32(fp)
 400c3d4:	10c00044 	addi	r3,r2,1
 400c3d8:	e0fff815 	stw	r3,-32(fp)
 400c3dc:	e0fffe17 	ldw	r3,-8(fp)
 400c3e0:	10c00005 	stb	r3,0(r2)
 400c3e4:	00000206 	br	400c3f0 <memset+0x60>
      else
        return m;
 400c3e8:	e0bffd17 	ldw	r2,-12(fp)
 400c3ec:	00005506 	br	400c544 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 400c3f0:	e0bff817 	ldw	r2,-32(fp)
 400c3f4:	108000cc 	andi	r2,r2,3
 400c3f8:	103ff11e 	bne	r2,zero,400c3c0 <__alt_data_end+0xfc00c3c0>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 400c3fc:	e0bfff17 	ldw	r2,-4(fp)
 400c400:	10800130 	cmpltui	r2,r2,4
 400c404:	10004a1e 	bne	r2,zero,400c530 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 400c408:	e0bff817 	ldw	r2,-32(fp)
 400c40c:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 400c410:	e0bffc17 	ldw	r2,-16(fp)
 400c414:	1006923a 	slli	r3,r2,8
 400c418:	e0bffc17 	ldw	r2,-16(fp)
 400c41c:	1884b03a 	or	r2,r3,r2
 400c420:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 400c424:	e0bffa17 	ldw	r2,-24(fp)
 400c428:	1004943a 	slli	r2,r2,16
 400c42c:	e0fffa17 	ldw	r3,-24(fp)
 400c430:	1884b03a 	or	r2,r3,r2
 400c434:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 400c438:	00800804 	movi	r2,32
 400c43c:	e0bff915 	stw	r2,-28(fp)
 400c440:	00000906 	br	400c468 <memset+0xd8>
        buffer = (buffer << i) | buffer;
 400c444:	e0fffa17 	ldw	r3,-24(fp)
 400c448:	e0bff917 	ldw	r2,-28(fp)
 400c44c:	1884983a 	sll	r2,r3,r2
 400c450:	e0fffa17 	ldw	r3,-24(fp)
 400c454:	1884b03a 	or	r2,r3,r2
 400c458:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 400c45c:	e0bff917 	ldw	r2,-28(fp)
 400c460:	1085883a 	add	r2,r2,r2
 400c464:	e0bff915 	stw	r2,-28(fp)
 400c468:	e0bff917 	ldw	r2,-28(fp)
 400c46c:	10800830 	cmpltui	r2,r2,32
 400c470:	103ff41e 	bne	r2,zero,400c444 <__alt_data_end+0xfc00c444>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 400c474:	00001706 	br	400c4d4 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 400c478:	e0bffb17 	ldw	r2,-20(fp)
 400c47c:	10c00104 	addi	r3,r2,4
 400c480:	e0fffb15 	stw	r3,-20(fp)
 400c484:	e0fffa17 	ldw	r3,-24(fp)
 400c488:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 400c48c:	e0bffb17 	ldw	r2,-20(fp)
 400c490:	10c00104 	addi	r3,r2,4
 400c494:	e0fffb15 	stw	r3,-20(fp)
 400c498:	e0fffa17 	ldw	r3,-24(fp)
 400c49c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 400c4a0:	e0bffb17 	ldw	r2,-20(fp)
 400c4a4:	10c00104 	addi	r3,r2,4
 400c4a8:	e0fffb15 	stw	r3,-20(fp)
 400c4ac:	e0fffa17 	ldw	r3,-24(fp)
 400c4b0:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 400c4b4:	e0bffb17 	ldw	r2,-20(fp)
 400c4b8:	10c00104 	addi	r3,r2,4
 400c4bc:	e0fffb15 	stw	r3,-20(fp)
 400c4c0:	e0fffa17 	ldw	r3,-24(fp)
 400c4c4:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 400c4c8:	e0bfff17 	ldw	r2,-4(fp)
 400c4cc:	10bffc04 	addi	r2,r2,-16
 400c4d0:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 400c4d4:	e0bfff17 	ldw	r2,-4(fp)
 400c4d8:	10800428 	cmpgeui	r2,r2,16
 400c4dc:	103fe61e 	bne	r2,zero,400c478 <__alt_data_end+0xfc00c478>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 400c4e0:	00000806 	br	400c504 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 400c4e4:	e0bffb17 	ldw	r2,-20(fp)
 400c4e8:	10c00104 	addi	r3,r2,4
 400c4ec:	e0fffb15 	stw	r3,-20(fp)
 400c4f0:	e0fffa17 	ldw	r3,-24(fp)
 400c4f4:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 400c4f8:	e0bfff17 	ldw	r2,-4(fp)
 400c4fc:	10bfff04 	addi	r2,r2,-4
 400c500:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 400c504:	e0bfff17 	ldw	r2,-4(fp)
 400c508:	10800128 	cmpgeui	r2,r2,4
 400c50c:	103ff51e 	bne	r2,zero,400c4e4 <__alt_data_end+0xfc00c4e4>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 400c510:	e0bffb17 	ldw	r2,-20(fp)
 400c514:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 400c518:	00000506 	br	400c530 <memset+0x1a0>
    *s++ = (char) c;
 400c51c:	e0bff817 	ldw	r2,-32(fp)
 400c520:	10c00044 	addi	r3,r2,1
 400c524:	e0fff815 	stw	r3,-32(fp)
 400c528:	e0fffe17 	ldw	r3,-8(fp)
 400c52c:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 400c530:	e0bfff17 	ldw	r2,-4(fp)
 400c534:	10ffffc4 	addi	r3,r2,-1
 400c538:	e0ffff15 	stw	r3,-4(fp)
 400c53c:	103ff71e 	bne	r2,zero,400c51c <__alt_data_end+0xfc00c51c>
    *s++ = (char) c;

  return m;
 400c540:	e0bffd17 	ldw	r2,-12(fp)
}
 400c544:	e037883a 	mov	sp,fp
 400c548:	df000017 	ldw	fp,0(sp)
 400c54c:	dec00104 	addi	sp,sp,4
 400c550:	f800283a 	ret

0400c554 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 400c554:	defffa04 	addi	sp,sp,-24
 400c558:	dfc00515 	stw	ra,20(sp)
 400c55c:	df000415 	stw	fp,16(sp)
 400c560:	df000404 	addi	fp,sp,16
 400c564:	e13ffe15 	stw	r4,-8(fp)
 400c568:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 400c56c:	e0bffe17 	ldw	r2,-8(fp)
 400c570:	10801317 	ldw	r2,76(r2)
 400c574:	10000c1e 	bne	r2,zero,400c5a8 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 400c578:	01800844 	movi	r6,33
 400c57c:	01400104 	movi	r5,4
 400c580:	e13ffe17 	ldw	r4,-8(fp)
 400c584:	40109940 	call	4010994 <_calloc_r>
 400c588:	1007883a 	mov	r3,r2
 400c58c:	e0bffe17 	ldw	r2,-8(fp)
 400c590:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 400c594:	e0bffe17 	ldw	r2,-8(fp)
 400c598:	10801317 	ldw	r2,76(r2)
 400c59c:	1000021e 	bne	r2,zero,400c5a8 <_Balloc+0x54>
	{
	  return NULL;
 400c5a0:	0005883a 	mov	r2,zero
 400c5a4:	00003206 	br	400c670 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 400c5a8:	e0bffe17 	ldw	r2,-8(fp)
 400c5ac:	10c01317 	ldw	r3,76(r2)
 400c5b0:	e0bfff17 	ldw	r2,-4(fp)
 400c5b4:	1085883a 	add	r2,r2,r2
 400c5b8:	1085883a 	add	r2,r2,r2
 400c5bc:	1885883a 	add	r2,r3,r2
 400c5c0:	10800017 	ldw	r2,0(r2)
 400c5c4:	e0bffc15 	stw	r2,-16(fp)
 400c5c8:	e0bffc17 	ldw	r2,-16(fp)
 400c5cc:	10000a26 	beq	r2,zero,400c5f8 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 400c5d0:	e0bffe17 	ldw	r2,-8(fp)
 400c5d4:	10c01317 	ldw	r3,76(r2)
 400c5d8:	e0bfff17 	ldw	r2,-4(fp)
 400c5dc:	1085883a 	add	r2,r2,r2
 400c5e0:	1085883a 	add	r2,r2,r2
 400c5e4:	1885883a 	add	r2,r3,r2
 400c5e8:	e0fffc17 	ldw	r3,-16(fp)
 400c5ec:	18c00017 	ldw	r3,0(r3)
 400c5f0:	10c00015 	stw	r3,0(r2)
 400c5f4:	00001706 	br	400c654 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 400c5f8:	00c00044 	movi	r3,1
 400c5fc:	e0bfff17 	ldw	r2,-4(fp)
 400c600:	1884983a 	sll	r2,r3,r2
 400c604:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 400c608:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 400c60c:	10800144 	addi	r2,r2,5
 400c610:	1085883a 	add	r2,r2,r2
 400c614:	1085883a 	add	r2,r2,r2
 400c618:	100d883a 	mov	r6,r2
 400c61c:	01400044 	movi	r5,1
 400c620:	e13ffe17 	ldw	r4,-8(fp)
 400c624:	40109940 	call	4010994 <_calloc_r>
 400c628:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 400c62c:	e0bffc17 	ldw	r2,-16(fp)
 400c630:	1000021e 	bne	r2,zero,400c63c <_Balloc+0xe8>
 400c634:	0005883a 	mov	r2,zero
 400c638:	00000d06 	br	400c670 <_Balloc+0x11c>
      rv->_k = k;
 400c63c:	e0bffc17 	ldw	r2,-16(fp)
 400c640:	e0ffff17 	ldw	r3,-4(fp)
 400c644:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 400c648:	e0bffc17 	ldw	r2,-16(fp)
 400c64c:	e0fffd17 	ldw	r3,-12(fp)
 400c650:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 400c654:	e0bffc17 	ldw	r2,-16(fp)
 400c658:	10000415 	stw	zero,16(r2)
 400c65c:	e0bffc17 	ldw	r2,-16(fp)
 400c660:	10c00417 	ldw	r3,16(r2)
 400c664:	e0bffc17 	ldw	r2,-16(fp)
 400c668:	10c00315 	stw	r3,12(r2)
  return rv;
 400c66c:	e0bffc17 	ldw	r2,-16(fp)
}
 400c670:	e037883a 	mov	sp,fp
 400c674:	dfc00117 	ldw	ra,4(sp)
 400c678:	df000017 	ldw	fp,0(sp)
 400c67c:	dec00204 	addi	sp,sp,8
 400c680:	f800283a 	ret

0400c684 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 400c684:	defffd04 	addi	sp,sp,-12
 400c688:	df000215 	stw	fp,8(sp)
 400c68c:	df000204 	addi	fp,sp,8
 400c690:	e13ffe15 	stw	r4,-8(fp)
 400c694:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 400c698:	e0bfff17 	ldw	r2,-4(fp)
 400c69c:	10001326 	beq	r2,zero,400c6ec <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 400c6a0:	e0bffe17 	ldw	r2,-8(fp)
 400c6a4:	10c01317 	ldw	r3,76(r2)
 400c6a8:	e0bfff17 	ldw	r2,-4(fp)
 400c6ac:	10800117 	ldw	r2,4(r2)
 400c6b0:	1085883a 	add	r2,r2,r2
 400c6b4:	1085883a 	add	r2,r2,r2
 400c6b8:	1885883a 	add	r2,r3,r2
 400c6bc:	10c00017 	ldw	r3,0(r2)
 400c6c0:	e0bfff17 	ldw	r2,-4(fp)
 400c6c4:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 400c6c8:	e0bffe17 	ldw	r2,-8(fp)
 400c6cc:	10c01317 	ldw	r3,76(r2)
 400c6d0:	e0bfff17 	ldw	r2,-4(fp)
 400c6d4:	10800117 	ldw	r2,4(r2)
 400c6d8:	1085883a 	add	r2,r2,r2
 400c6dc:	1085883a 	add	r2,r2,r2
 400c6e0:	1885883a 	add	r2,r3,r2
 400c6e4:	e0ffff17 	ldw	r3,-4(fp)
 400c6e8:	10c00015 	stw	r3,0(r2)
    }
}
 400c6ec:	0001883a 	nop
 400c6f0:	e037883a 	mov	sp,fp
 400c6f4:	df000017 	ldw	fp,0(sp)
 400c6f8:	dec00104 	addi	sp,sp,4
 400c6fc:	f800283a 	ret

0400c700 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 400c700:	defff304 	addi	sp,sp,-52
 400c704:	dfc00c15 	stw	ra,48(sp)
 400c708:	df000b15 	stw	fp,44(sp)
 400c70c:	df000b04 	addi	fp,sp,44
 400c710:	e13ffc15 	stw	r4,-16(fp)
 400c714:	e17ffd15 	stw	r5,-12(fp)
 400c718:	e1bffe15 	stw	r6,-8(fp)
 400c71c:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 400c720:	e0bffd17 	ldw	r2,-12(fp)
 400c724:	10800417 	ldw	r2,16(r2)
 400c728:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 400c72c:	e0bffd17 	ldw	r2,-12(fp)
 400c730:	10800504 	addi	r2,r2,20
 400c734:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 400c738:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 400c73c:	e0bff617 	ldw	r2,-40(fp)
 400c740:	10800017 	ldw	r2,0(r2)
 400c744:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 400c748:	e0bff817 	ldw	r2,-32(fp)
 400c74c:	10ffffcc 	andi	r3,r2,65535
 400c750:	e0bffe17 	ldw	r2,-8(fp)
 400c754:	1887383a 	mul	r3,r3,r2
 400c758:	e0bfff17 	ldw	r2,-4(fp)
 400c75c:	1885883a 	add	r2,r3,r2
 400c760:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 400c764:	e0bff817 	ldw	r2,-32(fp)
 400c768:	1006d43a 	srli	r3,r2,16
 400c76c:	e0bffe17 	ldw	r2,-8(fp)
 400c770:	1887383a 	mul	r3,r3,r2
 400c774:	e0bff917 	ldw	r2,-28(fp)
 400c778:	1004d43a 	srli	r2,r2,16
 400c77c:	1885883a 	add	r2,r3,r2
 400c780:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 400c784:	e0bffa17 	ldw	r2,-24(fp)
 400c788:	1004d43a 	srli	r2,r2,16
 400c78c:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 400c790:	e0bff617 	ldw	r2,-40(fp)
 400c794:	10c00104 	addi	r3,r2,4
 400c798:	e0fff615 	stw	r3,-40(fp)
 400c79c:	e0fffa17 	ldw	r3,-24(fp)
 400c7a0:	1808943a 	slli	r4,r3,16
 400c7a4:	e0fff917 	ldw	r3,-28(fp)
 400c7a8:	18ffffcc 	andi	r3,r3,65535
 400c7ac:	20c7883a 	add	r3,r4,r3
 400c7b0:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 400c7b4:	e0bff517 	ldw	r2,-44(fp)
 400c7b8:	10800044 	addi	r2,r2,1
 400c7bc:	e0bff515 	stw	r2,-44(fp)
 400c7c0:	e0fff517 	ldw	r3,-44(fp)
 400c7c4:	e0bff717 	ldw	r2,-36(fp)
 400c7c8:	18bfdc16 	blt	r3,r2,400c73c <__alt_data_end+0xfc00c73c>
  if (a)
 400c7cc:	e0bfff17 	ldw	r2,-4(fp)
 400c7d0:	10002a26 	beq	r2,zero,400c87c <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 400c7d4:	e0bffd17 	ldw	r2,-12(fp)
 400c7d8:	10800217 	ldw	r2,8(r2)
 400c7dc:	e0fff717 	ldw	r3,-36(fp)
 400c7e0:	18801916 	blt	r3,r2,400c848 <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 400c7e4:	e0bffd17 	ldw	r2,-12(fp)
 400c7e8:	10800117 	ldw	r2,4(r2)
 400c7ec:	10800044 	addi	r2,r2,1
 400c7f0:	100b883a 	mov	r5,r2
 400c7f4:	e13ffc17 	ldw	r4,-16(fp)
 400c7f8:	400c5540 	call	400c554 <_Balloc>
 400c7fc:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 400c800:	e0bffb17 	ldw	r2,-20(fp)
 400c804:	10c00304 	addi	r3,r2,12
 400c808:	e0bffd17 	ldw	r2,-12(fp)
 400c80c:	11000304 	addi	r4,r2,12
 400c810:	e0bffd17 	ldw	r2,-12(fp)
 400c814:	10800417 	ldw	r2,16(r2)
 400c818:	10800084 	addi	r2,r2,2
 400c81c:	1085883a 	add	r2,r2,r2
 400c820:	1085883a 	add	r2,r2,r2
 400c824:	100d883a 	mov	r6,r2
 400c828:	200b883a 	mov	r5,r4
 400c82c:	1809883a 	mov	r4,r3
 400c830:	400c0000 	call	400c000 <memcpy>
	  Bfree (ptr, b);
 400c834:	e17ffd17 	ldw	r5,-12(fp)
 400c838:	e13ffc17 	ldw	r4,-16(fp)
 400c83c:	400c6840 	call	400c684 <_Bfree>
	  b = b1;
 400c840:	e0bffb17 	ldw	r2,-20(fp)
 400c844:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 400c848:	e0bff717 	ldw	r2,-36(fp)
 400c84c:	10c00044 	addi	r3,r2,1
 400c850:	e0fff715 	stw	r3,-36(fp)
 400c854:	e0ffff17 	ldw	r3,-4(fp)
 400c858:	e13ffd17 	ldw	r4,-12(fp)
 400c85c:	10800144 	addi	r2,r2,5
 400c860:	1085883a 	add	r2,r2,r2
 400c864:	1085883a 	add	r2,r2,r2
 400c868:	2085883a 	add	r2,r4,r2
 400c86c:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 400c870:	e0bffd17 	ldw	r2,-12(fp)
 400c874:	e0fff717 	ldw	r3,-36(fp)
 400c878:	10c00415 	stw	r3,16(r2)
    }
  return b;
 400c87c:	e0bffd17 	ldw	r2,-12(fp)
}
 400c880:	e037883a 	mov	sp,fp
 400c884:	dfc00117 	ldw	ra,4(sp)
 400c888:	df000017 	ldw	fp,0(sp)
 400c88c:	dec00204 	addi	sp,sp,8
 400c890:	f800283a 	ret

0400c894 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 400c894:	defff504 	addi	sp,sp,-44
 400c898:	dfc00a15 	stw	ra,40(sp)
 400c89c:	df000915 	stw	fp,36(sp)
 400c8a0:	df000904 	addi	fp,sp,36
 400c8a4:	e13ffc15 	stw	r4,-16(fp)
 400c8a8:	e17ffd15 	stw	r5,-12(fp)
 400c8ac:	e1bffe15 	stw	r6,-8(fp)
 400c8b0:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 400c8b4:	e0bfff17 	ldw	r2,-4(fp)
 400c8b8:	10800204 	addi	r2,r2,8
 400c8bc:	01400244 	movi	r5,9
 400c8c0:	1009883a 	mov	r4,r2
 400c8c4:	40044f00 	call	40044f0 <__divsi3>
 400c8c8:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 400c8cc:	e03ff915 	stw	zero,-28(fp)
 400c8d0:	00800044 	movi	r2,1
 400c8d4:	e0bffa15 	stw	r2,-24(fp)
 400c8d8:	00000606 	br	400c8f4 <__s2b+0x60>
 400c8dc:	e0bffa17 	ldw	r2,-24(fp)
 400c8e0:	1085883a 	add	r2,r2,r2
 400c8e4:	e0bffa15 	stw	r2,-24(fp)
 400c8e8:	e0bff917 	ldw	r2,-28(fp)
 400c8ec:	10800044 	addi	r2,r2,1
 400c8f0:	e0bff915 	stw	r2,-28(fp)
 400c8f4:	e0bffb17 	ldw	r2,-20(fp)
 400c8f8:	e0fffa17 	ldw	r3,-24(fp)
 400c8fc:	18bff716 	blt	r3,r2,400c8dc <__alt_data_end+0xfc00c8dc>
#ifdef Pack_32
  b = Balloc (ptr, k);
 400c900:	e17ff917 	ldw	r5,-28(fp)
 400c904:	e13ffc17 	ldw	r4,-16(fp)
 400c908:	400c5540 	call	400c554 <_Balloc>
 400c90c:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 400c910:	e0bff717 	ldw	r2,-36(fp)
 400c914:	e0c00217 	ldw	r3,8(fp)
 400c918:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 400c91c:	e0bff717 	ldw	r2,-36(fp)
 400c920:	00c00044 	movi	r3,1
 400c924:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 400c928:	00800244 	movi	r2,9
 400c92c:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 400c930:	e0bffe17 	ldw	r2,-8(fp)
 400c934:	10800290 	cmplti	r2,r2,10
 400c938:	10001b1e 	bne	r2,zero,400c9a8 <__s2b+0x114>
    {
      s += 9;
 400c93c:	e0bffd17 	ldw	r2,-12(fp)
 400c940:	10800244 	addi	r2,r2,9
 400c944:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 400c948:	e0bffd17 	ldw	r2,-12(fp)
 400c94c:	10c00044 	addi	r3,r2,1
 400c950:	e0fffd15 	stw	r3,-12(fp)
 400c954:	10800003 	ldbu	r2,0(r2)
 400c958:	10803fcc 	andi	r2,r2,255
 400c95c:	1080201c 	xori	r2,r2,128
 400c960:	10bfe004 	addi	r2,r2,-128
 400c964:	10bff404 	addi	r2,r2,-48
 400c968:	100f883a 	mov	r7,r2
 400c96c:	01800284 	movi	r6,10
 400c970:	e17ff717 	ldw	r5,-36(fp)
 400c974:	e13ffc17 	ldw	r4,-16(fp)
 400c978:	400c7000 	call	400c700 <__multadd>
 400c97c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 400c980:	e0bff817 	ldw	r2,-32(fp)
 400c984:	10800044 	addi	r2,r2,1
 400c988:	e0bff815 	stw	r2,-32(fp)
 400c98c:	e0fff817 	ldw	r3,-32(fp)
 400c990:	e0bffe17 	ldw	r2,-8(fp)
 400c994:	18bfec16 	blt	r3,r2,400c948 <__alt_data_end+0xfc00c948>
      s++;
 400c998:	e0bffd17 	ldw	r2,-12(fp)
 400c99c:	10800044 	addi	r2,r2,1
 400c9a0:	e0bffd15 	stw	r2,-12(fp)
 400c9a4:	00001506 	br	400c9fc <__s2b+0x168>
    }
  else
    s += 10;
 400c9a8:	e0bffd17 	ldw	r2,-12(fp)
 400c9ac:	10800284 	addi	r2,r2,10
 400c9b0:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 400c9b4:	00001106 	br	400c9fc <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 400c9b8:	e0bffd17 	ldw	r2,-12(fp)
 400c9bc:	10c00044 	addi	r3,r2,1
 400c9c0:	e0fffd15 	stw	r3,-12(fp)
 400c9c4:	10800003 	ldbu	r2,0(r2)
 400c9c8:	10803fcc 	andi	r2,r2,255
 400c9cc:	1080201c 	xori	r2,r2,128
 400c9d0:	10bfe004 	addi	r2,r2,-128
 400c9d4:	10bff404 	addi	r2,r2,-48
 400c9d8:	100f883a 	mov	r7,r2
 400c9dc:	01800284 	movi	r6,10
 400c9e0:	e17ff717 	ldw	r5,-36(fp)
 400c9e4:	e13ffc17 	ldw	r4,-16(fp)
 400c9e8:	400c7000 	call	400c700 <__multadd>
 400c9ec:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 400c9f0:	e0bff817 	ldw	r2,-32(fp)
 400c9f4:	10800044 	addi	r2,r2,1
 400c9f8:	e0bff815 	stw	r2,-32(fp)
 400c9fc:	e0fff817 	ldw	r3,-32(fp)
 400ca00:	e0bfff17 	ldw	r2,-4(fp)
 400ca04:	18bfec16 	blt	r3,r2,400c9b8 <__alt_data_end+0xfc00c9b8>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 400ca08:	e0bff717 	ldw	r2,-36(fp)
}
 400ca0c:	e037883a 	mov	sp,fp
 400ca10:	dfc00117 	ldw	ra,4(sp)
 400ca14:	df000017 	ldw	fp,0(sp)
 400ca18:	dec00204 	addi	sp,sp,8
 400ca1c:	f800283a 	ret

0400ca20 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 400ca20:	defffe04 	addi	sp,sp,-8
 400ca24:	df000115 	stw	fp,4(sp)
 400ca28:	dc000015 	stw	r16,0(sp)
 400ca2c:	df000104 	addi	fp,sp,4
 400ca30:	2005883a 	mov	r2,r4
  register int k = 0;
 400ca34:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 400ca38:	10ffffec 	andhi	r3,r2,65535
 400ca3c:	1800021e 	bne	r3,zero,400ca48 <__hi0bits+0x28>
    {
      k = 16;
 400ca40:	04000404 	movi	r16,16
      x <<= 16;
 400ca44:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 400ca48:	10ffc02c 	andhi	r3,r2,65280
 400ca4c:	1800021e 	bne	r3,zero,400ca58 <__hi0bits+0x38>
    {
      k += 8;
 400ca50:	84000204 	addi	r16,r16,8
      x <<= 8;
 400ca54:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 400ca58:	10fc002c 	andhi	r3,r2,61440
 400ca5c:	1800021e 	bne	r3,zero,400ca68 <__hi0bits+0x48>
    {
      k += 4;
 400ca60:	84000104 	addi	r16,r16,4
      x <<= 4;
 400ca64:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 400ca68:	10f0002c 	andhi	r3,r2,49152
 400ca6c:	1800031e 	bne	r3,zero,400ca7c <__hi0bits+0x5c>
    {
      k += 2;
 400ca70:	84000084 	addi	r16,r16,2
      x <<= 2;
 400ca74:	1085883a 	add	r2,r2,r2
 400ca78:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 400ca7c:	1007883a 	mov	r3,r2
 400ca80:	18000516 	blt	r3,zero,400ca98 <__hi0bits+0x78>
    {
      k++;
 400ca84:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 400ca88:	1090002c 	andhi	r2,r2,16384
 400ca8c:	1000021e 	bne	r2,zero,400ca98 <__hi0bits+0x78>
	return 32;
 400ca90:	00800804 	movi	r2,32
 400ca94:	00000106 	br	400ca9c <__hi0bits+0x7c>
    }
  return k;
 400ca98:	8005883a 	mov	r2,r16
}
 400ca9c:	e6ffff04 	addi	sp,fp,-4
 400caa0:	df000117 	ldw	fp,4(sp)
 400caa4:	dc000017 	ldw	r16,0(sp)
 400caa8:	dec00204 	addi	sp,sp,8
 400caac:	f800283a 	ret

0400cab0 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 400cab0:	defffc04 	addi	sp,sp,-16
 400cab4:	df000315 	stw	fp,12(sp)
 400cab8:	dc400215 	stw	r17,8(sp)
 400cabc:	dc000115 	stw	r16,4(sp)
 400cac0:	df000304 	addi	fp,sp,12
 400cac4:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 400cac8:	e0bffd17 	ldw	r2,-12(fp)
 400cacc:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 400cad0:	808001cc 	andi	r2,r16,7
 400cad4:	10001026 	beq	r2,zero,400cb18 <__lo0bits+0x68>
    {
      if (x & 1)
 400cad8:	8080004c 	andi	r2,r16,1
 400cadc:	10000226 	beq	r2,zero,400cae8 <__lo0bits+0x38>
	return 0;
 400cae0:	0005883a 	mov	r2,zero
 400cae4:	00002706 	br	400cb84 <__lo0bits+0xd4>
      if (x & 2)
 400cae8:	8080008c 	andi	r2,r16,2
 400caec:	10000526 	beq	r2,zero,400cb04 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 400caf0:	8006d07a 	srli	r3,r16,1
 400caf4:	e0bffd17 	ldw	r2,-12(fp)
 400caf8:	10c00015 	stw	r3,0(r2)
	  return 1;
 400cafc:	00800044 	movi	r2,1
 400cb00:	00002006 	br	400cb84 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 400cb04:	8006d0ba 	srli	r3,r16,2
 400cb08:	e0bffd17 	ldw	r2,-12(fp)
 400cb0c:	10c00015 	stw	r3,0(r2)
      return 2;
 400cb10:	00800084 	movi	r2,2
 400cb14:	00001b06 	br	400cb84 <__lo0bits+0xd4>
    }
  k = 0;
 400cb18:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 400cb1c:	80bfffcc 	andi	r2,r16,65535
 400cb20:	1000021e 	bne	r2,zero,400cb2c <__lo0bits+0x7c>
    {
      k = 16;
 400cb24:	04400404 	movi	r17,16
      x >>= 16;
 400cb28:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 400cb2c:	80803fcc 	andi	r2,r16,255
 400cb30:	1000021e 	bne	r2,zero,400cb3c <__lo0bits+0x8c>
    {
      k += 8;
 400cb34:	8c400204 	addi	r17,r17,8
      x >>= 8;
 400cb38:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 400cb3c:	808003cc 	andi	r2,r16,15
 400cb40:	1000021e 	bne	r2,zero,400cb4c <__lo0bits+0x9c>
    {
      k += 4;
 400cb44:	8c400104 	addi	r17,r17,4
      x >>= 4;
 400cb48:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 400cb4c:	808000cc 	andi	r2,r16,3
 400cb50:	1000021e 	bne	r2,zero,400cb5c <__lo0bits+0xac>
    {
      k += 2;
 400cb54:	8c400084 	addi	r17,r17,2
      x >>= 2;
 400cb58:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 400cb5c:	8080004c 	andi	r2,r16,1
 400cb60:	1000051e 	bne	r2,zero,400cb78 <__lo0bits+0xc8>
    {
      k++;
 400cb64:	8c400044 	addi	r17,r17,1
      x >>= 1;
 400cb68:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 400cb6c:	8000021e 	bne	r16,zero,400cb78 <__lo0bits+0xc8>
	return 32;
 400cb70:	00800804 	movi	r2,32
 400cb74:	00000306 	br	400cb84 <__lo0bits+0xd4>
    }
  *y = x;
 400cb78:	e0bffd17 	ldw	r2,-12(fp)
 400cb7c:	14000015 	stw	r16,0(r2)
  return k;
 400cb80:	8805883a 	mov	r2,r17
}
 400cb84:	e6fffe04 	addi	sp,fp,-8
 400cb88:	df000217 	ldw	fp,8(sp)
 400cb8c:	dc400117 	ldw	r17,4(sp)
 400cb90:	dc000017 	ldw	r16,0(sp)
 400cb94:	dec00304 	addi	sp,sp,12
 400cb98:	f800283a 	ret

0400cb9c <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 400cb9c:	defffb04 	addi	sp,sp,-20
 400cba0:	dfc00415 	stw	ra,16(sp)
 400cba4:	df000315 	stw	fp,12(sp)
 400cba8:	df000304 	addi	fp,sp,12
 400cbac:	e13ffe15 	stw	r4,-8(fp)
 400cbb0:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 400cbb4:	01400044 	movi	r5,1
 400cbb8:	e13ffe17 	ldw	r4,-8(fp)
 400cbbc:	400c5540 	call	400c554 <_Balloc>
 400cbc0:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 400cbc4:	e0ffff17 	ldw	r3,-4(fp)
 400cbc8:	e0bffd17 	ldw	r2,-12(fp)
 400cbcc:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 400cbd0:	e0bffd17 	ldw	r2,-12(fp)
 400cbd4:	00c00044 	movi	r3,1
 400cbd8:	10c00415 	stw	r3,16(r2)
  return b;
 400cbdc:	e0bffd17 	ldw	r2,-12(fp)
}
 400cbe0:	e037883a 	mov	sp,fp
 400cbe4:	dfc00117 	ldw	ra,4(sp)
 400cbe8:	df000017 	ldw	fp,0(sp)
 400cbec:	dec00204 	addi	sp,sp,8
 400cbf0:	f800283a 	ret

0400cbf4 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 400cbf4:	deffeb04 	addi	sp,sp,-84
 400cbf8:	dfc01415 	stw	ra,80(sp)
 400cbfc:	df001315 	stw	fp,76(sp)
 400cc00:	df001304 	addi	fp,sp,76
 400cc04:	e13ffd15 	stw	r4,-12(fp)
 400cc08:	e17ffe15 	stw	r5,-8(fp)
 400cc0c:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 400cc10:	e0bffe17 	ldw	r2,-8(fp)
 400cc14:	10c00417 	ldw	r3,16(r2)
 400cc18:	e0bfff17 	ldw	r2,-4(fp)
 400cc1c:	10800417 	ldw	r2,16(r2)
 400cc20:	1880060e 	bge	r3,r2,400cc3c <__multiply+0x48>
    {
      c = a;
 400cc24:	e0bffe17 	ldw	r2,-8(fp)
 400cc28:	e0bff515 	stw	r2,-44(fp)
      a = b;
 400cc2c:	e0bfff17 	ldw	r2,-4(fp)
 400cc30:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 400cc34:	e0bff517 	ldw	r2,-44(fp)
 400cc38:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 400cc3c:	e0bffe17 	ldw	r2,-8(fp)
 400cc40:	10800117 	ldw	r2,4(r2)
 400cc44:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 400cc48:	e0bffe17 	ldw	r2,-8(fp)
 400cc4c:	10800417 	ldw	r2,16(r2)
 400cc50:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 400cc54:	e0bfff17 	ldw	r2,-4(fp)
 400cc58:	10800417 	ldw	r2,16(r2)
 400cc5c:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 400cc60:	e0fff617 	ldw	r3,-40(fp)
 400cc64:	e0bff717 	ldw	r2,-36(fp)
 400cc68:	1885883a 	add	r2,r3,r2
 400cc6c:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 400cc70:	e0bffe17 	ldw	r2,-8(fp)
 400cc74:	10c00217 	ldw	r3,8(r2)
 400cc78:	e0bfee17 	ldw	r2,-72(fp)
 400cc7c:	1880030e 	bge	r3,r2,400cc8c <__multiply+0x98>
    k++;
 400cc80:	e0bfed17 	ldw	r2,-76(fp)
 400cc84:	10800044 	addi	r2,r2,1
 400cc88:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 400cc8c:	e17fed17 	ldw	r5,-76(fp)
 400cc90:	e13ffd17 	ldw	r4,-12(fp)
 400cc94:	400c5540 	call	400c554 <_Balloc>
 400cc98:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 400cc9c:	e0bff517 	ldw	r2,-44(fp)
 400cca0:	10800504 	addi	r2,r2,20
 400cca4:	e0bff015 	stw	r2,-64(fp)
 400cca8:	e0bfee17 	ldw	r2,-72(fp)
 400ccac:	1085883a 	add	r2,r2,r2
 400ccb0:	1085883a 	add	r2,r2,r2
 400ccb4:	1007883a 	mov	r3,r2
 400ccb8:	e0bff017 	ldw	r2,-64(fp)
 400ccbc:	10c5883a 	add	r2,r2,r3
 400ccc0:	e0bff815 	stw	r2,-32(fp)
 400ccc4:	00000506 	br	400ccdc <__multiply+0xe8>
    *x = 0;
 400ccc8:	e0bff017 	ldw	r2,-64(fp)
 400cccc:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 400ccd0:	e0bff017 	ldw	r2,-64(fp)
 400ccd4:	10800104 	addi	r2,r2,4
 400ccd8:	e0bff015 	stw	r2,-64(fp)
 400ccdc:	e0fff017 	ldw	r3,-64(fp)
 400cce0:	e0bff817 	ldw	r2,-32(fp)
 400cce4:	18bff836 	bltu	r3,r2,400ccc8 <__alt_data_end+0xfc00ccc8>
    *x = 0;
  xa = a->_x;
 400cce8:	e0bffe17 	ldw	r2,-8(fp)
 400ccec:	10800504 	addi	r2,r2,20
 400ccf0:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 400ccf4:	e0bff617 	ldw	r2,-40(fp)
 400ccf8:	1085883a 	add	r2,r2,r2
 400ccfc:	1085883a 	add	r2,r2,r2
 400cd00:	1007883a 	mov	r3,r2
 400cd04:	e0bff817 	ldw	r2,-32(fp)
 400cd08:	10c5883a 	add	r2,r2,r3
 400cd0c:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 400cd10:	e0bfff17 	ldw	r2,-4(fp)
 400cd14:	10800504 	addi	r2,r2,20
 400cd18:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 400cd1c:	e0bff717 	ldw	r2,-36(fp)
 400cd20:	1085883a 	add	r2,r2,r2
 400cd24:	1085883a 	add	r2,r2,r2
 400cd28:	1007883a 	mov	r3,r2
 400cd2c:	e0bff117 	ldw	r2,-60(fp)
 400cd30:	10c5883a 	add	r2,r2,r3
 400cd34:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 400cd38:	e0bff517 	ldw	r2,-44(fp)
 400cd3c:	10800504 	addi	r2,r2,20
 400cd40:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 400cd44:	00007d06 	br	400cf3c <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 400cd48:	e0bff117 	ldw	r2,-60(fp)
 400cd4c:	10800017 	ldw	r2,0(r2)
 400cd50:	10bfffcc 	andi	r2,r2,65535
 400cd54:	e0bffb15 	stw	r2,-20(fp)
 400cd58:	e0bffb17 	ldw	r2,-20(fp)
 400cd5c:	10003426 	beq	r2,zero,400ce30 <__multiply+0x23c>
	{
	  x = xa;
 400cd60:	e0bff817 	ldw	r2,-32(fp)
 400cd64:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 400cd68:	e0bff317 	ldw	r2,-52(fp)
 400cd6c:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 400cd70:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 400cd74:	e0bff017 	ldw	r2,-64(fp)
 400cd78:	10800017 	ldw	r2,0(r2)
 400cd7c:	10ffffcc 	andi	r3,r2,65535
 400cd80:	e0bffb17 	ldw	r2,-20(fp)
 400cd84:	1887383a 	mul	r3,r3,r2
 400cd88:	e0bff217 	ldw	r2,-56(fp)
 400cd8c:	10800017 	ldw	r2,0(r2)
 400cd90:	10bfffcc 	andi	r2,r2,65535
 400cd94:	1887883a 	add	r3,r3,r2
 400cd98:	e0bfef17 	ldw	r2,-68(fp)
 400cd9c:	1885883a 	add	r2,r3,r2
 400cda0:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 400cda4:	e0bffc17 	ldw	r2,-16(fp)
 400cda8:	1004d43a 	srli	r2,r2,16
 400cdac:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 400cdb0:	e0bff017 	ldw	r2,-64(fp)
 400cdb4:	10c00104 	addi	r3,r2,4
 400cdb8:	e0fff015 	stw	r3,-64(fp)
 400cdbc:	10800017 	ldw	r2,0(r2)
 400cdc0:	1006d43a 	srli	r3,r2,16
 400cdc4:	e0bffb17 	ldw	r2,-20(fp)
 400cdc8:	1887383a 	mul	r3,r3,r2
 400cdcc:	e0bff217 	ldw	r2,-56(fp)
 400cdd0:	10800017 	ldw	r2,0(r2)
 400cdd4:	1004d43a 	srli	r2,r2,16
 400cdd8:	1887883a 	add	r3,r3,r2
 400cddc:	e0bfef17 	ldw	r2,-68(fp)
 400cde0:	1885883a 	add	r2,r3,r2
 400cde4:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 400cde8:	e0bff417 	ldw	r2,-48(fp)
 400cdec:	1004d43a 	srli	r2,r2,16
 400cdf0:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 400cdf4:	e0bff217 	ldw	r2,-56(fp)
 400cdf8:	10c00104 	addi	r3,r2,4
 400cdfc:	e0fff215 	stw	r3,-56(fp)
 400ce00:	e0fff417 	ldw	r3,-48(fp)
 400ce04:	1808943a 	slli	r4,r3,16
 400ce08:	e0fffc17 	ldw	r3,-16(fp)
 400ce0c:	18ffffcc 	andi	r3,r3,65535
 400ce10:	20c6b03a 	or	r3,r4,r3
 400ce14:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 400ce18:	e0fff017 	ldw	r3,-64(fp)
 400ce1c:	e0bff917 	ldw	r2,-28(fp)
 400ce20:	18bfd436 	bltu	r3,r2,400cd74 <__alt_data_end+0xfc00cd74>
	  *xc = carry;
 400ce24:	e0bff217 	ldw	r2,-56(fp)
 400ce28:	e0ffef17 	ldw	r3,-68(fp)
 400ce2c:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 400ce30:	e0bff117 	ldw	r2,-60(fp)
 400ce34:	10800017 	ldw	r2,0(r2)
 400ce38:	1004d43a 	srli	r2,r2,16
 400ce3c:	e0bffb15 	stw	r2,-20(fp)
 400ce40:	e0bffb17 	ldw	r2,-20(fp)
 400ce44:	10003726 	beq	r2,zero,400cf24 <__multiply+0x330>
	{
	  x = xa;
 400ce48:	e0bff817 	ldw	r2,-32(fp)
 400ce4c:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 400ce50:	e0bff317 	ldw	r2,-52(fp)
 400ce54:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 400ce58:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 400ce5c:	e0bff217 	ldw	r2,-56(fp)
 400ce60:	10800017 	ldw	r2,0(r2)
 400ce64:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 400ce68:	e0bff017 	ldw	r2,-64(fp)
 400ce6c:	10800017 	ldw	r2,0(r2)
 400ce70:	10ffffcc 	andi	r3,r2,65535
 400ce74:	e0bffb17 	ldw	r2,-20(fp)
 400ce78:	1887383a 	mul	r3,r3,r2
 400ce7c:	e0bff217 	ldw	r2,-56(fp)
 400ce80:	10800017 	ldw	r2,0(r2)
 400ce84:	1004d43a 	srli	r2,r2,16
 400ce88:	1887883a 	add	r3,r3,r2
 400ce8c:	e0bfef17 	ldw	r2,-68(fp)
 400ce90:	1885883a 	add	r2,r3,r2
 400ce94:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 400ce98:	e0bffc17 	ldw	r2,-16(fp)
 400ce9c:	1004d43a 	srli	r2,r2,16
 400cea0:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 400cea4:	e0bff217 	ldw	r2,-56(fp)
 400cea8:	10c00104 	addi	r3,r2,4
 400ceac:	e0fff215 	stw	r3,-56(fp)
 400ceb0:	e0fffc17 	ldw	r3,-16(fp)
 400ceb4:	1808943a 	slli	r4,r3,16
 400ceb8:	e0fff417 	ldw	r3,-48(fp)
 400cebc:	18ffffcc 	andi	r3,r3,65535
 400cec0:	20c6b03a 	or	r3,r4,r3
 400cec4:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 400cec8:	e0bff017 	ldw	r2,-64(fp)
 400cecc:	10c00104 	addi	r3,r2,4
 400ced0:	e0fff015 	stw	r3,-64(fp)
 400ced4:	10800017 	ldw	r2,0(r2)
 400ced8:	1006d43a 	srli	r3,r2,16
 400cedc:	e0bffb17 	ldw	r2,-20(fp)
 400cee0:	1887383a 	mul	r3,r3,r2
 400cee4:	e0bff217 	ldw	r2,-56(fp)
 400cee8:	10800017 	ldw	r2,0(r2)
 400ceec:	10bfffcc 	andi	r2,r2,65535
 400cef0:	1887883a 	add	r3,r3,r2
 400cef4:	e0bfef17 	ldw	r2,-68(fp)
 400cef8:	1885883a 	add	r2,r3,r2
 400cefc:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 400cf00:	e0bff417 	ldw	r2,-48(fp)
 400cf04:	1004d43a 	srli	r2,r2,16
 400cf08:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 400cf0c:	e0fff017 	ldw	r3,-64(fp)
 400cf10:	e0bff917 	ldw	r2,-28(fp)
 400cf14:	18bfd436 	bltu	r3,r2,400ce68 <__alt_data_end+0xfc00ce68>
	  *xc = z2;
 400cf18:	e0bff217 	ldw	r2,-56(fp)
 400cf1c:	e0fff417 	ldw	r3,-48(fp)
 400cf20:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 400cf24:	e0bff117 	ldw	r2,-60(fp)
 400cf28:	10800104 	addi	r2,r2,4
 400cf2c:	e0bff115 	stw	r2,-60(fp)
 400cf30:	e0bff317 	ldw	r2,-52(fp)
 400cf34:	10800104 	addi	r2,r2,4
 400cf38:	e0bff315 	stw	r2,-52(fp)
 400cf3c:	e0fff117 	ldw	r3,-60(fp)
 400cf40:	e0bffa17 	ldw	r2,-24(fp)
 400cf44:	18bf8036 	bltu	r3,r2,400cd48 <__alt_data_end+0xfc00cd48>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 400cf48:	e0bff517 	ldw	r2,-44(fp)
 400cf4c:	10800504 	addi	r2,r2,20
 400cf50:	e0bff315 	stw	r2,-52(fp)
 400cf54:	e0bfee17 	ldw	r2,-72(fp)
 400cf58:	1085883a 	add	r2,r2,r2
 400cf5c:	1085883a 	add	r2,r2,r2
 400cf60:	1007883a 	mov	r3,r2
 400cf64:	e0bff317 	ldw	r2,-52(fp)
 400cf68:	10c5883a 	add	r2,r2,r3
 400cf6c:	e0bff215 	stw	r2,-56(fp)
 400cf70:	00000306 	br	400cf80 <__multiply+0x38c>
 400cf74:	e0bfee17 	ldw	r2,-72(fp)
 400cf78:	10bfffc4 	addi	r2,r2,-1
 400cf7c:	e0bfee15 	stw	r2,-72(fp)
 400cf80:	e0bfee17 	ldw	r2,-72(fp)
 400cf84:	0080060e 	bge	zero,r2,400cfa0 <__multiply+0x3ac>
 400cf88:	e0bff217 	ldw	r2,-56(fp)
 400cf8c:	10bfff04 	addi	r2,r2,-4
 400cf90:	e0bff215 	stw	r2,-56(fp)
 400cf94:	e0bff217 	ldw	r2,-56(fp)
 400cf98:	10800017 	ldw	r2,0(r2)
 400cf9c:	103ff526 	beq	r2,zero,400cf74 <__alt_data_end+0xfc00cf74>
  c->_wds = wc;
 400cfa0:	e0bff517 	ldw	r2,-44(fp)
 400cfa4:	e0ffee17 	ldw	r3,-72(fp)
 400cfa8:	10c00415 	stw	r3,16(r2)
  return c;
 400cfac:	e0bff517 	ldw	r2,-44(fp)
}
 400cfb0:	e037883a 	mov	sp,fp
 400cfb4:	dfc00117 	ldw	ra,4(sp)
 400cfb8:	df000017 	ldw	fp,0(sp)
 400cfbc:	dec00204 	addi	sp,sp,8
 400cfc0:	f800283a 	ret

0400cfc4 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 400cfc4:	defff704 	addi	sp,sp,-36
 400cfc8:	dfc00815 	stw	ra,32(sp)
 400cfcc:	df000715 	stw	fp,28(sp)
 400cfd0:	df000704 	addi	fp,sp,28
 400cfd4:	e13ffd15 	stw	r4,-12(fp)
 400cfd8:	e17ffe15 	stw	r5,-8(fp)
 400cfdc:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 400cfe0:	e0bfff17 	ldw	r2,-4(fp)
 400cfe4:	108000cc 	andi	r2,r2,3
 400cfe8:	e0bffb15 	stw	r2,-20(fp)
 400cfec:	e0bffb17 	ldw	r2,-20(fp)
 400cff0:	10000e26 	beq	r2,zero,400d02c <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 400cff4:	e0bffb17 	ldw	r2,-20(fp)
 400cff8:	10ffffc4 	addi	r3,r2,-1
 400cffc:	00810074 	movhi	r2,1025
 400d000:	1094fa04 	addi	r2,r2,21480
 400d004:	18c7883a 	add	r3,r3,r3
 400d008:	18c7883a 	add	r3,r3,r3
 400d00c:	10c5883a 	add	r2,r2,r3
 400d010:	10800017 	ldw	r2,0(r2)
 400d014:	000f883a 	mov	r7,zero
 400d018:	100d883a 	mov	r6,r2
 400d01c:	e17ffe17 	ldw	r5,-8(fp)
 400d020:	e13ffd17 	ldw	r4,-12(fp)
 400d024:	400c7000 	call	400c700 <__multadd>
 400d028:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 400d02c:	e0bfff17 	ldw	r2,-4(fp)
 400d030:	1005d0ba 	srai	r2,r2,2
 400d034:	e0bfff15 	stw	r2,-4(fp)
 400d038:	e0bfff17 	ldw	r2,-4(fp)
 400d03c:	1000021e 	bne	r2,zero,400d048 <__pow5mult+0x84>
    return b;
 400d040:	e0bffe17 	ldw	r2,-8(fp)
 400d044:	00003806 	br	400d128 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 400d048:	e0bffd17 	ldw	r2,-12(fp)
 400d04c:	10801217 	ldw	r2,72(r2)
 400d050:	e0bff915 	stw	r2,-28(fp)
 400d054:	e0bff917 	ldw	r2,-28(fp)
 400d058:	10000b1e 	bne	r2,zero,400d088 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 400d05c:	01409c44 	movi	r5,625
 400d060:	e13ffd17 	ldw	r4,-12(fp)
 400d064:	400cb9c0 	call	400cb9c <__i2b>
 400d068:	1007883a 	mov	r3,r2
 400d06c:	e0bffd17 	ldw	r2,-12(fp)
 400d070:	10c01215 	stw	r3,72(r2)
 400d074:	e0bffd17 	ldw	r2,-12(fp)
 400d078:	10801217 	ldw	r2,72(r2)
 400d07c:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 400d080:	e0bff917 	ldw	r2,-28(fp)
 400d084:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 400d088:	e0bfff17 	ldw	r2,-4(fp)
 400d08c:	1080004c 	andi	r2,r2,1
 400d090:	10000a26 	beq	r2,zero,400d0bc <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 400d094:	e1bff917 	ldw	r6,-28(fp)
 400d098:	e17ffe17 	ldw	r5,-8(fp)
 400d09c:	e13ffd17 	ldw	r4,-12(fp)
 400d0a0:	400cbf40 	call	400cbf4 <__multiply>
 400d0a4:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 400d0a8:	e17ffe17 	ldw	r5,-8(fp)
 400d0ac:	e13ffd17 	ldw	r4,-12(fp)
 400d0b0:	400c6840 	call	400c684 <_Bfree>
	  b = b1;
 400d0b4:	e0bffc17 	ldw	r2,-16(fp)
 400d0b8:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 400d0bc:	e0bfff17 	ldw	r2,-4(fp)
 400d0c0:	1005d07a 	srai	r2,r2,1
 400d0c4:	e0bfff15 	stw	r2,-4(fp)
 400d0c8:	e0bfff17 	ldw	r2,-4(fp)
 400d0cc:	10001426 	beq	r2,zero,400d120 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 400d0d0:	e0bff917 	ldw	r2,-28(fp)
 400d0d4:	10800017 	ldw	r2,0(r2)
 400d0d8:	e0bffa15 	stw	r2,-24(fp)
 400d0dc:	e0bffa17 	ldw	r2,-24(fp)
 400d0e0:	10000c1e 	bne	r2,zero,400d114 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 400d0e4:	e1bff917 	ldw	r6,-28(fp)
 400d0e8:	e17ff917 	ldw	r5,-28(fp)
 400d0ec:	e13ffd17 	ldw	r4,-12(fp)
 400d0f0:	400cbf40 	call	400cbf4 <__multiply>
 400d0f4:	1007883a 	mov	r3,r2
 400d0f8:	e0bff917 	ldw	r2,-28(fp)
 400d0fc:	10c00015 	stw	r3,0(r2)
 400d100:	e0bff917 	ldw	r2,-28(fp)
 400d104:	10800017 	ldw	r2,0(r2)
 400d108:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 400d10c:	e0bffa17 	ldw	r2,-24(fp)
 400d110:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 400d114:	e0bffa17 	ldw	r2,-24(fp)
 400d118:	e0bff915 	stw	r2,-28(fp)
    }
 400d11c:	003fda06 	br	400d088 <__alt_data_end+0xfc00d088>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 400d120:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 400d124:	e0bffe17 	ldw	r2,-8(fp)
}
 400d128:	e037883a 	mov	sp,fp
 400d12c:	dfc00117 	ldw	ra,4(sp)
 400d130:	df000017 	ldw	fp,0(sp)
 400d134:	dec00204 	addi	sp,sp,8
 400d138:	f800283a 	ret

0400d13c <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 400d13c:	defff204 	addi	sp,sp,-56
 400d140:	dfc00d15 	stw	ra,52(sp)
 400d144:	df000c15 	stw	fp,48(sp)
 400d148:	df000c04 	addi	fp,sp,48
 400d14c:	e13ffd15 	stw	r4,-12(fp)
 400d150:	e17ffe15 	stw	r5,-8(fp)
 400d154:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 400d158:	e0bfff17 	ldw	r2,-4(fp)
 400d15c:	1005d17a 	srai	r2,r2,5
 400d160:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 400d164:	e0bffe17 	ldw	r2,-8(fp)
 400d168:	10800117 	ldw	r2,4(r2)
 400d16c:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 400d170:	e0bffe17 	ldw	r2,-8(fp)
 400d174:	10c00417 	ldw	r3,16(r2)
 400d178:	e0bffa17 	ldw	r2,-24(fp)
 400d17c:	1885883a 	add	r2,r3,r2
 400d180:	10800044 	addi	r2,r2,1
 400d184:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 400d188:	e0bffe17 	ldw	r2,-8(fp)
 400d18c:	10800217 	ldw	r2,8(r2)
 400d190:	e0bff415 	stw	r2,-48(fp)
 400d194:	00000606 	br	400d1b0 <__lshift+0x74>
    k1++;
 400d198:	e0bff517 	ldw	r2,-44(fp)
 400d19c:	10800044 	addi	r2,r2,1
 400d1a0:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 400d1a4:	e0bff417 	ldw	r2,-48(fp)
 400d1a8:	1085883a 	add	r2,r2,r2
 400d1ac:	e0bff415 	stw	r2,-48(fp)
 400d1b0:	e0bff617 	ldw	r2,-40(fp)
 400d1b4:	e0fff417 	ldw	r3,-48(fp)
 400d1b8:	18bff716 	blt	r3,r2,400d198 <__alt_data_end+0xfc00d198>
    k1++;
  b1 = Balloc (ptr, k1);
 400d1bc:	e17ff517 	ldw	r5,-44(fp)
 400d1c0:	e13ffd17 	ldw	r4,-12(fp)
 400d1c4:	400c5540 	call	400c554 <_Balloc>
 400d1c8:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 400d1cc:	e0bffb17 	ldw	r2,-20(fp)
 400d1d0:	10800504 	addi	r2,r2,20
 400d1d4:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 400d1d8:	e03ff415 	stw	zero,-48(fp)
 400d1dc:	00000706 	br	400d1fc <__lshift+0xc0>
    *x1++ = 0;
 400d1e0:	e0bff817 	ldw	r2,-32(fp)
 400d1e4:	10c00104 	addi	r3,r2,4
 400d1e8:	e0fff815 	stw	r3,-32(fp)
 400d1ec:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 400d1f0:	e0bff417 	ldw	r2,-48(fp)
 400d1f4:	10800044 	addi	r2,r2,1
 400d1f8:	e0bff415 	stw	r2,-48(fp)
 400d1fc:	e0fff417 	ldw	r3,-48(fp)
 400d200:	e0bffa17 	ldw	r2,-24(fp)
 400d204:	18bff616 	blt	r3,r2,400d1e0 <__alt_data_end+0xfc00d1e0>
    *x1++ = 0;
  x = b->_x;
 400d208:	e0bffe17 	ldw	r2,-8(fp)
 400d20c:	10800504 	addi	r2,r2,20
 400d210:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 400d214:	e0bffe17 	ldw	r2,-8(fp)
 400d218:	10800417 	ldw	r2,16(r2)
 400d21c:	1085883a 	add	r2,r2,r2
 400d220:	1085883a 	add	r2,r2,r2
 400d224:	1007883a 	mov	r3,r2
 400d228:	e0bff717 	ldw	r2,-36(fp)
 400d22c:	10c5883a 	add	r2,r2,r3
 400d230:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 400d234:	e0bfff17 	ldw	r2,-4(fp)
 400d238:	108007cc 	andi	r2,r2,31
 400d23c:	e0bfff15 	stw	r2,-4(fp)
 400d240:	e0bfff17 	ldw	r2,-4(fp)
 400d244:	10002326 	beq	r2,zero,400d2d4 <__lshift+0x198>
    {
      k1 = 32 - k;
 400d248:	00c00804 	movi	r3,32
 400d24c:	e0bfff17 	ldw	r2,-4(fp)
 400d250:	1885c83a 	sub	r2,r3,r2
 400d254:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 400d258:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 400d25c:	e0bff817 	ldw	r2,-32(fp)
 400d260:	10c00104 	addi	r3,r2,4
 400d264:	e0fff815 	stw	r3,-32(fp)
 400d268:	e0fff717 	ldw	r3,-36(fp)
 400d26c:	19000017 	ldw	r4,0(r3)
 400d270:	e0ffff17 	ldw	r3,-4(fp)
 400d274:	20c8983a 	sll	r4,r4,r3
 400d278:	e0fff917 	ldw	r3,-28(fp)
 400d27c:	20c6b03a 	or	r3,r4,r3
 400d280:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 400d284:	e0bff717 	ldw	r2,-36(fp)
 400d288:	10c00104 	addi	r3,r2,4
 400d28c:	e0fff715 	stw	r3,-36(fp)
 400d290:	10c00017 	ldw	r3,0(r2)
 400d294:	e0bff517 	ldw	r2,-44(fp)
 400d298:	1884d83a 	srl	r2,r3,r2
 400d29c:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 400d2a0:	e0fff717 	ldw	r3,-36(fp)
 400d2a4:	e0bffc17 	ldw	r2,-16(fp)
 400d2a8:	18bfec36 	bltu	r3,r2,400d25c <__alt_data_end+0xfc00d25c>
      if ((*x1 = z) != 0)
 400d2ac:	e0bff817 	ldw	r2,-32(fp)
 400d2b0:	e0fff917 	ldw	r3,-28(fp)
 400d2b4:	10c00015 	stw	r3,0(r2)
 400d2b8:	e0bff817 	ldw	r2,-32(fp)
 400d2bc:	10800017 	ldw	r2,0(r2)
 400d2c0:	10000f26 	beq	r2,zero,400d300 <__lshift+0x1c4>
	++n1;
 400d2c4:	e0bff617 	ldw	r2,-40(fp)
 400d2c8:	10800044 	addi	r2,r2,1
 400d2cc:	e0bff615 	stw	r2,-40(fp)
 400d2d0:	00000b06 	br	400d300 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 400d2d4:	e0bff817 	ldw	r2,-32(fp)
 400d2d8:	10c00104 	addi	r3,r2,4
 400d2dc:	e0fff815 	stw	r3,-32(fp)
 400d2e0:	e0fff717 	ldw	r3,-36(fp)
 400d2e4:	19000104 	addi	r4,r3,4
 400d2e8:	e13ff715 	stw	r4,-36(fp)
 400d2ec:	18c00017 	ldw	r3,0(r3)
 400d2f0:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 400d2f4:	e0fff717 	ldw	r3,-36(fp)
 400d2f8:	e0bffc17 	ldw	r2,-16(fp)
 400d2fc:	18bff536 	bltu	r3,r2,400d2d4 <__alt_data_end+0xfc00d2d4>
  b1->_wds = n1 - 1;
 400d300:	e0bff617 	ldw	r2,-40(fp)
 400d304:	10ffffc4 	addi	r3,r2,-1
 400d308:	e0bffb17 	ldw	r2,-20(fp)
 400d30c:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 400d310:	e17ffe17 	ldw	r5,-8(fp)
 400d314:	e13ffd17 	ldw	r4,-12(fp)
 400d318:	400c6840 	call	400c684 <_Bfree>
  return b1;
 400d31c:	e0bffb17 	ldw	r2,-20(fp)
}
 400d320:	e037883a 	mov	sp,fp
 400d324:	dfc00117 	ldw	ra,4(sp)
 400d328:	df000017 	ldw	fp,0(sp)
 400d32c:	dec00204 	addi	sp,sp,8
 400d330:	f800283a 	ret

0400d334 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 400d334:	defff704 	addi	sp,sp,-36
 400d338:	df000815 	stw	fp,32(sp)
 400d33c:	df000804 	addi	fp,sp,32
 400d340:	e13ffe15 	stw	r4,-8(fp)
 400d344:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 400d348:	e0bffe17 	ldw	r2,-8(fp)
 400d34c:	10800417 	ldw	r2,16(r2)
 400d350:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 400d354:	e0bfff17 	ldw	r2,-4(fp)
 400d358:	10800417 	ldw	r2,16(r2)
 400d35c:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 400d360:	e0fffa17 	ldw	r3,-24(fp)
 400d364:	e0bffb17 	ldw	r2,-20(fp)
 400d368:	1885c83a 	sub	r2,r3,r2
 400d36c:	e0bffa15 	stw	r2,-24(fp)
 400d370:	e0bffa17 	ldw	r2,-24(fp)
 400d374:	10000226 	beq	r2,zero,400d380 <__mcmp+0x4c>
    return i;
 400d378:	e0bffa17 	ldw	r2,-24(fp)
 400d37c:	00002e06 	br	400d438 <__mcmp+0x104>
  xa0 = a->_x;
 400d380:	e0bffe17 	ldw	r2,-8(fp)
 400d384:	10800504 	addi	r2,r2,20
 400d388:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 400d38c:	e0bffb17 	ldw	r2,-20(fp)
 400d390:	1085883a 	add	r2,r2,r2
 400d394:	1085883a 	add	r2,r2,r2
 400d398:	1007883a 	mov	r3,r2
 400d39c:	e0bffc17 	ldw	r2,-16(fp)
 400d3a0:	10c5883a 	add	r2,r2,r3
 400d3a4:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 400d3a8:	e0bfff17 	ldw	r2,-4(fp)
 400d3ac:	10800504 	addi	r2,r2,20
 400d3b0:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 400d3b4:	e0bffb17 	ldw	r2,-20(fp)
 400d3b8:	1085883a 	add	r2,r2,r2
 400d3bc:	1085883a 	add	r2,r2,r2
 400d3c0:	1007883a 	mov	r3,r2
 400d3c4:	e0bffd17 	ldw	r2,-12(fp)
 400d3c8:	10c5883a 	add	r2,r2,r3
 400d3cc:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 400d3d0:	e0bff817 	ldw	r2,-32(fp)
 400d3d4:	10bfff04 	addi	r2,r2,-4
 400d3d8:	e0bff815 	stw	r2,-32(fp)
 400d3dc:	e0bff817 	ldw	r2,-32(fp)
 400d3e0:	10c00017 	ldw	r3,0(r2)
 400d3e4:	e0bff917 	ldw	r2,-28(fp)
 400d3e8:	10bfff04 	addi	r2,r2,-4
 400d3ec:	e0bff915 	stw	r2,-28(fp)
 400d3f0:	e0bff917 	ldw	r2,-28(fp)
 400d3f4:	10800017 	ldw	r2,0(r2)
 400d3f8:	18800926 	beq	r3,r2,400d420 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 400d3fc:	e0bff817 	ldw	r2,-32(fp)
 400d400:	10c00017 	ldw	r3,0(r2)
 400d404:	e0bff917 	ldw	r2,-28(fp)
 400d408:	10800017 	ldw	r2,0(r2)
 400d40c:	1880022e 	bgeu	r3,r2,400d418 <__mcmp+0xe4>
 400d410:	00bfffc4 	movi	r2,-1
 400d414:	00000806 	br	400d438 <__mcmp+0x104>
 400d418:	00800044 	movi	r2,1
 400d41c:	00000606 	br	400d438 <__mcmp+0x104>
      if (xa <= xa0)
 400d420:	e0bff817 	ldw	r2,-32(fp)
 400d424:	e0fffc17 	ldw	r3,-16(fp)
 400d428:	1880012e 	bgeu	r3,r2,400d430 <__mcmp+0xfc>
	break;
    }
 400d42c:	003fe806 	br	400d3d0 <__alt_data_end+0xfc00d3d0>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 400d430:	0001883a 	nop
    }
  return 0;
 400d434:	0005883a 	mov	r2,zero
}
 400d438:	e037883a 	mov	sp,fp
 400d43c:	df000017 	ldw	fp,0(sp)
 400d440:	dec00104 	addi	sp,sp,4
 400d444:	f800283a 	ret

0400d448 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 400d448:	deffef04 	addi	sp,sp,-68
 400d44c:	dfc01015 	stw	ra,64(sp)
 400d450:	df000f15 	stw	fp,60(sp)
 400d454:	df000f04 	addi	fp,sp,60
 400d458:	e13ffd15 	stw	r4,-12(fp)
 400d45c:	e17ffe15 	stw	r5,-8(fp)
 400d460:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 400d464:	e17fff17 	ldw	r5,-4(fp)
 400d468:	e13ffe17 	ldw	r4,-8(fp)
 400d46c:	400d3340 	call	400d334 <__mcmp>
 400d470:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 400d474:	e0bff117 	ldw	r2,-60(fp)
 400d478:	10000b1e 	bne	r2,zero,400d4a8 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 400d47c:	000b883a 	mov	r5,zero
 400d480:	e13ffd17 	ldw	r4,-12(fp)
 400d484:	400c5540 	call	400c554 <_Balloc>
 400d488:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 400d48c:	e0bff717 	ldw	r2,-36(fp)
 400d490:	00c00044 	movi	r3,1
 400d494:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 400d498:	e0bff717 	ldw	r2,-36(fp)
 400d49c:	10000515 	stw	zero,20(r2)
      return c;
 400d4a0:	e0bff717 	ldw	r2,-36(fp)
 400d4a4:	00008c06 	br	400d6d8 <__mdiff+0x290>
    }
  if (i < 0)
 400d4a8:	e0bff117 	ldw	r2,-60(fp)
 400d4ac:	1000090e 	bge	r2,zero,400d4d4 <__mdiff+0x8c>
    {
      c = a;
 400d4b0:	e0bffe17 	ldw	r2,-8(fp)
 400d4b4:	e0bff715 	stw	r2,-36(fp)
      a = b;
 400d4b8:	e0bfff17 	ldw	r2,-4(fp)
 400d4bc:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 400d4c0:	e0bff717 	ldw	r2,-36(fp)
 400d4c4:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 400d4c8:	00800044 	movi	r2,1
 400d4cc:	e0bff115 	stw	r2,-60(fp)
 400d4d0:	00000106 	br	400d4d8 <__mdiff+0x90>
    }
  else
    i = 0;
 400d4d4:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 400d4d8:	e0bffe17 	ldw	r2,-8(fp)
 400d4dc:	10800117 	ldw	r2,4(r2)
 400d4e0:	100b883a 	mov	r5,r2
 400d4e4:	e13ffd17 	ldw	r4,-12(fp)
 400d4e8:	400c5540 	call	400c554 <_Balloc>
 400d4ec:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 400d4f0:	e0bff717 	ldw	r2,-36(fp)
 400d4f4:	e0fff117 	ldw	r3,-60(fp)
 400d4f8:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 400d4fc:	e0bffe17 	ldw	r2,-8(fp)
 400d500:	10800417 	ldw	r2,16(r2)
 400d504:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 400d508:	e0bffe17 	ldw	r2,-8(fp)
 400d50c:	10800504 	addi	r2,r2,20
 400d510:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 400d514:	e0bff217 	ldw	r2,-56(fp)
 400d518:	1085883a 	add	r2,r2,r2
 400d51c:	1085883a 	add	r2,r2,r2
 400d520:	1007883a 	mov	r3,r2
 400d524:	e0bff417 	ldw	r2,-48(fp)
 400d528:	10c5883a 	add	r2,r2,r3
 400d52c:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 400d530:	e0bfff17 	ldw	r2,-4(fp)
 400d534:	10800417 	ldw	r2,16(r2)
 400d538:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 400d53c:	e0bfff17 	ldw	r2,-4(fp)
 400d540:	10800504 	addi	r2,r2,20
 400d544:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 400d548:	e0bff917 	ldw	r2,-28(fp)
 400d54c:	1085883a 	add	r2,r2,r2
 400d550:	1085883a 	add	r2,r2,r2
 400d554:	1007883a 	mov	r3,r2
 400d558:	e0bff517 	ldw	r2,-44(fp)
 400d55c:	10c5883a 	add	r2,r2,r3
 400d560:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 400d564:	e0bff717 	ldw	r2,-36(fp)
 400d568:	10800504 	addi	r2,r2,20
 400d56c:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 400d570:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 400d574:	e0bff417 	ldw	r2,-48(fp)
 400d578:	10800017 	ldw	r2,0(r2)
 400d57c:	10ffffcc 	andi	r3,r2,65535
 400d580:	e0bff517 	ldw	r2,-44(fp)
 400d584:	10800017 	ldw	r2,0(r2)
 400d588:	10bfffcc 	andi	r2,r2,65535
 400d58c:	1887c83a 	sub	r3,r3,r2
 400d590:	e0bff317 	ldw	r2,-52(fp)
 400d594:	1885883a 	add	r2,r3,r2
 400d598:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 400d59c:	e0bffb17 	ldw	r2,-20(fp)
 400d5a0:	1005d43a 	srai	r2,r2,16
 400d5a4:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 400d5a8:	e0bff417 	ldw	r2,-48(fp)
 400d5ac:	10c00104 	addi	r3,r2,4
 400d5b0:	e0fff415 	stw	r3,-48(fp)
 400d5b4:	10800017 	ldw	r2,0(r2)
 400d5b8:	1006d43a 	srli	r3,r2,16
 400d5bc:	e0bff517 	ldw	r2,-44(fp)
 400d5c0:	11000104 	addi	r4,r2,4
 400d5c4:	e13ff515 	stw	r4,-44(fp)
 400d5c8:	10800017 	ldw	r2,0(r2)
 400d5cc:	1004d43a 	srli	r2,r2,16
 400d5d0:	1887c83a 	sub	r3,r3,r2
 400d5d4:	e0bff317 	ldw	r2,-52(fp)
 400d5d8:	1885883a 	add	r2,r3,r2
 400d5dc:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 400d5e0:	e0bffc17 	ldw	r2,-16(fp)
 400d5e4:	1005d43a 	srai	r2,r2,16
 400d5e8:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 400d5ec:	e0bff617 	ldw	r2,-40(fp)
 400d5f0:	10c00104 	addi	r3,r2,4
 400d5f4:	e0fff615 	stw	r3,-40(fp)
 400d5f8:	e0fffc17 	ldw	r3,-16(fp)
 400d5fc:	1808943a 	slli	r4,r3,16
 400d600:	e0fffb17 	ldw	r3,-20(fp)
 400d604:	18ffffcc 	andi	r3,r3,65535
 400d608:	20c6b03a 	or	r3,r4,r3
 400d60c:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 400d610:	e0fff517 	ldw	r3,-44(fp)
 400d614:	e0bffa17 	ldw	r2,-24(fp)
 400d618:	18bfd636 	bltu	r3,r2,400d574 <__alt_data_end+0xfc00d574>
  while (xa < xae)
 400d61c:	00001d06 	br	400d694 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 400d620:	e0bff417 	ldw	r2,-48(fp)
 400d624:	10800017 	ldw	r2,0(r2)
 400d628:	10ffffcc 	andi	r3,r2,65535
 400d62c:	e0bff317 	ldw	r2,-52(fp)
 400d630:	1885883a 	add	r2,r3,r2
 400d634:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 400d638:	e0bffb17 	ldw	r2,-20(fp)
 400d63c:	1005d43a 	srai	r2,r2,16
 400d640:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 400d644:	e0bff417 	ldw	r2,-48(fp)
 400d648:	10c00104 	addi	r3,r2,4
 400d64c:	e0fff415 	stw	r3,-48(fp)
 400d650:	10800017 	ldw	r2,0(r2)
 400d654:	1006d43a 	srli	r3,r2,16
 400d658:	e0bff317 	ldw	r2,-52(fp)
 400d65c:	1885883a 	add	r2,r3,r2
 400d660:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 400d664:	e0bffc17 	ldw	r2,-16(fp)
 400d668:	1005d43a 	srai	r2,r2,16
 400d66c:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 400d670:	e0bff617 	ldw	r2,-40(fp)
 400d674:	10c00104 	addi	r3,r2,4
 400d678:	e0fff615 	stw	r3,-40(fp)
 400d67c:	e0fffc17 	ldw	r3,-16(fp)
 400d680:	1808943a 	slli	r4,r3,16
 400d684:	e0fffb17 	ldw	r3,-20(fp)
 400d688:	18ffffcc 	andi	r3,r3,65535
 400d68c:	20c6b03a 	or	r3,r4,r3
 400d690:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 400d694:	e0fff417 	ldw	r3,-48(fp)
 400d698:	e0bff817 	ldw	r2,-32(fp)
 400d69c:	18bfe036 	bltu	r3,r2,400d620 <__alt_data_end+0xfc00d620>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 400d6a0:	00000306 	br	400d6b0 <__mdiff+0x268>
    wa--;
 400d6a4:	e0bff217 	ldw	r2,-56(fp)
 400d6a8:	10bfffc4 	addi	r2,r2,-1
 400d6ac:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 400d6b0:	e0bff617 	ldw	r2,-40(fp)
 400d6b4:	10bfff04 	addi	r2,r2,-4
 400d6b8:	e0bff615 	stw	r2,-40(fp)
 400d6bc:	e0bff617 	ldw	r2,-40(fp)
 400d6c0:	10800017 	ldw	r2,0(r2)
 400d6c4:	103ff726 	beq	r2,zero,400d6a4 <__alt_data_end+0xfc00d6a4>
    wa--;
  c->_wds = wa;
 400d6c8:	e0bff717 	ldw	r2,-36(fp)
 400d6cc:	e0fff217 	ldw	r3,-56(fp)
 400d6d0:	10c00415 	stw	r3,16(r2)
  return c;
 400d6d4:	e0bff717 	ldw	r2,-36(fp)
}
 400d6d8:	e037883a 	mov	sp,fp
 400d6dc:	dfc00117 	ldw	ra,4(sp)
 400d6e0:	df000017 	ldw	fp,0(sp)
 400d6e4:	dec00204 	addi	sp,sp,8
 400d6e8:	f800283a 	ret

0400d6ec <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 400d6ec:	defff804 	addi	sp,sp,-32
 400d6f0:	df000715 	stw	fp,28(sp)
 400d6f4:	dc000615 	stw	r16,24(sp)
 400d6f8:	df000704 	addi	fp,sp,28
 400d6fc:	e13ffd15 	stw	r4,-12(fp)
 400d700:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 400d704:	e0bffd17 	ldw	r2,-12(fp)
 400d708:	e0bff915 	stw	r2,-28(fp)
 400d70c:	e0bffe17 	ldw	r2,-8(fp)
 400d710:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 400d714:	e0bffa17 	ldw	r2,-24(fp)
 400d718:	10dffc2c 	andhi	r3,r2,32752
 400d71c:	00bf3034 	movhi	r2,64704
 400d720:	1885883a 	add	r2,r3,r2
 400d724:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 400d728:	0400040e 	bge	zero,r16,400d73c <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 400d72c:	8005883a 	mov	r2,r16
 400d730:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 400d734:	e03ffb15 	stw	zero,-20(fp)
 400d738:	00001406 	br	400d78c <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 400d73c:	0405c83a 	sub	r2,zero,r16
 400d740:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 400d744:	80800508 	cmpgei	r2,r16,20
 400d748:	1000051e 	bne	r2,zero,400d760 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 400d74c:	00800234 	movhi	r2,8
 400d750:	1405d83a 	sra	r2,r2,r16
 400d754:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 400d758:	e03ffb15 	stw	zero,-20(fp)
 400d75c:	00000b06 	br	400d78c <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 400d760:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 400d764:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 400d768:	808007c8 	cmpgei	r2,r16,31
 400d76c:	1000051e 	bne	r2,zero,400d784 <__ulp+0x98>
 400d770:	008007c4 	movi	r2,31
 400d774:	1405c83a 	sub	r2,r2,r16
 400d778:	00c00044 	movi	r3,1
 400d77c:	1884983a 	sll	r2,r3,r2
 400d780:	00000106 	br	400d788 <__ulp+0x9c>
 400d784:	00800044 	movi	r2,1
 400d788:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 400d78c:	e0bffb17 	ldw	r2,-20(fp)
 400d790:	e0fffc17 	ldw	r3,-16(fp)
 400d794:	1009883a 	mov	r4,r2
 400d798:	180b883a 	mov	r5,r3
}
 400d79c:	2005883a 	mov	r2,r4
 400d7a0:	2807883a 	mov	r3,r5
 400d7a4:	e6ffff04 	addi	sp,fp,-4
 400d7a8:	df000117 	ldw	fp,4(sp)
 400d7ac:	dc000017 	ldw	r16,0(sp)
 400d7b0:	dec00204 	addi	sp,sp,8
 400d7b4:	f800283a 	ret

0400d7b8 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 400d7b8:	defff404 	addi	sp,sp,-48
 400d7bc:	dfc00b15 	stw	ra,44(sp)
 400d7c0:	df000a15 	stw	fp,40(sp)
 400d7c4:	df000a04 	addi	fp,sp,40
 400d7c8:	e13ffe15 	stw	r4,-8(fp)
 400d7cc:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 400d7d0:	e0bffe17 	ldw	r2,-8(fp)
 400d7d4:	10800504 	addi	r2,r2,20
 400d7d8:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 400d7dc:	e0bffe17 	ldw	r2,-8(fp)
 400d7e0:	10800417 	ldw	r2,16(r2)
 400d7e4:	1085883a 	add	r2,r2,r2
 400d7e8:	1085883a 	add	r2,r2,r2
 400d7ec:	1007883a 	mov	r3,r2
 400d7f0:	e0bff717 	ldw	r2,-36(fp)
 400d7f4:	10c5883a 	add	r2,r2,r3
 400d7f8:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 400d7fc:	e0bff617 	ldw	r2,-40(fp)
 400d800:	10bfff04 	addi	r2,r2,-4
 400d804:	e0bff615 	stw	r2,-40(fp)
 400d808:	e0bff617 	ldw	r2,-40(fp)
 400d80c:	10800017 	ldw	r2,0(r2)
 400d810:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 400d814:	e13ff817 	ldw	r4,-32(fp)
 400d818:	400ca200 	call	400ca20 <__hi0bits>
 400d81c:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 400d820:	00c00804 	movi	r3,32
 400d824:	e0bff917 	ldw	r2,-28(fp)
 400d828:	1887c83a 	sub	r3,r3,r2
 400d82c:	e0bfff17 	ldw	r2,-4(fp)
 400d830:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 400d834:	e0bff917 	ldw	r2,-28(fp)
 400d838:	108002c8 	cmpgei	r2,r2,11
 400d83c:	10001e1e 	bne	r2,zero,400d8b8 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 400d840:	00c002c4 	movi	r3,11
 400d844:	e0bff917 	ldw	r2,-28(fp)
 400d848:	1885c83a 	sub	r2,r3,r2
 400d84c:	e0fff817 	ldw	r3,-32(fp)
 400d850:	1884d83a 	srl	r2,r3,r2
 400d854:	108ffc34 	orhi	r2,r2,16368
 400d858:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 400d85c:	e0bff617 	ldw	r2,-40(fp)
 400d860:	e0fff717 	ldw	r3,-36(fp)
 400d864:	1880062e 	bgeu	r3,r2,400d880 <__b2d+0xc8>
 400d868:	e0bff617 	ldw	r2,-40(fp)
 400d86c:	10bfff04 	addi	r2,r2,-4
 400d870:	e0bff615 	stw	r2,-40(fp)
 400d874:	e0bff617 	ldw	r2,-40(fp)
 400d878:	10800017 	ldw	r2,0(r2)
 400d87c:	00000106 	br	400d884 <__b2d+0xcc>
 400d880:	0005883a 	mov	r2,zero
 400d884:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 400d888:	e0bff917 	ldw	r2,-28(fp)
 400d88c:	10800544 	addi	r2,r2,21
 400d890:	e0fff817 	ldw	r3,-32(fp)
 400d894:	1886983a 	sll	r3,r3,r2
 400d898:	010002c4 	movi	r4,11
 400d89c:	e0bff917 	ldw	r2,-28(fp)
 400d8a0:	2085c83a 	sub	r2,r4,r2
 400d8a4:	e13ffa17 	ldw	r4,-24(fp)
 400d8a8:	2084d83a 	srl	r2,r4,r2
 400d8ac:	1884b03a 	or	r2,r3,r2
 400d8b0:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 400d8b4:	00003606 	br	400d990 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 400d8b8:	e0bff617 	ldw	r2,-40(fp)
 400d8bc:	e0fff717 	ldw	r3,-36(fp)
 400d8c0:	1880062e 	bgeu	r3,r2,400d8dc <__b2d+0x124>
 400d8c4:	e0bff617 	ldw	r2,-40(fp)
 400d8c8:	10bfff04 	addi	r2,r2,-4
 400d8cc:	e0bff615 	stw	r2,-40(fp)
 400d8d0:	e0bff617 	ldw	r2,-40(fp)
 400d8d4:	10800017 	ldw	r2,0(r2)
 400d8d8:	00000106 	br	400d8e0 <__b2d+0x128>
 400d8dc:	0005883a 	mov	r2,zero
 400d8e0:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 400d8e4:	e0bff917 	ldw	r2,-28(fp)
 400d8e8:	10bffd44 	addi	r2,r2,-11
 400d8ec:	e0bff915 	stw	r2,-28(fp)
 400d8f0:	e0bff917 	ldw	r2,-28(fp)
 400d8f4:	10002126 	beq	r2,zero,400d97c <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 400d8f8:	e0fff817 	ldw	r3,-32(fp)
 400d8fc:	e0bff917 	ldw	r2,-28(fp)
 400d900:	1886983a 	sll	r3,r3,r2
 400d904:	01000804 	movi	r4,32
 400d908:	e0bff917 	ldw	r2,-28(fp)
 400d90c:	2085c83a 	sub	r2,r4,r2
 400d910:	e13ffb17 	ldw	r4,-20(fp)
 400d914:	2084d83a 	srl	r2,r4,r2
 400d918:	1884b03a 	or	r2,r3,r2
 400d91c:	108ffc34 	orhi	r2,r2,16368
 400d920:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 400d924:	e0bff617 	ldw	r2,-40(fp)
 400d928:	e0fff717 	ldw	r3,-36(fp)
 400d92c:	1880062e 	bgeu	r3,r2,400d948 <__b2d+0x190>
 400d930:	e0bff617 	ldw	r2,-40(fp)
 400d934:	10bfff04 	addi	r2,r2,-4
 400d938:	e0bff615 	stw	r2,-40(fp)
 400d93c:	e0bff617 	ldw	r2,-40(fp)
 400d940:	10800017 	ldw	r2,0(r2)
 400d944:	00000106 	br	400d94c <__b2d+0x194>
 400d948:	0005883a 	mov	r2,zero
 400d94c:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 400d950:	e0fffb17 	ldw	r3,-20(fp)
 400d954:	e0bff917 	ldw	r2,-28(fp)
 400d958:	1886983a 	sll	r3,r3,r2
 400d95c:	01000804 	movi	r4,32
 400d960:	e0bff917 	ldw	r2,-28(fp)
 400d964:	2085c83a 	sub	r2,r4,r2
 400d968:	e13ff817 	ldw	r4,-32(fp)
 400d96c:	2084d83a 	srl	r2,r4,r2
 400d970:	1884b03a 	or	r2,r3,r2
 400d974:	e0bffc15 	stw	r2,-16(fp)
 400d978:	00000506 	br	400d990 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 400d97c:	e0bff817 	ldw	r2,-32(fp)
 400d980:	108ffc34 	orhi	r2,r2,16368
 400d984:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 400d988:	e0bffb17 	ldw	r2,-20(fp)
 400d98c:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 400d990:	e0bffc17 	ldw	r2,-16(fp)
 400d994:	e0fffd17 	ldw	r3,-12(fp)
 400d998:	1009883a 	mov	r4,r2
 400d99c:	180b883a 	mov	r5,r3
}
 400d9a0:	2005883a 	mov	r2,r4
 400d9a4:	2807883a 	mov	r3,r5
 400d9a8:	e037883a 	mov	sp,fp
 400d9ac:	dfc00117 	ldw	ra,4(sp)
 400d9b0:	df000017 	ldw	fp,0(sp)
 400d9b4:	dec00204 	addi	sp,sp,8
 400d9b8:	f800283a 	ret

0400d9bc <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 400d9bc:	defff004 	addi	sp,sp,-64
 400d9c0:	dfc00f15 	stw	ra,60(sp)
 400d9c4:	df000e15 	stw	fp,56(sp)
 400d9c8:	dc000d15 	stw	r16,52(sp)
 400d9cc:	df000e04 	addi	fp,sp,56
 400d9d0:	e13ffb15 	stw	r4,-20(fp)
 400d9d4:	e17ffc15 	stw	r5,-16(fp)
 400d9d8:	e1bffd15 	stw	r6,-12(fp)
 400d9dc:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 400d9e0:	e0bffc17 	ldw	r2,-16(fp)
 400d9e4:	e0bff715 	stw	r2,-36(fp)
 400d9e8:	e0bffd17 	ldw	r2,-12(fp)
 400d9ec:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 400d9f0:	e0bffc17 	ldw	r2,-16(fp)
 400d9f4:	e0bff715 	stw	r2,-36(fp)
 400d9f8:	e0bffd17 	ldw	r2,-12(fp)
 400d9fc:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 400da00:	01400044 	movi	r5,1
 400da04:	e13ffb17 	ldw	r4,-20(fp)
 400da08:	400c5540 	call	400c554 <_Balloc>
 400da0c:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 400da10:	e0bff417 	ldw	r2,-48(fp)
 400da14:	10800504 	addi	r2,r2,20
 400da18:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 400da1c:	e0fff817 	ldw	r3,-32(fp)
 400da20:	00800434 	movhi	r2,16
 400da24:	10bfffc4 	addi	r2,r2,-1
 400da28:	1884703a 	and	r2,r3,r2
 400da2c:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 400da30:	e0fff817 	ldw	r3,-32(fp)
 400da34:	00a00034 	movhi	r2,32768
 400da38:	10bfffc4 	addi	r2,r2,-1
 400da3c:	1884703a 	and	r2,r3,r2
 400da40:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 400da44:	e0bff817 	ldw	r2,-32(fp)
 400da48:	1004d53a 	srli	r2,r2,20
 400da4c:	e0bff615 	stw	r2,-40(fp)
 400da50:	e0bff617 	ldw	r2,-40(fp)
 400da54:	10000326 	beq	r2,zero,400da64 <__d2b+0xa8>
    z |= Exp_msk1;
 400da58:	e0bffa17 	ldw	r2,-24(fp)
 400da5c:	10800434 	orhi	r2,r2,16
 400da60:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 400da64:	e0bff717 	ldw	r2,-36(fp)
 400da68:	10002826 	beq	r2,zero,400db0c <__d2b+0x150>
    {
      y = d1;
 400da6c:	e0bff717 	ldw	r2,-36(fp)
 400da70:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 400da74:	e0bff904 	addi	r2,fp,-28
 400da78:	1009883a 	mov	r4,r2
 400da7c:	400cab00 	call	400cab0 <__lo0bits>
 400da80:	e0bff315 	stw	r2,-52(fp)
      if (k)
 400da84:	e0bff317 	ldw	r2,-52(fp)
 400da88:	10000e26 	beq	r2,zero,400dac4 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 400da8c:	e0fffa17 	ldw	r3,-24(fp)
 400da90:	01000804 	movi	r4,32
 400da94:	e0bff317 	ldw	r2,-52(fp)
 400da98:	2085c83a 	sub	r2,r4,r2
 400da9c:	1886983a 	sll	r3,r3,r2
 400daa0:	e0bff917 	ldw	r2,-28(fp)
 400daa4:	1886b03a 	or	r3,r3,r2
 400daa8:	e0bff517 	ldw	r2,-44(fp)
 400daac:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 400dab0:	e0fffa17 	ldw	r3,-24(fp)
 400dab4:	e0bff317 	ldw	r2,-52(fp)
 400dab8:	1884d83a 	srl	r2,r3,r2
 400dabc:	e0bffa15 	stw	r2,-24(fp)
 400dac0:	00000306 	br	400dad0 <__d2b+0x114>
	}
      else
	x[0] = y;
 400dac4:	e0fff917 	ldw	r3,-28(fp)
 400dac8:	e0bff517 	ldw	r2,-44(fp)
 400dacc:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 400dad0:	e0bff517 	ldw	r2,-44(fp)
 400dad4:	10800104 	addi	r2,r2,4
 400dad8:	e0fffa17 	ldw	r3,-24(fp)
 400dadc:	10c00015 	stw	r3,0(r2)
 400dae0:	10800017 	ldw	r2,0(r2)
 400dae4:	10000226 	beq	r2,zero,400daf0 <__d2b+0x134>
 400dae8:	00800084 	movi	r2,2
 400daec:	00000106 	br	400daf4 <__d2b+0x138>
 400daf0:	00800044 	movi	r2,1
 400daf4:	e0fff417 	ldw	r3,-48(fp)
 400daf8:	18800415 	stw	r2,16(r3)
 400dafc:	e0bff417 	ldw	r2,-48(fp)
 400db00:	10800417 	ldw	r2,16(r2)
 400db04:	e0bff215 	stw	r2,-56(fp)
 400db08:	00001006 	br	400db4c <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 400db0c:	e0bffa04 	addi	r2,fp,-24
 400db10:	1009883a 	mov	r4,r2
 400db14:	400cab00 	call	400cab0 <__lo0bits>
 400db18:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 400db1c:	e0fffa17 	ldw	r3,-24(fp)
 400db20:	e0bff517 	ldw	r2,-44(fp)
 400db24:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 400db28:	e0bff417 	ldw	r2,-48(fp)
 400db2c:	00c00044 	movi	r3,1
 400db30:	10c00415 	stw	r3,16(r2)
 400db34:	e0bff417 	ldw	r2,-48(fp)
 400db38:	10800417 	ldw	r2,16(r2)
 400db3c:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 400db40:	e0bff317 	ldw	r2,-52(fp)
 400db44:	10800804 	addi	r2,r2,32
 400db48:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 400db4c:	e0bff617 	ldw	r2,-40(fp)
 400db50:	10000c26 	beq	r2,zero,400db84 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 400db54:	e0bff617 	ldw	r2,-40(fp)
 400db58:	10fef344 	addi	r3,r2,-1075
 400db5c:	e0bff317 	ldw	r2,-52(fp)
 400db60:	1887883a 	add	r3,r3,r2
 400db64:	e0bffe17 	ldw	r2,-8(fp)
 400db68:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 400db6c:	00c00d44 	movi	r3,53
 400db70:	e0bff317 	ldw	r2,-52(fp)
 400db74:	1887c83a 	sub	r3,r3,r2
 400db78:	e0800217 	ldw	r2,8(fp)
 400db7c:	10c00015 	stw	r3,0(r2)
 400db80:	00001706 	br	400dbe0 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 400db84:	e0bff617 	ldw	r2,-40(fp)
 400db88:	10fef384 	addi	r3,r2,-1074
 400db8c:	e0bff317 	ldw	r2,-52(fp)
 400db90:	1887883a 	add	r3,r3,r2
 400db94:	e0bffe17 	ldw	r2,-8(fp)
 400db98:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 400db9c:	e0bff217 	ldw	r2,-56(fp)
 400dba0:	1020917a 	slli	r16,r2,5
 400dba4:	e0fff217 	ldw	r3,-56(fp)
 400dba8:	00900034 	movhi	r2,16384
 400dbac:	10bfffc4 	addi	r2,r2,-1
 400dbb0:	1885883a 	add	r2,r3,r2
 400dbb4:	1085883a 	add	r2,r2,r2
 400dbb8:	1085883a 	add	r2,r2,r2
 400dbbc:	1007883a 	mov	r3,r2
 400dbc0:	e0bff517 	ldw	r2,-44(fp)
 400dbc4:	10c5883a 	add	r2,r2,r3
 400dbc8:	10800017 	ldw	r2,0(r2)
 400dbcc:	1009883a 	mov	r4,r2
 400dbd0:	400ca200 	call	400ca20 <__hi0bits>
 400dbd4:	8087c83a 	sub	r3,r16,r2
 400dbd8:	e0800217 	ldw	r2,8(fp)
 400dbdc:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 400dbe0:	e0bff417 	ldw	r2,-48(fp)
}
 400dbe4:	e6ffff04 	addi	sp,fp,-4
 400dbe8:	dfc00217 	ldw	ra,8(sp)
 400dbec:	df000117 	ldw	fp,4(sp)
 400dbf0:	dc000017 	ldw	r16,0(sp)
 400dbf4:	dec00304 	addi	sp,sp,12
 400dbf8:	f800283a 	ret

0400dbfc <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 400dbfc:	defff504 	addi	sp,sp,-44
 400dc00:	dfc00a15 	stw	ra,40(sp)
 400dc04:	df000915 	stw	fp,36(sp)
 400dc08:	df000904 	addi	fp,sp,36
 400dc0c:	e13ffe15 	stw	r4,-8(fp)
 400dc10:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 400dc14:	e0bffc04 	addi	r2,fp,-16
 400dc18:	100b883a 	mov	r5,r2
 400dc1c:	e13ffe17 	ldw	r4,-8(fp)
 400dc20:	400d7b80 	call	400d7b8 <__b2d>
 400dc24:	1009883a 	mov	r4,r2
 400dc28:	180b883a 	mov	r5,r3
 400dc2c:	e13ff815 	stw	r4,-32(fp)
 400dc30:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 400dc34:	e0bffd04 	addi	r2,fp,-12
 400dc38:	100b883a 	mov	r5,r2
 400dc3c:	e13fff17 	ldw	r4,-4(fp)
 400dc40:	400d7b80 	call	400d7b8 <__b2d>
 400dc44:	1009883a 	mov	r4,r2
 400dc48:	180b883a 	mov	r5,r3
 400dc4c:	e13ffa15 	stw	r4,-24(fp)
 400dc50:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 400dc54:	e0fffc17 	ldw	r3,-16(fp)
 400dc58:	e0bffd17 	ldw	r2,-12(fp)
 400dc5c:	1887c83a 	sub	r3,r3,r2
 400dc60:	e0bffe17 	ldw	r2,-8(fp)
 400dc64:	11000417 	ldw	r4,16(r2)
 400dc68:	e0bfff17 	ldw	r2,-4(fp)
 400dc6c:	10800417 	ldw	r2,16(r2)
 400dc70:	2085c83a 	sub	r2,r4,r2
 400dc74:	1004917a 	slli	r2,r2,5
 400dc78:	1885883a 	add	r2,r3,r2
 400dc7c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 400dc80:	e0bff717 	ldw	r2,-36(fp)
 400dc84:	0080060e 	bge	zero,r2,400dca0 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 400dc88:	e0fff917 	ldw	r3,-28(fp)
 400dc8c:	e0bff717 	ldw	r2,-36(fp)
 400dc90:	1004953a 	slli	r2,r2,20
 400dc94:	1885883a 	add	r2,r3,r2
 400dc98:	e0bff915 	stw	r2,-28(fp)
 400dc9c:	00000806 	br	400dcc0 <__ratio+0xc4>
  else
    {
      k = -k;
 400dca0:	e0bff717 	ldw	r2,-36(fp)
 400dca4:	0085c83a 	sub	r2,zero,r2
 400dca8:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 400dcac:	e0fffb17 	ldw	r3,-20(fp)
 400dcb0:	e0bff717 	ldw	r2,-36(fp)
 400dcb4:	1004953a 	slli	r2,r2,20
 400dcb8:	1885883a 	add	r2,r3,r2
 400dcbc:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 400dcc0:	e0bff817 	ldw	r2,-32(fp)
 400dcc4:	e0fff917 	ldw	r3,-28(fp)
 400dcc8:	e13ffa17 	ldw	r4,-24(fp)
 400dccc:	e17ffb17 	ldw	r5,-20(fp)
 400dcd0:	200d883a 	mov	r6,r4
 400dcd4:	280f883a 	mov	r7,r5
 400dcd8:	1009883a 	mov	r4,r2
 400dcdc:	180b883a 	mov	r5,r3
 400dce0:	40026800 	call	4002680 <__divdf3>
 400dce4:	100f883a 	mov	r7,r2
 400dce8:	1811883a 	mov	r8,r3
 400dcec:	380b883a 	mov	r5,r7
 400dcf0:	400d883a 	mov	r6,r8
 400dcf4:	2807883a 	mov	r3,r5
 400dcf8:	3009883a 	mov	r4,r6
}
 400dcfc:	1805883a 	mov	r2,r3
 400dd00:	2007883a 	mov	r3,r4
 400dd04:	e037883a 	mov	sp,fp
 400dd08:	dfc00117 	ldw	ra,4(sp)
 400dd0c:	df000017 	ldw	fp,0(sp)
 400dd10:	dec00204 	addi	sp,sp,8
 400dd14:	f800283a 	ret

0400dd18 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 400dd18:	defffb04 	addi	sp,sp,-20
 400dd1c:	dfc00415 	stw	ra,16(sp)
 400dd20:	df000315 	stw	fp,12(sp)
 400dd24:	df000304 	addi	fp,sp,12
 400dd28:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 400dd2c:	e03ffd15 	stw	zero,-12(fp)
 400dd30:	008ffc34 	movhi	r2,16368
 400dd34:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 400dd38:	e0bfff17 	ldw	r2,-4(fp)
 400dd3c:	10800608 	cmpgei	r2,r2,24
 400dd40:	1000141e 	bne	r2,zero,400dd94 <_mprec_log10+0x7c>
    return tens[dig];
 400dd44:	00810074 	movhi	r2,1025
 400dd48:	1094b404 	addi	r2,r2,21200
 400dd4c:	e0ffff17 	ldw	r3,-4(fp)
 400dd50:	180690fa 	slli	r3,r3,3
 400dd54:	10c9883a 	add	r4,r2,r3
 400dd58:	20800017 	ldw	r2,0(r4)
 400dd5c:	20c00117 	ldw	r3,4(r4)
 400dd60:	00001006 	br	400dda4 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 400dd64:	000d883a 	mov	r6,zero
 400dd68:	01d00934 	movhi	r7,16420
 400dd6c:	e13ffd17 	ldw	r4,-12(fp)
 400dd70:	e17ffe17 	ldw	r5,-8(fp)
 400dd74:	40031c00 	call	40031c0 <__muldf3>
 400dd78:	1009883a 	mov	r4,r2
 400dd7c:	180b883a 	mov	r5,r3
 400dd80:	e13ffd15 	stw	r4,-12(fp)
 400dd84:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 400dd88:	e0bfff17 	ldw	r2,-4(fp)
 400dd8c:	10bfffc4 	addi	r2,r2,-1
 400dd90:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 400dd94:	e0bfff17 	ldw	r2,-4(fp)
 400dd98:	00bff216 	blt	zero,r2,400dd64 <__alt_data_end+0xfc00dd64>
    {
      v *= 10;
      dig--;
    }
  return v;
 400dd9c:	e0bffd17 	ldw	r2,-12(fp)
 400dda0:	e0fffe17 	ldw	r3,-8(fp)
 400dda4:	1009883a 	mov	r4,r2
 400dda8:	180b883a 	mov	r5,r3
}
 400ddac:	2005883a 	mov	r2,r4
 400ddb0:	2807883a 	mov	r3,r5
 400ddb4:	e037883a 	mov	sp,fp
 400ddb8:	dfc00117 	ldw	ra,4(sp)
 400ddbc:	df000017 	ldw	fp,0(sp)
 400ddc0:	dec00204 	addi	sp,sp,8
 400ddc4:	f800283a 	ret

0400ddc8 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 400ddc8:	defff904 	addi	sp,sp,-28
 400ddcc:	df000615 	stw	fp,24(sp)
 400ddd0:	df000604 	addi	fp,sp,24
 400ddd4:	e13ffd15 	stw	r4,-12(fp)
 400ddd8:	e17ffe15 	stw	r5,-8(fp)
 400dddc:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 400dde0:	e0bffe17 	ldw	r2,-8(fp)
 400dde4:	10bfffc4 	addi	r2,r2,-1
 400dde8:	1005d17a 	srai	r2,r2,5
 400ddec:	10800044 	addi	r2,r2,1
 400ddf0:	1085883a 	add	r2,r2,r2
 400ddf4:	1085883a 	add	r2,r2,r2
 400ddf8:	1007883a 	mov	r3,r2
 400ddfc:	e0bffd17 	ldw	r2,-12(fp)
 400de00:	10c5883a 	add	r2,r2,r3
 400de04:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 400de08:	e0bfff17 	ldw	r2,-4(fp)
 400de0c:	10800504 	addi	r2,r2,20
 400de10:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 400de14:	e0bfff17 	ldw	r2,-4(fp)
 400de18:	10800417 	ldw	r2,16(r2)
 400de1c:	1085883a 	add	r2,r2,r2
 400de20:	1085883a 	add	r2,r2,r2
 400de24:	1007883a 	mov	r3,r2
 400de28:	e0bffa17 	ldw	r2,-24(fp)
 400de2c:	10c5883a 	add	r2,r2,r3
 400de30:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 400de34:	00000806 	br	400de58 <__copybits+0x90>
		*c++ = *x++;
 400de38:	e0bffd17 	ldw	r2,-12(fp)
 400de3c:	10c00104 	addi	r3,r2,4
 400de40:	e0fffd15 	stw	r3,-12(fp)
 400de44:	e0fffa17 	ldw	r3,-24(fp)
 400de48:	19000104 	addi	r4,r3,4
 400de4c:	e13ffa15 	stw	r4,-24(fp)
 400de50:	18c00017 	ldw	r3,0(r3)
 400de54:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 400de58:	e0fffa17 	ldw	r3,-24(fp)
 400de5c:	e0bffc17 	ldw	r2,-16(fp)
 400de60:	18bff536 	bltu	r3,r2,400de38 <__alt_data_end+0xfc00de38>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 400de64:	00000406 	br	400de78 <__copybits+0xb0>
		*c++ = 0;
 400de68:	e0bffd17 	ldw	r2,-12(fp)
 400de6c:	10c00104 	addi	r3,r2,4
 400de70:	e0fffd15 	stw	r3,-12(fp)
 400de74:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 400de78:	e0fffd17 	ldw	r3,-12(fp)
 400de7c:	e0bffb17 	ldw	r2,-20(fp)
 400de80:	18bff936 	bltu	r3,r2,400de68 <__alt_data_end+0xfc00de68>
		*c++ = 0;
}
 400de84:	0001883a 	nop
 400de88:	e037883a 	mov	sp,fp
 400de8c:	df000017 	ldw	fp,0(sp)
 400de90:	dec00104 	addi	sp,sp,4
 400de94:	f800283a 	ret

0400de98 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 400de98:	defff704 	addi	sp,sp,-36
 400de9c:	df000815 	stw	fp,32(sp)
 400dea0:	df000804 	addi	fp,sp,32
 400dea4:	e13ffe15 	stw	r4,-8(fp)
 400dea8:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 400deac:	e0bffe17 	ldw	r2,-8(fp)
 400deb0:	10800504 	addi	r2,r2,20
 400deb4:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 400deb8:	e0bffe17 	ldw	r2,-8(fp)
 400debc:	10800417 	ldw	r2,16(r2)
 400dec0:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 400dec4:	e0bfff17 	ldw	r2,-4(fp)
 400dec8:	1005d17a 	srai	r2,r2,5
 400decc:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 400ded0:	e0bff817 	ldw	r2,-32(fp)
 400ded4:	e0fffa17 	ldw	r3,-24(fp)
 400ded8:	1880030e 	bge	r3,r2,400dee8 <__any_on+0x50>
		n = nwds;
 400dedc:	e0bffa17 	ldw	r2,-24(fp)
 400dee0:	e0bff815 	stw	r2,-32(fp)
 400dee4:	00001f06 	br	400df64 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 400dee8:	e0fff817 	ldw	r3,-32(fp)
 400deec:	e0bffa17 	ldw	r2,-24(fp)
 400def0:	18801c0e 	bge	r3,r2,400df64 <__any_on+0xcc>
 400def4:	e0bfff17 	ldw	r2,-4(fp)
 400def8:	108007cc 	andi	r2,r2,31
 400defc:	e0bfff15 	stw	r2,-4(fp)
 400df00:	e0bfff17 	ldw	r2,-4(fp)
 400df04:	10001726 	beq	r2,zero,400df64 <__any_on+0xcc>
		x1 = x2 = x[n];
 400df08:	e0bff817 	ldw	r2,-32(fp)
 400df0c:	1085883a 	add	r2,r2,r2
 400df10:	1085883a 	add	r2,r2,r2
 400df14:	1007883a 	mov	r3,r2
 400df18:	e0bff917 	ldw	r2,-28(fp)
 400df1c:	10c5883a 	add	r2,r2,r3
 400df20:	10800017 	ldw	r2,0(r2)
 400df24:	e0bffb15 	stw	r2,-20(fp)
 400df28:	e0bffb17 	ldw	r2,-20(fp)
 400df2c:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 400df30:	e0fffc17 	ldw	r3,-16(fp)
 400df34:	e0bfff17 	ldw	r2,-4(fp)
 400df38:	1884d83a 	srl	r2,r3,r2
 400df3c:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 400df40:	e0fffc17 	ldw	r3,-16(fp)
 400df44:	e0bfff17 	ldw	r2,-4(fp)
 400df48:	1884983a 	sll	r2,r3,r2
 400df4c:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 400df50:	e0fffc17 	ldw	r3,-16(fp)
 400df54:	e0bffb17 	ldw	r2,-20(fp)
 400df58:	18800226 	beq	r3,r2,400df64 <__any_on+0xcc>
			return 1;
 400df5c:	00800044 	movi	r2,1
 400df60:	00001606 	br	400dfbc <__any_on+0x124>
		}
	x0 = x;
 400df64:	e0bff917 	ldw	r2,-28(fp)
 400df68:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 400df6c:	e0bff817 	ldw	r2,-32(fp)
 400df70:	1085883a 	add	r2,r2,r2
 400df74:	1085883a 	add	r2,r2,r2
 400df78:	1007883a 	mov	r3,r2
 400df7c:	e0bff917 	ldw	r2,-28(fp)
 400df80:	10c5883a 	add	r2,r2,r3
 400df84:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 400df88:	00000806 	br	400dfac <__any_on+0x114>
		if (*--x)
 400df8c:	e0bff917 	ldw	r2,-28(fp)
 400df90:	10bfff04 	addi	r2,r2,-4
 400df94:	e0bff915 	stw	r2,-28(fp)
 400df98:	e0bff917 	ldw	r2,-28(fp)
 400df9c:	10800017 	ldw	r2,0(r2)
 400dfa0:	10000226 	beq	r2,zero,400dfac <__any_on+0x114>
			return 1;
 400dfa4:	00800044 	movi	r2,1
 400dfa8:	00000406 	br	400dfbc <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 400dfac:	e0bff917 	ldw	r2,-28(fp)
 400dfb0:	e0fffd17 	ldw	r3,-12(fp)
 400dfb4:	18bff536 	bltu	r3,r2,400df8c <__alt_data_end+0xfc00df8c>
		if (*--x)
			return 1;
	return 0;
 400dfb8:	0005883a 	mov	r2,zero
}
 400dfbc:	e037883a 	mov	sp,fp
 400dfc0:	df000017 	ldw	fp,0(sp)
 400dfc4:	dec00104 	addi	sp,sp,4
 400dfc8:	f800283a 	ret

0400dfcc <_putc_r>:
int
_DEFUN(_putc_r, (ptr, c, fp),
       struct _reent *ptr _AND
       int c _AND
       register FILE *fp)
{
 400dfcc:	defff904 	addi	sp,sp,-28
 400dfd0:	dfc00615 	stw	ra,24(sp)
 400dfd4:	df000515 	stw	fp,20(sp)
 400dfd8:	dc000415 	stw	r16,16(sp)
 400dfdc:	df000504 	addi	fp,sp,20
 400dfe0:	e13ffd15 	stw	r4,-12(fp)
 400dfe4:	e17ffe15 	stw	r5,-8(fp)
 400dfe8:	3021883a 	mov	r16,r6
  int result;
  CHECK_INIT (ptr, fp);
 400dfec:	e0bffd17 	ldw	r2,-12(fp)
 400dff0:	e0bffb15 	stw	r2,-20(fp)
 400dff4:	e0bffb17 	ldw	r2,-20(fp)
 400dff8:	10000526 	beq	r2,zero,400e010 <_putc_r+0x44>
 400dffc:	e0bffb17 	ldw	r2,-20(fp)
 400e000:	10800e17 	ldw	r2,56(r2)
 400e004:	1000021e 	bne	r2,zero,400e010 <_putc_r+0x44>
 400e008:	e13ffb17 	ldw	r4,-20(fp)
 400e00c:	4009a000 	call	4009a00 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (ptr, c, fp);
 400e010:	80800217 	ldw	r2,8(r16)
 400e014:	10bfffc4 	addi	r2,r2,-1
 400e018:	80800215 	stw	r2,8(r16)
 400e01c:	80800217 	ldw	r2,8(r16)
 400e020:	10001b0e 	bge	r2,zero,400e090 <_putc_r+0xc4>
 400e024:	80c00217 	ldw	r3,8(r16)
 400e028:	80800617 	ldw	r2,24(r16)
 400e02c:	18801316 	blt	r3,r2,400e07c <_putc_r+0xb0>
 400e030:	80800017 	ldw	r2,0(r16)
 400e034:	e0fffe17 	ldw	r3,-8(fp)
 400e038:	10c00005 	stb	r3,0(r2)
 400e03c:	80800017 	ldw	r2,0(r16)
 400e040:	10800003 	ldbu	r2,0(r2)
 400e044:	10803fcc 	andi	r2,r2,255
 400e048:	108002a0 	cmpeqi	r2,r2,10
 400e04c:	1000061e 	bne	r2,zero,400e068 <_putc_r+0x9c>
 400e050:	80800017 	ldw	r2,0(r16)
 400e054:	10c00044 	addi	r3,r2,1
 400e058:	80c00015 	stw	r3,0(r16)
 400e05c:	10800003 	ldbu	r2,0(r2)
 400e060:	10803fcc 	andi	r2,r2,255
 400e064:	00001206 	br	400e0b0 <_putc_r+0xe4>
 400e068:	800d883a 	mov	r6,r16
 400e06c:	01400284 	movi	r5,10
 400e070:	e13ffd17 	ldw	r4,-12(fp)
 400e074:	401071c0 	call	401071c <__swbuf_r>
 400e078:	00000d06 	br	400e0b0 <_putc_r+0xe4>
 400e07c:	800d883a 	mov	r6,r16
 400e080:	e17ffe17 	ldw	r5,-8(fp)
 400e084:	e13ffd17 	ldw	r4,-12(fp)
 400e088:	401071c0 	call	401071c <__swbuf_r>
 400e08c:	00000806 	br	400e0b0 <_putc_r+0xe4>
 400e090:	80800017 	ldw	r2,0(r16)
 400e094:	e0fffe17 	ldw	r3,-8(fp)
 400e098:	10c00005 	stb	r3,0(r2)
 400e09c:	80800017 	ldw	r2,0(r16)
 400e0a0:	10c00044 	addi	r3,r2,1
 400e0a4:	80c00015 	stw	r3,0(r16)
 400e0a8:	10800003 	ldbu	r2,0(r2)
 400e0ac:	10803fcc 	andi	r2,r2,255
 400e0b0:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return result;
 400e0b4:	e0bffc17 	ldw	r2,-16(fp)
}
 400e0b8:	e6ffff04 	addi	sp,fp,-4
 400e0bc:	dfc00217 	ldw	ra,8(sp)
 400e0c0:	df000117 	ldw	fp,4(sp)
 400e0c4:	dc000017 	ldw	r16,0(sp)
 400e0c8:	dec00304 	addi	sp,sp,12
 400e0cc:	f800283a 	ret

0400e0d0 <putc>:
#ifndef _REENT_ONLY
int
_DEFUN(putc, (c, fp),
       int c _AND
       register FILE *fp)
{
 400e0d0:	defff904 	addi	sp,sp,-28
 400e0d4:	dfc00615 	stw	ra,24(sp)
 400e0d8:	df000515 	stw	fp,20(sp)
 400e0dc:	dc000415 	stw	r16,16(sp)
 400e0e0:	df000504 	addi	fp,sp,20
 400e0e4:	e13ffe15 	stw	r4,-8(fp)
 400e0e8:	2821883a 	mov	r16,r5
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  int result;
  struct _reent *reent = _REENT;
 400e0ec:	d0a00917 	ldw	r2,-32732(gp)
 400e0f0:	e0bffb15 	stw	r2,-20(fp)

  CHECK_INIT (reent, fp);
 400e0f4:	e0bffb17 	ldw	r2,-20(fp)
 400e0f8:	e0bffc15 	stw	r2,-16(fp)
 400e0fc:	e0bffc17 	ldw	r2,-16(fp)
 400e100:	10000526 	beq	r2,zero,400e118 <putc+0x48>
 400e104:	e0bffc17 	ldw	r2,-16(fp)
 400e108:	10800e17 	ldw	r2,56(r2)
 400e10c:	1000021e 	bne	r2,zero,400e118 <putc+0x48>
 400e110:	e13ffc17 	ldw	r4,-16(fp)
 400e114:	4009a000 	call	4009a00 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (reent, c, fp);
 400e118:	80800217 	ldw	r2,8(r16)
 400e11c:	10bfffc4 	addi	r2,r2,-1
 400e120:	80800215 	stw	r2,8(r16)
 400e124:	80800217 	ldw	r2,8(r16)
 400e128:	10001b0e 	bge	r2,zero,400e198 <putc+0xc8>
 400e12c:	80c00217 	ldw	r3,8(r16)
 400e130:	80800617 	ldw	r2,24(r16)
 400e134:	18801316 	blt	r3,r2,400e184 <putc+0xb4>
 400e138:	80800017 	ldw	r2,0(r16)
 400e13c:	e0fffe17 	ldw	r3,-8(fp)
 400e140:	10c00005 	stb	r3,0(r2)
 400e144:	80800017 	ldw	r2,0(r16)
 400e148:	10800003 	ldbu	r2,0(r2)
 400e14c:	10803fcc 	andi	r2,r2,255
 400e150:	108002a0 	cmpeqi	r2,r2,10
 400e154:	1000061e 	bne	r2,zero,400e170 <putc+0xa0>
 400e158:	80800017 	ldw	r2,0(r16)
 400e15c:	10c00044 	addi	r3,r2,1
 400e160:	80c00015 	stw	r3,0(r16)
 400e164:	10800003 	ldbu	r2,0(r2)
 400e168:	10803fcc 	andi	r2,r2,255
 400e16c:	00001206 	br	400e1b8 <putc+0xe8>
 400e170:	800d883a 	mov	r6,r16
 400e174:	01400284 	movi	r5,10
 400e178:	e13ffb17 	ldw	r4,-20(fp)
 400e17c:	401071c0 	call	401071c <__swbuf_r>
 400e180:	00000d06 	br	400e1b8 <putc+0xe8>
 400e184:	800d883a 	mov	r6,r16
 400e188:	e17ffe17 	ldw	r5,-8(fp)
 400e18c:	e13ffb17 	ldw	r4,-20(fp)
 400e190:	401071c0 	call	401071c <__swbuf_r>
 400e194:	00000806 	br	400e1b8 <putc+0xe8>
 400e198:	80800017 	ldw	r2,0(r16)
 400e19c:	e0fffe17 	ldw	r3,-8(fp)
 400e1a0:	10c00005 	stb	r3,0(r2)
 400e1a4:	80800017 	ldw	r2,0(r16)
 400e1a8:	10c00044 	addi	r3,r2,1
 400e1ac:	80c00015 	stw	r3,0(r16)
 400e1b0:	10800003 	ldbu	r2,0(r2)
 400e1b4:	10803fcc 	andi	r2,r2,255
 400e1b8:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return result;
 400e1bc:	e0bffd17 	ldw	r2,-12(fp)
#else
  return _putc_r (_REENT, c, fp);
#endif
}
 400e1c0:	e6ffff04 	addi	sp,fp,-4
 400e1c4:	dfc00217 	ldw	ra,8(sp)
 400e1c8:	df000117 	ldw	fp,4(sp)
 400e1cc:	dc000017 	ldw	r16,0(sp)
 400e1d0:	dec00304 	addi	sp,sp,12
 400e1d4:	f800283a 	ret

0400e1d8 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 400e1d8:	deffe104 	addi	sp,sp,-124
 400e1dc:	dfc01e15 	stw	ra,120(sp)
 400e1e0:	df001d15 	stw	fp,116(sp)
 400e1e4:	df001d04 	addi	fp,sp,116
 400e1e8:	e13ffd15 	stw	r4,-12(fp)
 400e1ec:	e17ffe15 	stw	r5,-8(fp)
 400e1f0:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 400e1f4:	e0bffe17 	ldw	r2,-8(fp)
 400e1f8:	1000041e 	bne	r2,zero,400e20c <_realloc_r+0x34>
 400e1fc:	e17fff17 	ldw	r5,-4(fp)
 400e200:	e13ffd17 	ldw	r4,-12(fp)
 400e204:	400b2c80 	call	400b2c8 <_malloc_r>
 400e208:	0002ea06 	br	400edb4 <_realloc_r+0xbdc>

  MALLOC_LOCK;
 400e20c:	e13ffd17 	ldw	r4,-12(fp)
 400e210:	40127f40 	call	40127f4 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 400e214:	e0bffe17 	ldw	r2,-8(fp)
 400e218:	10bffe04 	addi	r2,r2,-8
 400e21c:	e0bfef15 	stw	r2,-68(fp)
 400e220:	e0bfef17 	ldw	r2,-68(fp)
 400e224:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 400e228:	e0bfef17 	ldw	r2,-68(fp)
 400e22c:	10c00117 	ldw	r3,4(r2)
 400e230:	00bfff04 	movi	r2,-4
 400e234:	1884703a 	and	r2,r3,r2
 400e238:	e0bff015 	stw	r2,-64(fp)
 400e23c:	e0bff017 	ldw	r2,-64(fp)
 400e240:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 400e244:	e0bfff17 	ldw	r2,-4(fp)
 400e248:	108002c4 	addi	r2,r2,11
 400e24c:	108005f0 	cmpltui	r2,r2,23
 400e250:	1000051e 	bne	r2,zero,400e268 <_realloc_r+0x90>
 400e254:	e0bfff17 	ldw	r2,-4(fp)
 400e258:	10c002c4 	addi	r3,r2,11
 400e25c:	00bffe04 	movi	r2,-8
 400e260:	1884703a 	and	r2,r3,r2
 400e264:	00000106 	br	400e26c <_realloc_r+0x94>
 400e268:	00800404 	movi	r2,16
 400e26c:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 400e270:	e0bff117 	ldw	r2,-60(fp)
 400e274:	10000316 	blt	r2,zero,400e284 <_realloc_r+0xac>
 400e278:	e0fff117 	ldw	r3,-60(fp)
 400e27c:	e0bfff17 	ldw	r2,-4(fp)
 400e280:	1880052e 	bgeu	r3,r2,400e298 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 400e284:	e0bffd17 	ldw	r2,-12(fp)
 400e288:	00c00304 	movi	r3,12
 400e28c:	10c00015 	stw	r3,0(r2)
    return 0;
 400e290:	0005883a 	mov	r2,zero
 400e294:	0002c706 	br	400edb4 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 400e298:	e0fff017 	ldw	r3,-64(fp)
 400e29c:	e0bff117 	ldw	r2,-60(fp)
 400e2a0:	18828b0e 	bge	r3,r2,400ecd0 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 400e2a4:	e0ffef17 	ldw	r3,-68(fp)
 400e2a8:	e0bff017 	ldw	r2,-64(fp)
 400e2ac:	1885883a 	add	r2,r3,r2
 400e2b0:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 400e2b4:	00810074 	movhi	r2,1025
 400e2b8:	10968a04 	addi	r2,r2,23080
 400e2bc:	10c00217 	ldw	r3,8(r2)
 400e2c0:	e0bfe517 	ldw	r2,-108(fp)
 400e2c4:	18800926 	beq	r3,r2,400e2ec <_realloc_r+0x114>
 400e2c8:	e0bfe517 	ldw	r2,-108(fp)
 400e2cc:	10c00117 	ldw	r3,4(r2)
 400e2d0:	00bfff84 	movi	r2,-2
 400e2d4:	1884703a 	and	r2,r3,r2
 400e2d8:	e0ffe517 	ldw	r3,-108(fp)
 400e2dc:	1885883a 	add	r2,r3,r2
 400e2e0:	10800117 	ldw	r2,4(r2)
 400e2e4:	1080004c 	andi	r2,r2,1
 400e2e8:	1000461e 	bne	r2,zero,400e404 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 400e2ec:	e0bfe517 	ldw	r2,-108(fp)
 400e2f0:	10c00117 	ldw	r3,4(r2)
 400e2f4:	00bfff04 	movi	r2,-4
 400e2f8:	1884703a 	and	r2,r3,r2
 400e2fc:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 400e300:	00810074 	movhi	r2,1025
 400e304:	10968a04 	addi	r2,r2,23080
 400e308:	10c00217 	ldw	r3,8(r2)
 400e30c:	e0bfe517 	ldw	r2,-108(fp)
 400e310:	1880251e 	bne	r3,r2,400e3a8 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 400e314:	e0ffe617 	ldw	r3,-104(fp)
 400e318:	e0bfe417 	ldw	r2,-112(fp)
 400e31c:	1885883a 	add	r2,r3,r2
 400e320:	1007883a 	mov	r3,r2
 400e324:	e0bff117 	ldw	r2,-60(fp)
 400e328:	10800404 	addi	r2,r2,16
 400e32c:	18803816 	blt	r3,r2,400e410 <_realloc_r+0x238>
        {
          newsize += nextsize;
 400e330:	e0ffe417 	ldw	r3,-112(fp)
 400e334:	e0bfe617 	ldw	r2,-104(fp)
 400e338:	1885883a 	add	r2,r3,r2
 400e33c:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 400e340:	00810074 	movhi	r2,1025
 400e344:	10968a04 	addi	r2,r2,23080
 400e348:	e13fef17 	ldw	r4,-68(fp)
 400e34c:	e0fff117 	ldw	r3,-60(fp)
 400e350:	20c7883a 	add	r3,r4,r3
 400e354:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 400e358:	00810074 	movhi	r2,1025
 400e35c:	10968a04 	addi	r2,r2,23080
 400e360:	10800217 	ldw	r2,8(r2)
 400e364:	e13fe417 	ldw	r4,-112(fp)
 400e368:	e0fff117 	ldw	r3,-60(fp)
 400e36c:	20c7c83a 	sub	r3,r4,r3
 400e370:	18c00054 	ori	r3,r3,1
 400e374:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 400e378:	e0bfef17 	ldw	r2,-68(fp)
 400e37c:	10800117 	ldw	r2,4(r2)
 400e380:	10c0004c 	andi	r3,r2,1
 400e384:	e0bff117 	ldw	r2,-60(fp)
 400e388:	1886b03a 	or	r3,r3,r2
 400e38c:	e0bfef17 	ldw	r2,-68(fp)
 400e390:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 400e394:	e13ffd17 	ldw	r4,-12(fp)
 400e398:	40128180 	call	4012818 <__malloc_unlock>
          return chunk2mem(oldp);
 400e39c:	e0bfef17 	ldw	r2,-68(fp)
 400e3a0:	10800204 	addi	r2,r2,8
 400e3a4:	00028306 	br	400edb4 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 400e3a8:	e0ffe617 	ldw	r3,-104(fp)
 400e3ac:	e0bfe417 	ldw	r2,-112(fp)
 400e3b0:	1885883a 	add	r2,r3,r2
 400e3b4:	1007883a 	mov	r3,r2
 400e3b8:	e0bff117 	ldw	r2,-60(fp)
 400e3bc:	18801416 	blt	r3,r2,400e410 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 400e3c0:	e0bfe517 	ldw	r2,-108(fp)
 400e3c4:	10800317 	ldw	r2,12(r2)
 400e3c8:	e0bff215 	stw	r2,-56(fp)
 400e3cc:	e0bfe517 	ldw	r2,-108(fp)
 400e3d0:	10800217 	ldw	r2,8(r2)
 400e3d4:	e0bff315 	stw	r2,-52(fp)
 400e3d8:	e0bff317 	ldw	r2,-52(fp)
 400e3dc:	e0fff217 	ldw	r3,-56(fp)
 400e3e0:	10c00315 	stw	r3,12(r2)
 400e3e4:	e0bff217 	ldw	r2,-56(fp)
 400e3e8:	e0fff317 	ldw	r3,-52(fp)
 400e3ec:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 400e3f0:	e0ffe417 	ldw	r3,-112(fp)
 400e3f4:	e0bfe617 	ldw	r2,-104(fp)
 400e3f8:	1885883a 	add	r2,r3,r2
 400e3fc:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 400e400:	00023306 	br	400ecd0 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 400e404:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 400e408:	e03fe615 	stw	zero,-104(fp)
 400e40c:	00000106 	br	400e414 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 400e410:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 400e414:	e0bfef17 	ldw	r2,-68(fp)
 400e418:	10800117 	ldw	r2,4(r2)
 400e41c:	1080004c 	andi	r2,r2,1
 400e420:	1001a91e 	bne	r2,zero,400eac8 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 400e424:	e0bfef17 	ldw	r2,-68(fp)
 400e428:	10800017 	ldw	r2,0(r2)
 400e42c:	0085c83a 	sub	r2,zero,r2
 400e430:	e0ffef17 	ldw	r3,-68(fp)
 400e434:	1885883a 	add	r2,r3,r2
 400e438:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 400e43c:	e0bff417 	ldw	r2,-48(fp)
 400e440:	10c00117 	ldw	r3,4(r2)
 400e444:	00bfff04 	movi	r2,-4
 400e448:	1884703a 	and	r2,r3,r2
 400e44c:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 400e450:	e0bfe517 	ldw	r2,-108(fp)
 400e454:	10012226 	beq	r2,zero,400e8e0 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 400e458:	00810074 	movhi	r2,1025
 400e45c:	10968a04 	addi	r2,r2,23080
 400e460:	10c00217 	ldw	r3,8(r2)
 400e464:	e0bfe517 	ldw	r2,-108(fp)
 400e468:	1880951e 	bne	r3,r2,400e6c0 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 400e46c:	e0ffe617 	ldw	r3,-104(fp)
 400e470:	e0bff517 	ldw	r2,-44(fp)
 400e474:	1887883a 	add	r3,r3,r2
 400e478:	e0bfe417 	ldw	r2,-112(fp)
 400e47c:	1885883a 	add	r2,r3,r2
 400e480:	1007883a 	mov	r3,r2
 400e484:	e0bff117 	ldw	r2,-60(fp)
 400e488:	10800404 	addi	r2,r2,16
 400e48c:	18811416 	blt	r3,r2,400e8e0 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 400e490:	e0bff417 	ldw	r2,-48(fp)
 400e494:	10800317 	ldw	r2,12(r2)
 400e498:	e0bff215 	stw	r2,-56(fp)
 400e49c:	e0bff417 	ldw	r2,-48(fp)
 400e4a0:	10800217 	ldw	r2,8(r2)
 400e4a4:	e0bff315 	stw	r2,-52(fp)
 400e4a8:	e0bff317 	ldw	r2,-52(fp)
 400e4ac:	e0fff217 	ldw	r3,-56(fp)
 400e4b0:	10c00315 	stw	r3,12(r2)
 400e4b4:	e0bff217 	ldw	r2,-56(fp)
 400e4b8:	e0fff317 	ldw	r3,-52(fp)
 400e4bc:	10c00215 	stw	r3,8(r2)
            newp = prev;
 400e4c0:	e0bff417 	ldw	r2,-48(fp)
 400e4c4:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 400e4c8:	e0fff517 	ldw	r3,-44(fp)
 400e4cc:	e0bfe617 	ldw	r2,-104(fp)
 400e4d0:	1885883a 	add	r2,r3,r2
 400e4d4:	e0ffe417 	ldw	r3,-112(fp)
 400e4d8:	1885883a 	add	r2,r3,r2
 400e4dc:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 400e4e0:	e0bfe317 	ldw	r2,-116(fp)
 400e4e4:	10800204 	addi	r2,r2,8
 400e4e8:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400e4ec:	e0bff017 	ldw	r2,-64(fp)
 400e4f0:	10bfff04 	addi	r2,r2,-4
 400e4f4:	e0bff715 	stw	r2,-36(fp)
 400e4f8:	e0bff717 	ldw	r2,-36(fp)
 400e4fc:	10800968 	cmpgeui	r2,r2,37
 400e500:	1000521e 	bne	r2,zero,400e64c <_realloc_r+0x474>
 400e504:	e0bffe17 	ldw	r2,-8(fp)
 400e508:	e0bfe715 	stw	r2,-100(fp)
 400e50c:	e0bff617 	ldw	r2,-40(fp)
 400e510:	e0bfe815 	stw	r2,-96(fp)
 400e514:	e0bff717 	ldw	r2,-36(fp)
 400e518:	10800530 	cmpltui	r2,r2,20
 400e51c:	1000361e 	bne	r2,zero,400e5f8 <_realloc_r+0x420>
 400e520:	e0bfe817 	ldw	r2,-96(fp)
 400e524:	10c00104 	addi	r3,r2,4
 400e528:	e0ffe815 	stw	r3,-96(fp)
 400e52c:	e0ffe717 	ldw	r3,-100(fp)
 400e530:	19000104 	addi	r4,r3,4
 400e534:	e13fe715 	stw	r4,-100(fp)
 400e538:	18c00017 	ldw	r3,0(r3)
 400e53c:	10c00015 	stw	r3,0(r2)
 400e540:	e0bfe817 	ldw	r2,-96(fp)
 400e544:	10c00104 	addi	r3,r2,4
 400e548:	e0ffe815 	stw	r3,-96(fp)
 400e54c:	e0ffe717 	ldw	r3,-100(fp)
 400e550:	19000104 	addi	r4,r3,4
 400e554:	e13fe715 	stw	r4,-100(fp)
 400e558:	18c00017 	ldw	r3,0(r3)
 400e55c:	10c00015 	stw	r3,0(r2)
 400e560:	e0bff717 	ldw	r2,-36(fp)
 400e564:	10800730 	cmpltui	r2,r2,28
 400e568:	1000231e 	bne	r2,zero,400e5f8 <_realloc_r+0x420>
 400e56c:	e0bfe817 	ldw	r2,-96(fp)
 400e570:	10c00104 	addi	r3,r2,4
 400e574:	e0ffe815 	stw	r3,-96(fp)
 400e578:	e0ffe717 	ldw	r3,-100(fp)
 400e57c:	19000104 	addi	r4,r3,4
 400e580:	e13fe715 	stw	r4,-100(fp)
 400e584:	18c00017 	ldw	r3,0(r3)
 400e588:	10c00015 	stw	r3,0(r2)
 400e58c:	e0bfe817 	ldw	r2,-96(fp)
 400e590:	10c00104 	addi	r3,r2,4
 400e594:	e0ffe815 	stw	r3,-96(fp)
 400e598:	e0ffe717 	ldw	r3,-100(fp)
 400e59c:	19000104 	addi	r4,r3,4
 400e5a0:	e13fe715 	stw	r4,-100(fp)
 400e5a4:	18c00017 	ldw	r3,0(r3)
 400e5a8:	10c00015 	stw	r3,0(r2)
 400e5ac:	e0bff717 	ldw	r2,-36(fp)
 400e5b0:	10800930 	cmpltui	r2,r2,36
 400e5b4:	1000101e 	bne	r2,zero,400e5f8 <_realloc_r+0x420>
 400e5b8:	e0bfe817 	ldw	r2,-96(fp)
 400e5bc:	10c00104 	addi	r3,r2,4
 400e5c0:	e0ffe815 	stw	r3,-96(fp)
 400e5c4:	e0ffe717 	ldw	r3,-100(fp)
 400e5c8:	19000104 	addi	r4,r3,4
 400e5cc:	e13fe715 	stw	r4,-100(fp)
 400e5d0:	18c00017 	ldw	r3,0(r3)
 400e5d4:	10c00015 	stw	r3,0(r2)
 400e5d8:	e0bfe817 	ldw	r2,-96(fp)
 400e5dc:	10c00104 	addi	r3,r2,4
 400e5e0:	e0ffe815 	stw	r3,-96(fp)
 400e5e4:	e0ffe717 	ldw	r3,-100(fp)
 400e5e8:	19000104 	addi	r4,r3,4
 400e5ec:	e13fe715 	stw	r4,-100(fp)
 400e5f0:	18c00017 	ldw	r3,0(r3)
 400e5f4:	10c00015 	stw	r3,0(r2)
 400e5f8:	e0bfe817 	ldw	r2,-96(fp)
 400e5fc:	10c00104 	addi	r3,r2,4
 400e600:	e0ffe815 	stw	r3,-96(fp)
 400e604:	e0ffe717 	ldw	r3,-100(fp)
 400e608:	19000104 	addi	r4,r3,4
 400e60c:	e13fe715 	stw	r4,-100(fp)
 400e610:	18c00017 	ldw	r3,0(r3)
 400e614:	10c00015 	stw	r3,0(r2)
 400e618:	e0bfe817 	ldw	r2,-96(fp)
 400e61c:	10c00104 	addi	r3,r2,4
 400e620:	e0ffe815 	stw	r3,-96(fp)
 400e624:	e0ffe717 	ldw	r3,-100(fp)
 400e628:	19000104 	addi	r4,r3,4
 400e62c:	e13fe715 	stw	r4,-100(fp)
 400e630:	18c00017 	ldw	r3,0(r3)
 400e634:	10c00015 	stw	r3,0(r2)
 400e638:	e0bfe717 	ldw	r2,-100(fp)
 400e63c:	10c00017 	ldw	r3,0(r2)
 400e640:	e0bfe817 	ldw	r2,-96(fp)
 400e644:	10c00015 	stw	r3,0(r2)
 400e648:	00000406 	br	400e65c <_realloc_r+0x484>
 400e64c:	e1bff717 	ldw	r6,-36(fp)
 400e650:	e17ffe17 	ldw	r5,-8(fp)
 400e654:	e13ff617 	ldw	r4,-40(fp)
 400e658:	400c1880 	call	400c188 <memmove>
            top = chunk_at_offset(newp, nb);
 400e65c:	00810074 	movhi	r2,1025
 400e660:	10968a04 	addi	r2,r2,23080
 400e664:	e13fe317 	ldw	r4,-116(fp)
 400e668:	e0fff117 	ldw	r3,-60(fp)
 400e66c:	20c7883a 	add	r3,r4,r3
 400e670:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 400e674:	00810074 	movhi	r2,1025
 400e678:	10968a04 	addi	r2,r2,23080
 400e67c:	10800217 	ldw	r2,8(r2)
 400e680:	e13fe417 	ldw	r4,-112(fp)
 400e684:	e0fff117 	ldw	r3,-60(fp)
 400e688:	20c7c83a 	sub	r3,r4,r3
 400e68c:	18c00054 	ori	r3,r3,1
 400e690:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 400e694:	e0bfe317 	ldw	r2,-116(fp)
 400e698:	10800117 	ldw	r2,4(r2)
 400e69c:	10c0004c 	andi	r3,r2,1
 400e6a0:	e0bff117 	ldw	r2,-60(fp)
 400e6a4:	1886b03a 	or	r3,r3,r2
 400e6a8:	e0bfe317 	ldw	r2,-116(fp)
 400e6ac:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 400e6b0:	e13ffd17 	ldw	r4,-12(fp)
 400e6b4:	40128180 	call	4012818 <__malloc_unlock>
            return newmem;
 400e6b8:	e0bff617 	ldw	r2,-40(fp)
 400e6bc:	0001bd06 	br	400edb4 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 400e6c0:	e0ffe617 	ldw	r3,-104(fp)
 400e6c4:	e0bff517 	ldw	r2,-44(fp)
 400e6c8:	1887883a 	add	r3,r3,r2
 400e6cc:	e0bfe417 	ldw	r2,-112(fp)
 400e6d0:	1885883a 	add	r2,r3,r2
 400e6d4:	1007883a 	mov	r3,r2
 400e6d8:	e0bff117 	ldw	r2,-60(fp)
 400e6dc:	18808016 	blt	r3,r2,400e8e0 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 400e6e0:	e0bfe517 	ldw	r2,-108(fp)
 400e6e4:	10800317 	ldw	r2,12(r2)
 400e6e8:	e0bff215 	stw	r2,-56(fp)
 400e6ec:	e0bfe517 	ldw	r2,-108(fp)
 400e6f0:	10800217 	ldw	r2,8(r2)
 400e6f4:	e0bff315 	stw	r2,-52(fp)
 400e6f8:	e0bff317 	ldw	r2,-52(fp)
 400e6fc:	e0fff217 	ldw	r3,-56(fp)
 400e700:	10c00315 	stw	r3,12(r2)
 400e704:	e0bff217 	ldw	r2,-56(fp)
 400e708:	e0fff317 	ldw	r3,-52(fp)
 400e70c:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 400e710:	e0bff417 	ldw	r2,-48(fp)
 400e714:	10800317 	ldw	r2,12(r2)
 400e718:	e0bff215 	stw	r2,-56(fp)
 400e71c:	e0bff417 	ldw	r2,-48(fp)
 400e720:	10800217 	ldw	r2,8(r2)
 400e724:	e0bff315 	stw	r2,-52(fp)
 400e728:	e0bff317 	ldw	r2,-52(fp)
 400e72c:	e0fff217 	ldw	r3,-56(fp)
 400e730:	10c00315 	stw	r3,12(r2)
 400e734:	e0bff217 	ldw	r2,-56(fp)
 400e738:	e0fff317 	ldw	r3,-52(fp)
 400e73c:	10c00215 	stw	r3,8(r2)
          newp = prev;
 400e740:	e0bff417 	ldw	r2,-48(fp)
 400e744:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 400e748:	e0ffe617 	ldw	r3,-104(fp)
 400e74c:	e0bff517 	ldw	r2,-44(fp)
 400e750:	1885883a 	add	r2,r3,r2
 400e754:	e0ffe417 	ldw	r3,-112(fp)
 400e758:	1885883a 	add	r2,r3,r2
 400e75c:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 400e760:	e0bfe317 	ldw	r2,-116(fp)
 400e764:	10800204 	addi	r2,r2,8
 400e768:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400e76c:	e0bff017 	ldw	r2,-64(fp)
 400e770:	10bfff04 	addi	r2,r2,-4
 400e774:	e0bff815 	stw	r2,-32(fp)
 400e778:	e0bff817 	ldw	r2,-32(fp)
 400e77c:	10800968 	cmpgeui	r2,r2,37
 400e780:	1000521e 	bne	r2,zero,400e8cc <_realloc_r+0x6f4>
 400e784:	e0bffe17 	ldw	r2,-8(fp)
 400e788:	e0bfe915 	stw	r2,-92(fp)
 400e78c:	e0bff617 	ldw	r2,-40(fp)
 400e790:	e0bfea15 	stw	r2,-88(fp)
 400e794:	e0bff817 	ldw	r2,-32(fp)
 400e798:	10800530 	cmpltui	r2,r2,20
 400e79c:	1000361e 	bne	r2,zero,400e878 <_realloc_r+0x6a0>
 400e7a0:	e0bfea17 	ldw	r2,-88(fp)
 400e7a4:	10c00104 	addi	r3,r2,4
 400e7a8:	e0ffea15 	stw	r3,-88(fp)
 400e7ac:	e0ffe917 	ldw	r3,-92(fp)
 400e7b0:	19000104 	addi	r4,r3,4
 400e7b4:	e13fe915 	stw	r4,-92(fp)
 400e7b8:	18c00017 	ldw	r3,0(r3)
 400e7bc:	10c00015 	stw	r3,0(r2)
 400e7c0:	e0bfea17 	ldw	r2,-88(fp)
 400e7c4:	10c00104 	addi	r3,r2,4
 400e7c8:	e0ffea15 	stw	r3,-88(fp)
 400e7cc:	e0ffe917 	ldw	r3,-92(fp)
 400e7d0:	19000104 	addi	r4,r3,4
 400e7d4:	e13fe915 	stw	r4,-92(fp)
 400e7d8:	18c00017 	ldw	r3,0(r3)
 400e7dc:	10c00015 	stw	r3,0(r2)
 400e7e0:	e0bff817 	ldw	r2,-32(fp)
 400e7e4:	10800730 	cmpltui	r2,r2,28
 400e7e8:	1000231e 	bne	r2,zero,400e878 <_realloc_r+0x6a0>
 400e7ec:	e0bfea17 	ldw	r2,-88(fp)
 400e7f0:	10c00104 	addi	r3,r2,4
 400e7f4:	e0ffea15 	stw	r3,-88(fp)
 400e7f8:	e0ffe917 	ldw	r3,-92(fp)
 400e7fc:	19000104 	addi	r4,r3,4
 400e800:	e13fe915 	stw	r4,-92(fp)
 400e804:	18c00017 	ldw	r3,0(r3)
 400e808:	10c00015 	stw	r3,0(r2)
 400e80c:	e0bfea17 	ldw	r2,-88(fp)
 400e810:	10c00104 	addi	r3,r2,4
 400e814:	e0ffea15 	stw	r3,-88(fp)
 400e818:	e0ffe917 	ldw	r3,-92(fp)
 400e81c:	19000104 	addi	r4,r3,4
 400e820:	e13fe915 	stw	r4,-92(fp)
 400e824:	18c00017 	ldw	r3,0(r3)
 400e828:	10c00015 	stw	r3,0(r2)
 400e82c:	e0bff817 	ldw	r2,-32(fp)
 400e830:	10800930 	cmpltui	r2,r2,36
 400e834:	1000101e 	bne	r2,zero,400e878 <_realloc_r+0x6a0>
 400e838:	e0bfea17 	ldw	r2,-88(fp)
 400e83c:	10c00104 	addi	r3,r2,4
 400e840:	e0ffea15 	stw	r3,-88(fp)
 400e844:	e0ffe917 	ldw	r3,-92(fp)
 400e848:	19000104 	addi	r4,r3,4
 400e84c:	e13fe915 	stw	r4,-92(fp)
 400e850:	18c00017 	ldw	r3,0(r3)
 400e854:	10c00015 	stw	r3,0(r2)
 400e858:	e0bfea17 	ldw	r2,-88(fp)
 400e85c:	10c00104 	addi	r3,r2,4
 400e860:	e0ffea15 	stw	r3,-88(fp)
 400e864:	e0ffe917 	ldw	r3,-92(fp)
 400e868:	19000104 	addi	r4,r3,4
 400e86c:	e13fe915 	stw	r4,-92(fp)
 400e870:	18c00017 	ldw	r3,0(r3)
 400e874:	10c00015 	stw	r3,0(r2)
 400e878:	e0bfea17 	ldw	r2,-88(fp)
 400e87c:	10c00104 	addi	r3,r2,4
 400e880:	e0ffea15 	stw	r3,-88(fp)
 400e884:	e0ffe917 	ldw	r3,-92(fp)
 400e888:	19000104 	addi	r4,r3,4
 400e88c:	e13fe915 	stw	r4,-92(fp)
 400e890:	18c00017 	ldw	r3,0(r3)
 400e894:	10c00015 	stw	r3,0(r2)
 400e898:	e0bfea17 	ldw	r2,-88(fp)
 400e89c:	10c00104 	addi	r3,r2,4
 400e8a0:	e0ffea15 	stw	r3,-88(fp)
 400e8a4:	e0ffe917 	ldw	r3,-92(fp)
 400e8a8:	19000104 	addi	r4,r3,4
 400e8ac:	e13fe915 	stw	r4,-92(fp)
 400e8b0:	18c00017 	ldw	r3,0(r3)
 400e8b4:	10c00015 	stw	r3,0(r2)
 400e8b8:	e0bfe917 	ldw	r2,-92(fp)
 400e8bc:	10c00017 	ldw	r3,0(r2)
 400e8c0:	e0bfea17 	ldw	r2,-88(fp)
 400e8c4:	10c00015 	stw	r3,0(r2)
          goto split;
 400e8c8:	00010106 	br	400ecd0 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400e8cc:	e1bff817 	ldw	r6,-32(fp)
 400e8d0:	e17ffe17 	ldw	r5,-8(fp)
 400e8d4:	e13ff617 	ldw	r4,-40(fp)
 400e8d8:	400c1880 	call	400c188 <memmove>
          goto split;
 400e8dc:	0000fc06 	br	400ecd0 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 400e8e0:	e0bff417 	ldw	r2,-48(fp)
 400e8e4:	10007826 	beq	r2,zero,400eac8 <_realloc_r+0x8f0>
 400e8e8:	e0fff517 	ldw	r3,-44(fp)
 400e8ec:	e0bfe417 	ldw	r2,-112(fp)
 400e8f0:	1885883a 	add	r2,r3,r2
 400e8f4:	1007883a 	mov	r3,r2
 400e8f8:	e0bff117 	ldw	r2,-60(fp)
 400e8fc:	18807216 	blt	r3,r2,400eac8 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 400e900:	e0bff417 	ldw	r2,-48(fp)
 400e904:	10800317 	ldw	r2,12(r2)
 400e908:	e0bff215 	stw	r2,-56(fp)
 400e90c:	e0bff417 	ldw	r2,-48(fp)
 400e910:	10800217 	ldw	r2,8(r2)
 400e914:	e0bff315 	stw	r2,-52(fp)
 400e918:	e0bff317 	ldw	r2,-52(fp)
 400e91c:	e0fff217 	ldw	r3,-56(fp)
 400e920:	10c00315 	stw	r3,12(r2)
 400e924:	e0bff217 	ldw	r2,-56(fp)
 400e928:	e0fff317 	ldw	r3,-52(fp)
 400e92c:	10c00215 	stw	r3,8(r2)
        newp = prev;
 400e930:	e0bff417 	ldw	r2,-48(fp)
 400e934:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 400e938:	e0ffe417 	ldw	r3,-112(fp)
 400e93c:	e0bff517 	ldw	r2,-44(fp)
 400e940:	1885883a 	add	r2,r3,r2
 400e944:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 400e948:	e0bfe317 	ldw	r2,-116(fp)
 400e94c:	10800204 	addi	r2,r2,8
 400e950:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400e954:	e0bff017 	ldw	r2,-64(fp)
 400e958:	10bfff04 	addi	r2,r2,-4
 400e95c:	e0bff915 	stw	r2,-28(fp)
 400e960:	e0bff917 	ldw	r2,-28(fp)
 400e964:	10800968 	cmpgeui	r2,r2,37
 400e968:	1000521e 	bne	r2,zero,400eab4 <_realloc_r+0x8dc>
 400e96c:	e0bffe17 	ldw	r2,-8(fp)
 400e970:	e0bfeb15 	stw	r2,-84(fp)
 400e974:	e0bff617 	ldw	r2,-40(fp)
 400e978:	e0bfec15 	stw	r2,-80(fp)
 400e97c:	e0bff917 	ldw	r2,-28(fp)
 400e980:	10800530 	cmpltui	r2,r2,20
 400e984:	1000361e 	bne	r2,zero,400ea60 <_realloc_r+0x888>
 400e988:	e0bfec17 	ldw	r2,-80(fp)
 400e98c:	10c00104 	addi	r3,r2,4
 400e990:	e0ffec15 	stw	r3,-80(fp)
 400e994:	e0ffeb17 	ldw	r3,-84(fp)
 400e998:	19000104 	addi	r4,r3,4
 400e99c:	e13feb15 	stw	r4,-84(fp)
 400e9a0:	18c00017 	ldw	r3,0(r3)
 400e9a4:	10c00015 	stw	r3,0(r2)
 400e9a8:	e0bfec17 	ldw	r2,-80(fp)
 400e9ac:	10c00104 	addi	r3,r2,4
 400e9b0:	e0ffec15 	stw	r3,-80(fp)
 400e9b4:	e0ffeb17 	ldw	r3,-84(fp)
 400e9b8:	19000104 	addi	r4,r3,4
 400e9bc:	e13feb15 	stw	r4,-84(fp)
 400e9c0:	18c00017 	ldw	r3,0(r3)
 400e9c4:	10c00015 	stw	r3,0(r2)
 400e9c8:	e0bff917 	ldw	r2,-28(fp)
 400e9cc:	10800730 	cmpltui	r2,r2,28
 400e9d0:	1000231e 	bne	r2,zero,400ea60 <_realloc_r+0x888>
 400e9d4:	e0bfec17 	ldw	r2,-80(fp)
 400e9d8:	10c00104 	addi	r3,r2,4
 400e9dc:	e0ffec15 	stw	r3,-80(fp)
 400e9e0:	e0ffeb17 	ldw	r3,-84(fp)
 400e9e4:	19000104 	addi	r4,r3,4
 400e9e8:	e13feb15 	stw	r4,-84(fp)
 400e9ec:	18c00017 	ldw	r3,0(r3)
 400e9f0:	10c00015 	stw	r3,0(r2)
 400e9f4:	e0bfec17 	ldw	r2,-80(fp)
 400e9f8:	10c00104 	addi	r3,r2,4
 400e9fc:	e0ffec15 	stw	r3,-80(fp)
 400ea00:	e0ffeb17 	ldw	r3,-84(fp)
 400ea04:	19000104 	addi	r4,r3,4
 400ea08:	e13feb15 	stw	r4,-84(fp)
 400ea0c:	18c00017 	ldw	r3,0(r3)
 400ea10:	10c00015 	stw	r3,0(r2)
 400ea14:	e0bff917 	ldw	r2,-28(fp)
 400ea18:	10800930 	cmpltui	r2,r2,36
 400ea1c:	1000101e 	bne	r2,zero,400ea60 <_realloc_r+0x888>
 400ea20:	e0bfec17 	ldw	r2,-80(fp)
 400ea24:	10c00104 	addi	r3,r2,4
 400ea28:	e0ffec15 	stw	r3,-80(fp)
 400ea2c:	e0ffeb17 	ldw	r3,-84(fp)
 400ea30:	19000104 	addi	r4,r3,4
 400ea34:	e13feb15 	stw	r4,-84(fp)
 400ea38:	18c00017 	ldw	r3,0(r3)
 400ea3c:	10c00015 	stw	r3,0(r2)
 400ea40:	e0bfec17 	ldw	r2,-80(fp)
 400ea44:	10c00104 	addi	r3,r2,4
 400ea48:	e0ffec15 	stw	r3,-80(fp)
 400ea4c:	e0ffeb17 	ldw	r3,-84(fp)
 400ea50:	19000104 	addi	r4,r3,4
 400ea54:	e13feb15 	stw	r4,-84(fp)
 400ea58:	18c00017 	ldw	r3,0(r3)
 400ea5c:	10c00015 	stw	r3,0(r2)
 400ea60:	e0bfec17 	ldw	r2,-80(fp)
 400ea64:	10c00104 	addi	r3,r2,4
 400ea68:	e0ffec15 	stw	r3,-80(fp)
 400ea6c:	e0ffeb17 	ldw	r3,-84(fp)
 400ea70:	19000104 	addi	r4,r3,4
 400ea74:	e13feb15 	stw	r4,-84(fp)
 400ea78:	18c00017 	ldw	r3,0(r3)
 400ea7c:	10c00015 	stw	r3,0(r2)
 400ea80:	e0bfec17 	ldw	r2,-80(fp)
 400ea84:	10c00104 	addi	r3,r2,4
 400ea88:	e0ffec15 	stw	r3,-80(fp)
 400ea8c:	e0ffeb17 	ldw	r3,-84(fp)
 400ea90:	19000104 	addi	r4,r3,4
 400ea94:	e13feb15 	stw	r4,-84(fp)
 400ea98:	18c00017 	ldw	r3,0(r3)
 400ea9c:	10c00015 	stw	r3,0(r2)
 400eaa0:	e0bfeb17 	ldw	r2,-84(fp)
 400eaa4:	10c00017 	ldw	r3,0(r2)
 400eaa8:	e0bfec17 	ldw	r2,-80(fp)
 400eaac:	10c00015 	stw	r3,0(r2)
        goto split;
 400eab0:	00008706 	br	400ecd0 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400eab4:	e1bff917 	ldw	r6,-28(fp)
 400eab8:	e17ffe17 	ldw	r5,-8(fp)
 400eabc:	e13ff617 	ldw	r4,-40(fp)
 400eac0:	400c1880 	call	400c188 <memmove>
        goto split;
 400eac4:	00008206 	br	400ecd0 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 400eac8:	e17fff17 	ldw	r5,-4(fp)
 400eacc:	e13ffd17 	ldw	r4,-12(fp)
 400ead0:	400b2c80 	call	400b2c8 <_malloc_r>
 400ead4:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 400ead8:	e0bff617 	ldw	r2,-40(fp)
 400eadc:	1000041e 	bne	r2,zero,400eaf0 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 400eae0:	e13ffd17 	ldw	r4,-12(fp)
 400eae4:	40128180 	call	4012818 <__malloc_unlock>
      return 0;
 400eae8:	0005883a 	mov	r2,zero
 400eaec:	0000b106 	br	400edb4 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 400eaf0:	e0bff617 	ldw	r2,-40(fp)
 400eaf4:	10bffe04 	addi	r2,r2,-8
 400eaf8:	e0bfe315 	stw	r2,-116(fp)
 400eafc:	e0bfef17 	ldw	r2,-68(fp)
 400eb00:	10c00117 	ldw	r3,4(r2)
 400eb04:	00bfff84 	movi	r2,-2
 400eb08:	1884703a 	and	r2,r3,r2
 400eb0c:	e0ffef17 	ldw	r3,-68(fp)
 400eb10:	1885883a 	add	r2,r3,r2
 400eb14:	e0ffe317 	ldw	r3,-116(fp)
 400eb18:	18800a1e 	bne	r3,r2,400eb44 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 400eb1c:	e0bfe317 	ldw	r2,-116(fp)
 400eb20:	10c00117 	ldw	r3,4(r2)
 400eb24:	00bfff04 	movi	r2,-4
 400eb28:	1884703a 	and	r2,r3,r2
 400eb2c:	e0ffe417 	ldw	r3,-112(fp)
 400eb30:	1885883a 	add	r2,r3,r2
 400eb34:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 400eb38:	e0bfef17 	ldw	r2,-68(fp)
 400eb3c:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 400eb40:	00006306 	br	400ecd0 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400eb44:	e0bff017 	ldw	r2,-64(fp)
 400eb48:	10bfff04 	addi	r2,r2,-4
 400eb4c:	e0bffa15 	stw	r2,-24(fp)
 400eb50:	e0bffa17 	ldw	r2,-24(fp)
 400eb54:	10800968 	cmpgeui	r2,r2,37
 400eb58:	1000521e 	bne	r2,zero,400eca4 <_realloc_r+0xacc>
 400eb5c:	e0bffe17 	ldw	r2,-8(fp)
 400eb60:	e0bfed15 	stw	r2,-76(fp)
 400eb64:	e0bff617 	ldw	r2,-40(fp)
 400eb68:	e0bfee15 	stw	r2,-72(fp)
 400eb6c:	e0bffa17 	ldw	r2,-24(fp)
 400eb70:	10800530 	cmpltui	r2,r2,20
 400eb74:	1000361e 	bne	r2,zero,400ec50 <_realloc_r+0xa78>
 400eb78:	e0bfee17 	ldw	r2,-72(fp)
 400eb7c:	10c00104 	addi	r3,r2,4
 400eb80:	e0ffee15 	stw	r3,-72(fp)
 400eb84:	e0ffed17 	ldw	r3,-76(fp)
 400eb88:	19000104 	addi	r4,r3,4
 400eb8c:	e13fed15 	stw	r4,-76(fp)
 400eb90:	18c00017 	ldw	r3,0(r3)
 400eb94:	10c00015 	stw	r3,0(r2)
 400eb98:	e0bfee17 	ldw	r2,-72(fp)
 400eb9c:	10c00104 	addi	r3,r2,4
 400eba0:	e0ffee15 	stw	r3,-72(fp)
 400eba4:	e0ffed17 	ldw	r3,-76(fp)
 400eba8:	19000104 	addi	r4,r3,4
 400ebac:	e13fed15 	stw	r4,-76(fp)
 400ebb0:	18c00017 	ldw	r3,0(r3)
 400ebb4:	10c00015 	stw	r3,0(r2)
 400ebb8:	e0bffa17 	ldw	r2,-24(fp)
 400ebbc:	10800730 	cmpltui	r2,r2,28
 400ebc0:	1000231e 	bne	r2,zero,400ec50 <_realloc_r+0xa78>
 400ebc4:	e0bfee17 	ldw	r2,-72(fp)
 400ebc8:	10c00104 	addi	r3,r2,4
 400ebcc:	e0ffee15 	stw	r3,-72(fp)
 400ebd0:	e0ffed17 	ldw	r3,-76(fp)
 400ebd4:	19000104 	addi	r4,r3,4
 400ebd8:	e13fed15 	stw	r4,-76(fp)
 400ebdc:	18c00017 	ldw	r3,0(r3)
 400ebe0:	10c00015 	stw	r3,0(r2)
 400ebe4:	e0bfee17 	ldw	r2,-72(fp)
 400ebe8:	10c00104 	addi	r3,r2,4
 400ebec:	e0ffee15 	stw	r3,-72(fp)
 400ebf0:	e0ffed17 	ldw	r3,-76(fp)
 400ebf4:	19000104 	addi	r4,r3,4
 400ebf8:	e13fed15 	stw	r4,-76(fp)
 400ebfc:	18c00017 	ldw	r3,0(r3)
 400ec00:	10c00015 	stw	r3,0(r2)
 400ec04:	e0bffa17 	ldw	r2,-24(fp)
 400ec08:	10800930 	cmpltui	r2,r2,36
 400ec0c:	1000101e 	bne	r2,zero,400ec50 <_realloc_r+0xa78>
 400ec10:	e0bfee17 	ldw	r2,-72(fp)
 400ec14:	10c00104 	addi	r3,r2,4
 400ec18:	e0ffee15 	stw	r3,-72(fp)
 400ec1c:	e0ffed17 	ldw	r3,-76(fp)
 400ec20:	19000104 	addi	r4,r3,4
 400ec24:	e13fed15 	stw	r4,-76(fp)
 400ec28:	18c00017 	ldw	r3,0(r3)
 400ec2c:	10c00015 	stw	r3,0(r2)
 400ec30:	e0bfee17 	ldw	r2,-72(fp)
 400ec34:	10c00104 	addi	r3,r2,4
 400ec38:	e0ffee15 	stw	r3,-72(fp)
 400ec3c:	e0ffed17 	ldw	r3,-76(fp)
 400ec40:	19000104 	addi	r4,r3,4
 400ec44:	e13fed15 	stw	r4,-76(fp)
 400ec48:	18c00017 	ldw	r3,0(r3)
 400ec4c:	10c00015 	stw	r3,0(r2)
 400ec50:	e0bfee17 	ldw	r2,-72(fp)
 400ec54:	10c00104 	addi	r3,r2,4
 400ec58:	e0ffee15 	stw	r3,-72(fp)
 400ec5c:	e0ffed17 	ldw	r3,-76(fp)
 400ec60:	19000104 	addi	r4,r3,4
 400ec64:	e13fed15 	stw	r4,-76(fp)
 400ec68:	18c00017 	ldw	r3,0(r3)
 400ec6c:	10c00015 	stw	r3,0(r2)
 400ec70:	e0bfee17 	ldw	r2,-72(fp)
 400ec74:	10c00104 	addi	r3,r2,4
 400ec78:	e0ffee15 	stw	r3,-72(fp)
 400ec7c:	e0ffed17 	ldw	r3,-76(fp)
 400ec80:	19000104 	addi	r4,r3,4
 400ec84:	e13fed15 	stw	r4,-76(fp)
 400ec88:	18c00017 	ldw	r3,0(r3)
 400ec8c:	10c00015 	stw	r3,0(r2)
 400ec90:	e0bfed17 	ldw	r2,-76(fp)
 400ec94:	10c00017 	ldw	r3,0(r2)
 400ec98:	e0bfee17 	ldw	r2,-72(fp)
 400ec9c:	10c00015 	stw	r3,0(r2)
 400eca0:	00000406 	br	400ecb4 <_realloc_r+0xadc>
 400eca4:	e1bffa17 	ldw	r6,-24(fp)
 400eca8:	e17ffe17 	ldw	r5,-8(fp)
 400ecac:	e13ff617 	ldw	r4,-40(fp)
 400ecb0:	400c1880 	call	400c188 <memmove>
    fREe(RCALL oldmem);
 400ecb4:	e17ffe17 	ldw	r5,-8(fp)
 400ecb8:	e13ffd17 	ldw	r4,-12(fp)
 400ecbc:	4009c200 	call	4009c20 <_free_r>
    MALLOC_UNLOCK;
 400ecc0:	e13ffd17 	ldw	r4,-12(fp)
 400ecc4:	40128180 	call	4012818 <__malloc_unlock>
    return newmem;
 400ecc8:	e0bff617 	ldw	r2,-40(fp)
 400eccc:	00003906 	br	400edb4 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 400ecd0:	e0ffe417 	ldw	r3,-112(fp)
 400ecd4:	e0bff117 	ldw	r2,-60(fp)
 400ecd8:	1885c83a 	sub	r2,r3,r2
 400ecdc:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 400ece0:	e0bffb17 	ldw	r2,-20(fp)
 400ece4:	10800430 	cmpltui	r2,r2,16
 400ece8:	10001e1e 	bne	r2,zero,400ed64 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 400ecec:	e0ffe317 	ldw	r3,-116(fp)
 400ecf0:	e0bff117 	ldw	r2,-60(fp)
 400ecf4:	1885883a 	add	r2,r3,r2
 400ecf8:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 400ecfc:	e0bfe317 	ldw	r2,-116(fp)
 400ed00:	10800117 	ldw	r2,4(r2)
 400ed04:	10c0004c 	andi	r3,r2,1
 400ed08:	e0bff117 	ldw	r2,-60(fp)
 400ed0c:	1886b03a 	or	r3,r3,r2
 400ed10:	e0bfe317 	ldw	r2,-116(fp)
 400ed14:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 400ed18:	e0bffb17 	ldw	r2,-20(fp)
 400ed1c:	10c00054 	ori	r3,r2,1
 400ed20:	e0bffc17 	ldw	r2,-16(fp)
 400ed24:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 400ed28:	e0fffc17 	ldw	r3,-16(fp)
 400ed2c:	e0bffb17 	ldw	r2,-20(fp)
 400ed30:	1885883a 	add	r2,r3,r2
 400ed34:	e13ffc17 	ldw	r4,-16(fp)
 400ed38:	e0fffb17 	ldw	r3,-20(fp)
 400ed3c:	20c7883a 	add	r3,r4,r3
 400ed40:	18c00117 	ldw	r3,4(r3)
 400ed44:	18c00054 	ori	r3,r3,1
 400ed48:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 400ed4c:	e0bffc17 	ldw	r2,-16(fp)
 400ed50:	10800204 	addi	r2,r2,8
 400ed54:	100b883a 	mov	r5,r2
 400ed58:	e13ffd17 	ldw	r4,-12(fp)
 400ed5c:	4009c200 	call	4009c20 <_free_r>
 400ed60:	00001006 	br	400eda4 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 400ed64:	e0bfe317 	ldw	r2,-116(fp)
 400ed68:	10800117 	ldw	r2,4(r2)
 400ed6c:	10c0004c 	andi	r3,r2,1
 400ed70:	e0bfe417 	ldw	r2,-112(fp)
 400ed74:	1886b03a 	or	r3,r3,r2
 400ed78:	e0bfe317 	ldw	r2,-116(fp)
 400ed7c:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 400ed80:	e0ffe317 	ldw	r3,-116(fp)
 400ed84:	e0bfe417 	ldw	r2,-112(fp)
 400ed88:	1885883a 	add	r2,r3,r2
 400ed8c:	e13fe317 	ldw	r4,-116(fp)
 400ed90:	e0ffe417 	ldw	r3,-112(fp)
 400ed94:	20c7883a 	add	r3,r4,r3
 400ed98:	18c00117 	ldw	r3,4(r3)
 400ed9c:	18c00054 	ori	r3,r3,1
 400eda0:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 400eda4:	e13ffd17 	ldw	r4,-12(fp)
 400eda8:	40128180 	call	4012818 <__malloc_unlock>
  return chunk2mem(newp);
 400edac:	e0bfe317 	ldw	r2,-116(fp)
 400edb0:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 400edb4:	e037883a 	mov	sp,fp
 400edb8:	dfc00117 	ldw	ra,4(sp)
 400edbc:	df000017 	ldw	fp,0(sp)
 400edc0:	dec00204 	addi	sp,sp,8
 400edc4:	f800283a 	ret

0400edc8 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 400edc8:	defffb04 	addi	sp,sp,-20
 400edcc:	dfc00415 	stw	ra,16(sp)
 400edd0:	df000315 	stw	fp,12(sp)
 400edd4:	df000304 	addi	fp,sp,12
 400edd8:	e13ffe15 	stw	r4,-8(fp)
 400eddc:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 400ede0:	d026e615 	stw	zero,-25704(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 400ede4:	e13fff17 	ldw	r4,-4(fp)
 400ede8:	40129d80 	call	40129d8 <sbrk>
 400edec:	e0bffd15 	stw	r2,-12(fp)
 400edf0:	e0bffd17 	ldw	r2,-12(fp)
 400edf4:	10bfffd8 	cmpnei	r2,r2,-1
 400edf8:	1000051e 	bne	r2,zero,400ee10 <_sbrk_r+0x48>
 400edfc:	d0a6e617 	ldw	r2,-25704(gp)
 400ee00:	10000326 	beq	r2,zero,400ee10 <_sbrk_r+0x48>
    ptr->_errno = errno;
 400ee04:	d0e6e617 	ldw	r3,-25704(gp)
 400ee08:	e0bffe17 	ldw	r2,-8(fp)
 400ee0c:	10c00015 	stw	r3,0(r2)
  return ret;
 400ee10:	e0bffd17 	ldw	r2,-12(fp)
}
 400ee14:	e037883a 	mov	sp,fp
 400ee18:	dfc00117 	ldw	ra,4(sp)
 400ee1c:	df000017 	ldw	fp,0(sp)
 400ee20:	dec00204 	addi	sp,sp,8
 400ee24:	f800283a 	ret

0400ee28 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 400ee28:	defff804 	addi	sp,sp,-32
 400ee2c:	dfc00715 	stw	ra,28(sp)
 400ee30:	df000615 	stw	fp,24(sp)
 400ee34:	dc400515 	stw	r17,20(sp)
 400ee38:	dc000415 	stw	r16,16(sp)
 400ee3c:	df000604 	addi	fp,sp,24
 400ee40:	e13ffa15 	stw	r4,-24(fp)
 400ee44:	e17ffb15 	stw	r5,-20(fp)
 400ee48:	e1bffc15 	stw	r6,-16(fp)
 400ee4c:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 400ee50:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 400ee54:	8080038b 	ldhu	r2,14(r16)
 400ee58:	10bfffcc 	andi	r2,r2,65535
 400ee5c:	10a0001c 	xori	r2,r2,32768
 400ee60:	10a00004 	addi	r2,r2,-32768
 400ee64:	e0fffd17 	ldw	r3,-12(fp)
 400ee68:	180f883a 	mov	r7,r3
 400ee6c:	e1bffc17 	ldw	r6,-16(fp)
 400ee70:	100b883a 	mov	r5,r2
 400ee74:	e13ffa17 	ldw	r4,-24(fp)
 400ee78:	40110780 	call	4011078 <_read_r>
 400ee7c:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 400ee80:	88000416 	blt	r17,zero,400ee94 <__sread+0x6c>
    fp->_offset += ret;
 400ee84:	80801417 	ldw	r2,80(r16)
 400ee88:	1445883a 	add	r2,r2,r17
 400ee8c:	80801415 	stw	r2,80(r16)
 400ee90:	00000406 	br	400eea4 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 400ee94:	80c0030b 	ldhu	r3,12(r16)
 400ee98:	00bbffc4 	movi	r2,-4097
 400ee9c:	1884703a 	and	r2,r3,r2
 400eea0:	8080030d 	sth	r2,12(r16)
  return ret;
 400eea4:	8805883a 	mov	r2,r17
}
 400eea8:	e6fffe04 	addi	sp,fp,-8
 400eeac:	dfc00317 	ldw	ra,12(sp)
 400eeb0:	df000217 	ldw	fp,8(sp)
 400eeb4:	dc400117 	ldw	r17,4(sp)
 400eeb8:	dc000017 	ldw	r16,0(sp)
 400eebc:	dec00404 	addi	sp,sp,16
 400eec0:	f800283a 	ret

0400eec4 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 400eec4:	defffb04 	addi	sp,sp,-20
 400eec8:	df000415 	stw	fp,16(sp)
 400eecc:	df000404 	addi	fp,sp,16
 400eed0:	e13ffc15 	stw	r4,-16(fp)
 400eed4:	e17ffd15 	stw	r5,-12(fp)
 400eed8:	e1bffe15 	stw	r6,-8(fp)
 400eedc:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 400eee0:	0005883a 	mov	r2,zero
}
 400eee4:	e037883a 	mov	sp,fp
 400eee8:	df000017 	ldw	fp,0(sp)
 400eeec:	dec00104 	addi	sp,sp,4
 400eef0:	f800283a 	ret

0400eef4 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 400eef4:	defff804 	addi	sp,sp,-32
 400eef8:	dfc00715 	stw	ra,28(sp)
 400eefc:	df000615 	stw	fp,24(sp)
 400ef00:	dc000515 	stw	r16,20(sp)
 400ef04:	df000604 	addi	fp,sp,24
 400ef08:	e13ffb15 	stw	r4,-20(fp)
 400ef0c:	e17ffc15 	stw	r5,-16(fp)
 400ef10:	e1bffd15 	stw	r6,-12(fp)
 400ef14:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 400ef18:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 400ef1c:	8080030b 	ldhu	r2,12(r16)
 400ef20:	10bfffcc 	andi	r2,r2,65535
 400ef24:	1080400c 	andi	r2,r2,256
 400ef28:	10000926 	beq	r2,zero,400ef50 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 400ef2c:	8080038b 	ldhu	r2,14(r16)
 400ef30:	10bfffcc 	andi	r2,r2,65535
 400ef34:	10a0001c 	xori	r2,r2,32768
 400ef38:	10a00004 	addi	r2,r2,-32768
 400ef3c:	01c00084 	movi	r7,2
 400ef40:	000d883a 	mov	r6,zero
 400ef44:	100b883a 	mov	r5,r2
 400ef48:	e13ffb17 	ldw	r4,-20(fp)
 400ef4c:	40110080 	call	4011008 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 400ef50:	80c0030b 	ldhu	r3,12(r16)
 400ef54:	00bbffc4 	movi	r2,-4097
 400ef58:	1884703a 	and	r2,r3,r2
 400ef5c:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 400ef60:	8080038b 	ldhu	r2,14(r16)
 400ef64:	10bfffcc 	andi	r2,r2,65535
 400ef68:	10a0001c 	xori	r2,r2,32768
 400ef6c:	10a00004 	addi	r2,r2,-32768
 400ef70:	e0fffe17 	ldw	r3,-8(fp)
 400ef74:	180f883a 	mov	r7,r3
 400ef78:	e1bffd17 	ldw	r6,-12(fp)
 400ef7c:	100b883a 	mov	r5,r2
 400ef80:	e13ffb17 	ldw	r4,-20(fp)
 400ef84:	40108c40 	call	40108c4 <_write_r>
 400ef88:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 400ef8c:	e0bffa17 	ldw	r2,-24(fp)
}
 400ef90:	e6ffff04 	addi	sp,fp,-4
 400ef94:	dfc00217 	ldw	ra,8(sp)
 400ef98:	df000117 	ldw	fp,4(sp)
 400ef9c:	dc000017 	ldw	r16,0(sp)
 400efa0:	dec00304 	addi	sp,sp,12
 400efa4:	f800283a 	ret

0400efa8 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 400efa8:	defff804 	addi	sp,sp,-32
 400efac:	dfc00715 	stw	ra,28(sp)
 400efb0:	df000615 	stw	fp,24(sp)
 400efb4:	dc400515 	stw	r17,20(sp)
 400efb8:	dc000415 	stw	r16,16(sp)
 400efbc:	df000604 	addi	fp,sp,24
 400efc0:	e13ffa15 	stw	r4,-24(fp)
 400efc4:	e17ffb15 	stw	r5,-20(fp)
 400efc8:	e1bffc15 	stw	r6,-16(fp)
 400efcc:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 400efd0:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 400efd4:	8080038b 	ldhu	r2,14(r16)
 400efd8:	10bfffcc 	andi	r2,r2,65535
 400efdc:	10a0001c 	xori	r2,r2,32768
 400efe0:	10a00004 	addi	r2,r2,-32768
 400efe4:	e1fffd17 	ldw	r7,-12(fp)
 400efe8:	e1bffc17 	ldw	r6,-16(fp)
 400efec:	100b883a 	mov	r5,r2
 400eff0:	e13ffa17 	ldw	r4,-24(fp)
 400eff4:	40110080 	call	4011008 <_lseek_r>
 400eff8:	1023883a 	mov	r17,r2
  if (ret == -1L)
 400effc:	88bfffd8 	cmpnei	r2,r17,-1
 400f000:	1000051e 	bne	r2,zero,400f018 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 400f004:	80c0030b 	ldhu	r3,12(r16)
 400f008:	00bbffc4 	movi	r2,-4097
 400f00c:	1884703a 	and	r2,r3,r2
 400f010:	8080030d 	sth	r2,12(r16)
 400f014:	00000406 	br	400f028 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 400f018:	8080030b 	ldhu	r2,12(r16)
 400f01c:	10840014 	ori	r2,r2,4096
 400f020:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 400f024:	84401415 	stw	r17,80(r16)
    }
  return ret;
 400f028:	8805883a 	mov	r2,r17
}
 400f02c:	e6fffe04 	addi	sp,fp,-8
 400f030:	dfc00317 	ldw	ra,12(sp)
 400f034:	df000217 	ldw	fp,8(sp)
 400f038:	dc400117 	ldw	r17,4(sp)
 400f03c:	dc000017 	ldw	r16,0(sp)
 400f040:	dec00404 	addi	sp,sp,16
 400f044:	f800283a 	ret

0400f048 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 400f048:	defffb04 	addi	sp,sp,-20
 400f04c:	dfc00415 	stw	ra,16(sp)
 400f050:	df000315 	stw	fp,12(sp)
 400f054:	df000304 	addi	fp,sp,12
 400f058:	e13ffe15 	stw	r4,-8(fp)
 400f05c:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 400f060:	e0bfff17 	ldw	r2,-4(fp)
 400f064:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 400f068:	e0bffd17 	ldw	r2,-12(fp)
 400f06c:	1080038b 	ldhu	r2,14(r2)
 400f070:	10bfffcc 	andi	r2,r2,65535
 400f074:	10a0001c 	xori	r2,r2,32768
 400f078:	10a00004 	addi	r2,r2,-32768
 400f07c:	100b883a 	mov	r5,r2
 400f080:	e13ffe17 	ldw	r4,-8(fp)
 400f084:	40109340 	call	4010934 <_close_r>
}
 400f088:	e037883a 	mov	sp,fp
 400f08c:	dfc00117 	ldw	ra,4(sp)
 400f090:	df000017 	ldw	fp,0(sp)
 400f094:	dec00204 	addi	sp,sp,8
 400f098:	f800283a 	ret

0400f09c <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 400f09c:	defffb04 	addi	sp,sp,-20
 400f0a0:	df000415 	stw	fp,16(sp)
 400f0a4:	df000404 	addi	fp,sp,16
 400f0a8:	e13ffe15 	stw	r4,-8(fp)
 400f0ac:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 400f0b0:	e0fffe17 	ldw	r3,-8(fp)
 400f0b4:	e0bfff17 	ldw	r2,-4(fp)
 400f0b8:	1884b03a 	or	r2,r3,r2
 400f0bc:	108000cc 	andi	r2,r2,3
 400f0c0:	10002a1e 	bne	r2,zero,400f16c <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 400f0c4:	e0bffe17 	ldw	r2,-8(fp)
 400f0c8:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 400f0cc:	e0bfff17 	ldw	r2,-4(fp)
 400f0d0:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 400f0d4:	00001506 	br	400f12c <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 400f0d8:	e0bffc17 	ldw	r2,-16(fp)
 400f0dc:	10c00017 	ldw	r3,0(r2)
 400f0e0:	00bfbff4 	movhi	r2,65279
 400f0e4:	10bfbfc4 	addi	r2,r2,-257
 400f0e8:	1887883a 	add	r3,r3,r2
 400f0ec:	e0bffc17 	ldw	r2,-16(fp)
 400f0f0:	10800017 	ldw	r2,0(r2)
 400f0f4:	0084303a 	nor	r2,zero,r2
 400f0f8:	1886703a 	and	r3,r3,r2
 400f0fc:	00a02074 	movhi	r2,32897
 400f100:	10a02004 	addi	r2,r2,-32640
 400f104:	1884703a 	and	r2,r3,r2
 400f108:	10000226 	beq	r2,zero,400f114 <strcmp+0x78>
	    return 0;
 400f10c:	0005883a 	mov	r2,zero
 400f110:	00002e06 	br	400f1cc <strcmp+0x130>

          a1++;
 400f114:	e0bffc17 	ldw	r2,-16(fp)
 400f118:	10800104 	addi	r2,r2,4
 400f11c:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 400f120:	e0bffd17 	ldw	r2,-12(fp)
 400f124:	10800104 	addi	r2,r2,4
 400f128:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 400f12c:	e0bffc17 	ldw	r2,-16(fp)
 400f130:	10c00017 	ldw	r3,0(r2)
 400f134:	e0bffd17 	ldw	r2,-12(fp)
 400f138:	10800017 	ldw	r2,0(r2)
 400f13c:	18bfe626 	beq	r3,r2,400f0d8 <__alt_data_end+0xfc00f0d8>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 400f140:	e0bffc17 	ldw	r2,-16(fp)
 400f144:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 400f148:	e0bffd17 	ldw	r2,-12(fp)
 400f14c:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 400f150:	00000606 	br	400f16c <strcmp+0xd0>
    {
      s1++;
 400f154:	e0bffe17 	ldw	r2,-8(fp)
 400f158:	10800044 	addi	r2,r2,1
 400f15c:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 400f160:	e0bfff17 	ldw	r2,-4(fp)
 400f164:	10800044 	addi	r2,r2,1
 400f168:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 400f16c:	e0bffe17 	ldw	r2,-8(fp)
 400f170:	10800003 	ldbu	r2,0(r2)
 400f174:	10803fcc 	andi	r2,r2,255
 400f178:	1080201c 	xori	r2,r2,128
 400f17c:	10bfe004 	addi	r2,r2,-128
 400f180:	10000b26 	beq	r2,zero,400f1b0 <strcmp+0x114>
 400f184:	e0bffe17 	ldw	r2,-8(fp)
 400f188:	10c00003 	ldbu	r3,0(r2)
 400f18c:	e0bfff17 	ldw	r2,-4(fp)
 400f190:	10800003 	ldbu	r2,0(r2)
 400f194:	18c03fcc 	andi	r3,r3,255
 400f198:	18c0201c 	xori	r3,r3,128
 400f19c:	18ffe004 	addi	r3,r3,-128
 400f1a0:	10803fcc 	andi	r2,r2,255
 400f1a4:	1080201c 	xori	r2,r2,128
 400f1a8:	10bfe004 	addi	r2,r2,-128
 400f1ac:	18bfe926 	beq	r3,r2,400f154 <__alt_data_end+0xfc00f154>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 400f1b0:	e0bffe17 	ldw	r2,-8(fp)
 400f1b4:	10800003 	ldbu	r2,0(r2)
 400f1b8:	10c03fcc 	andi	r3,r2,255
 400f1bc:	e0bfff17 	ldw	r2,-4(fp)
 400f1c0:	10800003 	ldbu	r2,0(r2)
 400f1c4:	10803fcc 	andi	r2,r2,255
 400f1c8:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 400f1cc:	e037883a 	mov	sp,fp
 400f1d0:	df000017 	ldw	fp,0(sp)
 400f1d4:	dec00104 	addi	sp,sp,4
 400f1d8:	f800283a 	ret

0400f1dc <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 400f1dc:	defff604 	addi	sp,sp,-40
 400f1e0:	dfc00915 	stw	ra,36(sp)
 400f1e4:	df000815 	stw	fp,32(sp)
 400f1e8:	dc400715 	stw	r17,28(sp)
 400f1ec:	dc000615 	stw	r16,24(sp)
 400f1f0:	df000804 	addi	fp,sp,32
 400f1f4:	e13ffc15 	stw	r4,-16(fp)
 400f1f8:	e17ffd15 	stw	r5,-12(fp)
 400f1fc:	3021883a 	mov	r16,r6
	register int err = 0;
 400f200:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 400f204:	80800217 	ldw	r2,8(r16)
 400f208:	1000031e 	bne	r2,zero,400f218 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 400f20c:	80000115 	stw	zero,4(r16)
		return (0);
 400f210:	0005883a 	mov	r2,zero
 400f214:	00003906 	br	400f2fc <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 400f218:	e0bffd17 	ldw	r2,-12(fp)
 400f21c:	10801917 	ldw	r2,100(r2)
 400f220:	1088000c 	andi	r2,r2,8192
 400f224:	10002d26 	beq	r2,zero,400f2dc <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 400f228:	80800017 	ldw	r2,0(r16)
 400f22c:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 400f230:	00002706 	br	400f2d0 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 400f234:	e0bff817 	ldw	r2,-32(fp)
 400f238:	10800017 	ldw	r2,0(r2)
 400f23c:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 400f240:	e0bff817 	ldw	r2,-32(fp)
 400f244:	10800117 	ldw	r2,4(r2)
 400f248:	1004d0ba 	srli	r2,r2,2
 400f24c:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 400f250:	e03ff915 	stw	zero,-28(fp)
 400f254:	00001206 	br	400f2a0 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 400f258:	e0bff917 	ldw	r2,-28(fp)
 400f25c:	1085883a 	add	r2,r2,r2
 400f260:	1085883a 	add	r2,r2,r2
 400f264:	1007883a 	mov	r3,r2
 400f268:	e0bffa17 	ldw	r2,-24(fp)
 400f26c:	10c5883a 	add	r2,r2,r3
 400f270:	10800017 	ldw	r2,0(r2)
 400f274:	e1bffd17 	ldw	r6,-12(fp)
 400f278:	100b883a 	mov	r5,r2
 400f27c:	e13ffc17 	ldw	r4,-16(fp)
 400f280:	4010e500 	call	4010e50 <_fputwc_r>
 400f284:	10bfffd8 	cmpnei	r2,r2,-1
 400f288:	1000021e 	bne	r2,zero,400f294 <__sprint_r+0xb8>
					err = -1;
 400f28c:	047fffc4 	movi	r17,-1
					goto out;
 400f290:	00001706 	br	400f2f0 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 400f294:	e0bff917 	ldw	r2,-28(fp)
 400f298:	10800044 	addi	r2,r2,1
 400f29c:	e0bff915 	stw	r2,-28(fp)
 400f2a0:	e0fff917 	ldw	r3,-28(fp)
 400f2a4:	e0bffb17 	ldw	r2,-20(fp)
 400f2a8:	18bfeb16 	blt	r3,r2,400f258 <__alt_data_end+0xfc00f258>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 400f2ac:	80c00217 	ldw	r3,8(r16)
 400f2b0:	e0bffb17 	ldw	r2,-20(fp)
 400f2b4:	1085883a 	add	r2,r2,r2
 400f2b8:	1085883a 	add	r2,r2,r2
 400f2bc:	1885c83a 	sub	r2,r3,r2
 400f2c0:	80800215 	stw	r2,8(r16)
 400f2c4:	e0bff817 	ldw	r2,-32(fp)
 400f2c8:	10800204 	addi	r2,r2,8
 400f2cc:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 400f2d0:	80800217 	ldw	r2,8(r16)
 400f2d4:	103fd71e 	bne	r2,zero,400f234 <__alt_data_end+0xfc00f234>
 400f2d8:	00000506 	br	400f2f0 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 400f2dc:	800d883a 	mov	r6,r16
 400f2e0:	e17ffd17 	ldw	r5,-12(fp)
 400f2e4:	e13ffc17 	ldw	r4,-16(fp)
 400f2e8:	400a34c0 	call	400a34c <__sfvwrite_r>
 400f2ec:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 400f2f0:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 400f2f4:	80000115 	stw	zero,4(r16)
	return (err);
 400f2f8:	8805883a 	mov	r2,r17
}
 400f2fc:	e6fffe04 	addi	sp,fp,-8
 400f300:	dfc00317 	ldw	ra,12(sp)
 400f304:	df000217 	ldw	fp,8(sp)
 400f308:	dc400117 	ldw	r17,4(sp)
 400f30c:	dc000017 	ldw	r16,0(sp)
 400f310:	dec00404 	addi	sp,sp,16
 400f314:	f800283a 	ret

0400f318 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 400f318:	defedf04 	addi	sp,sp,-1156
 400f31c:	dfc12015 	stw	ra,1152(sp)
 400f320:	df011f15 	stw	fp,1148(sp)
 400f324:	dc011e15 	stw	r16,1144(sp)
 400f328:	df011f04 	addi	fp,sp,1148
 400f32c:	e13ffc15 	stw	r4,-16(fp)
 400f330:	2821883a 	mov	r16,r5
 400f334:	e1bffd15 	stw	r6,-12(fp)
 400f338:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 400f33c:	80c0030b 	ldhu	r3,12(r16)
 400f340:	00bfff44 	movi	r2,-3
 400f344:	1884703a 	and	r2,r3,r2
 400f348:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 400f34c:	80801917 	ldw	r2,100(r16)
 400f350:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 400f354:	8080038b 	ldhu	r2,14(r16)
 400f358:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 400f35c:	80800717 	ldw	r2,28(r16)
 400f360:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 400f364:	80800917 	ldw	r2,36(r16)
 400f368:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 400f36c:	e0befc04 	addi	r2,fp,-1040
 400f370:	e0bee215 	stw	r2,-1144(fp)
 400f374:	e0bee217 	ldw	r2,-1144(fp)
 400f378:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 400f37c:	00810004 	movi	r2,1024
 400f380:	e0bee415 	stw	r2,-1136(fp)
 400f384:	e0bee417 	ldw	r2,-1136(fp)
 400f388:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 400f38c:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 400f390:	e0bee204 	addi	r2,fp,-1144
 400f394:	e1fffe17 	ldw	r7,-8(fp)
 400f398:	e1bffd17 	ldw	r6,-12(fp)
 400f39c:	100b883a 	mov	r5,r2
 400f3a0:	e13ffc17 	ldw	r4,-16(fp)
 400f3a4:	400f4580 	call	400f458 <___vfiprintf_internal_r>
 400f3a8:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 400f3ac:	e0bee117 	ldw	r2,-1148(fp)
 400f3b0:	10000716 	blt	r2,zero,400f3d0 <__sbprintf+0xb8>
 400f3b4:	e0bee204 	addi	r2,fp,-1144
 400f3b8:	100b883a 	mov	r5,r2
 400f3bc:	e13ffc17 	ldw	r4,-16(fp)
 400f3c0:	40095800 	call	4009580 <_fflush_r>
 400f3c4:	10000226 	beq	r2,zero,400f3d0 <__sbprintf+0xb8>
		ret = EOF;
 400f3c8:	00bfffc4 	movi	r2,-1
 400f3cc:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 400f3d0:	e0bee50b 	ldhu	r2,-1132(fp)
 400f3d4:	10bfffcc 	andi	r2,r2,65535
 400f3d8:	1080100c 	andi	r2,r2,64
 400f3dc:	10000326 	beq	r2,zero,400f3ec <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 400f3e0:	8080030b 	ldhu	r2,12(r16)
 400f3e4:	10801014 	ori	r2,r2,64
 400f3e8:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 400f3ec:	e0bee117 	ldw	r2,-1148(fp)
}
 400f3f0:	e6ffff04 	addi	sp,fp,-4
 400f3f4:	dfc00217 	ldw	ra,8(sp)
 400f3f8:	df000117 	ldw	fp,4(sp)
 400f3fc:	dc000017 	ldw	r16,0(sp)
 400f400:	dec00304 	addi	sp,sp,12
 400f404:	f800283a 	ret

0400f408 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 400f408:	defffa04 	addi	sp,sp,-24
 400f40c:	dfc00515 	stw	ra,20(sp)
 400f410:	df000415 	stw	fp,16(sp)
 400f414:	df000404 	addi	fp,sp,16
 400f418:	e13ffd15 	stw	r4,-12(fp)
 400f41c:	e17ffe15 	stw	r5,-8(fp)
 400f420:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 400f424:	d0a00917 	ldw	r2,-32732(gp)
 400f428:	e1ffff17 	ldw	r7,-4(fp)
 400f42c:	e1bffe17 	ldw	r6,-8(fp)
 400f430:	e17ffd17 	ldw	r5,-12(fp)
 400f434:	1009883a 	mov	r4,r2
 400f438:	400f4580 	call	400f458 <___vfiprintf_internal_r>
 400f43c:	e0bffc15 	stw	r2,-16(fp)
  return result;
 400f440:	e0bffc17 	ldw	r2,-16(fp)
}
 400f444:	e037883a 	mov	sp,fp
 400f448:	dfc00117 	ldw	ra,4(sp)
 400f44c:	df000017 	ldw	fp,0(sp)
 400f450:	dec00204 	addi	sp,sp,8
 400f454:	f800283a 	ret

0400f458 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 400f458:	deffb704 	addi	sp,sp,-292
 400f45c:	dfc04815 	stw	ra,288(sp)
 400f460:	df004715 	stw	fp,284(sp)
 400f464:	ddc04615 	stw	r23,280(sp)
 400f468:	dd804515 	stw	r22,276(sp)
 400f46c:	dd404415 	stw	r21,272(sp)
 400f470:	dd004315 	stw	r20,268(sp)
 400f474:	dcc04215 	stw	r19,264(sp)
 400f478:	dc804115 	stw	r18,260(sp)
 400f47c:	dc404015 	stw	r17,256(sp)
 400f480:	dc003f15 	stw	r16,252(sp)
 400f484:	df004704 	addi	fp,sp,284
 400f488:	e13fe615 	stw	r4,-104(fp)
 400f48c:	e17fe715 	stw	r5,-100(fp)
 400f490:	e1bfe815 	stw	r6,-96(fp)
 400f494:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 400f498:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 400f49c:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 400f4a0:	e0bfe617 	ldw	r2,-104(fp)
 400f4a4:	e0bfc415 	stw	r2,-240(fp)
 400f4a8:	e0bfc417 	ldw	r2,-240(fp)
 400f4ac:	10000526 	beq	r2,zero,400f4c4 <___vfiprintf_internal_r+0x6c>
 400f4b0:	e0bfc417 	ldw	r2,-240(fp)
 400f4b4:	10800e17 	ldw	r2,56(r2)
 400f4b8:	1000021e 	bne	r2,zero,400f4c4 <___vfiprintf_internal_r+0x6c>
 400f4bc:	e13fc417 	ldw	r4,-240(fp)
 400f4c0:	4009a000 	call	4009a00 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 400f4c4:	e0bfe717 	ldw	r2,-100(fp)
 400f4c8:	1080030b 	ldhu	r2,12(r2)
 400f4cc:	10bfffcc 	andi	r2,r2,65535
 400f4d0:	1088000c 	andi	r2,r2,8192
 400f4d4:	10000c1e 	bne	r2,zero,400f508 <___vfiprintf_internal_r+0xb0>
 400f4d8:	e0bfe717 	ldw	r2,-100(fp)
 400f4dc:	1080030b 	ldhu	r2,12(r2)
 400f4e0:	10880014 	ori	r2,r2,8192
 400f4e4:	1007883a 	mov	r3,r2
 400f4e8:	e0bfe717 	ldw	r2,-100(fp)
 400f4ec:	10c0030d 	sth	r3,12(r2)
 400f4f0:	e0bfe717 	ldw	r2,-100(fp)
 400f4f4:	10c01917 	ldw	r3,100(r2)
 400f4f8:	00b7ffc4 	movi	r2,-8193
 400f4fc:	1886703a 	and	r3,r3,r2
 400f500:	e0bfe717 	ldw	r2,-100(fp)
 400f504:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 400f508:	e0bfe717 	ldw	r2,-100(fp)
 400f50c:	1080030b 	ldhu	r2,12(r2)
 400f510:	10bfffcc 	andi	r2,r2,65535
 400f514:	1080020c 	andi	r2,r2,8
 400f518:	10000326 	beq	r2,zero,400f528 <___vfiprintf_internal_r+0xd0>
 400f51c:	e0bfe717 	ldw	r2,-100(fp)
 400f520:	10800417 	ldw	r2,16(r2)
 400f524:	1000061e 	bne	r2,zero,400f540 <___vfiprintf_internal_r+0xe8>
 400f528:	e17fe717 	ldw	r5,-100(fp)
 400f52c:	e13fe617 	ldw	r4,-104(fp)
 400f530:	40071b00 	call	40071b0 <__swsetup_r>
 400f534:	10000226 	beq	r2,zero,400f540 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 400f538:	00bfffc4 	movi	r2,-1
 400f53c:	00046a06 	br	40106e8 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 400f540:	e0bfe717 	ldw	r2,-100(fp)
 400f544:	1080030b 	ldhu	r2,12(r2)
 400f548:	10bfffcc 	andi	r2,r2,65535
 400f54c:	1080068c 	andi	r2,r2,26
 400f550:	10800298 	cmpnei	r2,r2,10
 400f554:	10000c1e 	bne	r2,zero,400f588 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 400f558:	e0bfe717 	ldw	r2,-100(fp)
 400f55c:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 400f560:	10bfffcc 	andi	r2,r2,65535
 400f564:	10a0001c 	xori	r2,r2,32768
 400f568:	10a00004 	addi	r2,r2,-32768
 400f56c:	10000616 	blt	r2,zero,400f588 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 400f570:	e1ffe917 	ldw	r7,-92(fp)
 400f574:	e1bfe817 	ldw	r6,-96(fp)
 400f578:	e17fe717 	ldw	r5,-100(fp)
 400f57c:	e13fe617 	ldw	r4,-104(fp)
 400f580:	400f3180 	call	400f318 <__sbprintf>
 400f584:	00045806 	br	40106e8 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 400f588:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 400f58c:	e4bfcb04 	addi	r18,fp,-212
 400f590:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 400f594:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 400f598:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 400f59c:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 400f5a0:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 400f5a4:	00000106 	br	400f5ac <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 400f5a8:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 400f5ac:	a8800003 	ldbu	r2,0(r21)
 400f5b0:	10803fcc 	andi	r2,r2,255
 400f5b4:	1080201c 	xori	r2,r2,128
 400f5b8:	10bfe004 	addi	r2,r2,-128
 400f5bc:	10000626 	beq	r2,zero,400f5d8 <___vfiprintf_internal_r+0x180>
 400f5c0:	a8800003 	ldbu	r2,0(r21)
 400f5c4:	10803fcc 	andi	r2,r2,255
 400f5c8:	1080201c 	xori	r2,r2,128
 400f5cc:	10bfe004 	addi	r2,r2,-128
 400f5d0:	10800958 	cmpnei	r2,r2,37
 400f5d4:	103ff41e 	bne	r2,zero,400f5a8 <__alt_data_end+0xfc00f5a8>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 400f5d8:	a807883a 	mov	r3,r21
 400f5dc:	a005883a 	mov	r2,r20
 400f5e0:	18a1c83a 	sub	r16,r3,r2
 400f5e4:	80001826 	beq	r16,zero,400f648 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 400f5e8:	95000015 	stw	r20,0(r18)
 400f5ec:	8005883a 	mov	r2,r16
 400f5f0:	90800115 	stw	r2,4(r18)
 400f5f4:	e0bfca17 	ldw	r2,-216(fp)
 400f5f8:	8007883a 	mov	r3,r16
 400f5fc:	10c5883a 	add	r2,r2,r3
 400f600:	e0bfca15 	stw	r2,-216(fp)
 400f604:	94800204 	addi	r18,r18,8
 400f608:	e0bfc917 	ldw	r2,-220(fp)
 400f60c:	10800044 	addi	r2,r2,1
 400f610:	e0bfc915 	stw	r2,-220(fp)
 400f614:	e0bfc917 	ldw	r2,-220(fp)
 400f618:	10800210 	cmplti	r2,r2,8
 400f61c:	1000071e 	bne	r2,zero,400f63c <___vfiprintf_internal_r+0x1e4>
 400f620:	e0bfc804 	addi	r2,fp,-224
 400f624:	100d883a 	mov	r6,r2
 400f628:	e17fe717 	ldw	r5,-100(fp)
 400f62c:	e13fe617 	ldw	r4,-104(fp)
 400f630:	400f1dc0 	call	400f1dc <__sprint_r>
 400f634:	1004031e 	bne	r2,zero,4010644 <___vfiprintf_internal_r+0x11ec>
 400f638:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 400f63c:	e0bfb917 	ldw	r2,-284(fp)
 400f640:	1405883a 	add	r2,r2,r16
 400f644:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 400f648:	a8800003 	ldbu	r2,0(r21)
 400f64c:	10803fcc 	andi	r2,r2,255
 400f650:	1080201c 	xori	r2,r2,128
 400f654:	10bfe004 	addi	r2,r2,-128
 400f658:	1003ec26 	beq	r2,zero,401060c <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 400f65c:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 400f660:	ad400044 	addi	r21,r21,1

		flags = 0;
 400f664:	0027883a 	mov	r19,zero
		dprec = 0;
 400f668:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 400f66c:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 400f670:	00bfffc4 	movi	r2,-1
 400f674:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 400f678:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 400f67c:	a805883a 	mov	r2,r21
 400f680:	15400044 	addi	r21,r2,1
 400f684:	10800003 	ldbu	r2,0(r2)
 400f688:	14403fcc 	andi	r17,r2,255
 400f68c:	8c40201c 	xori	r17,r17,128
 400f690:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 400f694:	88bff804 	addi	r2,r17,-32
 400f698:	10c01668 	cmpgeui	r3,r2,89
 400f69c:	1802881e 	bne	r3,zero,40100c0 <___vfiprintf_internal_r+0xc68>
 400f6a0:	100690ba 	slli	r3,r2,2
 400f6a4:	00810074 	movhi	r2,1025
 400f6a8:	10bdae04 	addi	r2,r2,-2376
 400f6ac:	1885883a 	add	r2,r3,r2
 400f6b0:	10800017 	ldw	r2,0(r2)
 400f6b4:	1000683a 	jmp	r2
 400f6b8:	0400f81c 	xori	r16,zero,992
 400f6bc:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6c0:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6c4:	0400f83c 	xorhi	r16,zero,992
 400f6c8:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6cc:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6d0:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6d4:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6d8:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6dc:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6e0:	0400f844 	movi	r16,993
 400f6e4:	0400f878 	rdprs	r16,zero,993
 400f6e8:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6ec:	0400f870 	cmpltui	r16,zero,993
 400f6f0:	0400f884 	movi	r16,994
 400f6f4:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f6f8:	0400f918 	cmpnei	r16,zero,996
 400f6fc:	0400f920 	cmpeqi	r16,zero,996
 400f700:	0400f920 	cmpeqi	r16,zero,996
 400f704:	0400f920 	cmpeqi	r16,zero,996
 400f708:	0400f920 	cmpeqi	r16,zero,996
 400f70c:	0400f920 	cmpeqi	r16,zero,996
 400f710:	0400f920 	cmpeqi	r16,zero,996
 400f714:	0400f920 	cmpeqi	r16,zero,996
 400f718:	0400f920 	cmpeqi	r16,zero,996
 400f71c:	0400f920 	cmpeqi	r16,zero,996
 400f720:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f724:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f728:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f72c:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f730:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f734:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f738:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f73c:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f740:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f744:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f748:	0400f9c0 	call	400f9c <__reset-0x3bff064>
 400f74c:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f750:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f754:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f758:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f75c:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f760:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f764:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f768:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f76c:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f770:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f774:	0400fb60 	cmpeqi	r16,zero,1005
 400f778:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f77c:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f780:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f784:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f788:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f78c:	0400fcdc 	xori	r16,zero,1011
 400f790:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f794:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f798:	0400fd9c 	xori	r16,zero,1014
 400f79c:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7a0:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7a4:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7a8:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7ac:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7b0:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7b4:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7b8:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7bc:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7c0:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7c4:	0400f998 	cmpnei	r16,zero,998
 400f7c8:	0400f9c4 	movi	r16,999
 400f7cc:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7d0:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7d4:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7d8:	0400f95c 	xori	r16,zero,997
 400f7dc:	0400f9c4 	movi	r16,999
 400f7e0:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7e4:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7e8:	0400f964 	muli	r16,zero,997
 400f7ec:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f7f0:	0400fac0 	call	400fac <__reset-0x3bff054>
 400f7f4:	0400fb64 	muli	r16,zero,1005
 400f7f8:	0400fc04 	movi	r16,1008
 400f7fc:	0400f990 	cmplti	r16,zero,998
 400f800:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f804:	0400fc4c 	andi	r16,zero,1009
 400f808:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f80c:	0400fce0 	cmpeqi	r16,zero,1011
 400f810:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f814:	040100c0 	call	40100c <__reset-0x3bfeff4>
 400f818:	0400fdac 	andhi	r16,zero,1014
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 400f81c:	e0bfc703 	ldbu	r2,-228(fp)
 400f820:	10803fcc 	andi	r2,r2,255
 400f824:	1080201c 	xori	r2,r2,128
 400f828:	10bfe004 	addi	r2,r2,-128
 400f82c:	103f931e 	bne	r2,zero,400f67c <__alt_data_end+0xfc00f67c>
				sign = ' ';
 400f830:	00800804 	movi	r2,32
 400f834:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 400f838:	003f9006 	br	400f67c <__alt_data_end+0xfc00f67c>
		case '#':
			flags |= ALT;
 400f83c:	9cc00054 	ori	r19,r19,1
			goto rflag;
 400f840:	003f8e06 	br	400f67c <__alt_data_end+0xfc00f67c>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 400f844:	e0bfe917 	ldw	r2,-92(fp)
 400f848:	10c00104 	addi	r3,r2,4
 400f84c:	e0ffe915 	stw	r3,-92(fp)
 400f850:	10800017 	ldw	r2,0(r2)
 400f854:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 400f858:	e0bfba17 	ldw	r2,-280(fp)
 400f85c:	10000116 	blt	r2,zero,400f864 <___vfiprintf_internal_r+0x40c>
				goto rflag;
 400f860:	003f8606 	br	400f67c <__alt_data_end+0xfc00f67c>
			width = -width;
 400f864:	e0bfba17 	ldw	r2,-280(fp)
 400f868:	0085c83a 	sub	r2,zero,r2
 400f86c:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 400f870:	9cc00114 	ori	r19,r19,4
			goto rflag;
 400f874:	003f8106 	br	400f67c <__alt_data_end+0xfc00f67c>
		case '+':
			sign = '+';
 400f878:	00800ac4 	movi	r2,43
 400f87c:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 400f880:	003f7e06 	br	400f67c <__alt_data_end+0xfc00f67c>
		case '.':
			if ((ch = *fmt++) == '*') {
 400f884:	a805883a 	mov	r2,r21
 400f888:	15400044 	addi	r21,r2,1
 400f88c:	10800003 	ldbu	r2,0(r2)
 400f890:	14403fcc 	andi	r17,r2,255
 400f894:	8c40201c 	xori	r17,r17,128
 400f898:	8c7fe004 	addi	r17,r17,-128
 400f89c:	88800a98 	cmpnei	r2,r17,42
 400f8a0:	10000a1e 	bne	r2,zero,400f8cc <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 400f8a4:	e0bfe917 	ldw	r2,-92(fp)
 400f8a8:	10c00104 	addi	r3,r2,4
 400f8ac:	e0ffe915 	stw	r3,-92(fp)
 400f8b0:	10800017 	ldw	r2,0(r2)
 400f8b4:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 400f8b8:	e0bfbb17 	ldw	r2,-276(fp)
 400f8bc:	103f6f0e 	bge	r2,zero,400f67c <__alt_data_end+0xfc00f67c>
					prec = -1;
 400f8c0:	00bfffc4 	movi	r2,-1
 400f8c4:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 400f8c8:	003f6c06 	br	400f67c <__alt_data_end+0xfc00f67c>
			}
			n = 0;
 400f8cc:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 400f8d0:	00000906 	br	400f8f8 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 400f8d4:	80c002a4 	muli	r3,r16,10
 400f8d8:	88bff404 	addi	r2,r17,-48
 400f8dc:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 400f8e0:	a805883a 	mov	r2,r21
 400f8e4:	15400044 	addi	r21,r2,1
 400f8e8:	10800003 	ldbu	r2,0(r2)
 400f8ec:	14403fcc 	andi	r17,r2,255
 400f8f0:	8c40201c 	xori	r17,r17,128
 400f8f4:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 400f8f8:	88bff404 	addi	r2,r17,-48
 400f8fc:	108002b0 	cmpltui	r2,r2,10
 400f900:	103ff41e 	bne	r2,zero,400f8d4 <__alt_data_end+0xfc00f8d4>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 400f904:	8005883a 	mov	r2,r16
 400f908:	1000010e 	bge	r2,zero,400f910 <___vfiprintf_internal_r+0x4b8>
 400f90c:	00bfffc4 	movi	r2,-1
 400f910:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 400f914:	003f5f06 	br	400f694 <__alt_data_end+0xfc00f694>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 400f918:	9cc02014 	ori	r19,r19,128
			goto rflag;
 400f91c:	003f5706 	br	400f67c <__alt_data_end+0xfc00f67c>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 400f920:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 400f924:	80c002a4 	muli	r3,r16,10
 400f928:	88bff404 	addi	r2,r17,-48
 400f92c:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 400f930:	a805883a 	mov	r2,r21
 400f934:	15400044 	addi	r21,r2,1
 400f938:	10800003 	ldbu	r2,0(r2)
 400f93c:	14403fcc 	andi	r17,r2,255
 400f940:	8c40201c 	xori	r17,r17,128
 400f944:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 400f948:	88bff404 	addi	r2,r17,-48
 400f94c:	108002b0 	cmpltui	r2,r2,10
 400f950:	103ff41e 	bne	r2,zero,400f924 <__alt_data_end+0xfc00f924>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 400f954:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 400f958:	003f4e06 	br	400f694 <__alt_data_end+0xfc00f694>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 400f95c:	9cc01014 	ori	r19,r19,64
			goto rflag;
 400f960:	003f4606 	br	400f67c <__alt_data_end+0xfc00f67c>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 400f964:	a8800003 	ldbu	r2,0(r21)
 400f968:	10803fcc 	andi	r2,r2,255
 400f96c:	1080201c 	xori	r2,r2,128
 400f970:	10bfe004 	addi	r2,r2,-128
 400f974:	10801b18 	cmpnei	r2,r2,108
 400f978:	1000031e 	bne	r2,zero,400f988 <___vfiprintf_internal_r+0x530>
				fmt++;
 400f97c:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 400f980:	9cc00814 	ori	r19,r19,32
 400f984:	003f3d06 	br	400f67c <__alt_data_end+0xfc00f67c>
			} else
#endif
				flags |= LONGINT;
 400f988:	9cc00414 	ori	r19,r19,16
			goto rflag;
 400f98c:	003f3b06 	br	400f67c <__alt_data_end+0xfc00f67c>
		case 'q': /* extension */
			flags |= QUADINT;
 400f990:	9cc00814 	ori	r19,r19,32
			goto rflag;
 400f994:	003f3906 	br	400f67c <__alt_data_end+0xfc00f67c>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 400f998:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 400f99c:	e0bfe917 	ldw	r2,-92(fp)
 400f9a0:	10c00104 	addi	r3,r2,4
 400f9a4:	e0ffe915 	stw	r3,-92(fp)
 400f9a8:	10800017 	ldw	r2,0(r2)
 400f9ac:	a0800005 	stb	r2,0(r20)
				size = 1;
 400f9b0:	00800044 	movi	r2,1
 400f9b4:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 400f9b8:	e03fc705 	stb	zero,-228(fp)
			break;
 400f9bc:	0001c806 	br	40100e0 <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 400f9c0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 400f9c4:	9880080c 	andi	r2,r19,32
 400f9c8:	10000826 	beq	r2,zero,400f9ec <___vfiprintf_internal_r+0x594>
 400f9cc:	e13fe917 	ldw	r4,-92(fp)
 400f9d0:	20800204 	addi	r2,r4,8
 400f9d4:	e0bfe915 	stw	r2,-92(fp)
 400f9d8:	20800017 	ldw	r2,0(r4)
 400f9dc:	20c00117 	ldw	r3,4(r4)
 400f9e0:	e0bfea15 	stw	r2,-88(fp)
 400f9e4:	e0ffeb15 	stw	r3,-84(fp)
 400f9e8:	00001e06 	br	400fa64 <___vfiprintf_internal_r+0x60c>
 400f9ec:	9880040c 	andi	r2,r19,16
 400f9f0:	10000826 	beq	r2,zero,400fa14 <___vfiprintf_internal_r+0x5bc>
 400f9f4:	e0bfe917 	ldw	r2,-92(fp)
 400f9f8:	10c00104 	addi	r3,r2,4
 400f9fc:	e0ffe915 	stw	r3,-92(fp)
 400fa00:	10800017 	ldw	r2,0(r2)
 400fa04:	e0bfea15 	stw	r2,-88(fp)
 400fa08:	1005d7fa 	srai	r2,r2,31
 400fa0c:	e0bfeb15 	stw	r2,-84(fp)
 400fa10:	00001406 	br	400fa64 <___vfiprintf_internal_r+0x60c>
 400fa14:	9880100c 	andi	r2,r19,64
 400fa18:	10000b26 	beq	r2,zero,400fa48 <___vfiprintf_internal_r+0x5f0>
 400fa1c:	e0bfe917 	ldw	r2,-92(fp)
 400fa20:	10c00104 	addi	r3,r2,4
 400fa24:	e0ffe915 	stw	r3,-92(fp)
 400fa28:	10800017 	ldw	r2,0(r2)
 400fa2c:	10bfffcc 	andi	r2,r2,65535
 400fa30:	10a0001c 	xori	r2,r2,32768
 400fa34:	10a00004 	addi	r2,r2,-32768
 400fa38:	e0bfea15 	stw	r2,-88(fp)
 400fa3c:	1005d7fa 	srai	r2,r2,31
 400fa40:	e0bfeb15 	stw	r2,-84(fp)
 400fa44:	00000706 	br	400fa64 <___vfiprintf_internal_r+0x60c>
 400fa48:	e0bfe917 	ldw	r2,-92(fp)
 400fa4c:	10c00104 	addi	r3,r2,4
 400fa50:	e0ffe915 	stw	r3,-92(fp)
 400fa54:	10800017 	ldw	r2,0(r2)
 400fa58:	e0bfea15 	stw	r2,-88(fp)
 400fa5c:	1005d7fa 	srai	r2,r2,31
 400fa60:	e0bfeb15 	stw	r2,-84(fp)
 400fa64:	e0bfea17 	ldw	r2,-88(fp)
 400fa68:	e0bfbc15 	stw	r2,-272(fp)
 400fa6c:	e0ffeb17 	ldw	r3,-84(fp)
 400fa70:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 400fa74:	e0bfbc17 	ldw	r2,-272(fp)
 400fa78:	e0ffbd17 	ldw	r3,-268(fp)
 400fa7c:	18000d0e 	bge	r3,zero,400fab4 <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 400fa80:	000d883a 	mov	r6,zero
 400fa84:	000f883a 	mov	r7,zero
 400fa88:	e13fbc17 	ldw	r4,-272(fp)
 400fa8c:	e17fbd17 	ldw	r5,-268(fp)
 400fa90:	3105c83a 	sub	r2,r6,r4
 400fa94:	3091803a 	cmpltu	r8,r6,r2
 400fa98:	3947c83a 	sub	r3,r7,r5
 400fa9c:	1a09c83a 	sub	r4,r3,r8
 400faa0:	2007883a 	mov	r3,r4
 400faa4:	e0bfbc15 	stw	r2,-272(fp)
 400faa8:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 400faac:	00800b44 	movi	r2,45
 400fab0:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 400fab4:	00800044 	movi	r2,1
 400fab8:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 400fabc:	0000f806 	br	400fea0 <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 400fac0:	9880080c 	andi	r2,r19,32
 400fac4:	10000d26 	beq	r2,zero,400fafc <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 400fac8:	e0bfe917 	ldw	r2,-92(fp)
 400facc:	10c00104 	addi	r3,r2,4
 400fad0:	e0ffe915 	stw	r3,-92(fp)
 400fad4:	10800017 	ldw	r2,0(r2)
 400fad8:	e0ffb917 	ldw	r3,-284(fp)
 400fadc:	e0fff015 	stw	r3,-64(fp)
 400fae0:	1807d7fa 	srai	r3,r3,31
 400fae4:	e0fff115 	stw	r3,-60(fp)
 400fae8:	e0fff017 	ldw	r3,-64(fp)
 400faec:	10c00015 	stw	r3,0(r2)
 400faf0:	e0fff117 	ldw	r3,-60(fp)
 400faf4:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 400faf8:	0002c306 	br	4010608 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 400fafc:	9880040c 	andi	r2,r19,16
 400fb00:	10000726 	beq	r2,zero,400fb20 <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 400fb04:	e0bfe917 	ldw	r2,-92(fp)
 400fb08:	10c00104 	addi	r3,r2,4
 400fb0c:	e0ffe915 	stw	r3,-92(fp)
 400fb10:	10800017 	ldw	r2,0(r2)
 400fb14:	e0ffb917 	ldw	r3,-284(fp)
 400fb18:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 400fb1c:	0002ba06 	br	4010608 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 400fb20:	9880100c 	andi	r2,r19,64
 400fb24:	10000726 	beq	r2,zero,400fb44 <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 400fb28:	e0bfe917 	ldw	r2,-92(fp)
 400fb2c:	10c00104 	addi	r3,r2,4
 400fb30:	e0ffe915 	stw	r3,-92(fp)
 400fb34:	10800017 	ldw	r2,0(r2)
 400fb38:	e0ffb917 	ldw	r3,-284(fp)
 400fb3c:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 400fb40:	0002b106 	br	4010608 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 400fb44:	e0bfe917 	ldw	r2,-92(fp)
 400fb48:	10c00104 	addi	r3,r2,4
 400fb4c:	e0ffe915 	stw	r3,-92(fp)
 400fb50:	10800017 	ldw	r2,0(r2)
 400fb54:	e0ffb917 	ldw	r3,-284(fp)
 400fb58:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 400fb5c:	0002aa06 	br	4010608 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 400fb60:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 400fb64:	9880080c 	andi	r2,r19,32
 400fb68:	10000626 	beq	r2,zero,400fb84 <___vfiprintf_internal_r+0x72c>
 400fb6c:	e0bfe917 	ldw	r2,-92(fp)
 400fb70:	10c00204 	addi	r3,r2,8
 400fb74:	e0ffe915 	stw	r3,-92(fp)
 400fb78:	15800017 	ldw	r22,0(r2)
 400fb7c:	15c00117 	ldw	r23,4(r2)
 400fb80:	00001c06 	br	400fbf4 <___vfiprintf_internal_r+0x79c>
 400fb84:	9880040c 	andi	r2,r19,16
 400fb88:	10000726 	beq	r2,zero,400fba8 <___vfiprintf_internal_r+0x750>
 400fb8c:	e0bfe917 	ldw	r2,-92(fp)
 400fb90:	10c00104 	addi	r3,r2,4
 400fb94:	e0ffe915 	stw	r3,-92(fp)
 400fb98:	10800017 	ldw	r2,0(r2)
 400fb9c:	102d883a 	mov	r22,r2
 400fba0:	002f883a 	mov	r23,zero
 400fba4:	00001306 	br	400fbf4 <___vfiprintf_internal_r+0x79c>
 400fba8:	9880100c 	andi	r2,r19,64
 400fbac:	10000b26 	beq	r2,zero,400fbdc <___vfiprintf_internal_r+0x784>
 400fbb0:	e0bfe917 	ldw	r2,-92(fp)
 400fbb4:	10c00104 	addi	r3,r2,4
 400fbb8:	e0ffe915 	stw	r3,-92(fp)
 400fbbc:	10800017 	ldw	r2,0(r2)
 400fbc0:	e0bff215 	stw	r2,-56(fp)
 400fbc4:	e03ff315 	stw	zero,-52(fp)
 400fbc8:	e0bff217 	ldw	r2,-56(fp)
 400fbcc:	15bfffcc 	andi	r22,r2,65535
 400fbd0:	e0fff317 	ldw	r3,-52(fp)
 400fbd4:	182e703a 	and	r23,r3,zero
 400fbd8:	00000606 	br	400fbf4 <___vfiprintf_internal_r+0x79c>
 400fbdc:	e0bfe917 	ldw	r2,-92(fp)
 400fbe0:	10c00104 	addi	r3,r2,4
 400fbe4:	e0ffe915 	stw	r3,-92(fp)
 400fbe8:	10800017 	ldw	r2,0(r2)
 400fbec:	102d883a 	mov	r22,r2
 400fbf0:	002f883a 	mov	r23,zero
 400fbf4:	e5bfbc15 	stw	r22,-272(fp)
 400fbf8:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 400fbfc:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 400fc00:	0000a606 	br	400fe9c <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 400fc04:	e0bfe917 	ldw	r2,-92(fp)
 400fc08:	10c00104 	addi	r3,r2,4
 400fc0c:	e0ffe915 	stw	r3,-92(fp)
 400fc10:	10800017 	ldw	r2,0(r2)
 400fc14:	e0bfbc15 	stw	r2,-272(fp)
 400fc18:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 400fc1c:	00800084 	movi	r2,2
 400fc20:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 400fc24:	00810074 	movhi	r2,1025
 400fc28:	1094fd04 	addi	r2,r2,21492
 400fc2c:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 400fc30:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 400fc34:	00800c04 	movi	r2,48
 400fc38:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 400fc3c:	04401e04 	movi	r17,120
 400fc40:	00801e04 	movi	r2,120
 400fc44:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 400fc48:	00009406 	br	400fe9c <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 400fc4c:	e0bfe917 	ldw	r2,-92(fp)
 400fc50:	10c00104 	addi	r3,r2,4
 400fc54:	e0ffe915 	stw	r3,-92(fp)
 400fc58:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 400fc5c:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 400fc60:	a000081e 	bne	r20,zero,400fc84 <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 400fc64:	05010074 	movhi	r20,1025
 400fc68:	a5150204 	addi	r20,r20,21512
				size = ((unsigned) prec > 6U) ? 6 : prec;
 400fc6c:	e0bfbb17 	ldw	r2,-276(fp)
 400fc70:	10c001f0 	cmpltui	r3,r2,7
 400fc74:	1800011e 	bne	r3,zero,400fc7c <___vfiprintf_internal_r+0x824>
 400fc78:	00800184 	movi	r2,6
 400fc7c:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 400fc80:	00011706 	br	40100e0 <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 400fc84:	e0bfbb17 	ldw	r2,-276(fp)
 400fc88:	10001016 	blt	r2,zero,400fccc <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 400fc8c:	e0bfbb17 	ldw	r2,-276(fp)
 400fc90:	100d883a 	mov	r6,r2
 400fc94:	000b883a 	mov	r5,zero
 400fc98:	a009883a 	mov	r4,r20
 400fc9c:	400be440 	call	400be44 <memchr>
 400fca0:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 400fca4:	e0bfc617 	ldw	r2,-232(fp)
 400fca8:	10000526 	beq	r2,zero,400fcc0 <___vfiprintf_internal_r+0x868>
					size = p - cp;
 400fcac:	e0bfc617 	ldw	r2,-232(fp)
 400fcb0:	a007883a 	mov	r3,r20
 400fcb4:	10c5c83a 	sub	r2,r2,r3
 400fcb8:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 400fcbc:	00010806 	br	40100e0 <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 400fcc0:	e0bfbb17 	ldw	r2,-276(fp)
 400fcc4:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 400fcc8:	00010506 	br	40100e0 <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 400fccc:	a009883a 	mov	r4,r20
 400fcd0:	4004a780 	call	4004a78 <strlen>
 400fcd4:	e0bfc115 	stw	r2,-252(fp)

			break;
 400fcd8:	00010106 	br	40100e0 <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 400fcdc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 400fce0:	9880080c 	andi	r2,r19,32
 400fce4:	10000826 	beq	r2,zero,400fd08 <___vfiprintf_internal_r+0x8b0>
 400fce8:	e0bfe917 	ldw	r2,-92(fp)
 400fcec:	10c00204 	addi	r3,r2,8
 400fcf0:	e0ffe915 	stw	r3,-92(fp)
 400fcf4:	10c00017 	ldw	r3,0(r2)
 400fcf8:	e0ffec15 	stw	r3,-80(fp)
 400fcfc:	10c00117 	ldw	r3,4(r2)
 400fd00:	e0ffed15 	stw	r3,-76(fp)
 400fd04:	00001e06 	br	400fd80 <___vfiprintf_internal_r+0x928>
 400fd08:	9880040c 	andi	r2,r19,16
 400fd0c:	10000726 	beq	r2,zero,400fd2c <___vfiprintf_internal_r+0x8d4>
 400fd10:	e0bfe917 	ldw	r2,-92(fp)
 400fd14:	10c00104 	addi	r3,r2,4
 400fd18:	e0ffe915 	stw	r3,-92(fp)
 400fd1c:	10800017 	ldw	r2,0(r2)
 400fd20:	e0bfec15 	stw	r2,-80(fp)
 400fd24:	e03fed15 	stw	zero,-76(fp)
 400fd28:	00001506 	br	400fd80 <___vfiprintf_internal_r+0x928>
 400fd2c:	9880100c 	andi	r2,r19,64
 400fd30:	10000d26 	beq	r2,zero,400fd68 <___vfiprintf_internal_r+0x910>
 400fd34:	e0bfe917 	ldw	r2,-92(fp)
 400fd38:	10c00104 	addi	r3,r2,4
 400fd3c:	e0ffe915 	stw	r3,-92(fp)
 400fd40:	10800017 	ldw	r2,0(r2)
 400fd44:	e0bff415 	stw	r2,-48(fp)
 400fd48:	e03ff515 	stw	zero,-44(fp)
 400fd4c:	e0bff417 	ldw	r2,-48(fp)
 400fd50:	10bfffcc 	andi	r2,r2,65535
 400fd54:	e0bfec15 	stw	r2,-80(fp)
 400fd58:	e0fff517 	ldw	r3,-44(fp)
 400fd5c:	1806703a 	and	r3,r3,zero
 400fd60:	e0ffed15 	stw	r3,-76(fp)
 400fd64:	00000606 	br	400fd80 <___vfiprintf_internal_r+0x928>
 400fd68:	e0bfe917 	ldw	r2,-92(fp)
 400fd6c:	10c00104 	addi	r3,r2,4
 400fd70:	e0ffe915 	stw	r3,-92(fp)
 400fd74:	10800017 	ldw	r2,0(r2)
 400fd78:	e0bfec15 	stw	r2,-80(fp)
 400fd7c:	e03fed15 	stw	zero,-76(fp)
 400fd80:	e0bfec17 	ldw	r2,-80(fp)
 400fd84:	e0bfbc15 	stw	r2,-272(fp)
 400fd88:	e0ffed17 	ldw	r3,-76(fp)
 400fd8c:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 400fd90:	00800044 	movi	r2,1
 400fd94:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 400fd98:	00004006 	br	400fe9c <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 400fd9c:	00810074 	movhi	r2,1025
 400fda0:	10950404 	addi	r2,r2,21520
 400fda4:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 400fda8:	00000306 	br	400fdb8 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 400fdac:	00810074 	movhi	r2,1025
 400fdb0:	1094fd04 	addi	r2,r2,21492
 400fdb4:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 400fdb8:	9880080c 	andi	r2,r19,32
 400fdbc:	10000826 	beq	r2,zero,400fde0 <___vfiprintf_internal_r+0x988>
 400fdc0:	e0bfe917 	ldw	r2,-92(fp)
 400fdc4:	10c00204 	addi	r3,r2,8
 400fdc8:	e0ffe915 	stw	r3,-92(fp)
 400fdcc:	10c00017 	ldw	r3,0(r2)
 400fdd0:	e0ffee15 	stw	r3,-72(fp)
 400fdd4:	10c00117 	ldw	r3,4(r2)
 400fdd8:	e0ffef15 	stw	r3,-68(fp)
 400fddc:	00001e06 	br	400fe58 <___vfiprintf_internal_r+0xa00>
 400fde0:	9880040c 	andi	r2,r19,16
 400fde4:	10000726 	beq	r2,zero,400fe04 <___vfiprintf_internal_r+0x9ac>
 400fde8:	e0bfe917 	ldw	r2,-92(fp)
 400fdec:	10c00104 	addi	r3,r2,4
 400fdf0:	e0ffe915 	stw	r3,-92(fp)
 400fdf4:	10800017 	ldw	r2,0(r2)
 400fdf8:	e0bfee15 	stw	r2,-72(fp)
 400fdfc:	e03fef15 	stw	zero,-68(fp)
 400fe00:	00001506 	br	400fe58 <___vfiprintf_internal_r+0xa00>
 400fe04:	9880100c 	andi	r2,r19,64
 400fe08:	10000d26 	beq	r2,zero,400fe40 <___vfiprintf_internal_r+0x9e8>
 400fe0c:	e0bfe917 	ldw	r2,-92(fp)
 400fe10:	10c00104 	addi	r3,r2,4
 400fe14:	e0ffe915 	stw	r3,-92(fp)
 400fe18:	10800017 	ldw	r2,0(r2)
 400fe1c:	e0bff615 	stw	r2,-40(fp)
 400fe20:	e03ff715 	stw	zero,-36(fp)
 400fe24:	e0bff617 	ldw	r2,-40(fp)
 400fe28:	10bfffcc 	andi	r2,r2,65535
 400fe2c:	e0bfee15 	stw	r2,-72(fp)
 400fe30:	e0fff717 	ldw	r3,-36(fp)
 400fe34:	1806703a 	and	r3,r3,zero
 400fe38:	e0ffef15 	stw	r3,-68(fp)
 400fe3c:	00000606 	br	400fe58 <___vfiprintf_internal_r+0xa00>
 400fe40:	e0bfe917 	ldw	r2,-92(fp)
 400fe44:	10c00104 	addi	r3,r2,4
 400fe48:	e0ffe915 	stw	r3,-92(fp)
 400fe4c:	10800017 	ldw	r2,0(r2)
 400fe50:	e0bfee15 	stw	r2,-72(fp)
 400fe54:	e03fef15 	stw	zero,-68(fp)
 400fe58:	e0bfee17 	ldw	r2,-72(fp)
 400fe5c:	e0bfbc15 	stw	r2,-272(fp)
 400fe60:	e0ffef17 	ldw	r3,-68(fp)
 400fe64:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 400fe68:	00800084 	movi	r2,2
 400fe6c:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 400fe70:	9880004c 	andi	r2,r19,1
 400fe74:	10000926 	beq	r2,zero,400fe9c <___vfiprintf_internal_r+0xa44>
 400fe78:	e0bfbc17 	ldw	r2,-272(fp)
 400fe7c:	e0ffbd17 	ldw	r3,-268(fp)
 400fe80:	10c4b03a 	or	r2,r2,r3
 400fe84:	10000526 	beq	r2,zero,400fe9c <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 400fe88:	00800c04 	movi	r2,48
 400fe8c:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 400fe90:	8805883a 	mov	r2,r17
 400fe94:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 400fe98:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 400fe9c:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 400fea0:	e0bfbb17 	ldw	r2,-276(fp)
 400fea4:	e0bfbf15 	stw	r2,-260(fp)
 400fea8:	e0bfbf17 	ldw	r2,-260(fp)
 400feac:	10000216 	blt	r2,zero,400feb8 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 400feb0:	00bfdfc4 	movi	r2,-129
 400feb4:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 400feb8:	e53fdb04 	addi	r20,fp,-148
 400febc:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 400fec0:	e0bfbc17 	ldw	r2,-272(fp)
 400fec4:	e0ffbd17 	ldw	r3,-268(fp)
 400fec8:	10c4b03a 	or	r2,r2,r3
 400fecc:	1000021e 	bne	r2,zero,400fed8 <___vfiprintf_internal_r+0xa80>
 400fed0:	e0bfbb17 	ldw	r2,-276(fp)
 400fed4:	10006c26 	beq	r2,zero,4010088 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 400fed8:	e0bfbe03 	ldbu	r2,-264(fp)
 400fedc:	10c00060 	cmpeqi	r3,r2,1
 400fee0:	1800211e 	bne	r3,zero,400ff68 <___vfiprintf_internal_r+0xb10>
 400fee4:	10c000a0 	cmpeqi	r3,r2,2
 400fee8:	1800491e 	bne	r3,zero,4010010 <___vfiprintf_internal_r+0xbb8>
 400feec:	10005d1e 	bne	r2,zero,4010064 <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 400fef0:	a53fffc4 	addi	r20,r20,-1
 400fef4:	e0bfbc17 	ldw	r2,-272(fp)
 400fef8:	108001cc 	andi	r2,r2,7
 400fefc:	10800c04 	addi	r2,r2,48
 400ff00:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 400ff04:	e0bfbd17 	ldw	r2,-268(fp)
 400ff08:	1004977a 	slli	r2,r2,29
 400ff0c:	e0ffbc17 	ldw	r3,-272(fp)
 400ff10:	1806d0fa 	srli	r3,r3,3
 400ff14:	1884b03a 	or	r2,r3,r2
 400ff18:	e0bfbc15 	stw	r2,-272(fp)
 400ff1c:	e0bfbd17 	ldw	r2,-268(fp)
 400ff20:	1004d0fa 	srli	r2,r2,3
 400ff24:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 400ff28:	e0bfbc17 	ldw	r2,-272(fp)
 400ff2c:	e0ffbd17 	ldw	r3,-268(fp)
 400ff30:	10c4b03a 	or	r2,r2,r3
 400ff34:	103fee1e 	bne	r2,zero,400fef0 <__alt_data_end+0xfc00fef0>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 400ff38:	9880004c 	andi	r2,r19,1
 400ff3c:	10005026 	beq	r2,zero,4010080 <___vfiprintf_internal_r+0xc28>
 400ff40:	a0800003 	ldbu	r2,0(r20)
 400ff44:	10803fcc 	andi	r2,r2,255
 400ff48:	1080201c 	xori	r2,r2,128
 400ff4c:	10bfe004 	addi	r2,r2,-128
 400ff50:	10800c20 	cmpeqi	r2,r2,48
 400ff54:	10004a1e 	bne	r2,zero,4010080 <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 400ff58:	a53fffc4 	addi	r20,r20,-1
 400ff5c:	00800c04 	movi	r2,48
 400ff60:	a0800005 	stb	r2,0(r20)
					break;
 400ff64:	00004606 	br	4010080 <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 400ff68:	e0bfbd17 	ldw	r2,-268(fp)
 400ff6c:	10000a1e 	bne	r2,zero,400ff98 <___vfiprintf_internal_r+0xb40>
 400ff70:	e0bfbd17 	ldw	r2,-268(fp)
 400ff74:	1000031e 	bne	r2,zero,400ff84 <___vfiprintf_internal_r+0xb2c>
 400ff78:	e0bfbc17 	ldw	r2,-272(fp)
 400ff7c:	108002a8 	cmpgeui	r2,r2,10
 400ff80:	1000051e 	bne	r2,zero,400ff98 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 400ff84:	a53fffc4 	addi	r20,r20,-1
 400ff88:	e0bfbc17 	ldw	r2,-272(fp)
 400ff8c:	10800c04 	addi	r2,r2,48
 400ff90:	a0800005 	stb	r2,0(r20)
						break;
 400ff94:	00003b06 	br	4010084 <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 400ff98:	a53fffc4 	addi	r20,r20,-1
 400ff9c:	e0bfbc17 	ldw	r2,-272(fp)
 400ffa0:	e0ffbd17 	ldw	r3,-268(fp)
 400ffa4:	01800284 	movi	r6,10
 400ffa8:	000f883a 	mov	r7,zero
 400ffac:	1009883a 	mov	r4,r2
 400ffb0:	180b883a 	mov	r5,r3
 400ffb4:	40119480 	call	4011948 <__umoddi3>
 400ffb8:	1009883a 	mov	r4,r2
 400ffbc:	180b883a 	mov	r5,r3
 400ffc0:	2005883a 	mov	r2,r4
 400ffc4:	2807883a 	mov	r3,r5
 400ffc8:	10800c04 	addi	r2,r2,48
 400ffcc:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 400ffd0:	e0bfbc17 	ldw	r2,-272(fp)
 400ffd4:	e0ffbd17 	ldw	r3,-268(fp)
 400ffd8:	01800284 	movi	r6,10
 400ffdc:	000f883a 	mov	r7,zero
 400ffe0:	1009883a 	mov	r4,r2
 400ffe4:	180b883a 	mov	r5,r3
 400ffe8:	40113d00 	call	40113d0 <__udivdi3>
 400ffec:	1009883a 	mov	r4,r2
 400fff0:	180b883a 	mov	r5,r3
 400fff4:	e13fbc15 	stw	r4,-272(fp)
 400fff8:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 400fffc:	e0bfbc17 	ldw	r2,-272(fp)
 4010000:	e0ffbd17 	ldw	r3,-268(fp)
 4010004:	10c4b03a 	or	r2,r2,r3
 4010008:	103fe31e 	bne	r2,zero,400ff98 <__alt_data_end+0xfc00ff98>
					break;
 401000c:	00001d06 	br	4010084 <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 4010010:	a53fffc4 	addi	r20,r20,-1
 4010014:	e0bfbc17 	ldw	r2,-272(fp)
 4010018:	108003cc 	andi	r2,r2,15
 401001c:	e0ffc217 	ldw	r3,-248(fp)
 4010020:	1885883a 	add	r2,r3,r2
 4010024:	10800003 	ldbu	r2,0(r2)
 4010028:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 401002c:	e0bfbd17 	ldw	r2,-268(fp)
 4010030:	1004973a 	slli	r2,r2,28
 4010034:	e0ffbc17 	ldw	r3,-272(fp)
 4010038:	1806d13a 	srli	r3,r3,4
 401003c:	1884b03a 	or	r2,r3,r2
 4010040:	e0bfbc15 	stw	r2,-272(fp)
 4010044:	e0bfbd17 	ldw	r2,-268(fp)
 4010048:	1004d13a 	srli	r2,r2,4
 401004c:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 4010050:	e0bfbc17 	ldw	r2,-272(fp)
 4010054:	e0ffbd17 	ldw	r3,-268(fp)
 4010058:	10c4b03a 	or	r2,r2,r3
 401005c:	103fec1e 	bne	r2,zero,4010010 <__alt_data_end+0xfc010010>
					break;
 4010060:	00000806 	br	4010084 <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 4010064:	05010074 	movhi	r20,1025
 4010068:	a5150904 	addi	r20,r20,21540
					size = strlen (cp);
 401006c:	a009883a 	mov	r4,r20
 4010070:	4004a780 	call	4004a78 <strlen>
 4010074:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 4010078:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 401007c:	00001806 	br	40100e0 <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 4010080:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 4010084:	00000706 	br	40100a4 <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 4010088:	e0bfbe03 	ldbu	r2,-264(fp)
 401008c:	1000051e 	bne	r2,zero,40100a4 <___vfiprintf_internal_r+0xc4c>
 4010090:	9880004c 	andi	r2,r19,1
 4010094:	10000326 	beq	r2,zero,40100a4 <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 4010098:	a53fffc4 	addi	r20,r20,-1
 401009c:	00800c04 	movi	r2,48
 40100a0:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 40100a4:	e0bfdb04 	addi	r2,fp,-148
 40100a8:	10800a04 	addi	r2,r2,40
 40100ac:	1007883a 	mov	r3,r2
 40100b0:	a005883a 	mov	r2,r20
 40100b4:	1885c83a 	sub	r2,r3,r2
 40100b8:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 40100bc:	00000806 	br	40100e0 <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 40100c0:	88015426 	beq	r17,zero,4010614 <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 40100c4:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 40100c8:	8805883a 	mov	r2,r17
 40100cc:	a0800005 	stb	r2,0(r20)
			size = 1;
 40100d0:	00800044 	movi	r2,1
 40100d4:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 40100d8:	e03fc705 	stb	zero,-228(fp)
			break;
 40100dc:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 40100e0:	e0ffbf17 	ldw	r3,-260(fp)
 40100e4:	e0bfc117 	ldw	r2,-252(fp)
 40100e8:	10c0010e 	bge	r2,r3,40100f0 <___vfiprintf_internal_r+0xc98>
 40100ec:	1805883a 	mov	r2,r3
 40100f0:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 40100f4:	e0bfc703 	ldbu	r2,-228(fp)
 40100f8:	10803fcc 	andi	r2,r2,255
 40100fc:	1080201c 	xori	r2,r2,128
 4010100:	10bfe004 	addi	r2,r2,-128
 4010104:	10000326 	beq	r2,zero,4010114 <___vfiprintf_internal_r+0xcbc>
			realsz++;
 4010108:	e0bfc017 	ldw	r2,-256(fp)
 401010c:	10800044 	addi	r2,r2,1
 4010110:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 4010114:	9880008c 	andi	r2,r19,2
 4010118:	10000326 	beq	r2,zero,4010128 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 401011c:	e0bfc017 	ldw	r2,-256(fp)
 4010120:	10800084 	addi	r2,r2,2
 4010124:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 4010128:	9880210c 	andi	r2,r19,132
 401012c:	1000351e 	bne	r2,zero,4010204 <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 4010130:	e0ffba17 	ldw	r3,-280(fp)
 4010134:	e0bfc017 	ldw	r2,-256(fp)
 4010138:	18a1c83a 	sub	r16,r3,r2
 401013c:	0400310e 	bge	zero,r16,4010204 <___vfiprintf_internal_r+0xdac>
 4010140:	00001706 	br	40101a0 <___vfiprintf_internal_r+0xd48>
 4010144:	00810074 	movhi	r2,1025
 4010148:	10950f84 	addi	r2,r2,21566
 401014c:	90800015 	stw	r2,0(r18)
 4010150:	00800404 	movi	r2,16
 4010154:	90800115 	stw	r2,4(r18)
 4010158:	e0bfca17 	ldw	r2,-216(fp)
 401015c:	10800404 	addi	r2,r2,16
 4010160:	e0bfca15 	stw	r2,-216(fp)
 4010164:	94800204 	addi	r18,r18,8
 4010168:	e0bfc917 	ldw	r2,-220(fp)
 401016c:	10800044 	addi	r2,r2,1
 4010170:	e0bfc915 	stw	r2,-220(fp)
 4010174:	e0bfc917 	ldw	r2,-220(fp)
 4010178:	10800210 	cmplti	r2,r2,8
 401017c:	1000071e 	bne	r2,zero,401019c <___vfiprintf_internal_r+0xd44>
 4010180:	e0bfc804 	addi	r2,fp,-224
 4010184:	100d883a 	mov	r6,r2
 4010188:	e17fe717 	ldw	r5,-100(fp)
 401018c:	e13fe617 	ldw	r4,-104(fp)
 4010190:	400f1dc0 	call	400f1dc <__sprint_r>
 4010194:	10012d1e 	bne	r2,zero,401064c <___vfiprintf_internal_r+0x11f4>
 4010198:	e4bfcb04 	addi	r18,fp,-212
 401019c:	843ffc04 	addi	r16,r16,-16
 40101a0:	80800448 	cmpgei	r2,r16,17
 40101a4:	103fe71e 	bne	r2,zero,4010144 <__alt_data_end+0xfc010144>
 40101a8:	00810074 	movhi	r2,1025
 40101ac:	10950f84 	addi	r2,r2,21566
 40101b0:	90800015 	stw	r2,0(r18)
 40101b4:	8005883a 	mov	r2,r16
 40101b8:	90800115 	stw	r2,4(r18)
 40101bc:	e0bfca17 	ldw	r2,-216(fp)
 40101c0:	8007883a 	mov	r3,r16
 40101c4:	10c5883a 	add	r2,r2,r3
 40101c8:	e0bfca15 	stw	r2,-216(fp)
 40101cc:	94800204 	addi	r18,r18,8
 40101d0:	e0bfc917 	ldw	r2,-220(fp)
 40101d4:	10800044 	addi	r2,r2,1
 40101d8:	e0bfc915 	stw	r2,-220(fp)
 40101dc:	e0bfc917 	ldw	r2,-220(fp)
 40101e0:	10800210 	cmplti	r2,r2,8
 40101e4:	1000071e 	bne	r2,zero,4010204 <___vfiprintf_internal_r+0xdac>
 40101e8:	e0bfc804 	addi	r2,fp,-224
 40101ec:	100d883a 	mov	r6,r2
 40101f0:	e17fe717 	ldw	r5,-100(fp)
 40101f4:	e13fe617 	ldw	r4,-104(fp)
 40101f8:	400f1dc0 	call	400f1dc <__sprint_r>
 40101fc:	1001151e 	bne	r2,zero,4010654 <___vfiprintf_internal_r+0x11fc>
 4010200:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 4010204:	e0bfc703 	ldbu	r2,-228(fp)
 4010208:	10803fcc 	andi	r2,r2,255
 401020c:	1080201c 	xori	r2,r2,128
 4010210:	10bfe004 	addi	r2,r2,-128
 4010214:	10001526 	beq	r2,zero,401026c <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 4010218:	e0bfc704 	addi	r2,fp,-228
 401021c:	90800015 	stw	r2,0(r18)
 4010220:	00800044 	movi	r2,1
 4010224:	90800115 	stw	r2,4(r18)
 4010228:	e0bfca17 	ldw	r2,-216(fp)
 401022c:	10800044 	addi	r2,r2,1
 4010230:	e0bfca15 	stw	r2,-216(fp)
 4010234:	94800204 	addi	r18,r18,8
 4010238:	e0bfc917 	ldw	r2,-220(fp)
 401023c:	10800044 	addi	r2,r2,1
 4010240:	e0bfc915 	stw	r2,-220(fp)
 4010244:	e0bfc917 	ldw	r2,-220(fp)
 4010248:	10800210 	cmplti	r2,r2,8
 401024c:	1000071e 	bne	r2,zero,401026c <___vfiprintf_internal_r+0xe14>
 4010250:	e0bfc804 	addi	r2,fp,-224
 4010254:	100d883a 	mov	r6,r2
 4010258:	e17fe717 	ldw	r5,-100(fp)
 401025c:	e13fe617 	ldw	r4,-104(fp)
 4010260:	400f1dc0 	call	400f1dc <__sprint_r>
 4010264:	1000fd1e 	bne	r2,zero,401065c <___vfiprintf_internal_r+0x1204>
 4010268:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 401026c:	9880008c 	andi	r2,r19,2
 4010270:	10001526 	beq	r2,zero,40102c8 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 4010274:	e0bfe504 	addi	r2,fp,-108
 4010278:	90800015 	stw	r2,0(r18)
 401027c:	00800084 	movi	r2,2
 4010280:	90800115 	stw	r2,4(r18)
 4010284:	e0bfca17 	ldw	r2,-216(fp)
 4010288:	10800084 	addi	r2,r2,2
 401028c:	e0bfca15 	stw	r2,-216(fp)
 4010290:	94800204 	addi	r18,r18,8
 4010294:	e0bfc917 	ldw	r2,-220(fp)
 4010298:	10800044 	addi	r2,r2,1
 401029c:	e0bfc915 	stw	r2,-220(fp)
 40102a0:	e0bfc917 	ldw	r2,-220(fp)
 40102a4:	10800210 	cmplti	r2,r2,8
 40102a8:	1000071e 	bne	r2,zero,40102c8 <___vfiprintf_internal_r+0xe70>
 40102ac:	e0bfc804 	addi	r2,fp,-224
 40102b0:	100d883a 	mov	r6,r2
 40102b4:	e17fe717 	ldw	r5,-100(fp)
 40102b8:	e13fe617 	ldw	r4,-104(fp)
 40102bc:	400f1dc0 	call	400f1dc <__sprint_r>
 40102c0:	1000e81e 	bne	r2,zero,4010664 <___vfiprintf_internal_r+0x120c>
 40102c4:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 40102c8:	9880210c 	andi	r2,r19,132
 40102cc:	10802018 	cmpnei	r2,r2,128
 40102d0:	1000351e 	bne	r2,zero,40103a8 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 40102d4:	e0ffba17 	ldw	r3,-280(fp)
 40102d8:	e0bfc017 	ldw	r2,-256(fp)
 40102dc:	18a1c83a 	sub	r16,r3,r2
 40102e0:	0400310e 	bge	zero,r16,40103a8 <___vfiprintf_internal_r+0xf50>
 40102e4:	00001706 	br	4010344 <___vfiprintf_internal_r+0xeec>
 40102e8:	00810074 	movhi	r2,1025
 40102ec:	10951384 	addi	r2,r2,21582
 40102f0:	90800015 	stw	r2,0(r18)
 40102f4:	00800404 	movi	r2,16
 40102f8:	90800115 	stw	r2,4(r18)
 40102fc:	e0bfca17 	ldw	r2,-216(fp)
 4010300:	10800404 	addi	r2,r2,16
 4010304:	e0bfca15 	stw	r2,-216(fp)
 4010308:	94800204 	addi	r18,r18,8
 401030c:	e0bfc917 	ldw	r2,-220(fp)
 4010310:	10800044 	addi	r2,r2,1
 4010314:	e0bfc915 	stw	r2,-220(fp)
 4010318:	e0bfc917 	ldw	r2,-220(fp)
 401031c:	10800210 	cmplti	r2,r2,8
 4010320:	1000071e 	bne	r2,zero,4010340 <___vfiprintf_internal_r+0xee8>
 4010324:	e0bfc804 	addi	r2,fp,-224
 4010328:	100d883a 	mov	r6,r2
 401032c:	e17fe717 	ldw	r5,-100(fp)
 4010330:	e13fe617 	ldw	r4,-104(fp)
 4010334:	400f1dc0 	call	400f1dc <__sprint_r>
 4010338:	1000cc1e 	bne	r2,zero,401066c <___vfiprintf_internal_r+0x1214>
 401033c:	e4bfcb04 	addi	r18,fp,-212
 4010340:	843ffc04 	addi	r16,r16,-16
 4010344:	80800448 	cmpgei	r2,r16,17
 4010348:	103fe71e 	bne	r2,zero,40102e8 <__alt_data_end+0xfc0102e8>
 401034c:	00810074 	movhi	r2,1025
 4010350:	10951384 	addi	r2,r2,21582
 4010354:	90800015 	stw	r2,0(r18)
 4010358:	8005883a 	mov	r2,r16
 401035c:	90800115 	stw	r2,4(r18)
 4010360:	e0bfca17 	ldw	r2,-216(fp)
 4010364:	8007883a 	mov	r3,r16
 4010368:	10c5883a 	add	r2,r2,r3
 401036c:	e0bfca15 	stw	r2,-216(fp)
 4010370:	94800204 	addi	r18,r18,8
 4010374:	e0bfc917 	ldw	r2,-220(fp)
 4010378:	10800044 	addi	r2,r2,1
 401037c:	e0bfc915 	stw	r2,-220(fp)
 4010380:	e0bfc917 	ldw	r2,-220(fp)
 4010384:	10800210 	cmplti	r2,r2,8
 4010388:	1000071e 	bne	r2,zero,40103a8 <___vfiprintf_internal_r+0xf50>
 401038c:	e0bfc804 	addi	r2,fp,-224
 4010390:	100d883a 	mov	r6,r2
 4010394:	e17fe717 	ldw	r5,-100(fp)
 4010398:	e13fe617 	ldw	r4,-104(fp)
 401039c:	400f1dc0 	call	400f1dc <__sprint_r>
 40103a0:	1000b41e 	bne	r2,zero,4010674 <___vfiprintf_internal_r+0x121c>
 40103a4:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 40103a8:	e0ffbf17 	ldw	r3,-260(fp)
 40103ac:	e0bfc117 	ldw	r2,-252(fp)
 40103b0:	18a1c83a 	sub	r16,r3,r2
 40103b4:	0400310e 	bge	zero,r16,401047c <___vfiprintf_internal_r+0x1024>
 40103b8:	00001706 	br	4010418 <___vfiprintf_internal_r+0xfc0>
 40103bc:	00810074 	movhi	r2,1025
 40103c0:	10951384 	addi	r2,r2,21582
 40103c4:	90800015 	stw	r2,0(r18)
 40103c8:	00800404 	movi	r2,16
 40103cc:	90800115 	stw	r2,4(r18)
 40103d0:	e0bfca17 	ldw	r2,-216(fp)
 40103d4:	10800404 	addi	r2,r2,16
 40103d8:	e0bfca15 	stw	r2,-216(fp)
 40103dc:	94800204 	addi	r18,r18,8
 40103e0:	e0bfc917 	ldw	r2,-220(fp)
 40103e4:	10800044 	addi	r2,r2,1
 40103e8:	e0bfc915 	stw	r2,-220(fp)
 40103ec:	e0bfc917 	ldw	r2,-220(fp)
 40103f0:	10800210 	cmplti	r2,r2,8
 40103f4:	1000071e 	bne	r2,zero,4010414 <___vfiprintf_internal_r+0xfbc>
 40103f8:	e0bfc804 	addi	r2,fp,-224
 40103fc:	100d883a 	mov	r6,r2
 4010400:	e17fe717 	ldw	r5,-100(fp)
 4010404:	e13fe617 	ldw	r4,-104(fp)
 4010408:	400f1dc0 	call	400f1dc <__sprint_r>
 401040c:	10009b1e 	bne	r2,zero,401067c <___vfiprintf_internal_r+0x1224>
 4010410:	e4bfcb04 	addi	r18,fp,-212
 4010414:	843ffc04 	addi	r16,r16,-16
 4010418:	80800448 	cmpgei	r2,r16,17
 401041c:	103fe71e 	bne	r2,zero,40103bc <__alt_data_end+0xfc0103bc>
 4010420:	00810074 	movhi	r2,1025
 4010424:	10951384 	addi	r2,r2,21582
 4010428:	90800015 	stw	r2,0(r18)
 401042c:	8005883a 	mov	r2,r16
 4010430:	90800115 	stw	r2,4(r18)
 4010434:	e0bfca17 	ldw	r2,-216(fp)
 4010438:	8007883a 	mov	r3,r16
 401043c:	10c5883a 	add	r2,r2,r3
 4010440:	e0bfca15 	stw	r2,-216(fp)
 4010444:	94800204 	addi	r18,r18,8
 4010448:	e0bfc917 	ldw	r2,-220(fp)
 401044c:	10800044 	addi	r2,r2,1
 4010450:	e0bfc915 	stw	r2,-220(fp)
 4010454:	e0bfc917 	ldw	r2,-220(fp)
 4010458:	10800210 	cmplti	r2,r2,8
 401045c:	1000071e 	bne	r2,zero,401047c <___vfiprintf_internal_r+0x1024>
 4010460:	e0bfc804 	addi	r2,fp,-224
 4010464:	100d883a 	mov	r6,r2
 4010468:	e17fe717 	ldw	r5,-100(fp)
 401046c:	e13fe617 	ldw	r4,-104(fp)
 4010470:	400f1dc0 	call	400f1dc <__sprint_r>
 4010474:	1000831e 	bne	r2,zero,4010684 <___vfiprintf_internal_r+0x122c>
 4010478:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 401047c:	95000015 	stw	r20,0(r18)
 4010480:	e0bfc117 	ldw	r2,-252(fp)
 4010484:	90800115 	stw	r2,4(r18)
 4010488:	e0ffca17 	ldw	r3,-216(fp)
 401048c:	e0bfc117 	ldw	r2,-252(fp)
 4010490:	1885883a 	add	r2,r3,r2
 4010494:	e0bfca15 	stw	r2,-216(fp)
 4010498:	94800204 	addi	r18,r18,8
 401049c:	e0bfc917 	ldw	r2,-220(fp)
 40104a0:	10800044 	addi	r2,r2,1
 40104a4:	e0bfc915 	stw	r2,-220(fp)
 40104a8:	e0bfc917 	ldw	r2,-220(fp)
 40104ac:	10800210 	cmplti	r2,r2,8
 40104b0:	1000071e 	bne	r2,zero,40104d0 <___vfiprintf_internal_r+0x1078>
 40104b4:	e0bfc804 	addi	r2,fp,-224
 40104b8:	100d883a 	mov	r6,r2
 40104bc:	e17fe717 	ldw	r5,-100(fp)
 40104c0:	e13fe617 	ldw	r4,-104(fp)
 40104c4:	400f1dc0 	call	400f1dc <__sprint_r>
 40104c8:	1000701e 	bne	r2,zero,401068c <___vfiprintf_internal_r+0x1234>
 40104cc:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 40104d0:	9880010c 	andi	r2,r19,4
 40104d4:	10003526 	beq	r2,zero,40105ac <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 40104d8:	e0ffba17 	ldw	r3,-280(fp)
 40104dc:	e0bfc017 	ldw	r2,-256(fp)
 40104e0:	18a1c83a 	sub	r16,r3,r2
 40104e4:	0400310e 	bge	zero,r16,40105ac <___vfiprintf_internal_r+0x1154>
 40104e8:	00001706 	br	4010548 <___vfiprintf_internal_r+0x10f0>
 40104ec:	00810074 	movhi	r2,1025
 40104f0:	10950f84 	addi	r2,r2,21566
 40104f4:	90800015 	stw	r2,0(r18)
 40104f8:	00800404 	movi	r2,16
 40104fc:	90800115 	stw	r2,4(r18)
 4010500:	e0bfca17 	ldw	r2,-216(fp)
 4010504:	10800404 	addi	r2,r2,16
 4010508:	e0bfca15 	stw	r2,-216(fp)
 401050c:	94800204 	addi	r18,r18,8
 4010510:	e0bfc917 	ldw	r2,-220(fp)
 4010514:	10800044 	addi	r2,r2,1
 4010518:	e0bfc915 	stw	r2,-220(fp)
 401051c:	e0bfc917 	ldw	r2,-220(fp)
 4010520:	10800210 	cmplti	r2,r2,8
 4010524:	1000071e 	bne	r2,zero,4010544 <___vfiprintf_internal_r+0x10ec>
 4010528:	e0bfc804 	addi	r2,fp,-224
 401052c:	100d883a 	mov	r6,r2
 4010530:	e17fe717 	ldw	r5,-100(fp)
 4010534:	e13fe617 	ldw	r4,-104(fp)
 4010538:	400f1dc0 	call	400f1dc <__sprint_r>
 401053c:	1000551e 	bne	r2,zero,4010694 <___vfiprintf_internal_r+0x123c>
 4010540:	e4bfcb04 	addi	r18,fp,-212
 4010544:	843ffc04 	addi	r16,r16,-16
 4010548:	80800448 	cmpgei	r2,r16,17
 401054c:	103fe71e 	bne	r2,zero,40104ec <__alt_data_end+0xfc0104ec>
 4010550:	00810074 	movhi	r2,1025
 4010554:	10950f84 	addi	r2,r2,21566
 4010558:	90800015 	stw	r2,0(r18)
 401055c:	8005883a 	mov	r2,r16
 4010560:	90800115 	stw	r2,4(r18)
 4010564:	e0bfca17 	ldw	r2,-216(fp)
 4010568:	8007883a 	mov	r3,r16
 401056c:	10c5883a 	add	r2,r2,r3
 4010570:	e0bfca15 	stw	r2,-216(fp)
 4010574:	94800204 	addi	r18,r18,8
 4010578:	e0bfc917 	ldw	r2,-220(fp)
 401057c:	10800044 	addi	r2,r2,1
 4010580:	e0bfc915 	stw	r2,-220(fp)
 4010584:	e0bfc917 	ldw	r2,-220(fp)
 4010588:	10800210 	cmplti	r2,r2,8
 401058c:	1000071e 	bne	r2,zero,40105ac <___vfiprintf_internal_r+0x1154>
 4010590:	e0bfc804 	addi	r2,fp,-224
 4010594:	100d883a 	mov	r6,r2
 4010598:	e17fe717 	ldw	r5,-100(fp)
 401059c:	e13fe617 	ldw	r4,-104(fp)
 40105a0:	400f1dc0 	call	400f1dc <__sprint_r>
 40105a4:	10003d1e 	bne	r2,zero,401069c <___vfiprintf_internal_r+0x1244>
 40105a8:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 40105ac:	e0ffba17 	ldw	r3,-280(fp)
 40105b0:	e0bfc017 	ldw	r2,-256(fp)
 40105b4:	10c0010e 	bge	r2,r3,40105bc <___vfiprintf_internal_r+0x1164>
 40105b8:	1805883a 	mov	r2,r3
 40105bc:	e0ffb917 	ldw	r3,-284(fp)
 40105c0:	1885883a 	add	r2,r3,r2
 40105c4:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 40105c8:	e0bfca17 	ldw	r2,-216(fp)
 40105cc:	10000626 	beq	r2,zero,40105e8 <___vfiprintf_internal_r+0x1190>
 40105d0:	e0bfc804 	addi	r2,fp,-224
 40105d4:	100d883a 	mov	r6,r2
 40105d8:	e17fe717 	ldw	r5,-100(fp)
 40105dc:	e13fe617 	ldw	r4,-104(fp)
 40105e0:	400f1dc0 	call	400f1dc <__sprint_r>
 40105e4:	10002f1e 	bne	r2,zero,40106a4 <___vfiprintf_internal_r+0x124c>
 40105e8:	e03fc915 	stw	zero,-220(fp)
 40105ec:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 40105f0:	e0bfc317 	ldw	r2,-244(fp)
 40105f4:	103bea26 	beq	r2,zero,400f5a0 <__alt_data_end+0xfc00f5a0>
			_free_r (data, malloc_buf);
 40105f8:	e17fc317 	ldw	r5,-244(fp)
 40105fc:	e13fe617 	ldw	r4,-104(fp)
 4010600:	4009c200 	call	4009c20 <_free_r>
			malloc_buf = NULL;
 4010604:	e03fc315 	stw	zero,-244(fp)
		}
	}
 4010608:	003be506 	br	400f5a0 <__alt_data_end+0xfc00f5a0>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 401060c:	0001883a 	nop
 4010610:	00000106 	br	4010618 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 4010614:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 4010618:	e0bfca17 	ldw	r2,-216(fp)
 401061c:	10000626 	beq	r2,zero,4010638 <___vfiprintf_internal_r+0x11e0>
 4010620:	e0bfc804 	addi	r2,fp,-224
 4010624:	100d883a 	mov	r6,r2
 4010628:	e17fe717 	ldw	r5,-100(fp)
 401062c:	e13fe617 	ldw	r4,-104(fp)
 4010630:	400f1dc0 	call	400f1dc <__sprint_r>
 4010634:	10001d1e 	bne	r2,zero,40106ac <___vfiprintf_internal_r+0x1254>
 4010638:	e03fc915 	stw	zero,-220(fp)
 401063c:	e4bfcb04 	addi	r18,fp,-212
 4010640:	00001b06 	br	40106b0 <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 4010644:	0001883a 	nop
 4010648:	00001906 	br	40106b0 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 401064c:	0001883a 	nop
 4010650:	00001706 	br	40106b0 <___vfiprintf_internal_r+0x1258>
 4010654:	0001883a 	nop
 4010658:	00001506 	br	40106b0 <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 401065c:	0001883a 	nop
 4010660:	00001306 	br	40106b0 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 4010664:	0001883a 	nop
 4010668:	00001106 	br	40106b0 <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 401066c:	0001883a 	nop
 4010670:	00000f06 	br	40106b0 <___vfiprintf_internal_r+0x1258>
 4010674:	0001883a 	nop
 4010678:	00000d06 	br	40106b0 <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 401067c:	0001883a 	nop
 4010680:	00000b06 	br	40106b0 <___vfiprintf_internal_r+0x1258>
 4010684:	0001883a 	nop
 4010688:	00000906 	br	40106b0 <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 401068c:	0001883a 	nop
 4010690:	00000706 	br	40106b0 <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 4010694:	0001883a 	nop
 4010698:	00000506 	br	40106b0 <___vfiprintf_internal_r+0x1258>
 401069c:	0001883a 	nop
 40106a0:	00000306 	br	40106b0 <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 40106a4:	0001883a 	nop
 40106a8:	00000106 	br	40106b0 <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 40106ac:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 40106b0:	e0bfc317 	ldw	r2,-244(fp)
 40106b4:	10000326 	beq	r2,zero,40106c4 <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 40106b8:	e17fc317 	ldw	r5,-244(fp)
 40106bc:	e13fe617 	ldw	r4,-104(fp)
 40106c0:	4009c200 	call	4009c20 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 40106c4:	e0bfe717 	ldw	r2,-100(fp)
 40106c8:	1080030b 	ldhu	r2,12(r2)
 40106cc:	10bfffcc 	andi	r2,r2,65535
 40106d0:	1080100c 	andi	r2,r2,64
 40106d4:	1000021e 	bne	r2,zero,40106e0 <___vfiprintf_internal_r+0x1288>
 40106d8:	e0bfb917 	ldw	r2,-284(fp)
 40106dc:	00000206 	br	40106e8 <___vfiprintf_internal_r+0x1290>
 40106e0:	00bfffc4 	movi	r2,-1
 40106e4:	0001883a 	nop
	/* NOTREACHED */
}
 40106e8:	e6fff804 	addi	sp,fp,-32
 40106ec:	dfc00917 	ldw	ra,36(sp)
 40106f0:	df000817 	ldw	fp,32(sp)
 40106f4:	ddc00717 	ldw	r23,28(sp)
 40106f8:	dd800617 	ldw	r22,24(sp)
 40106fc:	dd400517 	ldw	r21,20(sp)
 4010700:	dd000417 	ldw	r20,16(sp)
 4010704:	dcc00317 	ldw	r19,12(sp)
 4010708:	dc800217 	ldw	r18,8(sp)
 401070c:	dc400117 	ldw	r17,4(sp)
 4010710:	dc000017 	ldw	r16,0(sp)
 4010714:	dec00a04 	addi	sp,sp,40
 4010718:	f800283a 	ret

0401071c <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 401071c:	defff904 	addi	sp,sp,-28
 4010720:	dfc00615 	stw	ra,24(sp)
 4010724:	df000515 	stw	fp,20(sp)
 4010728:	dc800415 	stw	r18,16(sp)
 401072c:	dc400315 	stw	r17,12(sp)
 4010730:	dc000215 	stw	r16,8(sp)
 4010734:	df000504 	addi	fp,sp,20
 4010738:	e13ffc15 	stw	r4,-16(fp)
 401073c:	2825883a 	mov	r18,r5
 4010740:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 4010744:	e0bffc17 	ldw	r2,-16(fp)
 4010748:	e0bffb15 	stw	r2,-20(fp)
 401074c:	e0bffb17 	ldw	r2,-20(fp)
 4010750:	10000526 	beq	r2,zero,4010768 <__swbuf_r+0x4c>
 4010754:	e0bffb17 	ldw	r2,-20(fp)
 4010758:	10800e17 	ldw	r2,56(r2)
 401075c:	1000021e 	bne	r2,zero,4010768 <__swbuf_r+0x4c>
 4010760:	e13ffb17 	ldw	r4,-20(fp)
 4010764:	4009a000 	call	4009a00 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 4010768:	80800617 	ldw	r2,24(r16)
 401076c:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 4010770:	8080030b 	ldhu	r2,12(r16)
 4010774:	10bfffcc 	andi	r2,r2,65535
 4010778:	1080020c 	andi	r2,r2,8
 401077c:	10000226 	beq	r2,zero,4010788 <__swbuf_r+0x6c>
 4010780:	80800417 	ldw	r2,16(r16)
 4010784:	1000061e 	bne	r2,zero,40107a0 <__swbuf_r+0x84>
 4010788:	800b883a 	mov	r5,r16
 401078c:	e13ffc17 	ldw	r4,-16(fp)
 4010790:	40071b00 	call	40071b0 <__swsetup_r>
 4010794:	10000226 	beq	r2,zero,40107a0 <__swbuf_r+0x84>
    return EOF;
 4010798:	00bfffc4 	movi	r2,-1
 401079c:	00003106 	br	4010864 <__swbuf_r+0x148>
  c = (unsigned char) c;
 40107a0:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 40107a4:	8080030b 	ldhu	r2,12(r16)
 40107a8:	10bfffcc 	andi	r2,r2,65535
 40107ac:	1088000c 	andi	r2,r2,8192
 40107b0:	1000071e 	bne	r2,zero,40107d0 <__swbuf_r+0xb4>
 40107b4:	8080030b 	ldhu	r2,12(r16)
 40107b8:	10880014 	ori	r2,r2,8192
 40107bc:	8080030d 	sth	r2,12(r16)
 40107c0:	80c01917 	ldw	r3,100(r16)
 40107c4:	00b7ffc4 	movi	r2,-8193
 40107c8:	1884703a 	and	r2,r3,r2
 40107cc:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 40107d0:	80800017 	ldw	r2,0(r16)
 40107d4:	1007883a 	mov	r3,r2
 40107d8:	80800417 	ldw	r2,16(r16)
 40107dc:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 40107e0:	80800517 	ldw	r2,20(r16)
 40107e4:	88800716 	blt	r17,r2,4010804 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 40107e8:	800b883a 	mov	r5,r16
 40107ec:	e13ffc17 	ldw	r4,-16(fp)
 40107f0:	40095800 	call	4009580 <_fflush_r>
 40107f4:	10000226 	beq	r2,zero,4010800 <__swbuf_r+0xe4>
	return EOF;
 40107f8:	00bfffc4 	movi	r2,-1
 40107fc:	00001906 	br	4010864 <__swbuf_r+0x148>
      n = 0;
 4010800:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 4010804:	80800217 	ldw	r2,8(r16)
 4010808:	10bfffc4 	addi	r2,r2,-1
 401080c:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 4010810:	80800017 	ldw	r2,0(r16)
 4010814:	10c00044 	addi	r3,r2,1
 4010818:	80c00015 	stw	r3,0(r16)
 401081c:	9007883a 	mov	r3,r18
 4010820:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 4010824:	8c400044 	addi	r17,r17,1
 4010828:	80800517 	ldw	r2,20(r16)
 401082c:	88800626 	beq	r17,r2,4010848 <__swbuf_r+0x12c>
 4010830:	8080030b 	ldhu	r2,12(r16)
 4010834:	10bfffcc 	andi	r2,r2,65535
 4010838:	1080004c 	andi	r2,r2,1
 401083c:	10000826 	beq	r2,zero,4010860 <__swbuf_r+0x144>
 4010840:	90800298 	cmpnei	r2,r18,10
 4010844:	1000061e 	bne	r2,zero,4010860 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 4010848:	800b883a 	mov	r5,r16
 401084c:	e13ffc17 	ldw	r4,-16(fp)
 4010850:	40095800 	call	4009580 <_fflush_r>
 4010854:	10000226 	beq	r2,zero,4010860 <__swbuf_r+0x144>
      return EOF;
 4010858:	00bfffc4 	movi	r2,-1
 401085c:	00000106 	br	4010864 <__swbuf_r+0x148>
  return c;
 4010860:	9005883a 	mov	r2,r18
}
 4010864:	e6fffd04 	addi	sp,fp,-12
 4010868:	dfc00417 	ldw	ra,16(sp)
 401086c:	df000317 	ldw	fp,12(sp)
 4010870:	dc800217 	ldw	r18,8(sp)
 4010874:	dc400117 	ldw	r17,4(sp)
 4010878:	dc000017 	ldw	r16,0(sp)
 401087c:	dec00504 	addi	sp,sp,20
 4010880:	f800283a 	ret

04010884 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 4010884:	defffe04 	addi	sp,sp,-8
 4010888:	dfc00115 	stw	ra,4(sp)
 401088c:	df000015 	stw	fp,0(sp)
 4010890:	d839883a 	mov	fp,sp
 4010894:	2007883a 	mov	r3,r4
 4010898:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 401089c:	d0a00917 	ldw	r2,-32732(gp)
 40108a0:	200d883a 	mov	r6,r4
 40108a4:	180b883a 	mov	r5,r3
 40108a8:	1009883a 	mov	r4,r2
 40108ac:	401071c0 	call	401071c <__swbuf_r>
}
 40108b0:	e037883a 	mov	sp,fp
 40108b4:	dfc00117 	ldw	ra,4(sp)
 40108b8:	df000017 	ldw	fp,0(sp)
 40108bc:	dec00204 	addi	sp,sp,8
 40108c0:	f800283a 	ret

040108c4 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 40108c4:	defff904 	addi	sp,sp,-28
 40108c8:	dfc00615 	stw	ra,24(sp)
 40108cc:	df000515 	stw	fp,20(sp)
 40108d0:	df000504 	addi	fp,sp,20
 40108d4:	e13ffc15 	stw	r4,-16(fp)
 40108d8:	e17ffd15 	stw	r5,-12(fp)
 40108dc:	e1bffe15 	stw	r6,-8(fp)
 40108e0:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 40108e4:	d026e615 	stw	zero,-25704(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 40108e8:	e1bfff17 	ldw	r6,-4(fp)
 40108ec:	e17ffe17 	ldw	r5,-8(fp)
 40108f0:	e13ffd17 	ldw	r4,-12(fp)
 40108f4:	4012c680 	call	4012c68 <write>
 40108f8:	e0bffb15 	stw	r2,-20(fp)
 40108fc:	e0bffb17 	ldw	r2,-20(fp)
 4010900:	10bfffd8 	cmpnei	r2,r2,-1
 4010904:	1000051e 	bne	r2,zero,401091c <_write_r+0x58>
 4010908:	d0a6e617 	ldw	r2,-25704(gp)
 401090c:	10000326 	beq	r2,zero,401091c <_write_r+0x58>
    ptr->_errno = errno;
 4010910:	d0e6e617 	ldw	r3,-25704(gp)
 4010914:	e0bffc17 	ldw	r2,-16(fp)
 4010918:	10c00015 	stw	r3,0(r2)
  return ret;
 401091c:	e0bffb17 	ldw	r2,-20(fp)
}
 4010920:	e037883a 	mov	sp,fp
 4010924:	dfc00117 	ldw	ra,4(sp)
 4010928:	df000017 	ldw	fp,0(sp)
 401092c:	dec00204 	addi	sp,sp,8
 4010930:	f800283a 	ret

04010934 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 4010934:	defffb04 	addi	sp,sp,-20
 4010938:	dfc00415 	stw	ra,16(sp)
 401093c:	df000315 	stw	fp,12(sp)
 4010940:	df000304 	addi	fp,sp,12
 4010944:	e13ffe15 	stw	r4,-8(fp)
 4010948:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 401094c:	d026e615 	stw	zero,-25704(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 4010950:	e13fff17 	ldw	r4,-4(fp)
 4010954:	40120c00 	call	40120c0 <close>
 4010958:	e0bffd15 	stw	r2,-12(fp)
 401095c:	e0bffd17 	ldw	r2,-12(fp)
 4010960:	10bfffd8 	cmpnei	r2,r2,-1
 4010964:	1000051e 	bne	r2,zero,401097c <_close_r+0x48>
 4010968:	d0a6e617 	ldw	r2,-25704(gp)
 401096c:	10000326 	beq	r2,zero,401097c <_close_r+0x48>
    ptr->_errno = errno;
 4010970:	d0e6e617 	ldw	r3,-25704(gp)
 4010974:	e0bffe17 	ldw	r2,-8(fp)
 4010978:	10c00015 	stw	r3,0(r2)
  return ret;
 401097c:	e0bffd17 	ldw	r2,-12(fp)
}
 4010980:	e037883a 	mov	sp,fp
 4010984:	dfc00117 	ldw	ra,4(sp)
 4010988:	df000017 	ldw	fp,0(sp)
 401098c:	dec00204 	addi	sp,sp,8
 4010990:	f800283a 	ret

04010994 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 4010994:	defff504 	addi	sp,sp,-44
 4010998:	dfc00a15 	stw	ra,40(sp)
 401099c:	df000915 	stw	fp,36(sp)
 40109a0:	df000904 	addi	fp,sp,36
 40109a4:	e13ffd15 	stw	r4,-12(fp)
 40109a8:	e17ffe15 	stw	r5,-8(fp)
 40109ac:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 40109b0:	e0fffe17 	ldw	r3,-8(fp)
 40109b4:	e0bfff17 	ldw	r2,-4(fp)
 40109b8:	1885383a 	mul	r2,r3,r2
 40109bc:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 40109c0:	e17ff817 	ldw	r5,-32(fp)
 40109c4:	e13ffd17 	ldw	r4,-12(fp)
 40109c8:	400b2c80 	call	400b2c8 <_malloc_r>
 40109cc:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 40109d0:	e0bff917 	ldw	r2,-28(fp)
 40109d4:	1000021e 	bne	r2,zero,40109e0 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 40109d8:	0005883a 	mov	r2,zero
 40109dc:	00004106 	br	4010ae4 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 40109e0:	e0bff917 	ldw	r2,-28(fp)
 40109e4:	10bffe04 	addi	r2,r2,-8
 40109e8:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 40109ec:	e0bffa17 	ldw	r2,-24(fp)
 40109f0:	10c00117 	ldw	r3,4(r2)
 40109f4:	00bfff04 	movi	r2,-4
 40109f8:	1884703a 	and	r2,r3,r2
 40109fc:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 4010a00:	e0bffb17 	ldw	r2,-20(fp)
 4010a04:	10bfff04 	addi	r2,r2,-4
 4010a08:	e0bffc15 	stw	r2,-16(fp)
 4010a0c:	e0bffc17 	ldw	r2,-16(fp)
 4010a10:	10800968 	cmpgeui	r2,r2,37
 4010a14:	10002e1e 	bne	r2,zero,4010ad0 <_calloc_r+0x13c>
 4010a18:	e0bff917 	ldw	r2,-28(fp)
 4010a1c:	e0bff715 	stw	r2,-36(fp)
 4010a20:	e0bffc17 	ldw	r2,-16(fp)
 4010a24:	10800530 	cmpltui	r2,r2,20
 4010a28:	10001e1e 	bne	r2,zero,4010aa4 <_calloc_r+0x110>
 4010a2c:	e0bff717 	ldw	r2,-36(fp)
 4010a30:	10c00104 	addi	r3,r2,4
 4010a34:	e0fff715 	stw	r3,-36(fp)
 4010a38:	10000015 	stw	zero,0(r2)
 4010a3c:	e0bff717 	ldw	r2,-36(fp)
 4010a40:	10c00104 	addi	r3,r2,4
 4010a44:	e0fff715 	stw	r3,-36(fp)
 4010a48:	10000015 	stw	zero,0(r2)
 4010a4c:	e0bffc17 	ldw	r2,-16(fp)
 4010a50:	10800730 	cmpltui	r2,r2,28
 4010a54:	1000131e 	bne	r2,zero,4010aa4 <_calloc_r+0x110>
 4010a58:	e0bff717 	ldw	r2,-36(fp)
 4010a5c:	10c00104 	addi	r3,r2,4
 4010a60:	e0fff715 	stw	r3,-36(fp)
 4010a64:	10000015 	stw	zero,0(r2)
 4010a68:	e0bff717 	ldw	r2,-36(fp)
 4010a6c:	10c00104 	addi	r3,r2,4
 4010a70:	e0fff715 	stw	r3,-36(fp)
 4010a74:	10000015 	stw	zero,0(r2)
 4010a78:	e0bffc17 	ldw	r2,-16(fp)
 4010a7c:	10800930 	cmpltui	r2,r2,36
 4010a80:	1000081e 	bne	r2,zero,4010aa4 <_calloc_r+0x110>
 4010a84:	e0bff717 	ldw	r2,-36(fp)
 4010a88:	10c00104 	addi	r3,r2,4
 4010a8c:	e0fff715 	stw	r3,-36(fp)
 4010a90:	10000015 	stw	zero,0(r2)
 4010a94:	e0bff717 	ldw	r2,-36(fp)
 4010a98:	10c00104 	addi	r3,r2,4
 4010a9c:	e0fff715 	stw	r3,-36(fp)
 4010aa0:	10000015 	stw	zero,0(r2)
 4010aa4:	e0bff717 	ldw	r2,-36(fp)
 4010aa8:	10c00104 	addi	r3,r2,4
 4010aac:	e0fff715 	stw	r3,-36(fp)
 4010ab0:	10000015 	stw	zero,0(r2)
 4010ab4:	e0bff717 	ldw	r2,-36(fp)
 4010ab8:	10c00104 	addi	r3,r2,4
 4010abc:	e0fff715 	stw	r3,-36(fp)
 4010ac0:	10000015 	stw	zero,0(r2)
 4010ac4:	e0bff717 	ldw	r2,-36(fp)
 4010ac8:	10000015 	stw	zero,0(r2)
 4010acc:	00000406 	br	4010ae0 <_calloc_r+0x14c>
 4010ad0:	e1bffc17 	ldw	r6,-16(fp)
 4010ad4:	000b883a 	mov	r5,zero
 4010ad8:	e13ff917 	ldw	r4,-28(fp)
 4010adc:	400c3900 	call	400c390 <memset>
    return mem;
 4010ae0:	e0bff917 	ldw	r2,-28(fp)
  }
}
 4010ae4:	e037883a 	mov	sp,fp
 4010ae8:	dfc00117 	ldw	ra,4(sp)
 4010aec:	df000017 	ldw	fp,0(sp)
 4010af0:	dec00204 	addi	sp,sp,8
 4010af4:	f800283a 	ret

04010af8 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 4010af8:	defffa04 	addi	sp,sp,-24
 4010afc:	dfc00515 	stw	ra,20(sp)
 4010b00:	df000415 	stw	fp,16(sp)
 4010b04:	dc000315 	stw	r16,12(sp)
 4010b08:	df000404 	addi	fp,sp,16
 4010b0c:	e13ffe15 	stw	r4,-8(fp)
 4010b10:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 4010b14:	8000021e 	bne	r16,zero,4010b20 <_fclose_r+0x28>
    return (0);			/* on NULL */
 4010b18:	0005883a 	mov	r2,zero
 4010b1c:	00003b06 	br	4010c0c <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 4010b20:	e0bffe17 	ldw	r2,-8(fp)
 4010b24:	e0bffd15 	stw	r2,-12(fp)
 4010b28:	e0bffd17 	ldw	r2,-12(fp)
 4010b2c:	10000526 	beq	r2,zero,4010b44 <_fclose_r+0x4c>
 4010b30:	e0bffd17 	ldw	r2,-12(fp)
 4010b34:	10800e17 	ldw	r2,56(r2)
 4010b38:	1000021e 	bne	r2,zero,4010b44 <_fclose_r+0x4c>
 4010b3c:	e13ffd17 	ldw	r4,-12(fp)
 4010b40:	4009a000 	call	4009a00 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 4010b44:	8080030b 	ldhu	r2,12(r16)
 4010b48:	10bfffcc 	andi	r2,r2,65535
 4010b4c:	10a0001c 	xori	r2,r2,32768
 4010b50:	10a00004 	addi	r2,r2,-32768
 4010b54:	1000021e 	bne	r2,zero,4010b60 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 4010b58:	0005883a 	mov	r2,zero
 4010b5c:	00002b06 	br	4010c0c <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 4010b60:	800b883a 	mov	r5,r16
 4010b64:	e13ffe17 	ldw	r4,-8(fp)
 4010b68:	400927c0 	call	400927c <__sflush_r>
 4010b6c:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 4010b70:	80800b17 	ldw	r2,44(r16)
 4010b74:	10000826 	beq	r2,zero,4010b98 <_fclose_r+0xa0>
 4010b78:	80800b17 	ldw	r2,44(r16)
 4010b7c:	80c00717 	ldw	r3,28(r16)
 4010b80:	180b883a 	mov	r5,r3
 4010b84:	e13ffe17 	ldw	r4,-8(fp)
 4010b88:	103ee83a 	callr	r2
 4010b8c:	1000020e 	bge	r2,zero,4010b98 <_fclose_r+0xa0>
    r = EOF;
 4010b90:	00bfffc4 	movi	r2,-1
 4010b94:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 4010b98:	8080030b 	ldhu	r2,12(r16)
 4010b9c:	10bfffcc 	andi	r2,r2,65535
 4010ba0:	1080200c 	andi	r2,r2,128
 4010ba4:	10000426 	beq	r2,zero,4010bb8 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 4010ba8:	80800417 	ldw	r2,16(r16)
 4010bac:	100b883a 	mov	r5,r2
 4010bb0:	e13ffe17 	ldw	r4,-8(fp)
 4010bb4:	4009c200 	call	4009c20 <_free_r>
  if (HASUB (fp))
 4010bb8:	80800c17 	ldw	r2,48(r16)
 4010bbc:	10000826 	beq	r2,zero,4010be0 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 4010bc0:	80c00c17 	ldw	r3,48(r16)
 4010bc4:	80801004 	addi	r2,r16,64
 4010bc8:	18800426 	beq	r3,r2,4010bdc <_fclose_r+0xe4>
 4010bcc:	80800c17 	ldw	r2,48(r16)
 4010bd0:	100b883a 	mov	r5,r2
 4010bd4:	e13ffe17 	ldw	r4,-8(fp)
 4010bd8:	4009c200 	call	4009c20 <_free_r>
 4010bdc:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 4010be0:	80801117 	ldw	r2,68(r16)
 4010be4:	10000526 	beq	r2,zero,4010bfc <_fclose_r+0x104>
    FREELB (rptr, fp);
 4010be8:	80801117 	ldw	r2,68(r16)
 4010bec:	100b883a 	mov	r5,r2
 4010bf0:	e13ffe17 	ldw	r4,-8(fp)
 4010bf4:	4009c200 	call	4009c20 <_free_r>
 4010bf8:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 4010bfc:	4009ad80 	call	4009ad8 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 4010c00:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 4010c04:	4009af80 	call	4009af8 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 4010c08:	e0bffc17 	ldw	r2,-16(fp)
}
 4010c0c:	e6ffff04 	addi	sp,fp,-4
 4010c10:	dfc00217 	ldw	ra,8(sp)
 4010c14:	df000117 	ldw	fp,4(sp)
 4010c18:	dc000017 	ldw	r16,0(sp)
 4010c1c:	dec00304 	addi	sp,sp,12
 4010c20:	f800283a 	ret

04010c24 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 4010c24:	defffe04 	addi	sp,sp,-8
 4010c28:	dfc00115 	stw	ra,4(sp)
 4010c2c:	df000015 	stw	fp,0(sp)
 4010c30:	d839883a 	mov	fp,sp
 4010c34:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 4010c38:	d0a00917 	ldw	r2,-32732(gp)
 4010c3c:	180b883a 	mov	r5,r3
 4010c40:	1009883a 	mov	r4,r2
 4010c44:	4010af80 	call	4010af8 <_fclose_r>
}
 4010c48:	e037883a 	mov	sp,fp
 4010c4c:	dfc00117 	ldw	ra,4(sp)
 4010c50:	df000017 	ldw	fp,0(sp)
 4010c54:	dec00204 	addi	sp,sp,8
 4010c58:	f800283a 	ret

04010c5c <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 4010c5c:	defff804 	addi	sp,sp,-32
 4010c60:	dfc00715 	stw	ra,28(sp)
 4010c64:	df000615 	stw	fp,24(sp)
 4010c68:	df000604 	addi	fp,sp,24
 4010c6c:	e13ffd15 	stw	r4,-12(fp)
 4010c70:	e17ffe15 	stw	r5,-8(fp)
 4010c74:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 4010c78:	400abec0 	call	400abec <__locale_mb_cur_max>
 4010c7c:	10800058 	cmpnei	r2,r2,1
 4010c80:	10000a1e 	bne	r2,zero,4010cac <__fputwc+0x50>
 4010c84:	e0bffe17 	ldw	r2,-8(fp)
 4010c88:	0080080e 	bge	zero,r2,4010cac <__fputwc+0x50>
 4010c8c:	e0bffe17 	ldw	r2,-8(fp)
 4010c90:	10804008 	cmpgei	r2,r2,256
 4010c94:	1000051e 	bne	r2,zero,4010cac <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 4010c98:	e0bffe17 	ldw	r2,-8(fp)
 4010c9c:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 4010ca0:	00800044 	movi	r2,1
 4010ca4:	e0bffb15 	stw	r2,-20(fp)
 4010ca8:	00001406 	br	4010cfc <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 4010cac:	e0bfff17 	ldw	r2,-4(fp)
 4010cb0:	10c01704 	addi	r3,r2,92
 4010cb4:	e0bffc04 	addi	r2,fp,-16
 4010cb8:	180f883a 	mov	r7,r3
 4010cbc:	e1bffe17 	ldw	r6,-8(fp)
 4010cc0:	100b883a 	mov	r5,r2
 4010cc4:	e13ffd17 	ldw	r4,-12(fp)
 4010cc8:	40110e80 	call	40110e8 <_wcrtomb_r>
 4010ccc:	e0bffb15 	stw	r2,-20(fp)
 4010cd0:	e0bffb17 	ldw	r2,-20(fp)
 4010cd4:	10bfffd8 	cmpnei	r2,r2,-1
 4010cd8:	1000081e 	bne	r2,zero,4010cfc <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 4010cdc:	e0bfff17 	ldw	r2,-4(fp)
 4010ce0:	1080030b 	ldhu	r2,12(r2)
 4010ce4:	10801014 	ori	r2,r2,64
 4010ce8:	1007883a 	mov	r3,r2
 4010cec:	e0bfff17 	ldw	r2,-4(fp)
 4010cf0:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 4010cf4:	00bfffc4 	movi	r2,-1
 4010cf8:	00005006 	br	4010e3c <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 4010cfc:	e03ffa15 	stw	zero,-24(fp)
 4010d00:	00004a06 	br	4010e2c <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 4010d04:	e0bfff17 	ldw	r2,-4(fp)
 4010d08:	10800217 	ldw	r2,8(r2)
 4010d0c:	10ffffc4 	addi	r3,r2,-1
 4010d10:	e0bfff17 	ldw	r2,-4(fp)
 4010d14:	10c00215 	stw	r3,8(r2)
 4010d18:	e0bfff17 	ldw	r2,-4(fp)
 4010d1c:	10800217 	ldw	r2,8(r2)
 4010d20:	10002c0e 	bge	r2,zero,4010dd4 <__fputwc+0x178>
 4010d24:	e0bfff17 	ldw	r2,-4(fp)
 4010d28:	10c00217 	ldw	r3,8(r2)
 4010d2c:	e0bfff17 	ldw	r2,-4(fp)
 4010d30:	10800617 	ldw	r2,24(r2)
 4010d34:	18801c16 	blt	r3,r2,4010da8 <__fputwc+0x14c>
 4010d38:	e0bfff17 	ldw	r2,-4(fp)
 4010d3c:	10800017 	ldw	r2,0(r2)
 4010d40:	e13ffc04 	addi	r4,fp,-16
 4010d44:	e0fffa17 	ldw	r3,-24(fp)
 4010d48:	20c7883a 	add	r3,r4,r3
 4010d4c:	18c00003 	ldbu	r3,0(r3)
 4010d50:	10c00005 	stb	r3,0(r2)
 4010d54:	e0bfff17 	ldw	r2,-4(fp)
 4010d58:	10800017 	ldw	r2,0(r2)
 4010d5c:	10800003 	ldbu	r2,0(r2)
 4010d60:	10803fcc 	andi	r2,r2,255
 4010d64:	108002a0 	cmpeqi	r2,r2,10
 4010d68:	1000091e 	bne	r2,zero,4010d90 <__fputwc+0x134>
 4010d6c:	e0bfff17 	ldw	r2,-4(fp)
 4010d70:	10800017 	ldw	r2,0(r2)
 4010d74:	11000044 	addi	r4,r2,1
 4010d78:	e0ffff17 	ldw	r3,-4(fp)
 4010d7c:	19000015 	stw	r4,0(r3)
 4010d80:	10800003 	ldbu	r2,0(r2)
 4010d84:	10803fcc 	andi	r2,r2,255
 4010d88:	10bfffe0 	cmpeqi	r2,r2,-1
 4010d8c:	00002006 	br	4010e10 <__fputwc+0x1b4>
 4010d90:	e1bfff17 	ldw	r6,-4(fp)
 4010d94:	01400284 	movi	r5,10
 4010d98:	e13ffd17 	ldw	r4,-12(fp)
 4010d9c:	401071c0 	call	401071c <__swbuf_r>
 4010da0:	10bfffe0 	cmpeqi	r2,r2,-1
 4010da4:	00001a06 	br	4010e10 <__fputwc+0x1b4>
 4010da8:	e0fffc04 	addi	r3,fp,-16
 4010dac:	e0bffa17 	ldw	r2,-24(fp)
 4010db0:	1885883a 	add	r2,r3,r2
 4010db4:	10800003 	ldbu	r2,0(r2)
 4010db8:	10803fcc 	andi	r2,r2,255
 4010dbc:	e1bfff17 	ldw	r6,-4(fp)
 4010dc0:	100b883a 	mov	r5,r2
 4010dc4:	e13ffd17 	ldw	r4,-12(fp)
 4010dc8:	401071c0 	call	401071c <__swbuf_r>
 4010dcc:	10bfffe0 	cmpeqi	r2,r2,-1
 4010dd0:	00000f06 	br	4010e10 <__fputwc+0x1b4>
 4010dd4:	e0bfff17 	ldw	r2,-4(fp)
 4010dd8:	10800017 	ldw	r2,0(r2)
 4010ddc:	e13ffc04 	addi	r4,fp,-16
 4010de0:	e0fffa17 	ldw	r3,-24(fp)
 4010de4:	20c7883a 	add	r3,r4,r3
 4010de8:	18c00003 	ldbu	r3,0(r3)
 4010dec:	10c00005 	stb	r3,0(r2)
 4010df0:	e0bfff17 	ldw	r2,-4(fp)
 4010df4:	10800017 	ldw	r2,0(r2)
 4010df8:	11000044 	addi	r4,r2,1
 4010dfc:	e0ffff17 	ldw	r3,-4(fp)
 4010e00:	19000015 	stw	r4,0(r3)
 4010e04:	10800003 	ldbu	r2,0(r2)
 4010e08:	10803fcc 	andi	r2,r2,255
 4010e0c:	10bfffe0 	cmpeqi	r2,r2,-1
 4010e10:	10803fcc 	andi	r2,r2,255
 4010e14:	10000226 	beq	r2,zero,4010e20 <__fputwc+0x1c4>
      return WEOF;
 4010e18:	00bfffc4 	movi	r2,-1
 4010e1c:	00000706 	br	4010e3c <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 4010e20:	e0bffa17 	ldw	r2,-24(fp)
 4010e24:	10800044 	addi	r2,r2,1
 4010e28:	e0bffa15 	stw	r2,-24(fp)
 4010e2c:	e0fffa17 	ldw	r3,-24(fp)
 4010e30:	e0bffb17 	ldw	r2,-20(fp)
 4010e34:	18bfb336 	bltu	r3,r2,4010d04 <__alt_data_end+0xfc010d04>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 4010e38:	e0bffe17 	ldw	r2,-8(fp)
}
 4010e3c:	e037883a 	mov	sp,fp
 4010e40:	dfc00117 	ldw	ra,4(sp)
 4010e44:	df000017 	ldw	fp,0(sp)
 4010e48:	dec00204 	addi	sp,sp,8
 4010e4c:	f800283a 	ret

04010e50 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 4010e50:	defffa04 	addi	sp,sp,-24
 4010e54:	dfc00515 	stw	ra,20(sp)
 4010e58:	df000415 	stw	fp,16(sp)
 4010e5c:	df000404 	addi	fp,sp,16
 4010e60:	e13ffd15 	stw	r4,-12(fp)
 4010e64:	e17ffe15 	stw	r5,-8(fp)
 4010e68:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 4010e6c:	e0bfff17 	ldw	r2,-4(fp)
 4010e70:	1080030b 	ldhu	r2,12(r2)
 4010e74:	10bfffcc 	andi	r2,r2,65535
 4010e78:	1088000c 	andi	r2,r2,8192
 4010e7c:	10000b1e 	bne	r2,zero,4010eac <_fputwc_r+0x5c>
 4010e80:	e0bfff17 	ldw	r2,-4(fp)
 4010e84:	1080030b 	ldhu	r2,12(r2)
 4010e88:	10880014 	ori	r2,r2,8192
 4010e8c:	1007883a 	mov	r3,r2
 4010e90:	e0bfff17 	ldw	r2,-4(fp)
 4010e94:	10c0030d 	sth	r3,12(r2)
 4010e98:	e0bfff17 	ldw	r2,-4(fp)
 4010e9c:	10801917 	ldw	r2,100(r2)
 4010ea0:	10c80014 	ori	r3,r2,8192
 4010ea4:	e0bfff17 	ldw	r2,-4(fp)
 4010ea8:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 4010eac:	e1bfff17 	ldw	r6,-4(fp)
 4010eb0:	e17ffe17 	ldw	r5,-8(fp)
 4010eb4:	e13ffd17 	ldw	r4,-12(fp)
 4010eb8:	4010c5c0 	call	4010c5c <__fputwc>
 4010ebc:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 4010ec0:	e0bffc17 	ldw	r2,-16(fp)
}
 4010ec4:	e037883a 	mov	sp,fp
 4010ec8:	dfc00117 	ldw	ra,4(sp)
 4010ecc:	df000017 	ldw	fp,0(sp)
 4010ed0:	dec00204 	addi	sp,sp,8
 4010ed4:	f800283a 	ret

04010ed8 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 4010ed8:	defffa04 	addi	sp,sp,-24
 4010edc:	dfc00515 	stw	ra,20(sp)
 4010ee0:	df000415 	stw	fp,16(sp)
 4010ee4:	df000404 	addi	fp,sp,16
 4010ee8:	e13ffe15 	stw	r4,-8(fp)
 4010eec:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 4010ef0:	d0a00917 	ldw	r2,-32732(gp)
 4010ef4:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 4010ef8:	e0bffc17 	ldw	r2,-16(fp)
 4010efc:	e0bffd15 	stw	r2,-12(fp)
 4010f00:	e0bffd17 	ldw	r2,-12(fp)
 4010f04:	10000526 	beq	r2,zero,4010f1c <fputwc+0x44>
 4010f08:	e0bffd17 	ldw	r2,-12(fp)
 4010f0c:	10800e17 	ldw	r2,56(r2)
 4010f10:	1000021e 	bne	r2,zero,4010f1c <fputwc+0x44>
 4010f14:	e13ffd17 	ldw	r4,-12(fp)
 4010f18:	4009a000 	call	4009a00 <__sinit>
  return _fputwc_r (reent, wc, fp);
 4010f1c:	e1bfff17 	ldw	r6,-4(fp)
 4010f20:	e17ffe17 	ldw	r5,-8(fp)
 4010f24:	e13ffc17 	ldw	r4,-16(fp)
 4010f28:	4010e500 	call	4010e50 <_fputwc_r>
}
 4010f2c:	e037883a 	mov	sp,fp
 4010f30:	dfc00117 	ldw	ra,4(sp)
 4010f34:	df000017 	ldw	fp,0(sp)
 4010f38:	dec00204 	addi	sp,sp,8
 4010f3c:	f800283a 	ret

04010f40 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 4010f40:	defffa04 	addi	sp,sp,-24
 4010f44:	dfc00515 	stw	ra,20(sp)
 4010f48:	df000415 	stw	fp,16(sp)
 4010f4c:	df000404 	addi	fp,sp,16
 4010f50:	e13ffd15 	stw	r4,-12(fp)
 4010f54:	e17ffe15 	stw	r5,-8(fp)
 4010f58:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 4010f5c:	d026e615 	stw	zero,-25704(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 4010f60:	e17fff17 	ldw	r5,-4(fp)
 4010f64:	e13ffe17 	ldw	r4,-8(fp)
 4010f68:	40121f80 	call	40121f8 <fstat>
 4010f6c:	e0bffc15 	stw	r2,-16(fp)
 4010f70:	e0bffc17 	ldw	r2,-16(fp)
 4010f74:	10bfffd8 	cmpnei	r2,r2,-1
 4010f78:	1000051e 	bne	r2,zero,4010f90 <_fstat_r+0x50>
 4010f7c:	d0a6e617 	ldw	r2,-25704(gp)
 4010f80:	10000326 	beq	r2,zero,4010f90 <_fstat_r+0x50>
    ptr->_errno = errno;
 4010f84:	d0e6e617 	ldw	r3,-25704(gp)
 4010f88:	e0bffd17 	ldw	r2,-12(fp)
 4010f8c:	10c00015 	stw	r3,0(r2)
  return ret;
 4010f90:	e0bffc17 	ldw	r2,-16(fp)
}
 4010f94:	e037883a 	mov	sp,fp
 4010f98:	dfc00117 	ldw	ra,4(sp)
 4010f9c:	df000017 	ldw	fp,0(sp)
 4010fa0:	dec00204 	addi	sp,sp,8
 4010fa4:	f800283a 	ret

04010fa8 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 4010fa8:	defffb04 	addi	sp,sp,-20
 4010fac:	dfc00415 	stw	ra,16(sp)
 4010fb0:	df000315 	stw	fp,12(sp)
 4010fb4:	df000304 	addi	fp,sp,12
 4010fb8:	e13ffe15 	stw	r4,-8(fp)
 4010fbc:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 4010fc0:	d026e615 	stw	zero,-25704(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 4010fc4:	e13fff17 	ldw	r4,-4(fp)
 4010fc8:	40124d80 	call	40124d8 <isatty>
 4010fcc:	e0bffd15 	stw	r2,-12(fp)
 4010fd0:	e0bffd17 	ldw	r2,-12(fp)
 4010fd4:	10bfffd8 	cmpnei	r2,r2,-1
 4010fd8:	1000051e 	bne	r2,zero,4010ff0 <_isatty_r+0x48>
 4010fdc:	d0a6e617 	ldw	r2,-25704(gp)
 4010fe0:	10000326 	beq	r2,zero,4010ff0 <_isatty_r+0x48>
    ptr->_errno = errno;
 4010fe4:	d0e6e617 	ldw	r3,-25704(gp)
 4010fe8:	e0bffe17 	ldw	r2,-8(fp)
 4010fec:	10c00015 	stw	r3,0(r2)
  return ret;
 4010ff0:	e0bffd17 	ldw	r2,-12(fp)
}
 4010ff4:	e037883a 	mov	sp,fp
 4010ff8:	dfc00117 	ldw	ra,4(sp)
 4010ffc:	df000017 	ldw	fp,0(sp)
 4011000:	dec00204 	addi	sp,sp,8
 4011004:	f800283a 	ret

04011008 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 4011008:	defff904 	addi	sp,sp,-28
 401100c:	dfc00615 	stw	ra,24(sp)
 4011010:	df000515 	stw	fp,20(sp)
 4011014:	df000504 	addi	fp,sp,20
 4011018:	e13ffc15 	stw	r4,-16(fp)
 401101c:	e17ffd15 	stw	r5,-12(fp)
 4011020:	e1bffe15 	stw	r6,-8(fp)
 4011024:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 4011028:	d026e615 	stw	zero,-25704(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 401102c:	e1bfff17 	ldw	r6,-4(fp)
 4011030:	e17ffe17 	ldw	r5,-8(fp)
 4011034:	e13ffd17 	ldw	r4,-12(fp)
 4011038:	40126a40 	call	40126a4 <lseek>
 401103c:	e0bffb15 	stw	r2,-20(fp)
 4011040:	e0bffb17 	ldw	r2,-20(fp)
 4011044:	10bfffd8 	cmpnei	r2,r2,-1
 4011048:	1000051e 	bne	r2,zero,4011060 <_lseek_r+0x58>
 401104c:	d0a6e617 	ldw	r2,-25704(gp)
 4011050:	10000326 	beq	r2,zero,4011060 <_lseek_r+0x58>
    ptr->_errno = errno;
 4011054:	d0e6e617 	ldw	r3,-25704(gp)
 4011058:	e0bffc17 	ldw	r2,-16(fp)
 401105c:	10c00015 	stw	r3,0(r2)
  return ret;
 4011060:	e0bffb17 	ldw	r2,-20(fp)
}
 4011064:	e037883a 	mov	sp,fp
 4011068:	dfc00117 	ldw	ra,4(sp)
 401106c:	df000017 	ldw	fp,0(sp)
 4011070:	dec00204 	addi	sp,sp,8
 4011074:	f800283a 	ret

04011078 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 4011078:	defff904 	addi	sp,sp,-28
 401107c:	dfc00615 	stw	ra,24(sp)
 4011080:	df000515 	stw	fp,20(sp)
 4011084:	df000504 	addi	fp,sp,20
 4011088:	e13ffc15 	stw	r4,-16(fp)
 401108c:	e17ffd15 	stw	r5,-12(fp)
 4011090:	e1bffe15 	stw	r6,-8(fp)
 4011094:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 4011098:	d026e615 	stw	zero,-25704(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 401109c:	e1bfff17 	ldw	r6,-4(fp)
 40110a0:	e17ffe17 	ldw	r5,-8(fp)
 40110a4:	e13ffd17 	ldw	r4,-12(fp)
 40110a8:	40128780 	call	4012878 <read>
 40110ac:	e0bffb15 	stw	r2,-20(fp)
 40110b0:	e0bffb17 	ldw	r2,-20(fp)
 40110b4:	10bfffd8 	cmpnei	r2,r2,-1
 40110b8:	1000051e 	bne	r2,zero,40110d0 <_read_r+0x58>
 40110bc:	d0a6e617 	ldw	r2,-25704(gp)
 40110c0:	10000326 	beq	r2,zero,40110d0 <_read_r+0x58>
    ptr->_errno = errno;
 40110c4:	d0e6e617 	ldw	r3,-25704(gp)
 40110c8:	e0bffc17 	ldw	r2,-16(fp)
 40110cc:	10c00015 	stw	r3,0(r2)
  return ret;
 40110d0:	e0bffb17 	ldw	r2,-20(fp)
}
 40110d4:	e037883a 	mov	sp,fp
 40110d8:	dfc00117 	ldw	ra,4(sp)
 40110dc:	df000017 	ldw	fp,0(sp)
 40110e0:	dec00204 	addi	sp,sp,8
 40110e4:	f800283a 	ret

040110e8 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 40110e8:	defff404 	addi	sp,sp,-48
 40110ec:	dfc00b15 	stw	ra,44(sp)
 40110f0:	df000a15 	stw	fp,40(sp)
 40110f4:	dc000915 	stw	r16,36(sp)
 40110f8:	df000a04 	addi	fp,sp,40
 40110fc:	e13ffb15 	stw	r4,-20(fp)
 4011100:	e17ffc15 	stw	r5,-16(fp)
 4011104:	e1bffd15 	stw	r6,-12(fp)
 4011108:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 401110c:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 4011110:	e0bffc17 	ldw	r2,-16(fp)
 4011114:	10000d1e 	bne	r2,zero,401114c <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 4011118:	d4200e17 	ldw	r16,-32712(gp)
 401111c:	400abc80 	call	400abc8 <__locale_charset>
 4011120:	1009883a 	mov	r4,r2
 4011124:	e0fff804 	addi	r3,fp,-32
 4011128:	e0bffe17 	ldw	r2,-8(fp)
 401112c:	d8800015 	stw	r2,0(sp)
 4011130:	200f883a 	mov	r7,r4
 4011134:	000d883a 	mov	r6,zero
 4011138:	180b883a 	mov	r5,r3
 401113c:	e13ffb17 	ldw	r4,-20(fp)
 4011140:	803ee83a 	callr	r16
 4011144:	e0bff715 	stw	r2,-36(fp)
 4011148:	00000b06 	br	4011178 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 401114c:	d4200e17 	ldw	r16,-32712(gp)
 4011150:	400abc80 	call	400abc8 <__locale_charset>
 4011154:	1007883a 	mov	r3,r2
 4011158:	e0bffe17 	ldw	r2,-8(fp)
 401115c:	d8800015 	stw	r2,0(sp)
 4011160:	180f883a 	mov	r7,r3
 4011164:	e1bffd17 	ldw	r6,-12(fp)
 4011168:	e17ffc17 	ldw	r5,-16(fp)
 401116c:	e13ffb17 	ldw	r4,-20(fp)
 4011170:	803ee83a 	callr	r16
 4011174:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 4011178:	e0bff717 	ldw	r2,-36(fp)
 401117c:	10bfffd8 	cmpnei	r2,r2,-1
 4011180:	1000071e 	bne	r2,zero,40111a0 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 4011184:	e0bffe17 	ldw	r2,-8(fp)
 4011188:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 401118c:	e0bffb17 	ldw	r2,-20(fp)
 4011190:	00c02284 	movi	r3,138
 4011194:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 4011198:	00bfffc4 	movi	r2,-1
 401119c:	00000106 	br	40111a4 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 40111a0:	e0bff717 	ldw	r2,-36(fp)
}
 40111a4:	e6ffff04 	addi	sp,fp,-4
 40111a8:	dfc00217 	ldw	ra,8(sp)
 40111ac:	df000117 	ldw	fp,4(sp)
 40111b0:	dc000017 	ldw	r16,0(sp)
 40111b4:	dec00304 	addi	sp,sp,12
 40111b8:	f800283a 	ret

040111bc <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 40111bc:	defff404 	addi	sp,sp,-48
 40111c0:	dfc00b15 	stw	ra,44(sp)
 40111c4:	df000a15 	stw	fp,40(sp)
 40111c8:	dc000915 	stw	r16,36(sp)
 40111cc:	df000a04 	addi	fp,sp,40
 40111d0:	e13ffc15 	stw	r4,-16(fp)
 40111d4:	e17ffd15 	stw	r5,-12(fp)
 40111d8:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 40111dc:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 40111e0:	d0a00917 	ldw	r2,-32732(gp)
 40111e4:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 40111e8:	e0bffc17 	ldw	r2,-16(fp)
 40111ec:	10000d1e 	bne	r2,zero,4011224 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 40111f0:	d4200e17 	ldw	r16,-32712(gp)
 40111f4:	400abc80 	call	400abc8 <__locale_charset>
 40111f8:	1009883a 	mov	r4,r2
 40111fc:	e0fff904 	addi	r3,fp,-28
 4011200:	e0bffe17 	ldw	r2,-8(fp)
 4011204:	d8800015 	stw	r2,0(sp)
 4011208:	200f883a 	mov	r7,r4
 401120c:	000d883a 	mov	r6,zero
 4011210:	180b883a 	mov	r5,r3
 4011214:	e13ff817 	ldw	r4,-32(fp)
 4011218:	803ee83a 	callr	r16
 401121c:	e0bff715 	stw	r2,-36(fp)
 4011220:	00000b06 	br	4011250 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 4011224:	d4200e17 	ldw	r16,-32712(gp)
 4011228:	400abc80 	call	400abc8 <__locale_charset>
 401122c:	1007883a 	mov	r3,r2
 4011230:	e0bffe17 	ldw	r2,-8(fp)
 4011234:	d8800015 	stw	r2,0(sp)
 4011238:	180f883a 	mov	r7,r3
 401123c:	e1bffd17 	ldw	r6,-12(fp)
 4011240:	e17ffc17 	ldw	r5,-16(fp)
 4011244:	e13ff817 	ldw	r4,-32(fp)
 4011248:	803ee83a 	callr	r16
 401124c:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 4011250:	e0bff717 	ldw	r2,-36(fp)
 4011254:	10bfffd8 	cmpnei	r2,r2,-1
 4011258:	1000071e 	bne	r2,zero,4011278 <wcrtomb+0xbc>
    {
      ps->__count = 0;
 401125c:	e0bffe17 	ldw	r2,-8(fp)
 4011260:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 4011264:	e0bff817 	ldw	r2,-32(fp)
 4011268:	00c02284 	movi	r3,138
 401126c:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 4011270:	00bfffc4 	movi	r2,-1
 4011274:	00000106 	br	401127c <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 4011278:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 401127c:	e6ffff04 	addi	sp,fp,-4
 4011280:	dfc00217 	ldw	ra,8(sp)
 4011284:	df000117 	ldw	fp,4(sp)
 4011288:	dc000017 	ldw	r16,0(sp)
 401128c:	dec00304 	addi	sp,sp,12
 4011290:	f800283a 	ret

04011294 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 4011294:	defff804 	addi	sp,sp,-32
 4011298:	dfc00715 	stw	ra,28(sp)
 401129c:	df000615 	stw	fp,24(sp)
 40112a0:	dc000515 	stw	r16,20(sp)
 40112a4:	df000604 	addi	fp,sp,24
 40112a8:	e13ffb15 	stw	r4,-20(fp)
 40112ac:	e17ffc15 	stw	r5,-16(fp)
 40112b0:	e1bffd15 	stw	r6,-12(fp)
 40112b4:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 40112b8:	d4200e17 	ldw	r16,-32712(gp)
 40112bc:	400abc80 	call	400abc8 <__locale_charset>
 40112c0:	1007883a 	mov	r3,r2
 40112c4:	e0bffe17 	ldw	r2,-8(fp)
 40112c8:	d8800015 	stw	r2,0(sp)
 40112cc:	180f883a 	mov	r7,r3
 40112d0:	e1bffd17 	ldw	r6,-12(fp)
 40112d4:	e17ffc17 	ldw	r5,-16(fp)
 40112d8:	e13ffb17 	ldw	r4,-20(fp)
 40112dc:	803ee83a 	callr	r16
}
 40112e0:	e6ffff04 	addi	sp,fp,-4
 40112e4:	dfc00217 	ldw	ra,8(sp)
 40112e8:	df000117 	ldw	fp,4(sp)
 40112ec:	dc000017 	ldw	r16,0(sp)
 40112f0:	dec00304 	addi	sp,sp,12
 40112f4:	f800283a 	ret

040112f8 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 40112f8:	defffa04 	addi	sp,sp,-24
 40112fc:	df000515 	stw	fp,20(sp)
 4011300:	df000504 	addi	fp,sp,20
 4011304:	e13ffc15 	stw	r4,-16(fp)
 4011308:	e17ffd15 	stw	r5,-12(fp)
 401130c:	e1bffe15 	stw	r6,-8(fp)
 4011310:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 4011314:	e0bffe17 	ldw	r2,-8(fp)
 4011318:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 401131c:	e0bffd17 	ldw	r2,-12(fp)
 4011320:	1000021e 	bne	r2,zero,401132c <__ascii_wctomb+0x34>
    return 0;
 4011324:	0005883a 	mov	r2,zero
 4011328:	00000d06 	br	4011360 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 401132c:	e0bffb17 	ldw	r2,-20(fp)
 4011330:	10804030 	cmpltui	r2,r2,256
 4011334:	1000051e 	bne	r2,zero,401134c <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 4011338:	e0bffc17 	ldw	r2,-16(fp)
 401133c:	00c02284 	movi	r3,138
 4011340:	10c00015 	stw	r3,0(r2)
      return -1;
 4011344:	00bfffc4 	movi	r2,-1
 4011348:	00000506 	br	4011360 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 401134c:	e0bffb17 	ldw	r2,-20(fp)
 4011350:	1007883a 	mov	r3,r2
 4011354:	e0bffd17 	ldw	r2,-12(fp)
 4011358:	10c00005 	stb	r3,0(r2)
  return 1;
 401135c:	00800044 	movi	r2,1
}
 4011360:	e037883a 	mov	sp,fp
 4011364:	df000017 	ldw	fp,0(sp)
 4011368:	dec00104 	addi	sp,sp,4
 401136c:	f800283a 	ret

04011370 <__muldi3>:
 4011370:	223fffcc 	andi	r8,r4,65535
 4011374:	2006d43a 	srli	r3,r4,16
 4011378:	32bfffcc 	andi	r10,r6,65535
 401137c:	3012d43a 	srli	r9,r6,16
 4011380:	4297383a 	mul	r11,r8,r10
 4011384:	1a95383a 	mul	r10,r3,r10
 4011388:	4251383a 	mul	r8,r8,r9
 401138c:	5804d43a 	srli	r2,r11,16
 4011390:	4291883a 	add	r8,r8,r10
 4011394:	1205883a 	add	r2,r2,r8
 4011398:	1a51383a 	mul	r8,r3,r9
 401139c:	1280022e 	bgeu	r2,r10,40113a8 <__muldi3+0x38>
 40113a0:	00c00074 	movhi	r3,1
 40113a4:	40d1883a 	add	r8,r8,r3
 40113a8:	1006d43a 	srli	r3,r2,16
 40113ac:	21cf383a 	mul	r7,r4,r7
 40113b0:	314b383a 	mul	r5,r6,r5
 40113b4:	1004943a 	slli	r2,r2,16
 40113b8:	1a11883a 	add	r8,r3,r8
 40113bc:	5affffcc 	andi	r11,r11,65535
 40113c0:	3947883a 	add	r3,r7,r5
 40113c4:	12c5883a 	add	r2,r2,r11
 40113c8:	1a07883a 	add	r3,r3,r8
 40113cc:	f800283a 	ret

040113d0 <__udivdi3>:
 40113d0:	defff504 	addi	sp,sp,-44
 40113d4:	dcc00415 	stw	r19,16(sp)
 40113d8:	dc000115 	stw	r16,4(sp)
 40113dc:	dfc00a15 	stw	ra,40(sp)
 40113e0:	df000915 	stw	fp,36(sp)
 40113e4:	ddc00815 	stw	r23,32(sp)
 40113e8:	dd800715 	stw	r22,28(sp)
 40113ec:	dd400615 	stw	r21,24(sp)
 40113f0:	dd000515 	stw	r20,20(sp)
 40113f4:	dc800315 	stw	r18,12(sp)
 40113f8:	dc400215 	stw	r17,8(sp)
 40113fc:	2027883a 	mov	r19,r4
 4011400:	2821883a 	mov	r16,r5
 4011404:	3800411e 	bne	r7,zero,401150c <__udivdi3+0x13c>
 4011408:	3023883a 	mov	r17,r6
 401140c:	2025883a 	mov	r18,r4
 4011410:	2980522e 	bgeu	r5,r6,401155c <__udivdi3+0x18c>
 4011414:	00bfffd4 	movui	r2,65535
 4011418:	282d883a 	mov	r22,r5
 401141c:	1180a836 	bltu	r2,r6,40116c0 <__udivdi3+0x2f0>
 4011420:	00803fc4 	movi	r2,255
 4011424:	1185803a 	cmpltu	r2,r2,r6
 4011428:	100490fa 	slli	r2,r2,3
 401142c:	3086d83a 	srl	r3,r6,r2
 4011430:	01010074 	movhi	r4,1025
 4011434:	21144744 	addi	r4,r4,20765
 4011438:	20c7883a 	add	r3,r4,r3
 401143c:	18c00003 	ldbu	r3,0(r3)
 4011440:	1885883a 	add	r2,r3,r2
 4011444:	00c00804 	movi	r3,32
 4011448:	1887c83a 	sub	r3,r3,r2
 401144c:	18000526 	beq	r3,zero,4011464 <__udivdi3+0x94>
 4011450:	80e0983a 	sll	r16,r16,r3
 4011454:	9884d83a 	srl	r2,r19,r2
 4011458:	30e2983a 	sll	r17,r6,r3
 401145c:	98e4983a 	sll	r18,r19,r3
 4011460:	142cb03a 	or	r22,r2,r16
 4011464:	882ad43a 	srli	r21,r17,16
 4011468:	b009883a 	mov	r4,r22
 401146c:	8d3fffcc 	andi	r20,r17,65535
 4011470:	a80b883a 	mov	r5,r21
 4011474:	400464c0 	call	400464c <__umodsi3>
 4011478:	b009883a 	mov	r4,r22
 401147c:	a80b883a 	mov	r5,r21
 4011480:	1027883a 	mov	r19,r2
 4011484:	40045e80 	call	40045e8 <__udivsi3>
 4011488:	102d883a 	mov	r22,r2
 401148c:	9826943a 	slli	r19,r19,16
 4011490:	9004d43a 	srli	r2,r18,16
 4011494:	a5a1383a 	mul	r16,r20,r22
 4011498:	14c4b03a 	or	r2,r2,r19
 401149c:	1400052e 	bgeu	r2,r16,40114b4 <__udivdi3+0xe4>
 40114a0:	1445883a 	add	r2,r2,r17
 40114a4:	b0ffffc4 	addi	r3,r22,-1
 40114a8:	14400136 	bltu	r2,r17,40114b0 <__udivdi3+0xe0>
 40114ac:	14012336 	bltu	r2,r16,401193c <__udivdi3+0x56c>
 40114b0:	182d883a 	mov	r22,r3
 40114b4:	1421c83a 	sub	r16,r2,r16
 40114b8:	a80b883a 	mov	r5,r21
 40114bc:	8009883a 	mov	r4,r16
 40114c0:	400464c0 	call	400464c <__umodsi3>
 40114c4:	1027883a 	mov	r19,r2
 40114c8:	a80b883a 	mov	r5,r21
 40114cc:	8009883a 	mov	r4,r16
 40114d0:	40045e80 	call	40045e8 <__udivsi3>
 40114d4:	9826943a 	slli	r19,r19,16
 40114d8:	a0a9383a 	mul	r20,r20,r2
 40114dc:	94bfffcc 	andi	r18,r18,65535
 40114e0:	94e4b03a 	or	r18,r18,r19
 40114e4:	9500052e 	bgeu	r18,r20,40114fc <__udivdi3+0x12c>
 40114e8:	8ca5883a 	add	r18,r17,r18
 40114ec:	10ffffc4 	addi	r3,r2,-1
 40114f0:	9440f136 	bltu	r18,r17,40118b8 <__udivdi3+0x4e8>
 40114f4:	9500f02e 	bgeu	r18,r20,40118b8 <__udivdi3+0x4e8>
 40114f8:	10bfff84 	addi	r2,r2,-2
 40114fc:	b00c943a 	slli	r6,r22,16
 4011500:	0007883a 	mov	r3,zero
 4011504:	3084b03a 	or	r2,r6,r2
 4011508:	00005906 	br	4011670 <__udivdi3+0x2a0>
 401150c:	29c05636 	bltu	r5,r7,4011668 <__udivdi3+0x298>
 4011510:	00bfffd4 	movui	r2,65535
 4011514:	11c0622e 	bgeu	r2,r7,40116a0 <__udivdi3+0x2d0>
 4011518:	00804034 	movhi	r2,256
 401151c:	10bfffc4 	addi	r2,r2,-1
 4011520:	11c0ee36 	bltu	r2,r7,40118dc <__udivdi3+0x50c>
 4011524:	00800404 	movi	r2,16
 4011528:	3886d83a 	srl	r3,r7,r2
 401152c:	01010074 	movhi	r4,1025
 4011530:	21144744 	addi	r4,r4,20765
 4011534:	20c7883a 	add	r3,r4,r3
 4011538:	18c00003 	ldbu	r3,0(r3)
 401153c:	05400804 	movi	r21,32
 4011540:	1885883a 	add	r2,r3,r2
 4011544:	a8abc83a 	sub	r21,r21,r2
 4011548:	a800621e 	bne	r21,zero,40116d4 <__udivdi3+0x304>
 401154c:	3c00e936 	bltu	r7,r16,40118f4 <__udivdi3+0x524>
 4011550:	9985403a 	cmpgeu	r2,r19,r6
 4011554:	0007883a 	mov	r3,zero
 4011558:	00004506 	br	4011670 <__udivdi3+0x2a0>
 401155c:	3000041e 	bne	r6,zero,4011570 <__udivdi3+0x1a0>
 4011560:	000b883a 	mov	r5,zero
 4011564:	01000044 	movi	r4,1
 4011568:	40045e80 	call	40045e8 <__udivsi3>
 401156c:	1023883a 	mov	r17,r2
 4011570:	00bfffd4 	movui	r2,65535
 4011574:	14404e2e 	bgeu	r2,r17,40116b0 <__udivdi3+0x2e0>
 4011578:	00804034 	movhi	r2,256
 401157c:	10bfffc4 	addi	r2,r2,-1
 4011580:	1440d836 	bltu	r2,r17,40118e4 <__udivdi3+0x514>
 4011584:	00800404 	movi	r2,16
 4011588:	8886d83a 	srl	r3,r17,r2
 401158c:	01010074 	movhi	r4,1025
 4011590:	21144744 	addi	r4,r4,20765
 4011594:	20c7883a 	add	r3,r4,r3
 4011598:	18c00003 	ldbu	r3,0(r3)
 401159c:	1885883a 	add	r2,r3,r2
 40115a0:	00c00804 	movi	r3,32
 40115a4:	1887c83a 	sub	r3,r3,r2
 40115a8:	18008f1e 	bne	r3,zero,40117e8 <__udivdi3+0x418>
 40115ac:	882ad43a 	srli	r21,r17,16
 40115b0:	8461c83a 	sub	r16,r16,r17
 40115b4:	8d3fffcc 	andi	r20,r17,65535
 40115b8:	00c00044 	movi	r3,1
 40115bc:	8009883a 	mov	r4,r16
 40115c0:	a80b883a 	mov	r5,r21
 40115c4:	d8c00015 	stw	r3,0(sp)
 40115c8:	400464c0 	call	400464c <__umodsi3>
 40115cc:	8009883a 	mov	r4,r16
 40115d0:	a80b883a 	mov	r5,r21
 40115d4:	1027883a 	mov	r19,r2
 40115d8:	40045e80 	call	40045e8 <__udivsi3>
 40115dc:	9826943a 	slli	r19,r19,16
 40115e0:	9008d43a 	srli	r4,r18,16
 40115e4:	1521383a 	mul	r16,r2,r20
 40115e8:	102d883a 	mov	r22,r2
 40115ec:	24c8b03a 	or	r4,r4,r19
 40115f0:	d8c00017 	ldw	r3,0(sp)
 40115f4:	2400052e 	bgeu	r4,r16,401160c <__udivdi3+0x23c>
 40115f8:	2449883a 	add	r4,r4,r17
 40115fc:	b0bfffc4 	addi	r2,r22,-1
 4011600:	24400136 	bltu	r4,r17,4011608 <__udivdi3+0x238>
 4011604:	2400ca36 	bltu	r4,r16,4011930 <__udivdi3+0x560>
 4011608:	102d883a 	mov	r22,r2
 401160c:	2421c83a 	sub	r16,r4,r16
 4011610:	a80b883a 	mov	r5,r21
 4011614:	8009883a 	mov	r4,r16
 4011618:	d8c00015 	stw	r3,0(sp)
 401161c:	400464c0 	call	400464c <__umodsi3>
 4011620:	1027883a 	mov	r19,r2
 4011624:	a80b883a 	mov	r5,r21
 4011628:	8009883a 	mov	r4,r16
 401162c:	40045e80 	call	40045e8 <__udivsi3>
 4011630:	9826943a 	slli	r19,r19,16
 4011634:	1529383a 	mul	r20,r2,r20
 4011638:	94bfffcc 	andi	r18,r18,65535
 401163c:	94e4b03a 	or	r18,r18,r19
 4011640:	d8c00017 	ldw	r3,0(sp)
 4011644:	9500052e 	bgeu	r18,r20,401165c <__udivdi3+0x28c>
 4011648:	8ca5883a 	add	r18,r17,r18
 401164c:	113fffc4 	addi	r4,r2,-1
 4011650:	94409736 	bltu	r18,r17,40118b0 <__udivdi3+0x4e0>
 4011654:	9500962e 	bgeu	r18,r20,40118b0 <__udivdi3+0x4e0>
 4011658:	10bfff84 	addi	r2,r2,-2
 401165c:	b00c943a 	slli	r6,r22,16
 4011660:	3084b03a 	or	r2,r6,r2
 4011664:	00000206 	br	4011670 <__udivdi3+0x2a0>
 4011668:	0007883a 	mov	r3,zero
 401166c:	0005883a 	mov	r2,zero
 4011670:	dfc00a17 	ldw	ra,40(sp)
 4011674:	df000917 	ldw	fp,36(sp)
 4011678:	ddc00817 	ldw	r23,32(sp)
 401167c:	dd800717 	ldw	r22,28(sp)
 4011680:	dd400617 	ldw	r21,24(sp)
 4011684:	dd000517 	ldw	r20,20(sp)
 4011688:	dcc00417 	ldw	r19,16(sp)
 401168c:	dc800317 	ldw	r18,12(sp)
 4011690:	dc400217 	ldw	r17,8(sp)
 4011694:	dc000117 	ldw	r16,4(sp)
 4011698:	dec00b04 	addi	sp,sp,44
 401169c:	f800283a 	ret
 40116a0:	00803fc4 	movi	r2,255
 40116a4:	11c5803a 	cmpltu	r2,r2,r7
 40116a8:	100490fa 	slli	r2,r2,3
 40116ac:	003f9e06 	br	4011528 <__alt_data_end+0xfc011528>
 40116b0:	00803fc4 	movi	r2,255
 40116b4:	1445803a 	cmpltu	r2,r2,r17
 40116b8:	100490fa 	slli	r2,r2,3
 40116bc:	003fb206 	br	4011588 <__alt_data_end+0xfc011588>
 40116c0:	00804034 	movhi	r2,256
 40116c4:	10bfffc4 	addi	r2,r2,-1
 40116c8:	11808836 	bltu	r2,r6,40118ec <__udivdi3+0x51c>
 40116cc:	00800404 	movi	r2,16
 40116d0:	003f5606 	br	401142c <__alt_data_end+0xfc01142c>
 40116d4:	30aed83a 	srl	r23,r6,r2
 40116d8:	3d4e983a 	sll	r7,r7,r21
 40116dc:	80acd83a 	srl	r22,r16,r2
 40116e0:	9884d83a 	srl	r2,r19,r2
 40116e4:	3deeb03a 	or	r23,r7,r23
 40116e8:	b824d43a 	srli	r18,r23,16
 40116ec:	8560983a 	sll	r16,r16,r21
 40116f0:	b009883a 	mov	r4,r22
 40116f4:	900b883a 	mov	r5,r18
 40116f8:	3568983a 	sll	r20,r6,r21
 40116fc:	1420b03a 	or	r16,r2,r16
 4011700:	400464c0 	call	400464c <__umodsi3>
 4011704:	b009883a 	mov	r4,r22
 4011708:	900b883a 	mov	r5,r18
 401170c:	1023883a 	mov	r17,r2
 4011710:	40045e80 	call	40045e8 <__udivsi3>
 4011714:	8808943a 	slli	r4,r17,16
 4011718:	bf3fffcc 	andi	fp,r23,65535
 401171c:	8006d43a 	srli	r3,r16,16
 4011720:	e0a3383a 	mul	r17,fp,r2
 4011724:	100d883a 	mov	r6,r2
 4011728:	1906b03a 	or	r3,r3,r4
 401172c:	1c40042e 	bgeu	r3,r17,4011740 <__udivdi3+0x370>
 4011730:	1dc7883a 	add	r3,r3,r23
 4011734:	10bfffc4 	addi	r2,r2,-1
 4011738:	1dc0752e 	bgeu	r3,r23,4011910 <__udivdi3+0x540>
 401173c:	100d883a 	mov	r6,r2
 4011740:	1c63c83a 	sub	r17,r3,r17
 4011744:	900b883a 	mov	r5,r18
 4011748:	8809883a 	mov	r4,r17
 401174c:	d9800015 	stw	r6,0(sp)
 4011750:	400464c0 	call	400464c <__umodsi3>
 4011754:	102d883a 	mov	r22,r2
 4011758:	8809883a 	mov	r4,r17
 401175c:	900b883a 	mov	r5,r18
 4011760:	40045e80 	call	40045e8 <__udivsi3>
 4011764:	b02c943a 	slli	r22,r22,16
 4011768:	e089383a 	mul	r4,fp,r2
 401176c:	843fffcc 	andi	r16,r16,65535
 4011770:	85a0b03a 	or	r16,r16,r22
 4011774:	d9800017 	ldw	r6,0(sp)
 4011778:	8100042e 	bgeu	r16,r4,401178c <__udivdi3+0x3bc>
 401177c:	85e1883a 	add	r16,r16,r23
 4011780:	10ffffc4 	addi	r3,r2,-1
 4011784:	85c05e2e 	bgeu	r16,r23,4011900 <__udivdi3+0x530>
 4011788:	1805883a 	mov	r2,r3
 401178c:	300c943a 	slli	r6,r6,16
 4011790:	a17fffcc 	andi	r5,r20,65535
 4011794:	a028d43a 	srli	r20,r20,16
 4011798:	3084b03a 	or	r2,r6,r2
 401179c:	10ffffcc 	andi	r3,r2,65535
 40117a0:	100cd43a 	srli	r6,r2,16
 40117a4:	194f383a 	mul	r7,r3,r5
 40117a8:	1d07383a 	mul	r3,r3,r20
 40117ac:	314b383a 	mul	r5,r6,r5
 40117b0:	3810d43a 	srli	r8,r7,16
 40117b4:	8121c83a 	sub	r16,r16,r4
 40117b8:	1947883a 	add	r3,r3,r5
 40117bc:	40c7883a 	add	r3,r8,r3
 40117c0:	350d383a 	mul	r6,r6,r20
 40117c4:	1940022e 	bgeu	r3,r5,40117d0 <__udivdi3+0x400>
 40117c8:	01000074 	movhi	r4,1
 40117cc:	310d883a 	add	r6,r6,r4
 40117d0:	1828d43a 	srli	r20,r3,16
 40117d4:	a18d883a 	add	r6,r20,r6
 40117d8:	81803e36 	bltu	r16,r6,40118d4 <__udivdi3+0x504>
 40117dc:	81803826 	beq	r16,r6,40118c0 <__udivdi3+0x4f0>
 40117e0:	0007883a 	mov	r3,zero
 40117e4:	003fa206 	br	4011670 <__alt_data_end+0xfc011670>
 40117e8:	88e2983a 	sll	r17,r17,r3
 40117ec:	80a8d83a 	srl	r20,r16,r2
 40117f0:	80e0983a 	sll	r16,r16,r3
 40117f4:	882ad43a 	srli	r21,r17,16
 40117f8:	9884d83a 	srl	r2,r19,r2
 40117fc:	a009883a 	mov	r4,r20
 4011800:	a80b883a 	mov	r5,r21
 4011804:	142eb03a 	or	r23,r2,r16
 4011808:	98e4983a 	sll	r18,r19,r3
 401180c:	400464c0 	call	400464c <__umodsi3>
 4011810:	a009883a 	mov	r4,r20
 4011814:	a80b883a 	mov	r5,r21
 4011818:	1021883a 	mov	r16,r2
 401181c:	40045e80 	call	40045e8 <__udivsi3>
 4011820:	1039883a 	mov	fp,r2
 4011824:	8d3fffcc 	andi	r20,r17,65535
 4011828:	8020943a 	slli	r16,r16,16
 401182c:	b804d43a 	srli	r2,r23,16
 4011830:	a72d383a 	mul	r22,r20,fp
 4011834:	1404b03a 	or	r2,r2,r16
 4011838:	1580062e 	bgeu	r2,r22,4011854 <__udivdi3+0x484>
 401183c:	1445883a 	add	r2,r2,r17
 4011840:	e0ffffc4 	addi	r3,fp,-1
 4011844:	14403836 	bltu	r2,r17,4011928 <__udivdi3+0x558>
 4011848:	1580372e 	bgeu	r2,r22,4011928 <__udivdi3+0x558>
 401184c:	e73fff84 	addi	fp,fp,-2
 4011850:	1445883a 	add	r2,r2,r17
 4011854:	15adc83a 	sub	r22,r2,r22
 4011858:	a80b883a 	mov	r5,r21
 401185c:	b009883a 	mov	r4,r22
 4011860:	400464c0 	call	400464c <__umodsi3>
 4011864:	1027883a 	mov	r19,r2
 4011868:	b009883a 	mov	r4,r22
 401186c:	a80b883a 	mov	r5,r21
 4011870:	40045e80 	call	40045e8 <__udivsi3>
 4011874:	9826943a 	slli	r19,r19,16
 4011878:	a0a1383a 	mul	r16,r20,r2
 401187c:	b93fffcc 	andi	r4,r23,65535
 4011880:	24c8b03a 	or	r4,r4,r19
 4011884:	2400062e 	bgeu	r4,r16,40118a0 <__udivdi3+0x4d0>
 4011888:	2449883a 	add	r4,r4,r17
 401188c:	10ffffc4 	addi	r3,r2,-1
 4011890:	24402336 	bltu	r4,r17,4011920 <__udivdi3+0x550>
 4011894:	2400222e 	bgeu	r4,r16,4011920 <__udivdi3+0x550>
 4011898:	10bfff84 	addi	r2,r2,-2
 401189c:	2449883a 	add	r4,r4,r17
 40118a0:	e038943a 	slli	fp,fp,16
 40118a4:	2421c83a 	sub	r16,r4,r16
 40118a8:	e086b03a 	or	r3,fp,r2
 40118ac:	003f4306 	br	40115bc <__alt_data_end+0xfc0115bc>
 40118b0:	2005883a 	mov	r2,r4
 40118b4:	003f6906 	br	401165c <__alt_data_end+0xfc01165c>
 40118b8:	1805883a 	mov	r2,r3
 40118bc:	003f0f06 	br	40114fc <__alt_data_end+0xfc0114fc>
 40118c0:	1806943a 	slli	r3,r3,16
 40118c4:	9d66983a 	sll	r19,r19,r21
 40118c8:	39ffffcc 	andi	r7,r7,65535
 40118cc:	19c7883a 	add	r3,r3,r7
 40118d0:	98ffc32e 	bgeu	r19,r3,40117e0 <__alt_data_end+0xfc0117e0>
 40118d4:	10bfffc4 	addi	r2,r2,-1
 40118d8:	003fc106 	br	40117e0 <__alt_data_end+0xfc0117e0>
 40118dc:	00800604 	movi	r2,24
 40118e0:	003f1106 	br	4011528 <__alt_data_end+0xfc011528>
 40118e4:	00800604 	movi	r2,24
 40118e8:	003f2706 	br	4011588 <__alt_data_end+0xfc011588>
 40118ec:	00800604 	movi	r2,24
 40118f0:	003ece06 	br	401142c <__alt_data_end+0xfc01142c>
 40118f4:	0007883a 	mov	r3,zero
 40118f8:	00800044 	movi	r2,1
 40118fc:	003f5c06 	br	4011670 <__alt_data_end+0xfc011670>
 4011900:	813fa12e 	bgeu	r16,r4,4011788 <__alt_data_end+0xfc011788>
 4011904:	10bfff84 	addi	r2,r2,-2
 4011908:	85e1883a 	add	r16,r16,r23
 401190c:	003f9f06 	br	401178c <__alt_data_end+0xfc01178c>
 4011910:	1c7f8a2e 	bgeu	r3,r17,401173c <__alt_data_end+0xfc01173c>
 4011914:	31bfff84 	addi	r6,r6,-2
 4011918:	1dc7883a 	add	r3,r3,r23
 401191c:	003f8806 	br	4011740 <__alt_data_end+0xfc011740>
 4011920:	1805883a 	mov	r2,r3
 4011924:	003fde06 	br	40118a0 <__alt_data_end+0xfc0118a0>
 4011928:	1839883a 	mov	fp,r3
 401192c:	003fc906 	br	4011854 <__alt_data_end+0xfc011854>
 4011930:	b5bfff84 	addi	r22,r22,-2
 4011934:	2449883a 	add	r4,r4,r17
 4011938:	003f3406 	br	401160c <__alt_data_end+0xfc01160c>
 401193c:	b5bfff84 	addi	r22,r22,-2
 4011940:	1445883a 	add	r2,r2,r17
 4011944:	003edb06 	br	40114b4 <__alt_data_end+0xfc0114b4>

04011948 <__umoddi3>:
 4011948:	defff404 	addi	sp,sp,-48
 401194c:	df000a15 	stw	fp,40(sp)
 4011950:	dc400315 	stw	r17,12(sp)
 4011954:	dc000215 	stw	r16,8(sp)
 4011958:	dfc00b15 	stw	ra,44(sp)
 401195c:	ddc00915 	stw	r23,36(sp)
 4011960:	dd800815 	stw	r22,32(sp)
 4011964:	dd400715 	stw	r21,28(sp)
 4011968:	dd000615 	stw	r20,24(sp)
 401196c:	dcc00515 	stw	r19,20(sp)
 4011970:	dc800415 	stw	r18,16(sp)
 4011974:	2021883a 	mov	r16,r4
 4011978:	2823883a 	mov	r17,r5
 401197c:	2839883a 	mov	fp,r5
 4011980:	38003c1e 	bne	r7,zero,4011a74 <__umoddi3+0x12c>
 4011984:	3027883a 	mov	r19,r6
 4011988:	2029883a 	mov	r20,r4
 401198c:	2980512e 	bgeu	r5,r6,4011ad4 <__umoddi3+0x18c>
 4011990:	00bfffd4 	movui	r2,65535
 4011994:	11809a36 	bltu	r2,r6,4011c00 <__umoddi3+0x2b8>
 4011998:	01003fc4 	movi	r4,255
 401199c:	2189803a 	cmpltu	r4,r4,r6
 40119a0:	200890fa 	slli	r4,r4,3
 40119a4:	3104d83a 	srl	r2,r6,r4
 40119a8:	00c10074 	movhi	r3,1025
 40119ac:	18d44744 	addi	r3,r3,20765
 40119b0:	1885883a 	add	r2,r3,r2
 40119b4:	10c00003 	ldbu	r3,0(r2)
 40119b8:	00800804 	movi	r2,32
 40119bc:	1909883a 	add	r4,r3,r4
 40119c0:	1125c83a 	sub	r18,r2,r4
 40119c4:	90000526 	beq	r18,zero,40119dc <__umoddi3+0x94>
 40119c8:	8ca2983a 	sll	r17,r17,r18
 40119cc:	8108d83a 	srl	r4,r16,r4
 40119d0:	34a6983a 	sll	r19,r6,r18
 40119d4:	84a8983a 	sll	r20,r16,r18
 40119d8:	2478b03a 	or	fp,r4,r17
 40119dc:	982ed43a 	srli	r23,r19,16
 40119e0:	e009883a 	mov	r4,fp
 40119e4:	9dbfffcc 	andi	r22,r19,65535
 40119e8:	b80b883a 	mov	r5,r23
 40119ec:	400464c0 	call	400464c <__umodsi3>
 40119f0:	e009883a 	mov	r4,fp
 40119f4:	b80b883a 	mov	r5,r23
 40119f8:	102b883a 	mov	r21,r2
 40119fc:	40045e80 	call	40045e8 <__udivsi3>
 4011a00:	a806943a 	slli	r3,r21,16
 4011a04:	a008d43a 	srli	r4,r20,16
 4011a08:	b085383a 	mul	r2,r22,r2
 4011a0c:	20c8b03a 	or	r4,r4,r3
 4011a10:	2080032e 	bgeu	r4,r2,4011a20 <__umoddi3+0xd8>
 4011a14:	24c9883a 	add	r4,r4,r19
 4011a18:	24c00136 	bltu	r4,r19,4011a20 <__umoddi3+0xd8>
 4011a1c:	20811036 	bltu	r4,r2,4011e60 <__umoddi3+0x518>
 4011a20:	20abc83a 	sub	r21,r4,r2
 4011a24:	b80b883a 	mov	r5,r23
 4011a28:	a809883a 	mov	r4,r21
 4011a2c:	400464c0 	call	400464c <__umodsi3>
 4011a30:	1023883a 	mov	r17,r2
 4011a34:	b80b883a 	mov	r5,r23
 4011a38:	a809883a 	mov	r4,r21
 4011a3c:	40045e80 	call	40045e8 <__udivsi3>
 4011a40:	8822943a 	slli	r17,r17,16
 4011a44:	b085383a 	mul	r2,r22,r2
 4011a48:	a0ffffcc 	andi	r3,r20,65535
 4011a4c:	1c46b03a 	or	r3,r3,r17
 4011a50:	1880042e 	bgeu	r3,r2,4011a64 <__umoddi3+0x11c>
 4011a54:	1cc7883a 	add	r3,r3,r19
 4011a58:	1cc00236 	bltu	r3,r19,4011a64 <__umoddi3+0x11c>
 4011a5c:	1880012e 	bgeu	r3,r2,4011a64 <__umoddi3+0x11c>
 4011a60:	1cc7883a 	add	r3,r3,r19
 4011a64:	1885c83a 	sub	r2,r3,r2
 4011a68:	1484d83a 	srl	r2,r2,r18
 4011a6c:	0007883a 	mov	r3,zero
 4011a70:	00004f06 	br	4011bb0 <__umoddi3+0x268>
 4011a74:	29c04c36 	bltu	r5,r7,4011ba8 <__umoddi3+0x260>
 4011a78:	00bfffd4 	movui	r2,65535
 4011a7c:	11c0582e 	bgeu	r2,r7,4011be0 <__umoddi3+0x298>
 4011a80:	00804034 	movhi	r2,256
 4011a84:	10bfffc4 	addi	r2,r2,-1
 4011a88:	11c0e736 	bltu	r2,r7,4011e28 <__umoddi3+0x4e0>
 4011a8c:	01000404 	movi	r4,16
 4011a90:	3904d83a 	srl	r2,r7,r4
 4011a94:	00c10074 	movhi	r3,1025
 4011a98:	18d44744 	addi	r3,r3,20765
 4011a9c:	1885883a 	add	r2,r3,r2
 4011aa0:	14c00003 	ldbu	r19,0(r2)
 4011aa4:	00c00804 	movi	r3,32
 4011aa8:	9927883a 	add	r19,r19,r4
 4011aac:	1ce9c83a 	sub	r20,r3,r19
 4011ab0:	a000581e 	bne	r20,zero,4011c14 <__umoddi3+0x2cc>
 4011ab4:	3c400136 	bltu	r7,r17,4011abc <__umoddi3+0x174>
 4011ab8:	8180eb36 	bltu	r16,r6,4011e68 <__umoddi3+0x520>
 4011abc:	8185c83a 	sub	r2,r16,r6
 4011ac0:	89e3c83a 	sub	r17,r17,r7
 4011ac4:	8089803a 	cmpltu	r4,r16,r2
 4011ac8:	8939c83a 	sub	fp,r17,r4
 4011acc:	e007883a 	mov	r3,fp
 4011ad0:	00003706 	br	4011bb0 <__umoddi3+0x268>
 4011ad4:	3000041e 	bne	r6,zero,4011ae8 <__umoddi3+0x1a0>
 4011ad8:	000b883a 	mov	r5,zero
 4011adc:	01000044 	movi	r4,1
 4011ae0:	40045e80 	call	40045e8 <__udivsi3>
 4011ae4:	1027883a 	mov	r19,r2
 4011ae8:	00bfffd4 	movui	r2,65535
 4011aec:	14c0402e 	bgeu	r2,r19,4011bf0 <__umoddi3+0x2a8>
 4011af0:	00804034 	movhi	r2,256
 4011af4:	10bfffc4 	addi	r2,r2,-1
 4011af8:	14c0cd36 	bltu	r2,r19,4011e30 <__umoddi3+0x4e8>
 4011afc:	00800404 	movi	r2,16
 4011b00:	9886d83a 	srl	r3,r19,r2
 4011b04:	01010074 	movhi	r4,1025
 4011b08:	21144744 	addi	r4,r4,20765
 4011b0c:	20c7883a 	add	r3,r4,r3
 4011b10:	18c00003 	ldbu	r3,0(r3)
 4011b14:	1887883a 	add	r3,r3,r2
 4011b18:	00800804 	movi	r2,32
 4011b1c:	10e5c83a 	sub	r18,r2,r3
 4011b20:	9000901e 	bne	r18,zero,4011d64 <__umoddi3+0x41c>
 4011b24:	982cd43a 	srli	r22,r19,16
 4011b28:	8ce3c83a 	sub	r17,r17,r19
 4011b2c:	9d7fffcc 	andi	r21,r19,65535
 4011b30:	b00b883a 	mov	r5,r22
 4011b34:	8809883a 	mov	r4,r17
 4011b38:	400464c0 	call	400464c <__umodsi3>
 4011b3c:	8809883a 	mov	r4,r17
 4011b40:	b00b883a 	mov	r5,r22
 4011b44:	1021883a 	mov	r16,r2
 4011b48:	40045e80 	call	40045e8 <__udivsi3>
 4011b4c:	8006943a 	slli	r3,r16,16
 4011b50:	a008d43a 	srli	r4,r20,16
 4011b54:	1545383a 	mul	r2,r2,r21
 4011b58:	20c8b03a 	or	r4,r4,r3
 4011b5c:	2080042e 	bgeu	r4,r2,4011b70 <__umoddi3+0x228>
 4011b60:	24c9883a 	add	r4,r4,r19
 4011b64:	24c00236 	bltu	r4,r19,4011b70 <__umoddi3+0x228>
 4011b68:	2080012e 	bgeu	r4,r2,4011b70 <__umoddi3+0x228>
 4011b6c:	24c9883a 	add	r4,r4,r19
 4011b70:	20a1c83a 	sub	r16,r4,r2
 4011b74:	b00b883a 	mov	r5,r22
 4011b78:	8009883a 	mov	r4,r16
 4011b7c:	400464c0 	call	400464c <__umodsi3>
 4011b80:	1023883a 	mov	r17,r2
 4011b84:	b00b883a 	mov	r5,r22
 4011b88:	8009883a 	mov	r4,r16
 4011b8c:	40045e80 	call	40045e8 <__udivsi3>
 4011b90:	8822943a 	slli	r17,r17,16
 4011b94:	1545383a 	mul	r2,r2,r21
 4011b98:	a53fffcc 	andi	r20,r20,65535
 4011b9c:	a446b03a 	or	r3,r20,r17
 4011ba0:	18bfb02e 	bgeu	r3,r2,4011a64 <__alt_data_end+0xfc011a64>
 4011ba4:	003fab06 	br	4011a54 <__alt_data_end+0xfc011a54>
 4011ba8:	2005883a 	mov	r2,r4
 4011bac:	2807883a 	mov	r3,r5
 4011bb0:	dfc00b17 	ldw	ra,44(sp)
 4011bb4:	df000a17 	ldw	fp,40(sp)
 4011bb8:	ddc00917 	ldw	r23,36(sp)
 4011bbc:	dd800817 	ldw	r22,32(sp)
 4011bc0:	dd400717 	ldw	r21,28(sp)
 4011bc4:	dd000617 	ldw	r20,24(sp)
 4011bc8:	dcc00517 	ldw	r19,20(sp)
 4011bcc:	dc800417 	ldw	r18,16(sp)
 4011bd0:	dc400317 	ldw	r17,12(sp)
 4011bd4:	dc000217 	ldw	r16,8(sp)
 4011bd8:	dec00c04 	addi	sp,sp,48
 4011bdc:	f800283a 	ret
 4011be0:	04c03fc4 	movi	r19,255
 4011be4:	99c9803a 	cmpltu	r4,r19,r7
 4011be8:	200890fa 	slli	r4,r4,3
 4011bec:	003fa806 	br	4011a90 <__alt_data_end+0xfc011a90>
 4011bf0:	00803fc4 	movi	r2,255
 4011bf4:	14c5803a 	cmpltu	r2,r2,r19
 4011bf8:	100490fa 	slli	r2,r2,3
 4011bfc:	003fc006 	br	4011b00 <__alt_data_end+0xfc011b00>
 4011c00:	00804034 	movhi	r2,256
 4011c04:	10bfffc4 	addi	r2,r2,-1
 4011c08:	11808b36 	bltu	r2,r6,4011e38 <__umoddi3+0x4f0>
 4011c0c:	01000404 	movi	r4,16
 4011c10:	003f6406 	br	40119a4 <__alt_data_end+0xfc0119a4>
 4011c14:	34c4d83a 	srl	r2,r6,r19
 4011c18:	3d0e983a 	sll	r7,r7,r20
 4011c1c:	8cf8d83a 	srl	fp,r17,r19
 4011c20:	8d10983a 	sll	r8,r17,r20
 4011c24:	38aab03a 	or	r21,r7,r2
 4011c28:	a82cd43a 	srli	r22,r21,16
 4011c2c:	84e2d83a 	srl	r17,r16,r19
 4011c30:	e009883a 	mov	r4,fp
 4011c34:	b00b883a 	mov	r5,r22
 4011c38:	8a22b03a 	or	r17,r17,r8
 4011c3c:	3524983a 	sll	r18,r6,r20
 4011c40:	400464c0 	call	400464c <__umodsi3>
 4011c44:	e009883a 	mov	r4,fp
 4011c48:	b00b883a 	mov	r5,r22
 4011c4c:	102f883a 	mov	r23,r2
 4011c50:	40045e80 	call	40045e8 <__udivsi3>
 4011c54:	100d883a 	mov	r6,r2
 4011c58:	b808943a 	slli	r4,r23,16
 4011c5c:	aa3fffcc 	andi	r8,r21,65535
 4011c60:	8804d43a 	srli	r2,r17,16
 4011c64:	41af383a 	mul	r23,r8,r6
 4011c68:	8520983a 	sll	r16,r16,r20
 4011c6c:	1104b03a 	or	r2,r2,r4
 4011c70:	15c0042e 	bgeu	r2,r23,4011c84 <__umoddi3+0x33c>
 4011c74:	1545883a 	add	r2,r2,r21
 4011c78:	30ffffc4 	addi	r3,r6,-1
 4011c7c:	1540742e 	bgeu	r2,r21,4011e50 <__umoddi3+0x508>
 4011c80:	180d883a 	mov	r6,r3
 4011c84:	15efc83a 	sub	r23,r2,r23
 4011c88:	b00b883a 	mov	r5,r22
 4011c8c:	b809883a 	mov	r4,r23
 4011c90:	d9800115 	stw	r6,4(sp)
 4011c94:	da000015 	stw	r8,0(sp)
 4011c98:	400464c0 	call	400464c <__umodsi3>
 4011c9c:	b00b883a 	mov	r5,r22
 4011ca0:	b809883a 	mov	r4,r23
 4011ca4:	1039883a 	mov	fp,r2
 4011ca8:	40045e80 	call	40045e8 <__udivsi3>
 4011cac:	da000017 	ldw	r8,0(sp)
 4011cb0:	e038943a 	slli	fp,fp,16
 4011cb4:	100b883a 	mov	r5,r2
 4011cb8:	4089383a 	mul	r4,r8,r2
 4011cbc:	8a3fffcc 	andi	r8,r17,65535
 4011cc0:	4710b03a 	or	r8,r8,fp
 4011cc4:	d9800117 	ldw	r6,4(sp)
 4011cc8:	4100042e 	bgeu	r8,r4,4011cdc <__umoddi3+0x394>
 4011ccc:	4551883a 	add	r8,r8,r21
 4011cd0:	10bfffc4 	addi	r2,r2,-1
 4011cd4:	45405a2e 	bgeu	r8,r21,4011e40 <__umoddi3+0x4f8>
 4011cd8:	100b883a 	mov	r5,r2
 4011cdc:	300c943a 	slli	r6,r6,16
 4011ce0:	91ffffcc 	andi	r7,r18,65535
 4011ce4:	9004d43a 	srli	r2,r18,16
 4011ce8:	314cb03a 	or	r6,r6,r5
 4011cec:	317fffcc 	andi	r5,r6,65535
 4011cf0:	300cd43a 	srli	r6,r6,16
 4011cf4:	29d3383a 	mul	r9,r5,r7
 4011cf8:	288b383a 	mul	r5,r5,r2
 4011cfc:	31cf383a 	mul	r7,r6,r7
 4011d00:	4806d43a 	srli	r3,r9,16
 4011d04:	4111c83a 	sub	r8,r8,r4
 4011d08:	29cb883a 	add	r5,r5,r7
 4011d0c:	194b883a 	add	r5,r3,r5
 4011d10:	3085383a 	mul	r2,r6,r2
 4011d14:	29c0022e 	bgeu	r5,r7,4011d20 <__umoddi3+0x3d8>
 4011d18:	00c00074 	movhi	r3,1
 4011d1c:	10c5883a 	add	r2,r2,r3
 4011d20:	2808d43a 	srli	r4,r5,16
 4011d24:	280a943a 	slli	r5,r5,16
 4011d28:	4a7fffcc 	andi	r9,r9,65535
 4011d2c:	2085883a 	add	r2,r4,r2
 4011d30:	2a4b883a 	add	r5,r5,r9
 4011d34:	40803636 	bltu	r8,r2,4011e10 <__umoddi3+0x4c8>
 4011d38:	40804d26 	beq	r8,r2,4011e70 <__umoddi3+0x528>
 4011d3c:	4089c83a 	sub	r4,r8,r2
 4011d40:	280f883a 	mov	r7,r5
 4011d44:	81cfc83a 	sub	r7,r16,r7
 4011d48:	81c7803a 	cmpltu	r3,r16,r7
 4011d4c:	20c7c83a 	sub	r3,r4,r3
 4011d50:	1cc4983a 	sll	r2,r3,r19
 4011d54:	3d0ed83a 	srl	r7,r7,r20
 4011d58:	1d06d83a 	srl	r3,r3,r20
 4011d5c:	11c4b03a 	or	r2,r2,r7
 4011d60:	003f9306 	br	4011bb0 <__alt_data_end+0xfc011bb0>
 4011d64:	9ca6983a 	sll	r19,r19,r18
 4011d68:	88e8d83a 	srl	r20,r17,r3
 4011d6c:	80c4d83a 	srl	r2,r16,r3
 4011d70:	982cd43a 	srli	r22,r19,16
 4011d74:	8ca2983a 	sll	r17,r17,r18
 4011d78:	a009883a 	mov	r4,r20
 4011d7c:	b00b883a 	mov	r5,r22
 4011d80:	1478b03a 	or	fp,r2,r17
 4011d84:	400464c0 	call	400464c <__umodsi3>
 4011d88:	a009883a 	mov	r4,r20
 4011d8c:	b00b883a 	mov	r5,r22
 4011d90:	1023883a 	mov	r17,r2
 4011d94:	40045e80 	call	40045e8 <__udivsi3>
 4011d98:	9d7fffcc 	andi	r21,r19,65535
 4011d9c:	880a943a 	slli	r5,r17,16
 4011da0:	e008d43a 	srli	r4,fp,16
 4011da4:	a885383a 	mul	r2,r21,r2
 4011da8:	84a8983a 	sll	r20,r16,r18
 4011dac:	2148b03a 	or	r4,r4,r5
 4011db0:	2080042e 	bgeu	r4,r2,4011dc4 <__umoddi3+0x47c>
 4011db4:	24c9883a 	add	r4,r4,r19
 4011db8:	24c00236 	bltu	r4,r19,4011dc4 <__umoddi3+0x47c>
 4011dbc:	2080012e 	bgeu	r4,r2,4011dc4 <__umoddi3+0x47c>
 4011dc0:	24c9883a 	add	r4,r4,r19
 4011dc4:	20a3c83a 	sub	r17,r4,r2
 4011dc8:	b00b883a 	mov	r5,r22
 4011dcc:	8809883a 	mov	r4,r17
 4011dd0:	400464c0 	call	400464c <__umodsi3>
 4011dd4:	102f883a 	mov	r23,r2
 4011dd8:	8809883a 	mov	r4,r17
 4011ddc:	b00b883a 	mov	r5,r22
 4011de0:	40045e80 	call	40045e8 <__udivsi3>
 4011de4:	b82e943a 	slli	r23,r23,16
 4011de8:	a885383a 	mul	r2,r21,r2
 4011dec:	e13fffcc 	andi	r4,fp,65535
 4011df0:	25c8b03a 	or	r4,r4,r23
 4011df4:	2080042e 	bgeu	r4,r2,4011e08 <__umoddi3+0x4c0>
 4011df8:	24c9883a 	add	r4,r4,r19
 4011dfc:	24c00236 	bltu	r4,r19,4011e08 <__umoddi3+0x4c0>
 4011e00:	2080012e 	bgeu	r4,r2,4011e08 <__umoddi3+0x4c0>
 4011e04:	24c9883a 	add	r4,r4,r19
 4011e08:	20a3c83a 	sub	r17,r4,r2
 4011e0c:	003f4806 	br	4011b30 <__alt_data_end+0xfc011b30>
 4011e10:	2c8fc83a 	sub	r7,r5,r18
 4011e14:	1545c83a 	sub	r2,r2,r21
 4011e18:	29cb803a 	cmpltu	r5,r5,r7
 4011e1c:	1145c83a 	sub	r2,r2,r5
 4011e20:	4089c83a 	sub	r4,r8,r2
 4011e24:	003fc706 	br	4011d44 <__alt_data_end+0xfc011d44>
 4011e28:	01000604 	movi	r4,24
 4011e2c:	003f1806 	br	4011a90 <__alt_data_end+0xfc011a90>
 4011e30:	00800604 	movi	r2,24
 4011e34:	003f3206 	br	4011b00 <__alt_data_end+0xfc011b00>
 4011e38:	01000604 	movi	r4,24
 4011e3c:	003ed906 	br	40119a4 <__alt_data_end+0xfc0119a4>
 4011e40:	413fa52e 	bgeu	r8,r4,4011cd8 <__alt_data_end+0xfc011cd8>
 4011e44:	297fff84 	addi	r5,r5,-2
 4011e48:	4551883a 	add	r8,r8,r21
 4011e4c:	003fa306 	br	4011cdc <__alt_data_end+0xfc011cdc>
 4011e50:	15ff8b2e 	bgeu	r2,r23,4011c80 <__alt_data_end+0xfc011c80>
 4011e54:	31bfff84 	addi	r6,r6,-2
 4011e58:	1545883a 	add	r2,r2,r21
 4011e5c:	003f8906 	br	4011c84 <__alt_data_end+0xfc011c84>
 4011e60:	24c9883a 	add	r4,r4,r19
 4011e64:	003eee06 	br	4011a20 <__alt_data_end+0xfc011a20>
 4011e68:	8005883a 	mov	r2,r16
 4011e6c:	003f1706 	br	4011acc <__alt_data_end+0xfc011acc>
 4011e70:	817fe736 	bltu	r16,r5,4011e10 <__alt_data_end+0xfc011e10>
 4011e74:	280f883a 	mov	r7,r5
 4011e78:	0009883a 	mov	r4,zero
 4011e7c:	003fb106 	br	4011d44 <__alt_data_end+0xfc011d44>

04011e80 <__fixdfsi>:
 4011e80:	280cd53a 	srli	r6,r5,20
 4011e84:	00c00434 	movhi	r3,16
 4011e88:	18ffffc4 	addi	r3,r3,-1
 4011e8c:	3181ffcc 	andi	r6,r6,2047
 4011e90:	01c0ff84 	movi	r7,1022
 4011e94:	28c6703a 	and	r3,r5,r3
 4011e98:	280ad7fa 	srli	r5,r5,31
 4011e9c:	3980120e 	bge	r7,r6,4011ee8 <__fixdfsi+0x68>
 4011ea0:	00810744 	movi	r2,1053
 4011ea4:	11800c16 	blt	r2,r6,4011ed8 <__fixdfsi+0x58>
 4011ea8:	00810cc4 	movi	r2,1075
 4011eac:	1185c83a 	sub	r2,r2,r6
 4011eb0:	01c007c4 	movi	r7,31
 4011eb4:	18c00434 	orhi	r3,r3,16
 4011eb8:	38800d16 	blt	r7,r2,4011ef0 <__fixdfsi+0x70>
 4011ebc:	31befb44 	addi	r6,r6,-1043
 4011ec0:	2084d83a 	srl	r2,r4,r2
 4011ec4:	1986983a 	sll	r3,r3,r6
 4011ec8:	1884b03a 	or	r2,r3,r2
 4011ecc:	28000726 	beq	r5,zero,4011eec <__fixdfsi+0x6c>
 4011ed0:	0085c83a 	sub	r2,zero,r2
 4011ed4:	f800283a 	ret
 4011ed8:	00a00034 	movhi	r2,32768
 4011edc:	10bfffc4 	addi	r2,r2,-1
 4011ee0:	2885883a 	add	r2,r5,r2
 4011ee4:	f800283a 	ret
 4011ee8:	0005883a 	mov	r2,zero
 4011eec:	f800283a 	ret
 4011ef0:	008104c4 	movi	r2,1043
 4011ef4:	1185c83a 	sub	r2,r2,r6
 4011ef8:	1884d83a 	srl	r2,r3,r2
 4011efc:	003ff306 	br	4011ecc <__alt_data_end+0xfc011ecc>

04011f00 <__floatsidf>:
 4011f00:	defffd04 	addi	sp,sp,-12
 4011f04:	dfc00215 	stw	ra,8(sp)
 4011f08:	dc400115 	stw	r17,4(sp)
 4011f0c:	dc000015 	stw	r16,0(sp)
 4011f10:	20002b26 	beq	r4,zero,4011fc0 <__floatsidf+0xc0>
 4011f14:	2023883a 	mov	r17,r4
 4011f18:	2020d7fa 	srli	r16,r4,31
 4011f1c:	20002d16 	blt	r4,zero,4011fd4 <__floatsidf+0xd4>
 4011f20:	8809883a 	mov	r4,r17
 4011f24:	400448c0 	call	400448c <__clzsi2>
 4011f28:	01410784 	movi	r5,1054
 4011f2c:	288bc83a 	sub	r5,r5,r2
 4011f30:	01010cc4 	movi	r4,1075
 4011f34:	2149c83a 	sub	r4,r4,r5
 4011f38:	00c007c4 	movi	r3,31
 4011f3c:	1900160e 	bge	r3,r4,4011f98 <__floatsidf+0x98>
 4011f40:	00c104c4 	movi	r3,1043
 4011f44:	1947c83a 	sub	r3,r3,r5
 4011f48:	88c6983a 	sll	r3,r17,r3
 4011f4c:	00800434 	movhi	r2,16
 4011f50:	10bfffc4 	addi	r2,r2,-1
 4011f54:	1886703a 	and	r3,r3,r2
 4011f58:	2941ffcc 	andi	r5,r5,2047
 4011f5c:	800d883a 	mov	r6,r16
 4011f60:	0005883a 	mov	r2,zero
 4011f64:	280a953a 	slli	r5,r5,20
 4011f68:	31803fcc 	andi	r6,r6,255
 4011f6c:	01000434 	movhi	r4,16
 4011f70:	300c97fa 	slli	r6,r6,31
 4011f74:	213fffc4 	addi	r4,r4,-1
 4011f78:	1906703a 	and	r3,r3,r4
 4011f7c:	1946b03a 	or	r3,r3,r5
 4011f80:	1986b03a 	or	r3,r3,r6
 4011f84:	dfc00217 	ldw	ra,8(sp)
 4011f88:	dc400117 	ldw	r17,4(sp)
 4011f8c:	dc000017 	ldw	r16,0(sp)
 4011f90:	dec00304 	addi	sp,sp,12
 4011f94:	f800283a 	ret
 4011f98:	00c002c4 	movi	r3,11
 4011f9c:	1887c83a 	sub	r3,r3,r2
 4011fa0:	88c6d83a 	srl	r3,r17,r3
 4011fa4:	8904983a 	sll	r2,r17,r4
 4011fa8:	01000434 	movhi	r4,16
 4011fac:	213fffc4 	addi	r4,r4,-1
 4011fb0:	2941ffcc 	andi	r5,r5,2047
 4011fb4:	1906703a 	and	r3,r3,r4
 4011fb8:	800d883a 	mov	r6,r16
 4011fbc:	003fe906 	br	4011f64 <__alt_data_end+0xfc011f64>
 4011fc0:	000d883a 	mov	r6,zero
 4011fc4:	000b883a 	mov	r5,zero
 4011fc8:	0007883a 	mov	r3,zero
 4011fcc:	0005883a 	mov	r2,zero
 4011fd0:	003fe406 	br	4011f64 <__alt_data_end+0xfc011f64>
 4011fd4:	0123c83a 	sub	r17,zero,r4
 4011fd8:	003fd106 	br	4011f20 <__alt_data_end+0xfc011f20>

04011fdc <__floatunsidf>:
 4011fdc:	defffe04 	addi	sp,sp,-8
 4011fe0:	dc000015 	stw	r16,0(sp)
 4011fe4:	dfc00115 	stw	ra,4(sp)
 4011fe8:	2021883a 	mov	r16,r4
 4011fec:	20002226 	beq	r4,zero,4012078 <__floatunsidf+0x9c>
 4011ff0:	400448c0 	call	400448c <__clzsi2>
 4011ff4:	01010784 	movi	r4,1054
 4011ff8:	2089c83a 	sub	r4,r4,r2
 4011ffc:	01810cc4 	movi	r6,1075
 4012000:	310dc83a 	sub	r6,r6,r4
 4012004:	00c007c4 	movi	r3,31
 4012008:	1980120e 	bge	r3,r6,4012054 <__floatunsidf+0x78>
 401200c:	00c104c4 	movi	r3,1043
 4012010:	1907c83a 	sub	r3,r3,r4
 4012014:	80ca983a 	sll	r5,r16,r3
 4012018:	00800434 	movhi	r2,16
 401201c:	10bfffc4 	addi	r2,r2,-1
 4012020:	2101ffcc 	andi	r4,r4,2047
 4012024:	0021883a 	mov	r16,zero
 4012028:	288a703a 	and	r5,r5,r2
 401202c:	2008953a 	slli	r4,r4,20
 4012030:	00c00434 	movhi	r3,16
 4012034:	18ffffc4 	addi	r3,r3,-1
 4012038:	28c6703a 	and	r3,r5,r3
 401203c:	8005883a 	mov	r2,r16
 4012040:	1906b03a 	or	r3,r3,r4
 4012044:	dfc00117 	ldw	ra,4(sp)
 4012048:	dc000017 	ldw	r16,0(sp)
 401204c:	dec00204 	addi	sp,sp,8
 4012050:	f800283a 	ret
 4012054:	00c002c4 	movi	r3,11
 4012058:	188bc83a 	sub	r5,r3,r2
 401205c:	814ad83a 	srl	r5,r16,r5
 4012060:	00c00434 	movhi	r3,16
 4012064:	18ffffc4 	addi	r3,r3,-1
 4012068:	81a0983a 	sll	r16,r16,r6
 401206c:	2101ffcc 	andi	r4,r4,2047
 4012070:	28ca703a 	and	r5,r5,r3
 4012074:	003fed06 	br	401202c <__alt_data_end+0xfc01202c>
 4012078:	0009883a 	mov	r4,zero
 401207c:	000b883a 	mov	r5,zero
 4012080:	003fea06 	br	401202c <__alt_data_end+0xfc01202c>

04012084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012084:	defffe04 	addi	sp,sp,-8
 4012088:	dfc00115 	stw	ra,4(sp)
 401208c:	df000015 	stw	fp,0(sp)
 4012090:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012094:	d0a01417 	ldw	r2,-32688(gp)
 4012098:	10000326 	beq	r2,zero,40120a8 <alt_get_errno+0x24>
 401209c:	d0a01417 	ldw	r2,-32688(gp)
 40120a0:	103ee83a 	callr	r2
 40120a4:	00000106 	br	40120ac <alt_get_errno+0x28>
 40120a8:	d0a6e604 	addi	r2,gp,-25704
}
 40120ac:	e037883a 	mov	sp,fp
 40120b0:	dfc00117 	ldw	ra,4(sp)
 40120b4:	df000017 	ldw	fp,0(sp)
 40120b8:	dec00204 	addi	sp,sp,8
 40120bc:	f800283a 	ret

040120c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40120c0:	defffb04 	addi	sp,sp,-20
 40120c4:	dfc00415 	stw	ra,16(sp)
 40120c8:	df000315 	stw	fp,12(sp)
 40120cc:	df000304 	addi	fp,sp,12
 40120d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40120d4:	e0bfff17 	ldw	r2,-4(fp)
 40120d8:	10000616 	blt	r2,zero,40120f4 <close+0x34>
 40120dc:	e0bfff17 	ldw	r2,-4(fp)
 40120e0:	10c00324 	muli	r3,r2,12
 40120e4:	00810074 	movhi	r2,1025
 40120e8:	10979604 	addi	r2,r2,24152
 40120ec:	1885883a 	add	r2,r3,r2
 40120f0:	00000106 	br	40120f8 <close+0x38>
 40120f4:	0005883a 	mov	r2,zero
 40120f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40120fc:	e0bffd17 	ldw	r2,-12(fp)
 4012100:	10001926 	beq	r2,zero,4012168 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4012104:	e0bffd17 	ldw	r2,-12(fp)
 4012108:	10800017 	ldw	r2,0(r2)
 401210c:	10800417 	ldw	r2,16(r2)
 4012110:	10000626 	beq	r2,zero,401212c <close+0x6c>
 4012114:	e0bffd17 	ldw	r2,-12(fp)
 4012118:	10800017 	ldw	r2,0(r2)
 401211c:	10800417 	ldw	r2,16(r2)
 4012120:	e13ffd17 	ldw	r4,-12(fp)
 4012124:	103ee83a 	callr	r2
 4012128:	00000106 	br	4012130 <close+0x70>
 401212c:	0005883a 	mov	r2,zero
 4012130:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4012134:	e13fff17 	ldw	r4,-4(fp)
 4012138:	40129740 	call	4012974 <alt_release_fd>
    if (rval < 0)
 401213c:	e0bffe17 	ldw	r2,-8(fp)
 4012140:	1000070e 	bge	r2,zero,4012160 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4012144:	40120840 	call	4012084 <alt_get_errno>
 4012148:	1007883a 	mov	r3,r2
 401214c:	e0bffe17 	ldw	r2,-8(fp)
 4012150:	0085c83a 	sub	r2,zero,r2
 4012154:	18800015 	stw	r2,0(r3)
      return -1;
 4012158:	00bfffc4 	movi	r2,-1
 401215c:	00000706 	br	401217c <close+0xbc>
    }
    return 0;
 4012160:	0005883a 	mov	r2,zero
 4012164:	00000506 	br	401217c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4012168:	40120840 	call	4012084 <alt_get_errno>
 401216c:	1007883a 	mov	r3,r2
 4012170:	00801444 	movi	r2,81
 4012174:	18800015 	stw	r2,0(r3)
    return -1;
 4012178:	00bfffc4 	movi	r2,-1
  }
}
 401217c:	e037883a 	mov	sp,fp
 4012180:	dfc00117 	ldw	ra,4(sp)
 4012184:	df000017 	ldw	fp,0(sp)
 4012188:	dec00204 	addi	sp,sp,8
 401218c:	f800283a 	ret

04012190 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4012190:	defffc04 	addi	sp,sp,-16
 4012194:	df000315 	stw	fp,12(sp)
 4012198:	df000304 	addi	fp,sp,12
 401219c:	e13ffd15 	stw	r4,-12(fp)
 40121a0:	e17ffe15 	stw	r5,-8(fp)
 40121a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40121a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40121ac:	e037883a 	mov	sp,fp
 40121b0:	df000017 	ldw	fp,0(sp)
 40121b4:	dec00104 	addi	sp,sp,4
 40121b8:	f800283a 	ret

040121bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40121bc:	defffe04 	addi	sp,sp,-8
 40121c0:	dfc00115 	stw	ra,4(sp)
 40121c4:	df000015 	stw	fp,0(sp)
 40121c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40121cc:	d0a01417 	ldw	r2,-32688(gp)
 40121d0:	10000326 	beq	r2,zero,40121e0 <alt_get_errno+0x24>
 40121d4:	d0a01417 	ldw	r2,-32688(gp)
 40121d8:	103ee83a 	callr	r2
 40121dc:	00000106 	br	40121e4 <alt_get_errno+0x28>
 40121e0:	d0a6e604 	addi	r2,gp,-25704
}
 40121e4:	e037883a 	mov	sp,fp
 40121e8:	dfc00117 	ldw	ra,4(sp)
 40121ec:	df000017 	ldw	fp,0(sp)
 40121f0:	dec00204 	addi	sp,sp,8
 40121f4:	f800283a 	ret

040121f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40121f8:	defffb04 	addi	sp,sp,-20
 40121fc:	dfc00415 	stw	ra,16(sp)
 4012200:	df000315 	stw	fp,12(sp)
 4012204:	df000304 	addi	fp,sp,12
 4012208:	e13ffe15 	stw	r4,-8(fp)
 401220c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4012210:	e0bffe17 	ldw	r2,-8(fp)
 4012214:	10000616 	blt	r2,zero,4012230 <fstat+0x38>
 4012218:	e0bffe17 	ldw	r2,-8(fp)
 401221c:	10c00324 	muli	r3,r2,12
 4012220:	00810074 	movhi	r2,1025
 4012224:	10979604 	addi	r2,r2,24152
 4012228:	1885883a 	add	r2,r3,r2
 401222c:	00000106 	br	4012234 <fstat+0x3c>
 4012230:	0005883a 	mov	r2,zero
 4012234:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4012238:	e0bffd17 	ldw	r2,-12(fp)
 401223c:	10001026 	beq	r2,zero,4012280 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4012240:	e0bffd17 	ldw	r2,-12(fp)
 4012244:	10800017 	ldw	r2,0(r2)
 4012248:	10800817 	ldw	r2,32(r2)
 401224c:	10000726 	beq	r2,zero,401226c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4012250:	e0bffd17 	ldw	r2,-12(fp)
 4012254:	10800017 	ldw	r2,0(r2)
 4012258:	10800817 	ldw	r2,32(r2)
 401225c:	e17fff17 	ldw	r5,-4(fp)
 4012260:	e13ffd17 	ldw	r4,-12(fp)
 4012264:	103ee83a 	callr	r2
 4012268:	00000a06 	br	4012294 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401226c:	e0bfff17 	ldw	r2,-4(fp)
 4012270:	00c80004 	movi	r3,8192
 4012274:	10c00115 	stw	r3,4(r2)
      return 0;
 4012278:	0005883a 	mov	r2,zero
 401227c:	00000506 	br	4012294 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4012280:	40121bc0 	call	40121bc <alt_get_errno>
 4012284:	1007883a 	mov	r3,r2
 4012288:	00801444 	movi	r2,81
 401228c:	18800015 	stw	r2,0(r3)
    return -1;
 4012290:	00bfffc4 	movi	r2,-1
  }
}
 4012294:	e037883a 	mov	sp,fp
 4012298:	dfc00117 	ldw	ra,4(sp)
 401229c:	df000017 	ldw	fp,0(sp)
 40122a0:	dec00204 	addi	sp,sp,8
 40122a4:	f800283a 	ret

040122a8 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 40122a8:	defff404 	addi	sp,sp,-48
 40122ac:	dfc00b15 	stw	ra,44(sp)
 40122b0:	df000a15 	stw	fp,40(sp)
 40122b4:	dd000915 	stw	r20,36(sp)
 40122b8:	dcc00815 	stw	r19,32(sp)
 40122bc:	dc800715 	stw	r18,28(sp)
 40122c0:	dc400615 	stw	r17,24(sp)
 40122c4:	dc000515 	stw	r16,20(sp)
 40122c8:	df000a04 	addi	fp,sp,40
 40122cc:	e13ff915 	stw	r4,-28(fp)
 40122d0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 40122d4:	e0bffa17 	ldw	r2,-24(fp)
 40122d8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40122dc:	d0a6f617 	ldw	r2,-25640(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 40122e0:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40122e4:	d0a6f517 	ldw	r2,-25644(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 40122e8:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 40122ec:	e0bff817 	ldw	r2,-32(fp)
 40122f0:	10005f26 	beq	r2,zero,4012470 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 40122f4:	d0a6f017 	ldw	r2,-25664(gp)
 40122f8:	1029883a 	mov	r20,r2
 40122fc:	e17ff817 	ldw	r5,-32(fp)
 4012300:	e13ff717 	ldw	r4,-36(fp)
 4012304:	40045e80 	call	40045e8 <__udivsi3>
 4012308:	a085883a 	add	r2,r20,r2
 401230c:	1007883a 	mov	r3,r2
 4012310:	e0bff917 	ldw	r2,-28(fp)
 4012314:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 4012318:	d0a6f117 	ldw	r2,-25660(gp)
 401231c:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 4012320:	e0bff717 	ldw	r2,-36(fp)
 4012324:	1021883a 	mov	r16,r2
 4012328:	0023883a 	mov	r17,zero
 401232c:	e17ff817 	ldw	r5,-32(fp)
 4012330:	010003f4 	movhi	r4,15
 4012334:	21109004 	addi	r4,r4,16960
 4012338:	40045e80 	call	40045e8 <__udivsi3>
 401233c:	1025883a 	mov	r18,r2
 4012340:	0027883a 	mov	r19,zero
 4012344:	900d883a 	mov	r6,r18
 4012348:	980f883a 	mov	r7,r19
 401234c:	8009883a 	mov	r4,r16
 4012350:	880b883a 	mov	r5,r17
 4012354:	40113700 	call	4011370 <__muldi3>
 4012358:	1009883a 	mov	r4,r2
 401235c:	180b883a 	mov	r5,r3
 4012360:	2005883a 	mov	r2,r4
 4012364:	2807883a 	mov	r3,r5
 4012368:	018003f4 	movhi	r6,15
 401236c:	31909004 	addi	r6,r6,16960
 4012370:	000f883a 	mov	r7,zero
 4012374:	1009883a 	mov	r4,r2
 4012378:	180b883a 	mov	r5,r3
 401237c:	40119480 	call	4011948 <__umoddi3>
 4012380:	1009883a 	mov	r4,r2
 4012384:	180b883a 	mov	r5,r3
 4012388:	2005883a 	mov	r2,r4
 401238c:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 4012390:	a085883a 	add	r2,r20,r2
 4012394:	1007883a 	mov	r3,r2
 4012398:	e0bff917 	ldw	r2,-28(fp)
 401239c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 40123a0:	00001406 	br	40123f4 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 40123a4:	e0bff917 	ldw	r2,-28(fp)
 40123a8:	10800017 	ldw	r2,0(r2)
 40123ac:	00800516 	blt	zero,r2,40123c4 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 40123b0:	e0bff917 	ldw	r2,-28(fp)
 40123b4:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 40123b8:	e0bff917 	ldw	r2,-28(fp)
 40123bc:	10000115 	stw	zero,4(r2)
          break;
 40123c0:	00000f06 	br	4012400 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 40123c4:	e0bff917 	ldw	r2,-28(fp)
 40123c8:	10800017 	ldw	r2,0(r2)
 40123cc:	10ffffc4 	addi	r3,r2,-1
 40123d0:	e0bff917 	ldw	r2,-28(fp)
 40123d4:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 40123d8:	e0bff917 	ldw	r2,-28(fp)
 40123dc:	10c00117 	ldw	r3,4(r2)
 40123e0:	008003f4 	movhi	r2,15
 40123e4:	10909004 	addi	r2,r2,16960
 40123e8:	1887883a 	add	r3,r3,r2
 40123ec:	e0bff917 	ldw	r2,-28(fp)
 40123f0:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 40123f4:	e0bff917 	ldw	r2,-28(fp)
 40123f8:	10800117 	ldw	r2,4(r2)
 40123fc:	103fe916 	blt	r2,zero,40123a4 <__alt_data_end+0xfc0123a4>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 4012400:	00000c06 	br	4012434 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 4012404:	e0bff917 	ldw	r2,-28(fp)
 4012408:	10800017 	ldw	r2,0(r2)
 401240c:	10c00044 	addi	r3,r2,1
 4012410:	e0bff917 	ldw	r2,-28(fp)
 4012414:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 4012418:	e0bff917 	ldw	r2,-28(fp)
 401241c:	10c00117 	ldw	r3,4(r2)
 4012420:	00bffc74 	movhi	r2,65521
 4012424:	10af7004 	addi	r2,r2,-16960
 4012428:	1887883a 	add	r3,r3,r2
 401242c:	e0bff917 	ldw	r2,-28(fp)
 4012430:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 4012434:	e0bff917 	ldw	r2,-28(fp)
 4012438:	10c00117 	ldw	r3,4(r2)
 401243c:	008003f4 	movhi	r2,15
 4012440:	10908fc4 	addi	r2,r2,16959
 4012444:	10ffef16 	blt	r2,r3,4012404 <__alt_data_end+0xfc012404>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 4012448:	e0bff617 	ldw	r2,-40(fp)
 401244c:	10000626 	beq	r2,zero,4012468 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 4012450:	d0e6ee17 	ldw	r3,-25672(gp)
 4012454:	e0bff617 	ldw	r2,-40(fp)
 4012458:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 401245c:	d0e6ef17 	ldw	r3,-25668(gp)
 4012460:	e0bff617 	ldw	r2,-40(fp)
 4012464:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 4012468:	0005883a 	mov	r2,zero
 401246c:	00000106 	br	4012474 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 4012470:	00bfde84 	movi	r2,-134
}
 4012474:	e6fffb04 	addi	sp,fp,-20
 4012478:	dfc00617 	ldw	ra,24(sp)
 401247c:	df000517 	ldw	fp,20(sp)
 4012480:	dd000417 	ldw	r20,16(sp)
 4012484:	dcc00317 	ldw	r19,12(sp)
 4012488:	dc800217 	ldw	r18,8(sp)
 401248c:	dc400117 	ldw	r17,4(sp)
 4012490:	dc000017 	ldw	r16,0(sp)
 4012494:	dec00704 	addi	sp,sp,28
 4012498:	f800283a 	ret

0401249c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401249c:	defffe04 	addi	sp,sp,-8
 40124a0:	dfc00115 	stw	ra,4(sp)
 40124a4:	df000015 	stw	fp,0(sp)
 40124a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40124ac:	d0a01417 	ldw	r2,-32688(gp)
 40124b0:	10000326 	beq	r2,zero,40124c0 <alt_get_errno+0x24>
 40124b4:	d0a01417 	ldw	r2,-32688(gp)
 40124b8:	103ee83a 	callr	r2
 40124bc:	00000106 	br	40124c4 <alt_get_errno+0x28>
 40124c0:	d0a6e604 	addi	r2,gp,-25704
}
 40124c4:	e037883a 	mov	sp,fp
 40124c8:	dfc00117 	ldw	ra,4(sp)
 40124cc:	df000017 	ldw	fp,0(sp)
 40124d0:	dec00204 	addi	sp,sp,8
 40124d4:	f800283a 	ret

040124d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40124d8:	deffed04 	addi	sp,sp,-76
 40124dc:	dfc01215 	stw	ra,72(sp)
 40124e0:	df001115 	stw	fp,68(sp)
 40124e4:	df001104 	addi	fp,sp,68
 40124e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40124ec:	e0bfff17 	ldw	r2,-4(fp)
 40124f0:	10000616 	blt	r2,zero,401250c <isatty+0x34>
 40124f4:	e0bfff17 	ldw	r2,-4(fp)
 40124f8:	10c00324 	muli	r3,r2,12
 40124fc:	00810074 	movhi	r2,1025
 4012500:	10979604 	addi	r2,r2,24152
 4012504:	1885883a 	add	r2,r3,r2
 4012508:	00000106 	br	4012510 <isatty+0x38>
 401250c:	0005883a 	mov	r2,zero
 4012510:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4012514:	e0bfef17 	ldw	r2,-68(fp)
 4012518:	10000e26 	beq	r2,zero,4012554 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401251c:	e0bfef17 	ldw	r2,-68(fp)
 4012520:	10800017 	ldw	r2,0(r2)
 4012524:	10800817 	ldw	r2,32(r2)
 4012528:	1000021e 	bne	r2,zero,4012534 <isatty+0x5c>
    {
      return 1;
 401252c:	00800044 	movi	r2,1
 4012530:	00000d06 	br	4012568 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4012534:	e0bff004 	addi	r2,fp,-64
 4012538:	100b883a 	mov	r5,r2
 401253c:	e13fff17 	ldw	r4,-4(fp)
 4012540:	40121f80 	call	40121f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4012544:	e0bff117 	ldw	r2,-60(fp)
 4012548:	10880020 	cmpeqi	r2,r2,8192
 401254c:	10803fcc 	andi	r2,r2,255
 4012550:	00000506 	br	4012568 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4012554:	401249c0 	call	401249c <alt_get_errno>
 4012558:	1007883a 	mov	r3,r2
 401255c:	00801444 	movi	r2,81
 4012560:	18800015 	stw	r2,0(r3)
    return 0;
 4012564:	0005883a 	mov	r2,zero
  }
}
 4012568:	e037883a 	mov	sp,fp
 401256c:	dfc00117 	ldw	ra,4(sp)
 4012570:	df000017 	ldw	fp,0(sp)
 4012574:	dec00204 	addi	sp,sp,8
 4012578:	f800283a 	ret

0401257c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 401257c:	defffc04 	addi	sp,sp,-16
 4012580:	df000315 	stw	fp,12(sp)
 4012584:	df000304 	addi	fp,sp,12
 4012588:	e13ffd15 	stw	r4,-12(fp)
 401258c:	e17ffe15 	stw	r5,-8(fp)
 4012590:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4012594:	e0fffe17 	ldw	r3,-8(fp)
 4012598:	e0bffd17 	ldw	r2,-12(fp)
 401259c:	18800c26 	beq	r3,r2,40125d0 <alt_load_section+0x54>
  {
    while( to != end )
 40125a0:	00000806 	br	40125c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40125a4:	e0bffe17 	ldw	r2,-8(fp)
 40125a8:	10c00104 	addi	r3,r2,4
 40125ac:	e0fffe15 	stw	r3,-8(fp)
 40125b0:	e0fffd17 	ldw	r3,-12(fp)
 40125b4:	19000104 	addi	r4,r3,4
 40125b8:	e13ffd15 	stw	r4,-12(fp)
 40125bc:	18c00017 	ldw	r3,0(r3)
 40125c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40125c4:	e0fffe17 	ldw	r3,-8(fp)
 40125c8:	e0bfff17 	ldw	r2,-4(fp)
 40125cc:	18bff51e 	bne	r3,r2,40125a4 <__alt_data_end+0xfc0125a4>
    {
      *to++ = *from++;
    }
  }
}
 40125d0:	0001883a 	nop
 40125d4:	e037883a 	mov	sp,fp
 40125d8:	df000017 	ldw	fp,0(sp)
 40125dc:	dec00104 	addi	sp,sp,4
 40125e0:	f800283a 	ret

040125e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40125e4:	defffe04 	addi	sp,sp,-8
 40125e8:	dfc00115 	stw	ra,4(sp)
 40125ec:	df000015 	stw	fp,0(sp)
 40125f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40125f4:	01810074 	movhi	r6,1025
 40125f8:	319c2704 	addi	r6,r6,28828
 40125fc:	01410074 	movhi	r5,1025
 4012600:	29556304 	addi	r5,r5,21900
 4012604:	01010074 	movhi	r4,1025
 4012608:	211c2704 	addi	r4,r4,28828
 401260c:	401257c0 	call	401257c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4012610:	01810034 	movhi	r6,1024
 4012614:	31809104 	addi	r6,r6,580
 4012618:	01410034 	movhi	r5,1024
 401261c:	29400804 	addi	r5,r5,32
 4012620:	01010034 	movhi	r4,1024
 4012624:	21000804 	addi	r4,r4,32
 4012628:	401257c0 	call	401257c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 401262c:	01810074 	movhi	r6,1025
 4012630:	31956304 	addi	r6,r6,21900
 4012634:	01410074 	movhi	r5,1025
 4012638:	29541804 	addi	r5,r5,20576
 401263c:	01010074 	movhi	r4,1025
 4012640:	21141804 	addi	r4,r4,20576
 4012644:	401257c0 	call	401257c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4012648:	4013d400 	call	4013d40 <alt_dcache_flush_all>
  alt_icache_flush_all();
 401264c:	4013f280 	call	4013f28 <alt_icache_flush_all>
}
 4012650:	0001883a 	nop
 4012654:	e037883a 	mov	sp,fp
 4012658:	dfc00117 	ldw	ra,4(sp)
 401265c:	df000017 	ldw	fp,0(sp)
 4012660:	dec00204 	addi	sp,sp,8
 4012664:	f800283a 	ret

04012668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012668:	defffe04 	addi	sp,sp,-8
 401266c:	dfc00115 	stw	ra,4(sp)
 4012670:	df000015 	stw	fp,0(sp)
 4012674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012678:	d0a01417 	ldw	r2,-32688(gp)
 401267c:	10000326 	beq	r2,zero,401268c <alt_get_errno+0x24>
 4012680:	d0a01417 	ldw	r2,-32688(gp)
 4012684:	103ee83a 	callr	r2
 4012688:	00000106 	br	4012690 <alt_get_errno+0x28>
 401268c:	d0a6e604 	addi	r2,gp,-25704
}
 4012690:	e037883a 	mov	sp,fp
 4012694:	dfc00117 	ldw	ra,4(sp)
 4012698:	df000017 	ldw	fp,0(sp)
 401269c:	dec00204 	addi	sp,sp,8
 40126a0:	f800283a 	ret

040126a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40126a4:	defff904 	addi	sp,sp,-28
 40126a8:	dfc00615 	stw	ra,24(sp)
 40126ac:	df000515 	stw	fp,20(sp)
 40126b0:	df000504 	addi	fp,sp,20
 40126b4:	e13ffd15 	stw	r4,-12(fp)
 40126b8:	e17ffe15 	stw	r5,-8(fp)
 40126bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40126c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40126c4:	e0bffd17 	ldw	r2,-12(fp)
 40126c8:	10000616 	blt	r2,zero,40126e4 <lseek+0x40>
 40126cc:	e0bffd17 	ldw	r2,-12(fp)
 40126d0:	10c00324 	muli	r3,r2,12
 40126d4:	00810074 	movhi	r2,1025
 40126d8:	10979604 	addi	r2,r2,24152
 40126dc:	1885883a 	add	r2,r3,r2
 40126e0:	00000106 	br	40126e8 <lseek+0x44>
 40126e4:	0005883a 	mov	r2,zero
 40126e8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40126ec:	e0bffc17 	ldw	r2,-16(fp)
 40126f0:	10001026 	beq	r2,zero,4012734 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40126f4:	e0bffc17 	ldw	r2,-16(fp)
 40126f8:	10800017 	ldw	r2,0(r2)
 40126fc:	10800717 	ldw	r2,28(r2)
 4012700:	10000926 	beq	r2,zero,4012728 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4012704:	e0bffc17 	ldw	r2,-16(fp)
 4012708:	10800017 	ldw	r2,0(r2)
 401270c:	10800717 	ldw	r2,28(r2)
 4012710:	e1bfff17 	ldw	r6,-4(fp)
 4012714:	e17ffe17 	ldw	r5,-8(fp)
 4012718:	e13ffc17 	ldw	r4,-16(fp)
 401271c:	103ee83a 	callr	r2
 4012720:	e0bffb15 	stw	r2,-20(fp)
 4012724:	00000506 	br	401273c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4012728:	00bfde84 	movi	r2,-134
 401272c:	e0bffb15 	stw	r2,-20(fp)
 4012730:	00000206 	br	401273c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4012734:	00bfebc4 	movi	r2,-81
 4012738:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401273c:	e0bffb17 	ldw	r2,-20(fp)
 4012740:	1000070e 	bge	r2,zero,4012760 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4012744:	40126680 	call	4012668 <alt_get_errno>
 4012748:	1007883a 	mov	r3,r2
 401274c:	e0bffb17 	ldw	r2,-20(fp)
 4012750:	0085c83a 	sub	r2,zero,r2
 4012754:	18800015 	stw	r2,0(r3)
    rc = -1;
 4012758:	00bfffc4 	movi	r2,-1
 401275c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4012760:	e0bffb17 	ldw	r2,-20(fp)
}
 4012764:	e037883a 	mov	sp,fp
 4012768:	dfc00117 	ldw	ra,4(sp)
 401276c:	df000017 	ldw	fp,0(sp)
 4012770:	dec00204 	addi	sp,sp,8
 4012774:	f800283a 	ret

04012778 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4012778:	defffd04 	addi	sp,sp,-12
 401277c:	dfc00215 	stw	ra,8(sp)
 4012780:	df000115 	stw	fp,4(sp)
 4012784:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4012788:	0009883a 	mov	r4,zero
 401278c:	4012d940 	call	4012d94 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4012790:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4012794:	4012dcc0 	call	4012dcc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4012798:	01810074 	movhi	r6,1025
 401279c:	31951b04 	addi	r6,r6,21612
 40127a0:	01410074 	movhi	r5,1025
 40127a4:	29551b04 	addi	r5,r5,21612
 40127a8:	01010074 	movhi	r4,1025
 40127ac:	21151b04 	addi	r4,r4,21612
 40127b0:	40142c00 	call	40142c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40127b4:	4013e680 	call	4013e68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40127b8:	01010074 	movhi	r4,1025
 40127bc:	210fb204 	addi	r4,r4,16072
 40127c0:	4014aa80 	call	4014aa8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40127c4:	d0a6f217 	ldw	r2,-25656(gp)
 40127c8:	d0e6f317 	ldw	r3,-25652(gp)
 40127cc:	d126f417 	ldw	r4,-25648(gp)
 40127d0:	200d883a 	mov	r6,r4
 40127d4:	180b883a 	mov	r5,r3
 40127d8:	1009883a 	mov	r4,r2
 40127dc:	40012980 	call	4001298 <main>
 40127e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40127e4:	01000044 	movi	r4,1
 40127e8:	40120c00 	call	40120c0 <close>
  exit (result);
 40127ec:	e13fff17 	ldw	r4,-4(fp)
 40127f0:	4014ae40 	call	4014ae4 <exit>

040127f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 40127f4:	defffe04 	addi	sp,sp,-8
 40127f8:	df000115 	stw	fp,4(sp)
 40127fc:	df000104 	addi	fp,sp,4
 4012800:	e13fff15 	stw	r4,-4(fp)
}
 4012804:	0001883a 	nop
 4012808:	e037883a 	mov	sp,fp
 401280c:	df000017 	ldw	fp,0(sp)
 4012810:	dec00104 	addi	sp,sp,4
 4012814:	f800283a 	ret

04012818 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4012818:	defffe04 	addi	sp,sp,-8
 401281c:	df000115 	stw	fp,4(sp)
 4012820:	df000104 	addi	fp,sp,4
 4012824:	e13fff15 	stw	r4,-4(fp)
}
 4012828:	0001883a 	nop
 401282c:	e037883a 	mov	sp,fp
 4012830:	df000017 	ldw	fp,0(sp)
 4012834:	dec00104 	addi	sp,sp,4
 4012838:	f800283a 	ret

0401283c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401283c:	defffe04 	addi	sp,sp,-8
 4012840:	dfc00115 	stw	ra,4(sp)
 4012844:	df000015 	stw	fp,0(sp)
 4012848:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401284c:	d0a01417 	ldw	r2,-32688(gp)
 4012850:	10000326 	beq	r2,zero,4012860 <alt_get_errno+0x24>
 4012854:	d0a01417 	ldw	r2,-32688(gp)
 4012858:	103ee83a 	callr	r2
 401285c:	00000106 	br	4012864 <alt_get_errno+0x28>
 4012860:	d0a6e604 	addi	r2,gp,-25704
}
 4012864:	e037883a 	mov	sp,fp
 4012868:	dfc00117 	ldw	ra,4(sp)
 401286c:	df000017 	ldw	fp,0(sp)
 4012870:	dec00204 	addi	sp,sp,8
 4012874:	f800283a 	ret

04012878 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4012878:	defff904 	addi	sp,sp,-28
 401287c:	dfc00615 	stw	ra,24(sp)
 4012880:	df000515 	stw	fp,20(sp)
 4012884:	df000504 	addi	fp,sp,20
 4012888:	e13ffd15 	stw	r4,-12(fp)
 401288c:	e17ffe15 	stw	r5,-8(fp)
 4012890:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4012894:	e0bffd17 	ldw	r2,-12(fp)
 4012898:	10000616 	blt	r2,zero,40128b4 <read+0x3c>
 401289c:	e0bffd17 	ldw	r2,-12(fp)
 40128a0:	10c00324 	muli	r3,r2,12
 40128a4:	00810074 	movhi	r2,1025
 40128a8:	10979604 	addi	r2,r2,24152
 40128ac:	1885883a 	add	r2,r3,r2
 40128b0:	00000106 	br	40128b8 <read+0x40>
 40128b4:	0005883a 	mov	r2,zero
 40128b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40128bc:	e0bffb17 	ldw	r2,-20(fp)
 40128c0:	10002226 	beq	r2,zero,401294c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40128c4:	e0bffb17 	ldw	r2,-20(fp)
 40128c8:	10800217 	ldw	r2,8(r2)
 40128cc:	108000cc 	andi	r2,r2,3
 40128d0:	10800060 	cmpeqi	r2,r2,1
 40128d4:	1000181e 	bne	r2,zero,4012938 <read+0xc0>
        (fd->dev->read))
 40128d8:	e0bffb17 	ldw	r2,-20(fp)
 40128dc:	10800017 	ldw	r2,0(r2)
 40128e0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40128e4:	10001426 	beq	r2,zero,4012938 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40128e8:	e0bffb17 	ldw	r2,-20(fp)
 40128ec:	10800017 	ldw	r2,0(r2)
 40128f0:	10800517 	ldw	r2,20(r2)
 40128f4:	e0ffff17 	ldw	r3,-4(fp)
 40128f8:	180d883a 	mov	r6,r3
 40128fc:	e17ffe17 	ldw	r5,-8(fp)
 4012900:	e13ffb17 	ldw	r4,-20(fp)
 4012904:	103ee83a 	callr	r2
 4012908:	e0bffc15 	stw	r2,-16(fp)
 401290c:	e0bffc17 	ldw	r2,-16(fp)
 4012910:	1000070e 	bge	r2,zero,4012930 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4012914:	401283c0 	call	401283c <alt_get_errno>
 4012918:	1007883a 	mov	r3,r2
 401291c:	e0bffc17 	ldw	r2,-16(fp)
 4012920:	0085c83a 	sub	r2,zero,r2
 4012924:	18800015 	stw	r2,0(r3)
          return -1;
 4012928:	00bfffc4 	movi	r2,-1
 401292c:	00000c06 	br	4012960 <read+0xe8>
        }
        return rval;
 4012930:	e0bffc17 	ldw	r2,-16(fp)
 4012934:	00000a06 	br	4012960 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4012938:	401283c0 	call	401283c <alt_get_errno>
 401293c:	1007883a 	mov	r3,r2
 4012940:	00800344 	movi	r2,13
 4012944:	18800015 	stw	r2,0(r3)
 4012948:	00000406 	br	401295c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401294c:	401283c0 	call	401283c <alt_get_errno>
 4012950:	1007883a 	mov	r3,r2
 4012954:	00801444 	movi	r2,81
 4012958:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401295c:	00bfffc4 	movi	r2,-1
}
 4012960:	e037883a 	mov	sp,fp
 4012964:	dfc00117 	ldw	ra,4(sp)
 4012968:	df000017 	ldw	fp,0(sp)
 401296c:	dec00204 	addi	sp,sp,8
 4012970:	f800283a 	ret

04012974 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4012974:	defffe04 	addi	sp,sp,-8
 4012978:	df000115 	stw	fp,4(sp)
 401297c:	df000104 	addi	fp,sp,4
 4012980:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4012984:	e0bfff17 	ldw	r2,-4(fp)
 4012988:	108000d0 	cmplti	r2,r2,3
 401298c:	10000d1e 	bne	r2,zero,40129c4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4012990:	00810074 	movhi	r2,1025
 4012994:	10979604 	addi	r2,r2,24152
 4012998:	e0ffff17 	ldw	r3,-4(fp)
 401299c:	18c00324 	muli	r3,r3,12
 40129a0:	10c5883a 	add	r2,r2,r3
 40129a4:	10800204 	addi	r2,r2,8
 40129a8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40129ac:	00810074 	movhi	r2,1025
 40129b0:	10979604 	addi	r2,r2,24152
 40129b4:	e0ffff17 	ldw	r3,-4(fp)
 40129b8:	18c00324 	muli	r3,r3,12
 40129bc:	10c5883a 	add	r2,r2,r3
 40129c0:	10000015 	stw	zero,0(r2)
  }
}
 40129c4:	0001883a 	nop
 40129c8:	e037883a 	mov	sp,fp
 40129cc:	df000017 	ldw	fp,0(sp)
 40129d0:	dec00104 	addi	sp,sp,4
 40129d4:	f800283a 	ret

040129d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40129d8:	defff904 	addi	sp,sp,-28
 40129dc:	df000615 	stw	fp,24(sp)
 40129e0:	df000604 	addi	fp,sp,24
 40129e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40129e8:	0005303a 	rdctl	r2,status
 40129ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40129f0:	e0fffe17 	ldw	r3,-8(fp)
 40129f4:	00bfff84 	movi	r2,-2
 40129f8:	1884703a 	and	r2,r3,r2
 40129fc:	1001703a 	wrctl	status,r2
  
  return context;
 4012a00:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4012a04:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4012a08:	d0a01517 	ldw	r2,-32684(gp)
 4012a0c:	10c000c4 	addi	r3,r2,3
 4012a10:	00bfff04 	movi	r2,-4
 4012a14:	1884703a 	and	r2,r3,r2
 4012a18:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4012a1c:	d0e01517 	ldw	r3,-32684(gp)
 4012a20:	e0bfff17 	ldw	r2,-4(fp)
 4012a24:	1887883a 	add	r3,r3,r2
 4012a28:	00820034 	movhi	r2,2048
 4012a2c:	10800004 	addi	r2,r2,0
 4012a30:	10c0062e 	bgeu	r2,r3,4012a4c <sbrk+0x74>
 4012a34:	e0bffb17 	ldw	r2,-20(fp)
 4012a38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012a3c:	e0bffa17 	ldw	r2,-24(fp)
 4012a40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4012a44:	00bfffc4 	movi	r2,-1
 4012a48:	00000b06 	br	4012a78 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4012a4c:	d0a01517 	ldw	r2,-32684(gp)
 4012a50:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4012a54:	d0e01517 	ldw	r3,-32684(gp)
 4012a58:	e0bfff17 	ldw	r2,-4(fp)
 4012a5c:	1885883a 	add	r2,r3,r2
 4012a60:	d0a01515 	stw	r2,-32684(gp)
 4012a64:	e0bffb17 	ldw	r2,-20(fp)
 4012a68:	e0bffc15 	stw	r2,-16(fp)
 4012a6c:	e0bffc17 	ldw	r2,-16(fp)
 4012a70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4012a74:	e0bffd17 	ldw	r2,-12(fp)
} 
 4012a78:	e037883a 	mov	sp,fp
 4012a7c:	df000017 	ldw	fp,0(sp)
 4012a80:	dec00104 	addi	sp,sp,4
 4012a84:	f800283a 	ret

04012a88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4012a88:	defffa04 	addi	sp,sp,-24
 4012a8c:	df000515 	stw	fp,20(sp)
 4012a90:	df000504 	addi	fp,sp,20
 4012a94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012a98:	0005303a 	rdctl	r2,status
 4012a9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012aa0:	e0fffc17 	ldw	r3,-16(fp)
 4012aa4:	00bfff84 	movi	r2,-2
 4012aa8:	1884703a 	and	r2,r3,r2
 4012aac:	1001703a 	wrctl	status,r2
  
  return context;
 4012ab0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4012ab4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4012ab8:	e0bfff17 	ldw	r2,-4(fp)
 4012abc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4012ac0:	e0bffd17 	ldw	r2,-12(fp)
 4012ac4:	10800017 	ldw	r2,0(r2)
 4012ac8:	e0fffd17 	ldw	r3,-12(fp)
 4012acc:	18c00117 	ldw	r3,4(r3)
 4012ad0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4012ad4:	e0bffd17 	ldw	r2,-12(fp)
 4012ad8:	10800117 	ldw	r2,4(r2)
 4012adc:	e0fffd17 	ldw	r3,-12(fp)
 4012ae0:	18c00017 	ldw	r3,0(r3)
 4012ae4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4012ae8:	e0bffd17 	ldw	r2,-12(fp)
 4012aec:	e0fffd17 	ldw	r3,-12(fp)
 4012af0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4012af4:	e0bffd17 	ldw	r2,-12(fp)
 4012af8:	e0fffd17 	ldw	r3,-12(fp)
 4012afc:	10c00015 	stw	r3,0(r2)
 4012b00:	e0bffb17 	ldw	r2,-20(fp)
 4012b04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012b08:	e0bffe17 	ldw	r2,-8(fp)
 4012b0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4012b10:	0001883a 	nop
 4012b14:	e037883a 	mov	sp,fp
 4012b18:	df000017 	ldw	fp,0(sp)
 4012b1c:	dec00104 	addi	sp,sp,4
 4012b20:	f800283a 	ret

04012b24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4012b24:	defffb04 	addi	sp,sp,-20
 4012b28:	dfc00415 	stw	ra,16(sp)
 4012b2c:	df000315 	stw	fp,12(sp)
 4012b30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4012b34:	d0a01617 	ldw	r2,-32680(gp)
 4012b38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4012b3c:	d0a6f617 	ldw	r2,-25640(gp)
 4012b40:	10800044 	addi	r2,r2,1
 4012b44:	d0a6f615 	stw	r2,-25640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4012b48:	00002e06 	br	4012c04 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4012b4c:	e0bffd17 	ldw	r2,-12(fp)
 4012b50:	10800017 	ldw	r2,0(r2)
 4012b54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4012b58:	e0bffd17 	ldw	r2,-12(fp)
 4012b5c:	10800403 	ldbu	r2,16(r2)
 4012b60:	10803fcc 	andi	r2,r2,255
 4012b64:	10000426 	beq	r2,zero,4012b78 <alt_tick+0x54>
 4012b68:	d0a6f617 	ldw	r2,-25640(gp)
 4012b6c:	1000021e 	bne	r2,zero,4012b78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4012b70:	e0bffd17 	ldw	r2,-12(fp)
 4012b74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4012b78:	e0bffd17 	ldw	r2,-12(fp)
 4012b7c:	10800217 	ldw	r2,8(r2)
 4012b80:	d0e6f617 	ldw	r3,-25640(gp)
 4012b84:	18801d36 	bltu	r3,r2,4012bfc <alt_tick+0xd8>
 4012b88:	e0bffd17 	ldw	r2,-12(fp)
 4012b8c:	10800403 	ldbu	r2,16(r2)
 4012b90:	10803fcc 	andi	r2,r2,255
 4012b94:	1000191e 	bne	r2,zero,4012bfc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4012b98:	e0bffd17 	ldw	r2,-12(fp)
 4012b9c:	10800317 	ldw	r2,12(r2)
 4012ba0:	e0fffd17 	ldw	r3,-12(fp)
 4012ba4:	18c00517 	ldw	r3,20(r3)
 4012ba8:	1809883a 	mov	r4,r3
 4012bac:	103ee83a 	callr	r2
 4012bb0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4012bb4:	e0bfff17 	ldw	r2,-4(fp)
 4012bb8:	1000031e 	bne	r2,zero,4012bc8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4012bbc:	e13ffd17 	ldw	r4,-12(fp)
 4012bc0:	4012a880 	call	4012a88 <alt_alarm_stop>
 4012bc4:	00000d06 	br	4012bfc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4012bc8:	e0bffd17 	ldw	r2,-12(fp)
 4012bcc:	10c00217 	ldw	r3,8(r2)
 4012bd0:	e0bfff17 	ldw	r2,-4(fp)
 4012bd4:	1887883a 	add	r3,r3,r2
 4012bd8:	e0bffd17 	ldw	r2,-12(fp)
 4012bdc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4012be0:	e0bffd17 	ldw	r2,-12(fp)
 4012be4:	10c00217 	ldw	r3,8(r2)
 4012be8:	d0a6f617 	ldw	r2,-25640(gp)
 4012bec:	1880032e 	bgeu	r3,r2,4012bfc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4012bf0:	e0bffd17 	ldw	r2,-12(fp)
 4012bf4:	00c00044 	movi	r3,1
 4012bf8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4012bfc:	e0bffe17 	ldw	r2,-8(fp)
 4012c00:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4012c04:	e0fffd17 	ldw	r3,-12(fp)
 4012c08:	d0a01604 	addi	r2,gp,-32680
 4012c0c:	18bfcf1e 	bne	r3,r2,4012b4c <__alt_data_end+0xfc012b4c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4012c10:	0001883a 	nop
}
 4012c14:	0001883a 	nop
 4012c18:	e037883a 	mov	sp,fp
 4012c1c:	dfc00117 	ldw	ra,4(sp)
 4012c20:	df000017 	ldw	fp,0(sp)
 4012c24:	dec00204 	addi	sp,sp,8
 4012c28:	f800283a 	ret

04012c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012c2c:	defffe04 	addi	sp,sp,-8
 4012c30:	dfc00115 	stw	ra,4(sp)
 4012c34:	df000015 	stw	fp,0(sp)
 4012c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012c3c:	d0a01417 	ldw	r2,-32688(gp)
 4012c40:	10000326 	beq	r2,zero,4012c50 <alt_get_errno+0x24>
 4012c44:	d0a01417 	ldw	r2,-32688(gp)
 4012c48:	103ee83a 	callr	r2
 4012c4c:	00000106 	br	4012c54 <alt_get_errno+0x28>
 4012c50:	d0a6e604 	addi	r2,gp,-25704
}
 4012c54:	e037883a 	mov	sp,fp
 4012c58:	dfc00117 	ldw	ra,4(sp)
 4012c5c:	df000017 	ldw	fp,0(sp)
 4012c60:	dec00204 	addi	sp,sp,8
 4012c64:	f800283a 	ret

04012c68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4012c68:	defff904 	addi	sp,sp,-28
 4012c6c:	dfc00615 	stw	ra,24(sp)
 4012c70:	df000515 	stw	fp,20(sp)
 4012c74:	df000504 	addi	fp,sp,20
 4012c78:	e13ffd15 	stw	r4,-12(fp)
 4012c7c:	e17ffe15 	stw	r5,-8(fp)
 4012c80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4012c84:	e0bffd17 	ldw	r2,-12(fp)
 4012c88:	10000616 	blt	r2,zero,4012ca4 <write+0x3c>
 4012c8c:	e0bffd17 	ldw	r2,-12(fp)
 4012c90:	10c00324 	muli	r3,r2,12
 4012c94:	00810074 	movhi	r2,1025
 4012c98:	10979604 	addi	r2,r2,24152
 4012c9c:	1885883a 	add	r2,r3,r2
 4012ca0:	00000106 	br	4012ca8 <write+0x40>
 4012ca4:	0005883a 	mov	r2,zero
 4012ca8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4012cac:	e0bffb17 	ldw	r2,-20(fp)
 4012cb0:	10002126 	beq	r2,zero,4012d38 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4012cb4:	e0bffb17 	ldw	r2,-20(fp)
 4012cb8:	10800217 	ldw	r2,8(r2)
 4012cbc:	108000cc 	andi	r2,r2,3
 4012cc0:	10001826 	beq	r2,zero,4012d24 <write+0xbc>
 4012cc4:	e0bffb17 	ldw	r2,-20(fp)
 4012cc8:	10800017 	ldw	r2,0(r2)
 4012ccc:	10800617 	ldw	r2,24(r2)
 4012cd0:	10001426 	beq	r2,zero,4012d24 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4012cd4:	e0bffb17 	ldw	r2,-20(fp)
 4012cd8:	10800017 	ldw	r2,0(r2)
 4012cdc:	10800617 	ldw	r2,24(r2)
 4012ce0:	e0ffff17 	ldw	r3,-4(fp)
 4012ce4:	180d883a 	mov	r6,r3
 4012ce8:	e17ffe17 	ldw	r5,-8(fp)
 4012cec:	e13ffb17 	ldw	r4,-20(fp)
 4012cf0:	103ee83a 	callr	r2
 4012cf4:	e0bffc15 	stw	r2,-16(fp)
 4012cf8:	e0bffc17 	ldw	r2,-16(fp)
 4012cfc:	1000070e 	bge	r2,zero,4012d1c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4012d00:	4012c2c0 	call	4012c2c <alt_get_errno>
 4012d04:	1007883a 	mov	r3,r2
 4012d08:	e0bffc17 	ldw	r2,-16(fp)
 4012d0c:	0085c83a 	sub	r2,zero,r2
 4012d10:	18800015 	stw	r2,0(r3)
        return -1;
 4012d14:	00bfffc4 	movi	r2,-1
 4012d18:	00000c06 	br	4012d4c <write+0xe4>
      }
      return rval;
 4012d1c:	e0bffc17 	ldw	r2,-16(fp)
 4012d20:	00000a06 	br	4012d4c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4012d24:	4012c2c0 	call	4012c2c <alt_get_errno>
 4012d28:	1007883a 	mov	r3,r2
 4012d2c:	00800344 	movi	r2,13
 4012d30:	18800015 	stw	r2,0(r3)
 4012d34:	00000406 	br	4012d48 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4012d38:	4012c2c0 	call	4012c2c <alt_get_errno>
 4012d3c:	1007883a 	mov	r3,r2
 4012d40:	00801444 	movi	r2,81
 4012d44:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4012d48:	00bfffc4 	movi	r2,-1
}
 4012d4c:	e037883a 	mov	sp,fp
 4012d50:	dfc00117 	ldw	ra,4(sp)
 4012d54:	df000017 	ldw	fp,0(sp)
 4012d58:	dec00204 	addi	sp,sp,8
 4012d5c:	f800283a 	ret

04012d60 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4012d60:	defffd04 	addi	sp,sp,-12
 4012d64:	dfc00215 	stw	ra,8(sp)
 4012d68:	df000115 	stw	fp,4(sp)
 4012d6c:	df000104 	addi	fp,sp,4
 4012d70:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4012d74:	d1601104 	addi	r5,gp,-32700
 4012d78:	e13fff17 	ldw	r4,-4(fp)
 4012d7c:	4013dc40 	call	4013dc4 <alt_dev_llist_insert>
}
 4012d80:	e037883a 	mov	sp,fp
 4012d84:	dfc00117 	ldw	ra,4(sp)
 4012d88:	df000017 	ldw	fp,0(sp)
 4012d8c:	dec00204 	addi	sp,sp,8
 4012d90:	f800283a 	ret

04012d94 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4012d94:	defffd04 	addi	sp,sp,-12
 4012d98:	dfc00215 	stw	ra,8(sp)
 4012d9c:	df000115 	stw	fp,4(sp)
 4012da0:	df000104 	addi	fp,sp,4
 4012da4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 4012da8:	40145900 	call	4014590 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4012dac:	00800044 	movi	r2,1
 4012db0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4012db4:	0001883a 	nop
 4012db8:	e037883a 	mov	sp,fp
 4012dbc:	dfc00117 	ldw	ra,4(sp)
 4012dc0:	df000017 	ldw	fp,0(sp)
 4012dc4:	dec00204 	addi	sp,sp,8
 4012dc8:	f800283a 	ret

04012dcc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4012dcc:	defffe04 	addi	sp,sp,-8
 4012dd0:	dfc00115 	stw	ra,4(sp)
 4012dd4:	df000015 	stw	fp,0(sp)
 4012dd8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4012ddc:	01c0fa04 	movi	r7,1000
 4012de0:	01800044 	movi	r6,1
 4012de4:	000b883a 	mov	r5,zero
 4012de8:	01020034 	movhi	r4,2048
 4012dec:	40139180 	call	4013918 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4012df0:	000d883a 	mov	r6,zero
 4012df4:	000b883a 	mov	r5,zero
 4012df8:	01010074 	movhi	r4,1025
 4012dfc:	21180004 	addi	r4,r4,24576
 4012e00:	4012f9c0 	call	4012f9c <altera_avalon_jtag_uart_init>
 4012e04:	01010074 	movhi	r4,1025
 4012e08:	2117f604 	addi	r4,r4,24536
 4012e0c:	4012d600 	call	4012d60 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 4012e10:	00800044 	movi	r2,1
 4012e14:	0007883a 	mov	r3,zero
 4012e18:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4012e1c:	0001883a 	nop
}
 4012e20:	0001883a 	nop
 4012e24:	e037883a 	mov	sp,fp
 4012e28:	dfc00117 	ldw	ra,4(sp)
 4012e2c:	df000017 	ldw	fp,0(sp)
 4012e30:	dec00204 	addi	sp,sp,8
 4012e34:	f800283a 	ret

04012e38 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4012e38:	defffa04 	addi	sp,sp,-24
 4012e3c:	dfc00515 	stw	ra,20(sp)
 4012e40:	df000415 	stw	fp,16(sp)
 4012e44:	df000404 	addi	fp,sp,16
 4012e48:	e13ffd15 	stw	r4,-12(fp)
 4012e4c:	e17ffe15 	stw	r5,-8(fp)
 4012e50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4012e54:	e0bffd17 	ldw	r2,-12(fp)
 4012e58:	10800017 	ldw	r2,0(r2)
 4012e5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4012e60:	e0bffc17 	ldw	r2,-16(fp)
 4012e64:	10c00a04 	addi	r3,r2,40
 4012e68:	e0bffd17 	ldw	r2,-12(fp)
 4012e6c:	10800217 	ldw	r2,8(r2)
 4012e70:	100f883a 	mov	r7,r2
 4012e74:	e1bfff17 	ldw	r6,-4(fp)
 4012e78:	e17ffe17 	ldw	r5,-8(fp)
 4012e7c:	1809883a 	mov	r4,r3
 4012e80:	40134600 	call	4013460 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4012e84:	e037883a 	mov	sp,fp
 4012e88:	dfc00117 	ldw	ra,4(sp)
 4012e8c:	df000017 	ldw	fp,0(sp)
 4012e90:	dec00204 	addi	sp,sp,8
 4012e94:	f800283a 	ret

04012e98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4012e98:	defffa04 	addi	sp,sp,-24
 4012e9c:	dfc00515 	stw	ra,20(sp)
 4012ea0:	df000415 	stw	fp,16(sp)
 4012ea4:	df000404 	addi	fp,sp,16
 4012ea8:	e13ffd15 	stw	r4,-12(fp)
 4012eac:	e17ffe15 	stw	r5,-8(fp)
 4012eb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4012eb4:	e0bffd17 	ldw	r2,-12(fp)
 4012eb8:	10800017 	ldw	r2,0(r2)
 4012ebc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4012ec0:	e0bffc17 	ldw	r2,-16(fp)
 4012ec4:	10c00a04 	addi	r3,r2,40
 4012ec8:	e0bffd17 	ldw	r2,-12(fp)
 4012ecc:	10800217 	ldw	r2,8(r2)
 4012ed0:	100f883a 	mov	r7,r2
 4012ed4:	e1bfff17 	ldw	r6,-4(fp)
 4012ed8:	e17ffe17 	ldw	r5,-8(fp)
 4012edc:	1809883a 	mov	r4,r3
 4012ee0:	401367c0 	call	401367c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4012ee4:	e037883a 	mov	sp,fp
 4012ee8:	dfc00117 	ldw	ra,4(sp)
 4012eec:	df000017 	ldw	fp,0(sp)
 4012ef0:	dec00204 	addi	sp,sp,8
 4012ef4:	f800283a 	ret

04012ef8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4012ef8:	defffc04 	addi	sp,sp,-16
 4012efc:	dfc00315 	stw	ra,12(sp)
 4012f00:	df000215 	stw	fp,8(sp)
 4012f04:	df000204 	addi	fp,sp,8
 4012f08:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4012f0c:	e0bfff17 	ldw	r2,-4(fp)
 4012f10:	10800017 	ldw	r2,0(r2)
 4012f14:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4012f18:	e0bffe17 	ldw	r2,-8(fp)
 4012f1c:	10c00a04 	addi	r3,r2,40
 4012f20:	e0bfff17 	ldw	r2,-4(fp)
 4012f24:	10800217 	ldw	r2,8(r2)
 4012f28:	100b883a 	mov	r5,r2
 4012f2c:	1809883a 	mov	r4,r3
 4012f30:	40133080 	call	4013308 <altera_avalon_jtag_uart_close>
}
 4012f34:	e037883a 	mov	sp,fp
 4012f38:	dfc00117 	ldw	ra,4(sp)
 4012f3c:	df000017 	ldw	fp,0(sp)
 4012f40:	dec00204 	addi	sp,sp,8
 4012f44:	f800283a 	ret

04012f48 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4012f48:	defffa04 	addi	sp,sp,-24
 4012f4c:	dfc00515 	stw	ra,20(sp)
 4012f50:	df000415 	stw	fp,16(sp)
 4012f54:	df000404 	addi	fp,sp,16
 4012f58:	e13ffd15 	stw	r4,-12(fp)
 4012f5c:	e17ffe15 	stw	r5,-8(fp)
 4012f60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4012f64:	e0bffd17 	ldw	r2,-12(fp)
 4012f68:	10800017 	ldw	r2,0(r2)
 4012f6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4012f70:	e0bffc17 	ldw	r2,-16(fp)
 4012f74:	10800a04 	addi	r2,r2,40
 4012f78:	e1bfff17 	ldw	r6,-4(fp)
 4012f7c:	e17ffe17 	ldw	r5,-8(fp)
 4012f80:	1009883a 	mov	r4,r2
 4012f84:	40133700 	call	4013370 <altera_avalon_jtag_uart_ioctl>
}
 4012f88:	e037883a 	mov	sp,fp
 4012f8c:	dfc00117 	ldw	ra,4(sp)
 4012f90:	df000017 	ldw	fp,0(sp)
 4012f94:	dec00204 	addi	sp,sp,8
 4012f98:	f800283a 	ret

04012f9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4012f9c:	defffa04 	addi	sp,sp,-24
 4012fa0:	dfc00515 	stw	ra,20(sp)
 4012fa4:	df000415 	stw	fp,16(sp)
 4012fa8:	df000404 	addi	fp,sp,16
 4012fac:	e13ffd15 	stw	r4,-12(fp)
 4012fb0:	e17ffe15 	stw	r5,-8(fp)
 4012fb4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4012fb8:	e0bffd17 	ldw	r2,-12(fp)
 4012fbc:	00c00044 	movi	r3,1
 4012fc0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4012fc4:	e0bffd17 	ldw	r2,-12(fp)
 4012fc8:	10800017 	ldw	r2,0(r2)
 4012fcc:	10800104 	addi	r2,r2,4
 4012fd0:	1007883a 	mov	r3,r2
 4012fd4:	e0bffd17 	ldw	r2,-12(fp)
 4012fd8:	10800817 	ldw	r2,32(r2)
 4012fdc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4012fe0:	e0bffe17 	ldw	r2,-8(fp)
 4012fe4:	e0ffff17 	ldw	r3,-4(fp)
 4012fe8:	d8000015 	stw	zero,0(sp)
 4012fec:	e1fffd17 	ldw	r7,-12(fp)
 4012ff0:	01810074 	movhi	r6,1025
 4012ff4:	318c1704 	addi	r6,r6,12380
 4012ff8:	180b883a 	mov	r5,r3
 4012ffc:	1009883a 	mov	r4,r2
 4013000:	4013f5c0 	call	4013f5c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4013004:	e0bffd17 	ldw	r2,-12(fp)
 4013008:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401300c:	e0bffd17 	ldw	r2,-12(fp)
 4013010:	10800204 	addi	r2,r2,8
 4013014:	d0e6f517 	ldw	r3,-25644(gp)
 4013018:	e1fffd17 	ldw	r7,-12(fp)
 401301c:	01810074 	movhi	r6,1025
 4013020:	318c9a04 	addi	r6,r6,12904
 4013024:	180b883a 	mov	r5,r3
 4013028:	1009883a 	mov	r4,r2
 401302c:	4013c140 	call	4013c14 <alt_alarm_start>
 4013030:	1000040e 	bge	r2,zero,4013044 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4013034:	e0fffd17 	ldw	r3,-12(fp)
 4013038:	00a00034 	movhi	r2,32768
 401303c:	10bfffc4 	addi	r2,r2,-1
 4013040:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4013044:	0001883a 	nop
 4013048:	e037883a 	mov	sp,fp
 401304c:	dfc00117 	ldw	ra,4(sp)
 4013050:	df000017 	ldw	fp,0(sp)
 4013054:	dec00204 	addi	sp,sp,8
 4013058:	f800283a 	ret

0401305c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401305c:	defff804 	addi	sp,sp,-32
 4013060:	df000715 	stw	fp,28(sp)
 4013064:	df000704 	addi	fp,sp,28
 4013068:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401306c:	e0bfff17 	ldw	r2,-4(fp)
 4013070:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4013074:	e0bffb17 	ldw	r2,-20(fp)
 4013078:	10800017 	ldw	r2,0(r2)
 401307c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013080:	e0bffc17 	ldw	r2,-16(fp)
 4013084:	10800104 	addi	r2,r2,4
 4013088:	10800037 	ldwio	r2,0(r2)
 401308c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4013090:	e0bffd17 	ldw	r2,-12(fp)
 4013094:	1080c00c 	andi	r2,r2,768
 4013098:	10006d26 	beq	r2,zero,4013250 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401309c:	e0bffd17 	ldw	r2,-12(fp)
 40130a0:	1080400c 	andi	r2,r2,256
 40130a4:	10003526 	beq	r2,zero,401317c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40130a8:	00800074 	movhi	r2,1
 40130ac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40130b0:	e0bffb17 	ldw	r2,-20(fp)
 40130b4:	10800a17 	ldw	r2,40(r2)
 40130b8:	10800044 	addi	r2,r2,1
 40130bc:	1081ffcc 	andi	r2,r2,2047
 40130c0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 40130c4:	e0bffb17 	ldw	r2,-20(fp)
 40130c8:	10c00b17 	ldw	r3,44(r2)
 40130cc:	e0bffe17 	ldw	r2,-8(fp)
 40130d0:	18801526 	beq	r3,r2,4013128 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40130d4:	e0bffc17 	ldw	r2,-16(fp)
 40130d8:	10800037 	ldwio	r2,0(r2)
 40130dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40130e0:	e0bff917 	ldw	r2,-28(fp)
 40130e4:	10a0000c 	andi	r2,r2,32768
 40130e8:	10001126 	beq	r2,zero,4013130 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40130ec:	e0bffb17 	ldw	r2,-20(fp)
 40130f0:	10800a17 	ldw	r2,40(r2)
 40130f4:	e0fff917 	ldw	r3,-28(fp)
 40130f8:	1809883a 	mov	r4,r3
 40130fc:	e0fffb17 	ldw	r3,-20(fp)
 4013100:	1885883a 	add	r2,r3,r2
 4013104:	10800e04 	addi	r2,r2,56
 4013108:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401310c:	e0bffb17 	ldw	r2,-20(fp)
 4013110:	10800a17 	ldw	r2,40(r2)
 4013114:	10800044 	addi	r2,r2,1
 4013118:	10c1ffcc 	andi	r3,r2,2047
 401311c:	e0bffb17 	ldw	r2,-20(fp)
 4013120:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4013124:	003fe206 	br	40130b0 <__alt_data_end+0xfc0130b0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4013128:	0001883a 	nop
 401312c:	00000106 	br	4013134 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4013130:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4013134:	e0bff917 	ldw	r2,-28(fp)
 4013138:	10bfffec 	andhi	r2,r2,65535
 401313c:	10000f26 	beq	r2,zero,401317c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013140:	e0bffb17 	ldw	r2,-20(fp)
 4013144:	10c00817 	ldw	r3,32(r2)
 4013148:	00bfff84 	movi	r2,-2
 401314c:	1886703a 	and	r3,r3,r2
 4013150:	e0bffb17 	ldw	r2,-20(fp)
 4013154:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4013158:	e0bffc17 	ldw	r2,-16(fp)
 401315c:	10800104 	addi	r2,r2,4
 4013160:	1007883a 	mov	r3,r2
 4013164:	e0bffb17 	ldw	r2,-20(fp)
 4013168:	10800817 	ldw	r2,32(r2)
 401316c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013170:	e0bffc17 	ldw	r2,-16(fp)
 4013174:	10800104 	addi	r2,r2,4
 4013178:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401317c:	e0bffd17 	ldw	r2,-12(fp)
 4013180:	1080800c 	andi	r2,r2,512
 4013184:	103fbe26 	beq	r2,zero,4013080 <__alt_data_end+0xfc013080>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4013188:	e0bffd17 	ldw	r2,-12(fp)
 401318c:	1004d43a 	srli	r2,r2,16
 4013190:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4013194:	00001406 	br	40131e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4013198:	e0bffc17 	ldw	r2,-16(fp)
 401319c:	e0fffb17 	ldw	r3,-20(fp)
 40131a0:	18c00d17 	ldw	r3,52(r3)
 40131a4:	e13ffb17 	ldw	r4,-20(fp)
 40131a8:	20c7883a 	add	r3,r4,r3
 40131ac:	18c20e04 	addi	r3,r3,2104
 40131b0:	18c00003 	ldbu	r3,0(r3)
 40131b4:	18c03fcc 	andi	r3,r3,255
 40131b8:	18c0201c 	xori	r3,r3,128
 40131bc:	18ffe004 	addi	r3,r3,-128
 40131c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40131c4:	e0bffb17 	ldw	r2,-20(fp)
 40131c8:	10800d17 	ldw	r2,52(r2)
 40131cc:	10800044 	addi	r2,r2,1
 40131d0:	10c1ffcc 	andi	r3,r2,2047
 40131d4:	e0bffb17 	ldw	r2,-20(fp)
 40131d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40131dc:	e0bffa17 	ldw	r2,-24(fp)
 40131e0:	10bfffc4 	addi	r2,r2,-1
 40131e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40131e8:	e0bffa17 	ldw	r2,-24(fp)
 40131ec:	10000526 	beq	r2,zero,4013204 <altera_avalon_jtag_uart_irq+0x1a8>
 40131f0:	e0bffb17 	ldw	r2,-20(fp)
 40131f4:	10c00d17 	ldw	r3,52(r2)
 40131f8:	e0bffb17 	ldw	r2,-20(fp)
 40131fc:	10800c17 	ldw	r2,48(r2)
 4013200:	18bfe51e 	bne	r3,r2,4013198 <__alt_data_end+0xfc013198>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4013204:	e0bffa17 	ldw	r2,-24(fp)
 4013208:	103f9d26 	beq	r2,zero,4013080 <__alt_data_end+0xfc013080>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401320c:	e0bffb17 	ldw	r2,-20(fp)
 4013210:	10c00817 	ldw	r3,32(r2)
 4013214:	00bfff44 	movi	r2,-3
 4013218:	1886703a 	and	r3,r3,r2
 401321c:	e0bffb17 	ldw	r2,-20(fp)
 4013220:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013224:	e0bffb17 	ldw	r2,-20(fp)
 4013228:	10800017 	ldw	r2,0(r2)
 401322c:	10800104 	addi	r2,r2,4
 4013230:	1007883a 	mov	r3,r2
 4013234:	e0bffb17 	ldw	r2,-20(fp)
 4013238:	10800817 	ldw	r2,32(r2)
 401323c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013240:	e0bffc17 	ldw	r2,-16(fp)
 4013244:	10800104 	addi	r2,r2,4
 4013248:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401324c:	003f8c06 	br	4013080 <__alt_data_end+0xfc013080>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4013250:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4013254:	0001883a 	nop
 4013258:	e037883a 	mov	sp,fp
 401325c:	df000017 	ldw	fp,0(sp)
 4013260:	dec00104 	addi	sp,sp,4
 4013264:	f800283a 	ret

04013268 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4013268:	defff804 	addi	sp,sp,-32
 401326c:	df000715 	stw	fp,28(sp)
 4013270:	df000704 	addi	fp,sp,28
 4013274:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4013278:	e0bffb17 	ldw	r2,-20(fp)
 401327c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4013280:	e0bff917 	ldw	r2,-28(fp)
 4013284:	10800017 	ldw	r2,0(r2)
 4013288:	10800104 	addi	r2,r2,4
 401328c:	10800037 	ldwio	r2,0(r2)
 4013290:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4013294:	e0bffa17 	ldw	r2,-24(fp)
 4013298:	1081000c 	andi	r2,r2,1024
 401329c:	10000b26 	beq	r2,zero,40132cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40132a0:	e0bff917 	ldw	r2,-28(fp)
 40132a4:	10800017 	ldw	r2,0(r2)
 40132a8:	10800104 	addi	r2,r2,4
 40132ac:	1007883a 	mov	r3,r2
 40132b0:	e0bff917 	ldw	r2,-28(fp)
 40132b4:	10800817 	ldw	r2,32(r2)
 40132b8:	10810014 	ori	r2,r2,1024
 40132bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40132c0:	e0bff917 	ldw	r2,-28(fp)
 40132c4:	10000915 	stw	zero,36(r2)
 40132c8:	00000a06 	br	40132f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40132cc:	e0bff917 	ldw	r2,-28(fp)
 40132d0:	10c00917 	ldw	r3,36(r2)
 40132d4:	00a00034 	movhi	r2,32768
 40132d8:	10bfff04 	addi	r2,r2,-4
 40132dc:	10c00536 	bltu	r2,r3,40132f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40132e0:	e0bff917 	ldw	r2,-28(fp)
 40132e4:	10800917 	ldw	r2,36(r2)
 40132e8:	10c00044 	addi	r3,r2,1
 40132ec:	e0bff917 	ldw	r2,-28(fp)
 40132f0:	10c00915 	stw	r3,36(r2)
 40132f4:	d0a6f517 	ldw	r2,-25644(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40132f8:	e037883a 	mov	sp,fp
 40132fc:	df000017 	ldw	fp,0(sp)
 4013300:	dec00104 	addi	sp,sp,4
 4013304:	f800283a 	ret

04013308 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4013308:	defffd04 	addi	sp,sp,-12
 401330c:	df000215 	stw	fp,8(sp)
 4013310:	df000204 	addi	fp,sp,8
 4013314:	e13ffe15 	stw	r4,-8(fp)
 4013318:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401331c:	00000506 	br	4013334 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4013320:	e0bfff17 	ldw	r2,-4(fp)
 4013324:	1090000c 	andi	r2,r2,16384
 4013328:	10000226 	beq	r2,zero,4013334 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401332c:	00bffd44 	movi	r2,-11
 4013330:	00000b06 	br	4013360 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4013334:	e0bffe17 	ldw	r2,-8(fp)
 4013338:	10c00d17 	ldw	r3,52(r2)
 401333c:	e0bffe17 	ldw	r2,-8(fp)
 4013340:	10800c17 	ldw	r2,48(r2)
 4013344:	18800526 	beq	r3,r2,401335c <altera_avalon_jtag_uart_close+0x54>
 4013348:	e0bffe17 	ldw	r2,-8(fp)
 401334c:	10c00917 	ldw	r3,36(r2)
 4013350:	e0bffe17 	ldw	r2,-8(fp)
 4013354:	10800117 	ldw	r2,4(r2)
 4013358:	18bff136 	bltu	r3,r2,4013320 <__alt_data_end+0xfc013320>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401335c:	0005883a 	mov	r2,zero
}
 4013360:	e037883a 	mov	sp,fp
 4013364:	df000017 	ldw	fp,0(sp)
 4013368:	dec00104 	addi	sp,sp,4
 401336c:	f800283a 	ret

04013370 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4013370:	defffa04 	addi	sp,sp,-24
 4013374:	df000515 	stw	fp,20(sp)
 4013378:	df000504 	addi	fp,sp,20
 401337c:	e13ffd15 	stw	r4,-12(fp)
 4013380:	e17ffe15 	stw	r5,-8(fp)
 4013384:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4013388:	00bff9c4 	movi	r2,-25
 401338c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4013390:	e0bffe17 	ldw	r2,-8(fp)
 4013394:	10da8060 	cmpeqi	r3,r2,27137
 4013398:	1800031e 	bne	r3,zero,40133a8 <altera_avalon_jtag_uart_ioctl+0x38>
 401339c:	109a80a0 	cmpeqi	r2,r2,27138
 40133a0:	1000181e 	bne	r2,zero,4013404 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40133a4:	00002906 	br	401344c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40133a8:	e0bffd17 	ldw	r2,-12(fp)
 40133ac:	10c00117 	ldw	r3,4(r2)
 40133b0:	00a00034 	movhi	r2,32768
 40133b4:	10bfffc4 	addi	r2,r2,-1
 40133b8:	18802126 	beq	r3,r2,4013440 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40133bc:	e0bfff17 	ldw	r2,-4(fp)
 40133c0:	10800017 	ldw	r2,0(r2)
 40133c4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40133c8:	e0bffc17 	ldw	r2,-16(fp)
 40133cc:	10800090 	cmplti	r2,r2,2
 40133d0:	1000061e 	bne	r2,zero,40133ec <altera_avalon_jtag_uart_ioctl+0x7c>
 40133d4:	e0fffc17 	ldw	r3,-16(fp)
 40133d8:	00a00034 	movhi	r2,32768
 40133dc:	10bfffc4 	addi	r2,r2,-1
 40133e0:	18800226 	beq	r3,r2,40133ec <altera_avalon_jtag_uart_ioctl+0x7c>
 40133e4:	e0bffc17 	ldw	r2,-16(fp)
 40133e8:	00000206 	br	40133f4 <altera_avalon_jtag_uart_ioctl+0x84>
 40133ec:	00a00034 	movhi	r2,32768
 40133f0:	10bfff84 	addi	r2,r2,-2
 40133f4:	e0fffd17 	ldw	r3,-12(fp)
 40133f8:	18800115 	stw	r2,4(r3)
      rc = 0;
 40133fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4013400:	00000f06 	br	4013440 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4013404:	e0bffd17 	ldw	r2,-12(fp)
 4013408:	10c00117 	ldw	r3,4(r2)
 401340c:	00a00034 	movhi	r2,32768
 4013410:	10bfffc4 	addi	r2,r2,-1
 4013414:	18800c26 	beq	r3,r2,4013448 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4013418:	e0bffd17 	ldw	r2,-12(fp)
 401341c:	10c00917 	ldw	r3,36(r2)
 4013420:	e0bffd17 	ldw	r2,-12(fp)
 4013424:	10800117 	ldw	r2,4(r2)
 4013428:	1885803a 	cmpltu	r2,r3,r2
 401342c:	10c03fcc 	andi	r3,r2,255
 4013430:	e0bfff17 	ldw	r2,-4(fp)
 4013434:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4013438:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401343c:	00000206 	br	4013448 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4013440:	0001883a 	nop
 4013444:	00000106 	br	401344c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4013448:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401344c:	e0bffb17 	ldw	r2,-20(fp)
}
 4013450:	e037883a 	mov	sp,fp
 4013454:	df000017 	ldw	fp,0(sp)
 4013458:	dec00104 	addi	sp,sp,4
 401345c:	f800283a 	ret

04013460 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4013460:	defff304 	addi	sp,sp,-52
 4013464:	dfc00c15 	stw	ra,48(sp)
 4013468:	df000b15 	stw	fp,44(sp)
 401346c:	df000b04 	addi	fp,sp,44
 4013470:	e13ffc15 	stw	r4,-16(fp)
 4013474:	e17ffd15 	stw	r5,-12(fp)
 4013478:	e1bffe15 	stw	r6,-8(fp)
 401347c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4013480:	e0bffd17 	ldw	r2,-12(fp)
 4013484:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4013488:	00004706 	br	40135a8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401348c:	e0bffc17 	ldw	r2,-16(fp)
 4013490:	10800a17 	ldw	r2,40(r2)
 4013494:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4013498:	e0bffc17 	ldw	r2,-16(fp)
 401349c:	10800b17 	ldw	r2,44(r2)
 40134a0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40134a4:	e0fff717 	ldw	r3,-36(fp)
 40134a8:	e0bff817 	ldw	r2,-32(fp)
 40134ac:	18800536 	bltu	r3,r2,40134c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40134b0:	e0fff717 	ldw	r3,-36(fp)
 40134b4:	e0bff817 	ldw	r2,-32(fp)
 40134b8:	1885c83a 	sub	r2,r3,r2
 40134bc:	e0bff615 	stw	r2,-40(fp)
 40134c0:	00000406 	br	40134d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40134c4:	00c20004 	movi	r3,2048
 40134c8:	e0bff817 	ldw	r2,-32(fp)
 40134cc:	1885c83a 	sub	r2,r3,r2
 40134d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40134d4:	e0bff617 	ldw	r2,-40(fp)
 40134d8:	10001e26 	beq	r2,zero,4013554 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40134dc:	e0fffe17 	ldw	r3,-8(fp)
 40134e0:	e0bff617 	ldw	r2,-40(fp)
 40134e4:	1880022e 	bgeu	r3,r2,40134f0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40134e8:	e0bffe17 	ldw	r2,-8(fp)
 40134ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40134f0:	e0bffc17 	ldw	r2,-16(fp)
 40134f4:	10c00e04 	addi	r3,r2,56
 40134f8:	e0bff817 	ldw	r2,-32(fp)
 40134fc:	1885883a 	add	r2,r3,r2
 4013500:	e1bff617 	ldw	r6,-40(fp)
 4013504:	100b883a 	mov	r5,r2
 4013508:	e13ff517 	ldw	r4,-44(fp)
 401350c:	400c0000 	call	400c000 <memcpy>
      ptr   += n;
 4013510:	e0fff517 	ldw	r3,-44(fp)
 4013514:	e0bff617 	ldw	r2,-40(fp)
 4013518:	1885883a 	add	r2,r3,r2
 401351c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4013520:	e0fffe17 	ldw	r3,-8(fp)
 4013524:	e0bff617 	ldw	r2,-40(fp)
 4013528:	1885c83a 	sub	r2,r3,r2
 401352c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013530:	e0fff817 	ldw	r3,-32(fp)
 4013534:	e0bff617 	ldw	r2,-40(fp)
 4013538:	1885883a 	add	r2,r3,r2
 401353c:	10c1ffcc 	andi	r3,r2,2047
 4013540:	e0bffc17 	ldw	r2,-16(fp)
 4013544:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4013548:	e0bffe17 	ldw	r2,-8(fp)
 401354c:	00bfcf16 	blt	zero,r2,401348c <__alt_data_end+0xfc01348c>
 4013550:	00000106 	br	4013558 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4013554:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4013558:	e0fff517 	ldw	r3,-44(fp)
 401355c:	e0bffd17 	ldw	r2,-12(fp)
 4013560:	1880141e 	bne	r3,r2,40135b4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4013564:	e0bfff17 	ldw	r2,-4(fp)
 4013568:	1090000c 	andi	r2,r2,16384
 401356c:	1000131e 	bne	r2,zero,40135bc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4013570:	0001883a 	nop
 4013574:	e0bffc17 	ldw	r2,-16(fp)
 4013578:	10c00a17 	ldw	r3,40(r2)
 401357c:	e0bff717 	ldw	r2,-36(fp)
 4013580:	1880051e 	bne	r3,r2,4013598 <altera_avalon_jtag_uart_read+0x138>
 4013584:	e0bffc17 	ldw	r2,-16(fp)
 4013588:	10c00917 	ldw	r3,36(r2)
 401358c:	e0bffc17 	ldw	r2,-16(fp)
 4013590:	10800117 	ldw	r2,4(r2)
 4013594:	18bff736 	bltu	r3,r2,4013574 <__alt_data_end+0xfc013574>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4013598:	e0bffc17 	ldw	r2,-16(fp)
 401359c:	10c00a17 	ldw	r3,40(r2)
 40135a0:	e0bff717 	ldw	r2,-36(fp)
 40135a4:	18800726 	beq	r3,r2,40135c4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40135a8:	e0bffe17 	ldw	r2,-8(fp)
 40135ac:	00bfb716 	blt	zero,r2,401348c <__alt_data_end+0xfc01348c>
 40135b0:	00000506 	br	40135c8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40135b4:	0001883a 	nop
 40135b8:	00000306 	br	40135c8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40135bc:	0001883a 	nop
 40135c0:	00000106 	br	40135c8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40135c4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40135c8:	e0fff517 	ldw	r3,-44(fp)
 40135cc:	e0bffd17 	ldw	r2,-12(fp)
 40135d0:	18801826 	beq	r3,r2,4013634 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40135d4:	0005303a 	rdctl	r2,status
 40135d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40135dc:	e0fffb17 	ldw	r3,-20(fp)
 40135e0:	00bfff84 	movi	r2,-2
 40135e4:	1884703a 	and	r2,r3,r2
 40135e8:	1001703a 	wrctl	status,r2
  
  return context;
 40135ec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40135f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40135f4:	e0bffc17 	ldw	r2,-16(fp)
 40135f8:	10800817 	ldw	r2,32(r2)
 40135fc:	10c00054 	ori	r3,r2,1
 4013600:	e0bffc17 	ldw	r2,-16(fp)
 4013604:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013608:	e0bffc17 	ldw	r2,-16(fp)
 401360c:	10800017 	ldw	r2,0(r2)
 4013610:	10800104 	addi	r2,r2,4
 4013614:	1007883a 	mov	r3,r2
 4013618:	e0bffc17 	ldw	r2,-16(fp)
 401361c:	10800817 	ldw	r2,32(r2)
 4013620:	18800035 	stwio	r2,0(r3)
 4013624:	e0bffa17 	ldw	r2,-24(fp)
 4013628:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401362c:	e0bff917 	ldw	r2,-28(fp)
 4013630:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4013634:	e0fff517 	ldw	r3,-44(fp)
 4013638:	e0bffd17 	ldw	r2,-12(fp)
 401363c:	18800426 	beq	r3,r2,4013650 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4013640:	e0fff517 	ldw	r3,-44(fp)
 4013644:	e0bffd17 	ldw	r2,-12(fp)
 4013648:	1885c83a 	sub	r2,r3,r2
 401364c:	00000606 	br	4013668 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4013650:	e0bfff17 	ldw	r2,-4(fp)
 4013654:	1090000c 	andi	r2,r2,16384
 4013658:	10000226 	beq	r2,zero,4013664 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401365c:	00bffd44 	movi	r2,-11
 4013660:	00000106 	br	4013668 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4013664:	00bffec4 	movi	r2,-5
}
 4013668:	e037883a 	mov	sp,fp
 401366c:	dfc00117 	ldw	ra,4(sp)
 4013670:	df000017 	ldw	fp,0(sp)
 4013674:	dec00204 	addi	sp,sp,8
 4013678:	f800283a 	ret

0401367c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401367c:	defff304 	addi	sp,sp,-52
 4013680:	dfc00c15 	stw	ra,48(sp)
 4013684:	df000b15 	stw	fp,44(sp)
 4013688:	df000b04 	addi	fp,sp,44
 401368c:	e13ffc15 	stw	r4,-16(fp)
 4013690:	e17ffd15 	stw	r5,-12(fp)
 4013694:	e1bffe15 	stw	r6,-8(fp)
 4013698:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401369c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40136a0:	e0bffd17 	ldw	r2,-12(fp)
 40136a4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40136a8:	00003706 	br	4013788 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40136ac:	e0bffc17 	ldw	r2,-16(fp)
 40136b0:	10800c17 	ldw	r2,48(r2)
 40136b4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40136b8:	e0bffc17 	ldw	r2,-16(fp)
 40136bc:	10800d17 	ldw	r2,52(r2)
 40136c0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40136c4:	e0fff917 	ldw	r3,-28(fp)
 40136c8:	e0bff517 	ldw	r2,-44(fp)
 40136cc:	1880062e 	bgeu	r3,r2,40136e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40136d0:	e0fff517 	ldw	r3,-44(fp)
 40136d4:	e0bff917 	ldw	r2,-28(fp)
 40136d8:	1885c83a 	sub	r2,r3,r2
 40136dc:	10bfffc4 	addi	r2,r2,-1
 40136e0:	e0bff615 	stw	r2,-40(fp)
 40136e4:	00000b06 	br	4013714 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40136e8:	e0bff517 	ldw	r2,-44(fp)
 40136ec:	10000526 	beq	r2,zero,4013704 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40136f0:	00c20004 	movi	r3,2048
 40136f4:	e0bff917 	ldw	r2,-28(fp)
 40136f8:	1885c83a 	sub	r2,r3,r2
 40136fc:	e0bff615 	stw	r2,-40(fp)
 4013700:	00000406 	br	4013714 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4013704:	00c1ffc4 	movi	r3,2047
 4013708:	e0bff917 	ldw	r2,-28(fp)
 401370c:	1885c83a 	sub	r2,r3,r2
 4013710:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4013714:	e0bff617 	ldw	r2,-40(fp)
 4013718:	10001e26 	beq	r2,zero,4013794 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401371c:	e0fffe17 	ldw	r3,-8(fp)
 4013720:	e0bff617 	ldw	r2,-40(fp)
 4013724:	1880022e 	bgeu	r3,r2,4013730 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4013728:	e0bffe17 	ldw	r2,-8(fp)
 401372c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4013730:	e0bffc17 	ldw	r2,-16(fp)
 4013734:	10c20e04 	addi	r3,r2,2104
 4013738:	e0bff917 	ldw	r2,-28(fp)
 401373c:	1885883a 	add	r2,r3,r2
 4013740:	e1bff617 	ldw	r6,-40(fp)
 4013744:	e17ffd17 	ldw	r5,-12(fp)
 4013748:	1009883a 	mov	r4,r2
 401374c:	400c0000 	call	400c000 <memcpy>
      ptr   += n;
 4013750:	e0fffd17 	ldw	r3,-12(fp)
 4013754:	e0bff617 	ldw	r2,-40(fp)
 4013758:	1885883a 	add	r2,r3,r2
 401375c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4013760:	e0fffe17 	ldw	r3,-8(fp)
 4013764:	e0bff617 	ldw	r2,-40(fp)
 4013768:	1885c83a 	sub	r2,r3,r2
 401376c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013770:	e0fff917 	ldw	r3,-28(fp)
 4013774:	e0bff617 	ldw	r2,-40(fp)
 4013778:	1885883a 	add	r2,r3,r2
 401377c:	10c1ffcc 	andi	r3,r2,2047
 4013780:	e0bffc17 	ldw	r2,-16(fp)
 4013784:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4013788:	e0bffe17 	ldw	r2,-8(fp)
 401378c:	00bfc716 	blt	zero,r2,40136ac <__alt_data_end+0xfc0136ac>
 4013790:	00000106 	br	4013798 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4013794:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013798:	0005303a 	rdctl	r2,status
 401379c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40137a0:	e0fffb17 	ldw	r3,-20(fp)
 40137a4:	00bfff84 	movi	r2,-2
 40137a8:	1884703a 	and	r2,r3,r2
 40137ac:	1001703a 	wrctl	status,r2
  
  return context;
 40137b0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40137b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40137b8:	e0bffc17 	ldw	r2,-16(fp)
 40137bc:	10800817 	ldw	r2,32(r2)
 40137c0:	10c00094 	ori	r3,r2,2
 40137c4:	e0bffc17 	ldw	r2,-16(fp)
 40137c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40137cc:	e0bffc17 	ldw	r2,-16(fp)
 40137d0:	10800017 	ldw	r2,0(r2)
 40137d4:	10800104 	addi	r2,r2,4
 40137d8:	1007883a 	mov	r3,r2
 40137dc:	e0bffc17 	ldw	r2,-16(fp)
 40137e0:	10800817 	ldw	r2,32(r2)
 40137e4:	18800035 	stwio	r2,0(r3)
 40137e8:	e0bffa17 	ldw	r2,-24(fp)
 40137ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40137f0:	e0bff817 	ldw	r2,-32(fp)
 40137f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40137f8:	e0bffe17 	ldw	r2,-8(fp)
 40137fc:	0080100e 	bge	zero,r2,4013840 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4013800:	e0bfff17 	ldw	r2,-4(fp)
 4013804:	1090000c 	andi	r2,r2,16384
 4013808:	1000101e 	bne	r2,zero,401384c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401380c:	0001883a 	nop
 4013810:	e0bffc17 	ldw	r2,-16(fp)
 4013814:	10c00d17 	ldw	r3,52(r2)
 4013818:	e0bff517 	ldw	r2,-44(fp)
 401381c:	1880051e 	bne	r3,r2,4013834 <altera_avalon_jtag_uart_write+0x1b8>
 4013820:	e0bffc17 	ldw	r2,-16(fp)
 4013824:	10c00917 	ldw	r3,36(r2)
 4013828:	e0bffc17 	ldw	r2,-16(fp)
 401382c:	10800117 	ldw	r2,4(r2)
 4013830:	18bff736 	bltu	r3,r2,4013810 <__alt_data_end+0xfc013810>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4013834:	e0bffc17 	ldw	r2,-16(fp)
 4013838:	10800917 	ldw	r2,36(r2)
 401383c:	1000051e 	bne	r2,zero,4013854 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4013840:	e0bffe17 	ldw	r2,-8(fp)
 4013844:	00bfd016 	blt	zero,r2,4013788 <__alt_data_end+0xfc013788>
 4013848:	00000306 	br	4013858 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401384c:	0001883a 	nop
 4013850:	00000106 	br	4013858 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4013854:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4013858:	e0fffd17 	ldw	r3,-12(fp)
 401385c:	e0bff717 	ldw	r2,-36(fp)
 4013860:	18800426 	beq	r3,r2,4013874 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4013864:	e0fffd17 	ldw	r3,-12(fp)
 4013868:	e0bff717 	ldw	r2,-36(fp)
 401386c:	1885c83a 	sub	r2,r3,r2
 4013870:	00000606 	br	401388c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4013874:	e0bfff17 	ldw	r2,-4(fp)
 4013878:	1090000c 	andi	r2,r2,16384
 401387c:	10000226 	beq	r2,zero,4013888 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4013880:	00bffd44 	movi	r2,-11
 4013884:	00000106 	br	401388c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4013888:	00bffec4 	movi	r2,-5
}
 401388c:	e037883a 	mov	sp,fp
 4013890:	dfc00117 	ldw	ra,4(sp)
 4013894:	df000017 	ldw	fp,0(sp)
 4013898:	dec00204 	addi	sp,sp,8
 401389c:	f800283a 	ret

040138a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40138a0:	defffa04 	addi	sp,sp,-24
 40138a4:	dfc00515 	stw	ra,20(sp)
 40138a8:	df000415 	stw	fp,16(sp)
 40138ac:	df000404 	addi	fp,sp,16
 40138b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40138b4:	0007883a 	mov	r3,zero
 40138b8:	e0bfff17 	ldw	r2,-4(fp)
 40138bc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40138c0:	e0bfff17 	ldw	r2,-4(fp)
 40138c4:	10800104 	addi	r2,r2,4
 40138c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40138cc:	0005303a 	rdctl	r2,status
 40138d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40138d4:	e0fffd17 	ldw	r3,-12(fp)
 40138d8:	00bfff84 	movi	r2,-2
 40138dc:	1884703a 	and	r2,r3,r2
 40138e0:	1001703a 	wrctl	status,r2
  
  return context;
 40138e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40138e8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40138ec:	4012b240 	call	4012b24 <alt_tick>
 40138f0:	e0bffc17 	ldw	r2,-16(fp)
 40138f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40138f8:	e0bffe17 	ldw	r2,-8(fp)
 40138fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4013900:	0001883a 	nop
 4013904:	e037883a 	mov	sp,fp
 4013908:	dfc00117 	ldw	ra,4(sp)
 401390c:	df000017 	ldw	fp,0(sp)
 4013910:	dec00204 	addi	sp,sp,8
 4013914:	f800283a 	ret

04013918 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4013918:	defff804 	addi	sp,sp,-32
 401391c:	dfc00715 	stw	ra,28(sp)
 4013920:	df000615 	stw	fp,24(sp)
 4013924:	df000604 	addi	fp,sp,24
 4013928:	e13ffc15 	stw	r4,-16(fp)
 401392c:	e17ffd15 	stw	r5,-12(fp)
 4013930:	e1bffe15 	stw	r6,-8(fp)
 4013934:	e1ffff15 	stw	r7,-4(fp)
 4013938:	e0bfff17 	ldw	r2,-4(fp)
 401393c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4013940:	d0a6f517 	ldw	r2,-25644(gp)
 4013944:	1000021e 	bne	r2,zero,4013950 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4013948:	e0bffb17 	ldw	r2,-20(fp)
 401394c:	d0a6f515 	stw	r2,-25644(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4013950:	e0bffc17 	ldw	r2,-16(fp)
 4013954:	10800104 	addi	r2,r2,4
 4013958:	00c001c4 	movi	r3,7
 401395c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4013960:	d8000015 	stw	zero,0(sp)
 4013964:	e1fffc17 	ldw	r7,-16(fp)
 4013968:	01810074 	movhi	r6,1025
 401396c:	318e2804 	addi	r6,r6,14496
 4013970:	e17ffe17 	ldw	r5,-8(fp)
 4013974:	e13ffd17 	ldw	r4,-12(fp)
 4013978:	4013f5c0 	call	4013f5c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401397c:	0001883a 	nop
 4013980:	e037883a 	mov	sp,fp
 4013984:	dfc00117 	ldw	ra,4(sp)
 4013988:	df000017 	ldw	fp,0(sp)
 401398c:	dec00204 	addi	sp,sp,8
 4013990:	f800283a 	ret

04013994 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
 4013994:	deffe504 	addi	sp,sp,-108
 4013998:	dfc01915 	stw	ra,100(sp)
 401399c:	df001815 	stw	fp,96(sp)
 40139a0:	dcc01715 	stw	r19,92(sp)
 40139a4:	dc801615 	stw	r18,88(sp)
 40139a8:	dc401515 	stw	r17,84(sp)
 40139ac:	dc001415 	stw	r16,80(sp)
 40139b0:	df001804 	addi	fp,sp,96
 40139b4:	e13ff915 	stw	r4,-28(fp)
 40139b8:	e17ffa15 	stw	r5,-24(fp)
 40139bc:	e1bffb15 	stw	r6,-20(fp)
 40139c0:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
 40139c4:	00800044 	movi	r2,1
 40139c8:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
 40139cc:	00810074 	movhi	r2,1025
 40139d0:	10952304 	addi	r2,r2,21644
 40139d4:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
 40139d8:	00810074 	movhi	r2,1025
 40139dc:	10953404 	addi	r2,r2,21712
 40139e0:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
 40139e4:	0007883a 	mov	r3,zero
 40139e8:	e0bff917 	ldw	r2,-28(fp)
 40139ec:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
 40139f0:	e0800204 	addi	r2,fp,8
 40139f4:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
 40139f8:	e13ff917 	ldw	r4,-28(fp)
 40139fc:	40146700 	call	4014670 <perf_get_total_time>
 4013a00:	e0bff215 	stw	r2,-56(fp)
 4013a04:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
 4013a08:	e13ff217 	ldw	r4,-56(fp)
 4013a0c:	e17ff317 	ldw	r5,-52(fp)
 4013a10:	4014fbc0 	call	4014fbc <__floatundidf>
 4013a14:	1021883a 	mov	r16,r2
 4013a18:	1823883a 	mov	r17,r3
 4013a1c:	e13ffa17 	ldw	r4,-24(fp)
 4013a20:	4011fdc0 	call	4011fdc <__floatunsidf>
 4013a24:	1009883a 	mov	r4,r2
 4013a28:	180b883a 	mov	r5,r3
 4013a2c:	200d883a 	mov	r6,r4
 4013a30:	280f883a 	mov	r7,r5
 4013a34:	8009883a 	mov	r4,r16
 4013a38:	880b883a 	mov	r5,r17
 4013a3c:	40026800 	call	4002680 <__divdf3>
 4013a40:	1009883a 	mov	r4,r2
 4013a44:	180b883a 	mov	r5,r3
 4013a48:	e13ff415 	stw	r4,-48(fp)
 4013a4c:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
 4013a50:	e0bff017 	ldw	r2,-64(fp)
 4013a54:	d8800315 	stw	r2,12(sp)
 4013a58:	e0bff117 	ldw	r2,-60(fp)
 4013a5c:	d8800215 	stw	r2,8(sp)
 4013a60:	e0bff017 	ldw	r2,-64(fp)
 4013a64:	d8800115 	stw	r2,4(sp)
 4013a68:	e0bff317 	ldw	r2,-52(fp)
 4013a6c:	d8800015 	stw	r2,0(sp)
 4013a70:	e1fff217 	ldw	r7,-56(fp)
 4013a74:	e17ff417 	ldw	r5,-48(fp)
 4013a78:	e1bff517 	ldw	r6,-44(fp)
 4013a7c:	01010074 	movhi	r4,1025
 4013a80:	21154504 	addi	r4,r4,21780
 4013a84:	40047280 	call	4004728 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
 4013a88:	e0bff817 	ldw	r2,-32(fp)
 4013a8c:	10c00104 	addi	r3,r2,4
 4013a90:	e0fff815 	stw	r3,-32(fp)
 4013a94:	10800017 	ldw	r2,0(r2)
 4013a98:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
 4013a9c:	00800044 	movi	r2,1
 4013aa0:	e0bfef15 	stw	r2,-68(fp)
 4013aa4:	00004e06 	br	4013be0 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
 4013aa8:	e17fef17 	ldw	r5,-68(fp)
 4013aac:	e13ff917 	ldw	r4,-28(fp)
 4013ab0:	40145b40 	call	40145b4 <perf_get_section_time>
 4013ab4:	e0bff615 	stw	r2,-40(fp)
 4013ab8:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
 4013abc:	e13ff617 	ldw	r4,-40(fp)
 4013ac0:	e17ff717 	ldw	r5,-36(fp)
 4013ac4:	4014fbc0 	call	4014fbc <__floatundidf>
 4013ac8:	1011883a 	mov	r8,r2
 4013acc:	1813883a 	mov	r9,r3
 4013ad0:	000d883a 	mov	r6,zero
 4013ad4:	01d01674 	movhi	r7,16473
 4013ad8:	4009883a 	mov	r4,r8
 4013adc:	480b883a 	mov	r5,r9
 4013ae0:	40031c00 	call	40031c0 <__muldf3>
 4013ae4:	1009883a 	mov	r4,r2
 4013ae8:	180b883a 	mov	r5,r3
 4013aec:	2021883a 	mov	r16,r4
 4013af0:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 4013af4:	e13ff217 	ldw	r4,-56(fp)
 4013af8:	e17ff317 	ldw	r5,-52(fp)
 4013afc:	4014fbc0 	call	4014fbc <__floatundidf>
 4013b00:	1009883a 	mov	r4,r2
 4013b04:	180b883a 	mov	r5,r3
 4013b08:	200d883a 	mov	r6,r4
 4013b0c:	280f883a 	mov	r7,r5
 4013b10:	8009883a 	mov	r4,r16
 4013b14:	880b883a 	mov	r5,r17
 4013b18:	40026800 	call	4002680 <__divdf3>
 4013b1c:	1009883a 	mov	r4,r2
 4013b20:	180b883a 	mov	r5,r3
 4013b24:	2025883a 	mov	r18,r4
 4013b28:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
 4013b2c:	e13ff617 	ldw	r4,-40(fp)
 4013b30:	e17ff717 	ldw	r5,-36(fp)
 4013b34:	4014fbc0 	call	4014fbc <__floatundidf>
 4013b38:	1021883a 	mov	r16,r2
 4013b3c:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 4013b40:	e13ffa17 	ldw	r4,-24(fp)
 4013b44:	4011fdc0 	call	4011fdc <__floatunsidf>
 4013b48:	1009883a 	mov	r4,r2
 4013b4c:	180b883a 	mov	r5,r3
 4013b50:	200d883a 	mov	r6,r4
 4013b54:	280f883a 	mov	r7,r5
 4013b58:	8009883a 	mov	r4,r16
 4013b5c:	880b883a 	mov	r5,r17
 4013b60:	40026800 	call	4002680 <__divdf3>
 4013b64:	1009883a 	mov	r4,r2
 4013b68:	180b883a 	mov	r5,r3
 4013b6c:	2021883a 	mov	r16,r4
 4013b70:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
 4013b74:	e17fef17 	ldw	r5,-68(fp)
 4013b78:	e13ff917 	ldw	r4,-28(fp)
 4013b7c:	40146bc0 	call	40146bc <perf_get_num_starts>
 4013b80:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 4013b84:	e0bff017 	ldw	r2,-64(fp)
 4013b88:	d8800515 	stw	r2,20(sp)
 4013b8c:	d8c00415 	stw	r3,16(sp)
 4013b90:	e0bff617 	ldw	r2,-40(fp)
 4013b94:	d8800215 	stw	r2,8(sp)
 4013b98:	e0bff717 	ldw	r2,-36(fp)
 4013b9c:	d8800315 	stw	r2,12(sp)
 4013ba0:	dc000015 	stw	r16,0(sp)
 4013ba4:	dc400115 	stw	r17,4(sp)
 4013ba8:	900d883a 	mov	r6,r18
 4013bac:	980f883a 	mov	r7,r19
 4013bb0:	e17fee17 	ldw	r5,-72(fp)
 4013bb4:	01010074 	movhi	r4,1025
 4013bb8:	21155a04 	addi	r4,r4,21864
 4013bbc:	40047280 	call	4004728 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
 4013bc0:	e0bff817 	ldw	r2,-32(fp)
 4013bc4:	10c00104 	addi	r3,r2,4
 4013bc8:	e0fff815 	stw	r3,-32(fp)
 4013bcc:	10800017 	ldw	r2,0(r2)
 4013bd0:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
 4013bd4:	e0bfef17 	ldw	r2,-68(fp)
 4013bd8:	10800044 	addi	r2,r2,1
 4013bdc:	e0bfef15 	stw	r2,-68(fp)
 4013be0:	e0bfef17 	ldw	r2,-68(fp)
 4013be4:	e0fffb17 	ldw	r3,-20(fp)
 4013be8:	18bfaf0e 	bge	r3,r2,4013aa8 <__alt_data_end+0xfc013aa8>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
 4013bec:	0005883a 	mov	r2,zero
}
 4013bf0:	e6fffc04 	addi	sp,fp,-16
 4013bf4:	dfc00517 	ldw	ra,20(sp)
 4013bf8:	df000417 	ldw	fp,16(sp)
 4013bfc:	dcc00317 	ldw	r19,12(sp)
 4013c00:	dc800217 	ldw	r18,8(sp)
 4013c04:	dc400117 	ldw	r17,4(sp)
 4013c08:	dc000017 	ldw	r16,0(sp)
 4013c0c:	dec00704 	addi	sp,sp,28
 4013c10:	f800283a 	ret

04013c14 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4013c14:	defff504 	addi	sp,sp,-44
 4013c18:	df000a15 	stw	fp,40(sp)
 4013c1c:	df000a04 	addi	fp,sp,40
 4013c20:	e13ffc15 	stw	r4,-16(fp)
 4013c24:	e17ffd15 	stw	r5,-12(fp)
 4013c28:	e1bffe15 	stw	r6,-8(fp)
 4013c2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4013c30:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4013c34:	d0a6f517 	ldw	r2,-25644(gp)
  
  if (alt_ticks_per_second ())
 4013c38:	10003c26 	beq	r2,zero,4013d2c <alt_alarm_start+0x118>
  {
    if (alarm)
 4013c3c:	e0bffc17 	ldw	r2,-16(fp)
 4013c40:	10003826 	beq	r2,zero,4013d24 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4013c44:	e0bffc17 	ldw	r2,-16(fp)
 4013c48:	e0fffe17 	ldw	r3,-8(fp)
 4013c4c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4013c50:	e0bffc17 	ldw	r2,-16(fp)
 4013c54:	e0ffff17 	ldw	r3,-4(fp)
 4013c58:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013c5c:	0005303a 	rdctl	r2,status
 4013c60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013c64:	e0fff917 	ldw	r3,-28(fp)
 4013c68:	00bfff84 	movi	r2,-2
 4013c6c:	1884703a 	and	r2,r3,r2
 4013c70:	1001703a 	wrctl	status,r2
  
  return context;
 4013c74:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4013c78:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4013c7c:	d0a6f617 	ldw	r2,-25640(gp)
      
      current_nticks = alt_nticks();
 4013c80:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4013c84:	e0fffd17 	ldw	r3,-12(fp)
 4013c88:	e0bff617 	ldw	r2,-40(fp)
 4013c8c:	1885883a 	add	r2,r3,r2
 4013c90:	10c00044 	addi	r3,r2,1
 4013c94:	e0bffc17 	ldw	r2,-16(fp)
 4013c98:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4013c9c:	e0bffc17 	ldw	r2,-16(fp)
 4013ca0:	10c00217 	ldw	r3,8(r2)
 4013ca4:	e0bff617 	ldw	r2,-40(fp)
 4013ca8:	1880042e 	bgeu	r3,r2,4013cbc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4013cac:	e0bffc17 	ldw	r2,-16(fp)
 4013cb0:	00c00044 	movi	r3,1
 4013cb4:	10c00405 	stb	r3,16(r2)
 4013cb8:	00000206 	br	4013cc4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4013cbc:	e0bffc17 	ldw	r2,-16(fp)
 4013cc0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4013cc4:	e0bffc17 	ldw	r2,-16(fp)
 4013cc8:	d0e01604 	addi	r3,gp,-32680
 4013ccc:	e0fffa15 	stw	r3,-24(fp)
 4013cd0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013cd4:	e0bffb17 	ldw	r2,-20(fp)
 4013cd8:	e0fffa17 	ldw	r3,-24(fp)
 4013cdc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4013ce0:	e0bffa17 	ldw	r2,-24(fp)
 4013ce4:	10c00017 	ldw	r3,0(r2)
 4013ce8:	e0bffb17 	ldw	r2,-20(fp)
 4013cec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4013cf0:	e0bffa17 	ldw	r2,-24(fp)
 4013cf4:	10800017 	ldw	r2,0(r2)
 4013cf8:	e0fffb17 	ldw	r3,-20(fp)
 4013cfc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4013d00:	e0bffa17 	ldw	r2,-24(fp)
 4013d04:	e0fffb17 	ldw	r3,-20(fp)
 4013d08:	10c00015 	stw	r3,0(r2)
 4013d0c:	e0bff817 	ldw	r2,-32(fp)
 4013d10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013d14:	e0bff717 	ldw	r2,-36(fp)
 4013d18:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4013d1c:	0005883a 	mov	r2,zero
 4013d20:	00000306 	br	4013d30 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4013d24:	00bffa84 	movi	r2,-22
 4013d28:	00000106 	br	4013d30 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4013d2c:	00bfde84 	movi	r2,-134
  }
}
 4013d30:	e037883a 	mov	sp,fp
 4013d34:	df000017 	ldw	fp,0(sp)
 4013d38:	dec00104 	addi	sp,sp,4
 4013d3c:	f800283a 	ret

04013d40 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4013d40:	defffe04 	addi	sp,sp,-8
 4013d44:	df000115 	stw	fp,4(sp)
 4013d48:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4013d4c:	e03fff15 	stw	zero,-4(fp)
 4013d50:	00000506 	br	4013d68 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4013d54:	e0bfff17 	ldw	r2,-4(fp)
 4013d58:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4013d5c:	e0bfff17 	ldw	r2,-4(fp)
 4013d60:	10800804 	addi	r2,r2,32
 4013d64:	e0bfff15 	stw	r2,-4(fp)
 4013d68:	e0bfff17 	ldw	r2,-4(fp)
 4013d6c:	10820030 	cmpltui	r2,r2,2048
 4013d70:	103ff81e 	bne	r2,zero,4013d54 <__alt_data_end+0xfc013d54>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4013d74:	0001883a 	nop
 4013d78:	e037883a 	mov	sp,fp
 4013d7c:	df000017 	ldw	fp,0(sp)
 4013d80:	dec00104 	addi	sp,sp,4
 4013d84:	f800283a 	ret

04013d88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013d88:	defffe04 	addi	sp,sp,-8
 4013d8c:	dfc00115 	stw	ra,4(sp)
 4013d90:	df000015 	stw	fp,0(sp)
 4013d94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4013d98:	d0a01417 	ldw	r2,-32688(gp)
 4013d9c:	10000326 	beq	r2,zero,4013dac <alt_get_errno+0x24>
 4013da0:	d0a01417 	ldw	r2,-32688(gp)
 4013da4:	103ee83a 	callr	r2
 4013da8:	00000106 	br	4013db0 <alt_get_errno+0x28>
 4013dac:	d0a6e604 	addi	r2,gp,-25704
}
 4013db0:	e037883a 	mov	sp,fp
 4013db4:	dfc00117 	ldw	ra,4(sp)
 4013db8:	df000017 	ldw	fp,0(sp)
 4013dbc:	dec00204 	addi	sp,sp,8
 4013dc0:	f800283a 	ret

04013dc4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4013dc4:	defffa04 	addi	sp,sp,-24
 4013dc8:	dfc00515 	stw	ra,20(sp)
 4013dcc:	df000415 	stw	fp,16(sp)
 4013dd0:	df000404 	addi	fp,sp,16
 4013dd4:	e13ffe15 	stw	r4,-8(fp)
 4013dd8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4013ddc:	e0bffe17 	ldw	r2,-8(fp)
 4013de0:	10000326 	beq	r2,zero,4013df0 <alt_dev_llist_insert+0x2c>
 4013de4:	e0bffe17 	ldw	r2,-8(fp)
 4013de8:	10800217 	ldw	r2,8(r2)
 4013dec:	1000061e 	bne	r2,zero,4013e08 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4013df0:	4013d880 	call	4013d88 <alt_get_errno>
 4013df4:	1007883a 	mov	r3,r2
 4013df8:	00800584 	movi	r2,22
 4013dfc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4013e00:	00bffa84 	movi	r2,-22
 4013e04:	00001306 	br	4013e54 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4013e08:	e0bffe17 	ldw	r2,-8(fp)
 4013e0c:	e0ffff17 	ldw	r3,-4(fp)
 4013e10:	e0fffc15 	stw	r3,-16(fp)
 4013e14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013e18:	e0bffd17 	ldw	r2,-12(fp)
 4013e1c:	e0fffc17 	ldw	r3,-16(fp)
 4013e20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4013e24:	e0bffc17 	ldw	r2,-16(fp)
 4013e28:	10c00017 	ldw	r3,0(r2)
 4013e2c:	e0bffd17 	ldw	r2,-12(fp)
 4013e30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4013e34:	e0bffc17 	ldw	r2,-16(fp)
 4013e38:	10800017 	ldw	r2,0(r2)
 4013e3c:	e0fffd17 	ldw	r3,-12(fp)
 4013e40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4013e44:	e0bffc17 	ldw	r2,-16(fp)
 4013e48:	e0fffd17 	ldw	r3,-12(fp)
 4013e4c:	10c00015 	stw	r3,0(r2)

  return 0;  
 4013e50:	0005883a 	mov	r2,zero
}
 4013e54:	e037883a 	mov	sp,fp
 4013e58:	dfc00117 	ldw	ra,4(sp)
 4013e5c:	df000017 	ldw	fp,0(sp)
 4013e60:	dec00204 	addi	sp,sp,8
 4013e64:	f800283a 	ret

04013e68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4013e68:	defffd04 	addi	sp,sp,-12
 4013e6c:	dfc00215 	stw	ra,8(sp)
 4013e70:	df000115 	stw	fp,4(sp)
 4013e74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4013e78:	00810074 	movhi	r2,1025
 4013e7c:	10941704 	addi	r2,r2,20572
 4013e80:	e0bfff15 	stw	r2,-4(fp)
 4013e84:	00000606 	br	4013ea0 <_do_ctors+0x38>
        (*ctor) (); 
 4013e88:	e0bfff17 	ldw	r2,-4(fp)
 4013e8c:	10800017 	ldw	r2,0(r2)
 4013e90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4013e94:	e0bfff17 	ldw	r2,-4(fp)
 4013e98:	10bfff04 	addi	r2,r2,-4
 4013e9c:	e0bfff15 	stw	r2,-4(fp)
 4013ea0:	e0ffff17 	ldw	r3,-4(fp)
 4013ea4:	00810074 	movhi	r2,1025
 4013ea8:	10941804 	addi	r2,r2,20576
 4013eac:	18bff62e 	bgeu	r3,r2,4013e88 <__alt_data_end+0xfc013e88>
        (*ctor) (); 
}
 4013eb0:	0001883a 	nop
 4013eb4:	e037883a 	mov	sp,fp
 4013eb8:	dfc00117 	ldw	ra,4(sp)
 4013ebc:	df000017 	ldw	fp,0(sp)
 4013ec0:	dec00204 	addi	sp,sp,8
 4013ec4:	f800283a 	ret

04013ec8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4013ec8:	defffd04 	addi	sp,sp,-12
 4013ecc:	dfc00215 	stw	ra,8(sp)
 4013ed0:	df000115 	stw	fp,4(sp)
 4013ed4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4013ed8:	00810074 	movhi	r2,1025
 4013edc:	10941704 	addi	r2,r2,20572
 4013ee0:	e0bfff15 	stw	r2,-4(fp)
 4013ee4:	00000606 	br	4013f00 <_do_dtors+0x38>
        (*dtor) (); 
 4013ee8:	e0bfff17 	ldw	r2,-4(fp)
 4013eec:	10800017 	ldw	r2,0(r2)
 4013ef0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4013ef4:	e0bfff17 	ldw	r2,-4(fp)
 4013ef8:	10bfff04 	addi	r2,r2,-4
 4013efc:	e0bfff15 	stw	r2,-4(fp)
 4013f00:	e0ffff17 	ldw	r3,-4(fp)
 4013f04:	00810074 	movhi	r2,1025
 4013f08:	10941804 	addi	r2,r2,20576
 4013f0c:	18bff62e 	bgeu	r3,r2,4013ee8 <__alt_data_end+0xfc013ee8>
        (*dtor) (); 
}
 4013f10:	0001883a 	nop
 4013f14:	e037883a 	mov	sp,fp
 4013f18:	dfc00117 	ldw	ra,4(sp)
 4013f1c:	df000017 	ldw	fp,0(sp)
 4013f20:	dec00204 	addi	sp,sp,8
 4013f24:	f800283a 	ret

04013f28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4013f28:	defffe04 	addi	sp,sp,-8
 4013f2c:	dfc00115 	stw	ra,4(sp)
 4013f30:	df000015 	stw	fp,0(sp)
 4013f34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4013f38:	01440004 	movi	r5,4096
 4013f3c:	0009883a 	mov	r4,zero
 4013f40:	401497c0 	call	401497c <alt_icache_flush>
#endif
}
 4013f44:	0001883a 	nop
 4013f48:	e037883a 	mov	sp,fp
 4013f4c:	dfc00117 	ldw	ra,4(sp)
 4013f50:	df000017 	ldw	fp,0(sp)
 4013f54:	dec00204 	addi	sp,sp,8
 4013f58:	f800283a 	ret

04013f5c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4013f5c:	defff904 	addi	sp,sp,-28
 4013f60:	dfc00615 	stw	ra,24(sp)
 4013f64:	df000515 	stw	fp,20(sp)
 4013f68:	df000504 	addi	fp,sp,20
 4013f6c:	e13ffc15 	stw	r4,-16(fp)
 4013f70:	e17ffd15 	stw	r5,-12(fp)
 4013f74:	e1bffe15 	stw	r6,-8(fp)
 4013f78:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4013f7c:	e0800217 	ldw	r2,8(fp)
 4013f80:	d8800015 	stw	r2,0(sp)
 4013f84:	e1ffff17 	ldw	r7,-4(fp)
 4013f88:	e1bffe17 	ldw	r6,-8(fp)
 4013f8c:	e17ffd17 	ldw	r5,-12(fp)
 4013f90:	e13ffc17 	ldw	r4,-16(fp)
 4013f94:	401410c0 	call	401410c <alt_iic_isr_register>
}  
 4013f98:	e037883a 	mov	sp,fp
 4013f9c:	dfc00117 	ldw	ra,4(sp)
 4013fa0:	df000017 	ldw	fp,0(sp)
 4013fa4:	dec00204 	addi	sp,sp,8
 4013fa8:	f800283a 	ret

04013fac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4013fac:	defff904 	addi	sp,sp,-28
 4013fb0:	df000615 	stw	fp,24(sp)
 4013fb4:	df000604 	addi	fp,sp,24
 4013fb8:	e13ffe15 	stw	r4,-8(fp)
 4013fbc:	e17fff15 	stw	r5,-4(fp)
 4013fc0:	e0bfff17 	ldw	r2,-4(fp)
 4013fc4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013fc8:	0005303a 	rdctl	r2,status
 4013fcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013fd0:	e0fffb17 	ldw	r3,-20(fp)
 4013fd4:	00bfff84 	movi	r2,-2
 4013fd8:	1884703a 	and	r2,r3,r2
 4013fdc:	1001703a 	wrctl	status,r2
  
  return context;
 4013fe0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4013fe4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4013fe8:	00c00044 	movi	r3,1
 4013fec:	e0bffa17 	ldw	r2,-24(fp)
 4013ff0:	1884983a 	sll	r2,r3,r2
 4013ff4:	1007883a 	mov	r3,r2
 4013ff8:	d0a6f717 	ldw	r2,-25636(gp)
 4013ffc:	1884b03a 	or	r2,r3,r2
 4014000:	d0a6f715 	stw	r2,-25636(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4014004:	d0a6f717 	ldw	r2,-25636(gp)
 4014008:	100170fa 	wrctl	ienable,r2
 401400c:	e0bffc17 	ldw	r2,-16(fp)
 4014010:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014014:	e0bffd17 	ldw	r2,-12(fp)
 4014018:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401401c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4014020:	0001883a 	nop
}
 4014024:	e037883a 	mov	sp,fp
 4014028:	df000017 	ldw	fp,0(sp)
 401402c:	dec00104 	addi	sp,sp,4
 4014030:	f800283a 	ret

04014034 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4014034:	defff904 	addi	sp,sp,-28
 4014038:	df000615 	stw	fp,24(sp)
 401403c:	df000604 	addi	fp,sp,24
 4014040:	e13ffe15 	stw	r4,-8(fp)
 4014044:	e17fff15 	stw	r5,-4(fp)
 4014048:	e0bfff17 	ldw	r2,-4(fp)
 401404c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014050:	0005303a 	rdctl	r2,status
 4014054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014058:	e0fffb17 	ldw	r3,-20(fp)
 401405c:	00bfff84 	movi	r2,-2
 4014060:	1884703a 	and	r2,r3,r2
 4014064:	1001703a 	wrctl	status,r2
  
  return context;
 4014068:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401406c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4014070:	00c00044 	movi	r3,1
 4014074:	e0bffa17 	ldw	r2,-24(fp)
 4014078:	1884983a 	sll	r2,r3,r2
 401407c:	0084303a 	nor	r2,zero,r2
 4014080:	1007883a 	mov	r3,r2
 4014084:	d0a6f717 	ldw	r2,-25636(gp)
 4014088:	1884703a 	and	r2,r3,r2
 401408c:	d0a6f715 	stw	r2,-25636(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4014090:	d0a6f717 	ldw	r2,-25636(gp)
 4014094:	100170fa 	wrctl	ienable,r2
 4014098:	e0bffc17 	ldw	r2,-16(fp)
 401409c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40140a0:	e0bffd17 	ldw	r2,-12(fp)
 40140a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40140a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 40140ac:	0001883a 	nop
}
 40140b0:	e037883a 	mov	sp,fp
 40140b4:	df000017 	ldw	fp,0(sp)
 40140b8:	dec00104 	addi	sp,sp,4
 40140bc:	f800283a 	ret

040140c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40140c0:	defffc04 	addi	sp,sp,-16
 40140c4:	df000315 	stw	fp,12(sp)
 40140c8:	df000304 	addi	fp,sp,12
 40140cc:	e13ffe15 	stw	r4,-8(fp)
 40140d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40140d4:	000530fa 	rdctl	r2,ienable
 40140d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40140dc:	00c00044 	movi	r3,1
 40140e0:	e0bfff17 	ldw	r2,-4(fp)
 40140e4:	1884983a 	sll	r2,r3,r2
 40140e8:	1007883a 	mov	r3,r2
 40140ec:	e0bffd17 	ldw	r2,-12(fp)
 40140f0:	1884703a 	and	r2,r3,r2
 40140f4:	1004c03a 	cmpne	r2,r2,zero
 40140f8:	10803fcc 	andi	r2,r2,255
}
 40140fc:	e037883a 	mov	sp,fp
 4014100:	df000017 	ldw	fp,0(sp)
 4014104:	dec00104 	addi	sp,sp,4
 4014108:	f800283a 	ret

0401410c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401410c:	defff504 	addi	sp,sp,-44
 4014110:	dfc00a15 	stw	ra,40(sp)
 4014114:	df000915 	stw	fp,36(sp)
 4014118:	df000904 	addi	fp,sp,36
 401411c:	e13ffc15 	stw	r4,-16(fp)
 4014120:	e17ffd15 	stw	r5,-12(fp)
 4014124:	e1bffe15 	stw	r6,-8(fp)
 4014128:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401412c:	00bffa84 	movi	r2,-22
 4014130:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4014134:	e0bffd17 	ldw	r2,-12(fp)
 4014138:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401413c:	e0bff817 	ldw	r2,-32(fp)
 4014140:	10800808 	cmpgei	r2,r2,32
 4014144:	1000271e 	bne	r2,zero,40141e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014148:	0005303a 	rdctl	r2,status
 401414c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014150:	e0fffb17 	ldw	r3,-20(fp)
 4014154:	00bfff84 	movi	r2,-2
 4014158:	1884703a 	and	r2,r3,r2
 401415c:	1001703a 	wrctl	status,r2
  
  return context;
 4014160:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4014164:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4014168:	008100b4 	movhi	r2,1026
 401416c:	10acf204 	addi	r2,r2,-19512
 4014170:	e0fff817 	ldw	r3,-32(fp)
 4014174:	180690fa 	slli	r3,r3,3
 4014178:	10c5883a 	add	r2,r2,r3
 401417c:	e0fffe17 	ldw	r3,-8(fp)
 4014180:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4014184:	008100b4 	movhi	r2,1026
 4014188:	10acf204 	addi	r2,r2,-19512
 401418c:	e0fff817 	ldw	r3,-32(fp)
 4014190:	180690fa 	slli	r3,r3,3
 4014194:	10c5883a 	add	r2,r2,r3
 4014198:	10800104 	addi	r2,r2,4
 401419c:	e0ffff17 	ldw	r3,-4(fp)
 40141a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40141a4:	e0bffe17 	ldw	r2,-8(fp)
 40141a8:	10000526 	beq	r2,zero,40141c0 <alt_iic_isr_register+0xb4>
 40141ac:	e0bff817 	ldw	r2,-32(fp)
 40141b0:	100b883a 	mov	r5,r2
 40141b4:	e13ffc17 	ldw	r4,-16(fp)
 40141b8:	4013fac0 	call	4013fac <alt_ic_irq_enable>
 40141bc:	00000406 	br	40141d0 <alt_iic_isr_register+0xc4>
 40141c0:	e0bff817 	ldw	r2,-32(fp)
 40141c4:	100b883a 	mov	r5,r2
 40141c8:	e13ffc17 	ldw	r4,-16(fp)
 40141cc:	40140340 	call	4014034 <alt_ic_irq_disable>
 40141d0:	e0bff715 	stw	r2,-36(fp)
 40141d4:	e0bffa17 	ldw	r2,-24(fp)
 40141d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40141dc:	e0bff917 	ldw	r2,-28(fp)
 40141e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40141e4:	e0bff717 	ldw	r2,-36(fp)
}
 40141e8:	e037883a 	mov	sp,fp
 40141ec:	dfc00117 	ldw	ra,4(sp)
 40141f0:	df000017 	ldw	fp,0(sp)
 40141f4:	dec00204 	addi	sp,sp,8
 40141f8:	f800283a 	ret

040141fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40141fc:	defff904 	addi	sp,sp,-28
 4014200:	dfc00615 	stw	ra,24(sp)
 4014204:	df000515 	stw	fp,20(sp)
 4014208:	df000504 	addi	fp,sp,20
 401420c:	e13ffc15 	stw	r4,-16(fp)
 4014210:	e17ffd15 	stw	r5,-12(fp)
 4014214:	e1bffe15 	stw	r6,-8(fp)
 4014218:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401421c:	e1bfff17 	ldw	r6,-4(fp)
 4014220:	e17ffe17 	ldw	r5,-8(fp)
 4014224:	e13ffd17 	ldw	r4,-12(fp)
 4014228:	401443c0 	call	401443c <open>
 401422c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4014230:	e0bffb17 	ldw	r2,-20(fp)
 4014234:	10001c16 	blt	r2,zero,40142a8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4014238:	00810074 	movhi	r2,1025
 401423c:	10979604 	addi	r2,r2,24152
 4014240:	e0fffb17 	ldw	r3,-20(fp)
 4014244:	18c00324 	muli	r3,r3,12
 4014248:	10c5883a 	add	r2,r2,r3
 401424c:	10c00017 	ldw	r3,0(r2)
 4014250:	e0bffc17 	ldw	r2,-16(fp)
 4014254:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4014258:	00810074 	movhi	r2,1025
 401425c:	10979604 	addi	r2,r2,24152
 4014260:	e0fffb17 	ldw	r3,-20(fp)
 4014264:	18c00324 	muli	r3,r3,12
 4014268:	10c5883a 	add	r2,r2,r3
 401426c:	10800104 	addi	r2,r2,4
 4014270:	10c00017 	ldw	r3,0(r2)
 4014274:	e0bffc17 	ldw	r2,-16(fp)
 4014278:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401427c:	00810074 	movhi	r2,1025
 4014280:	10979604 	addi	r2,r2,24152
 4014284:	e0fffb17 	ldw	r3,-20(fp)
 4014288:	18c00324 	muli	r3,r3,12
 401428c:	10c5883a 	add	r2,r2,r3
 4014290:	10800204 	addi	r2,r2,8
 4014294:	10c00017 	ldw	r3,0(r2)
 4014298:	e0bffc17 	ldw	r2,-16(fp)
 401429c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40142a0:	e13ffb17 	ldw	r4,-20(fp)
 40142a4:	40129740 	call	4012974 <alt_release_fd>
  }
} 
 40142a8:	0001883a 	nop
 40142ac:	e037883a 	mov	sp,fp
 40142b0:	dfc00117 	ldw	ra,4(sp)
 40142b4:	df000017 	ldw	fp,0(sp)
 40142b8:	dec00204 	addi	sp,sp,8
 40142bc:	f800283a 	ret

040142c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40142c0:	defffb04 	addi	sp,sp,-20
 40142c4:	dfc00415 	stw	ra,16(sp)
 40142c8:	df000315 	stw	fp,12(sp)
 40142cc:	df000304 	addi	fp,sp,12
 40142d0:	e13ffd15 	stw	r4,-12(fp)
 40142d4:	e17ffe15 	stw	r5,-8(fp)
 40142d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40142dc:	01c07fc4 	movi	r7,511
 40142e0:	01800044 	movi	r6,1
 40142e4:	e17ffd17 	ldw	r5,-12(fp)
 40142e8:	01010074 	movhi	r4,1025
 40142ec:	21179904 	addi	r4,r4,24164
 40142f0:	40141fc0 	call	40141fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40142f4:	01c07fc4 	movi	r7,511
 40142f8:	000d883a 	mov	r6,zero
 40142fc:	e17ffe17 	ldw	r5,-8(fp)
 4014300:	01010074 	movhi	r4,1025
 4014304:	21179604 	addi	r4,r4,24152
 4014308:	40141fc0 	call	40141fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401430c:	01c07fc4 	movi	r7,511
 4014310:	01800044 	movi	r6,1
 4014314:	e17fff17 	ldw	r5,-4(fp)
 4014318:	01010074 	movhi	r4,1025
 401431c:	21179c04 	addi	r4,r4,24176
 4014320:	40141fc0 	call	40141fc <alt_open_fd>
}  
 4014324:	0001883a 	nop
 4014328:	e037883a 	mov	sp,fp
 401432c:	dfc00117 	ldw	ra,4(sp)
 4014330:	df000017 	ldw	fp,0(sp)
 4014334:	dec00204 	addi	sp,sp,8
 4014338:	f800283a 	ret

0401433c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401433c:	defffe04 	addi	sp,sp,-8
 4014340:	dfc00115 	stw	ra,4(sp)
 4014344:	df000015 	stw	fp,0(sp)
 4014348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401434c:	d0a01417 	ldw	r2,-32688(gp)
 4014350:	10000326 	beq	r2,zero,4014360 <alt_get_errno+0x24>
 4014354:	d0a01417 	ldw	r2,-32688(gp)
 4014358:	103ee83a 	callr	r2
 401435c:	00000106 	br	4014364 <alt_get_errno+0x28>
 4014360:	d0a6e604 	addi	r2,gp,-25704
}
 4014364:	e037883a 	mov	sp,fp
 4014368:	dfc00117 	ldw	ra,4(sp)
 401436c:	df000017 	ldw	fp,0(sp)
 4014370:	dec00204 	addi	sp,sp,8
 4014374:	f800283a 	ret

04014378 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4014378:	defffd04 	addi	sp,sp,-12
 401437c:	df000215 	stw	fp,8(sp)
 4014380:	df000204 	addi	fp,sp,8
 4014384:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4014388:	e0bfff17 	ldw	r2,-4(fp)
 401438c:	10800217 	ldw	r2,8(r2)
 4014390:	10d00034 	orhi	r3,r2,16384
 4014394:	e0bfff17 	ldw	r2,-4(fp)
 4014398:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401439c:	e03ffe15 	stw	zero,-8(fp)
 40143a0:	00001d06 	br	4014418 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40143a4:	00810074 	movhi	r2,1025
 40143a8:	10979604 	addi	r2,r2,24152
 40143ac:	e0fffe17 	ldw	r3,-8(fp)
 40143b0:	18c00324 	muli	r3,r3,12
 40143b4:	10c5883a 	add	r2,r2,r3
 40143b8:	10c00017 	ldw	r3,0(r2)
 40143bc:	e0bfff17 	ldw	r2,-4(fp)
 40143c0:	10800017 	ldw	r2,0(r2)
 40143c4:	1880111e 	bne	r3,r2,401440c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40143c8:	00810074 	movhi	r2,1025
 40143cc:	10979604 	addi	r2,r2,24152
 40143d0:	e0fffe17 	ldw	r3,-8(fp)
 40143d4:	18c00324 	muli	r3,r3,12
 40143d8:	10c5883a 	add	r2,r2,r3
 40143dc:	10800204 	addi	r2,r2,8
 40143e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40143e4:	1000090e 	bge	r2,zero,401440c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40143e8:	e0bffe17 	ldw	r2,-8(fp)
 40143ec:	10c00324 	muli	r3,r2,12
 40143f0:	00810074 	movhi	r2,1025
 40143f4:	10979604 	addi	r2,r2,24152
 40143f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40143fc:	e0bfff17 	ldw	r2,-4(fp)
 4014400:	18800226 	beq	r3,r2,401440c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4014404:	00bffcc4 	movi	r2,-13
 4014408:	00000806 	br	401442c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401440c:	e0bffe17 	ldw	r2,-8(fp)
 4014410:	10800044 	addi	r2,r2,1
 4014414:	e0bffe15 	stw	r2,-8(fp)
 4014418:	d0a01317 	ldw	r2,-32692(gp)
 401441c:	1007883a 	mov	r3,r2
 4014420:	e0bffe17 	ldw	r2,-8(fp)
 4014424:	18bfdf2e 	bgeu	r3,r2,40143a4 <__alt_data_end+0xfc0143a4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4014428:	0005883a 	mov	r2,zero
}
 401442c:	e037883a 	mov	sp,fp
 4014430:	df000017 	ldw	fp,0(sp)
 4014434:	dec00104 	addi	sp,sp,4
 4014438:	f800283a 	ret

0401443c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401443c:	defff604 	addi	sp,sp,-40
 4014440:	dfc00915 	stw	ra,36(sp)
 4014444:	df000815 	stw	fp,32(sp)
 4014448:	df000804 	addi	fp,sp,32
 401444c:	e13ffd15 	stw	r4,-12(fp)
 4014450:	e17ffe15 	stw	r5,-8(fp)
 4014454:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4014458:	00bfffc4 	movi	r2,-1
 401445c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4014460:	00bffb44 	movi	r2,-19
 4014464:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4014468:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401446c:	d1601104 	addi	r5,gp,-32700
 4014470:	e13ffd17 	ldw	r4,-12(fp)
 4014474:	40147400 	call	4014740 <alt_find_dev>
 4014478:	e0bff815 	stw	r2,-32(fp)
 401447c:	e0bff817 	ldw	r2,-32(fp)
 4014480:	1000051e 	bne	r2,zero,4014498 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4014484:	e13ffd17 	ldw	r4,-12(fp)
 4014488:	40147d00 	call	40147d0 <alt_find_file>
 401448c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4014490:	00800044 	movi	r2,1
 4014494:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4014498:	e0bff817 	ldw	r2,-32(fp)
 401449c:	10002926 	beq	r2,zero,4014544 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40144a0:	e13ff817 	ldw	r4,-32(fp)
 40144a4:	40148d80 	call	40148d8 <alt_get_fd>
 40144a8:	e0bff915 	stw	r2,-28(fp)
 40144ac:	e0bff917 	ldw	r2,-28(fp)
 40144b0:	1000030e 	bge	r2,zero,40144c0 <open+0x84>
    {
      status = index;
 40144b4:	e0bff917 	ldw	r2,-28(fp)
 40144b8:	e0bffa15 	stw	r2,-24(fp)
 40144bc:	00002306 	br	401454c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 40144c0:	e0bff917 	ldw	r2,-28(fp)
 40144c4:	10c00324 	muli	r3,r2,12
 40144c8:	00810074 	movhi	r2,1025
 40144cc:	10979604 	addi	r2,r2,24152
 40144d0:	1885883a 	add	r2,r3,r2
 40144d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40144d8:	e0fffe17 	ldw	r3,-8(fp)
 40144dc:	00900034 	movhi	r2,16384
 40144e0:	10bfffc4 	addi	r2,r2,-1
 40144e4:	1886703a 	and	r3,r3,r2
 40144e8:	e0bffc17 	ldw	r2,-16(fp)
 40144ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40144f0:	e0bffb17 	ldw	r2,-20(fp)
 40144f4:	1000051e 	bne	r2,zero,401450c <open+0xd0>
 40144f8:	e13ffc17 	ldw	r4,-16(fp)
 40144fc:	40143780 	call	4014378 <alt_file_locked>
 4014500:	e0bffa15 	stw	r2,-24(fp)
 4014504:	e0bffa17 	ldw	r2,-24(fp)
 4014508:	10001016 	blt	r2,zero,401454c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401450c:	e0bff817 	ldw	r2,-32(fp)
 4014510:	10800317 	ldw	r2,12(r2)
 4014514:	10000826 	beq	r2,zero,4014538 <open+0xfc>
 4014518:	e0bff817 	ldw	r2,-32(fp)
 401451c:	10800317 	ldw	r2,12(r2)
 4014520:	e1ffff17 	ldw	r7,-4(fp)
 4014524:	e1bffe17 	ldw	r6,-8(fp)
 4014528:	e17ffd17 	ldw	r5,-12(fp)
 401452c:	e13ffc17 	ldw	r4,-16(fp)
 4014530:	103ee83a 	callr	r2
 4014534:	00000106 	br	401453c <open+0x100>
 4014538:	0005883a 	mov	r2,zero
 401453c:	e0bffa15 	stw	r2,-24(fp)
 4014540:	00000206 	br	401454c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4014544:	00bffb44 	movi	r2,-19
 4014548:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401454c:	e0bffa17 	ldw	r2,-24(fp)
 4014550:	1000090e 	bge	r2,zero,4014578 <open+0x13c>
  {
    alt_release_fd (index);  
 4014554:	e13ff917 	ldw	r4,-28(fp)
 4014558:	40129740 	call	4012974 <alt_release_fd>
    ALT_ERRNO = -status;
 401455c:	401433c0 	call	401433c <alt_get_errno>
 4014560:	1007883a 	mov	r3,r2
 4014564:	e0bffa17 	ldw	r2,-24(fp)
 4014568:	0085c83a 	sub	r2,zero,r2
 401456c:	18800015 	stw	r2,0(r3)
    return -1;
 4014570:	00bfffc4 	movi	r2,-1
 4014574:	00000106 	br	401457c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4014578:	e0bff917 	ldw	r2,-28(fp)
}
 401457c:	e037883a 	mov	sp,fp
 4014580:	dfc00117 	ldw	ra,4(sp)
 4014584:	df000017 	ldw	fp,0(sp)
 4014588:	dec00204 	addi	sp,sp,8
 401458c:	f800283a 	ret

04014590 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4014590:	deffff04 	addi	sp,sp,-4
 4014594:	df000015 	stw	fp,0(sp)
 4014598:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401459c:	000170fa 	wrctl	ienable,zero
}
 40145a0:	0001883a 	nop
 40145a4:	e037883a 	mov	sp,fp
 40145a8:	df000017 	ldw	fp,0(sp)
 40145ac:	dec00104 	addi	sp,sp,4
 40145b0:	f800283a 	ret

040145b4 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 40145b4:	defff904 	addi	sp,sp,-28
 40145b8:	df000615 	stw	fp,24(sp)
 40145bc:	df000604 	addi	fp,sp,24
 40145c0:	e13ffe15 	stw	r4,-8(fp)
 40145c4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 40145c8:	e03ffa15 	stw	zero,-24(fp)
 40145cc:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 40145d0:	000b883a 	mov	r5,zero
 40145d4:	e13ffe17 	ldw	r4,-8(fp)
 40145d8:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
 40145dc:	e13fff17 	ldw	r4,-4(fp)
 40145e0:	2008913a 	slli	r4,r4,4
 40145e4:	200b883a 	mov	r5,r4
 40145e8:	e13ffe17 	ldw	r4,-8(fp)
 40145ec:	2149883a 	add	r4,r4,r5
 40145f0:	21000037 	ldwio	r4,0(r4)
 40145f4:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 40145f8:	e13fff17 	ldw	r4,-4(fp)
 40145fc:	2008913a 	slli	r4,r4,4
 4014600:	21000104 	addi	r4,r4,4
 4014604:	200b883a 	mov	r5,r4
 4014608:	e13ffe17 	ldw	r4,-8(fp)
 401460c:	2149883a 	add	r4,r4,r5
 4014610:	21000037 	ldwio	r4,0(r4)
 4014614:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 4014618:	e13ffd17 	ldw	r4,-12(fp)
 401461c:	2011883a 	mov	r8,r4
 4014620:	0013883a 	mov	r9,zero
 4014624:	4006983a 	sll	r3,r8,zero
 4014628:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
 401462c:	e13ffc17 	ldw	r4,-16(fp)
 4014630:	200d883a 	mov	r6,r4
 4014634:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 4014638:	1188b03a 	or	r4,r2,r6
 401463c:	e13ffa15 	stw	r4,-24(fp)
 4014640:	19c4b03a 	or	r2,r3,r7
 4014644:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 4014648:	e0bffa17 	ldw	r2,-24(fp)
 401464c:	e0fffb17 	ldw	r3,-20(fp)
 4014650:	1009883a 	mov	r4,r2
 4014654:	180b883a 	mov	r5,r3
}
 4014658:	2005883a 	mov	r2,r4
 401465c:	2807883a 	mov	r3,r5
 4014660:	e037883a 	mov	sp,fp
 4014664:	df000017 	ldw	fp,0(sp)
 4014668:	dec00104 	addi	sp,sp,4
 401466c:	f800283a 	ret

04014670 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 4014670:	defffd04 	addi	sp,sp,-12
 4014674:	dfc00215 	stw	ra,8(sp)
 4014678:	df000115 	stw	fp,4(sp)
 401467c:	df000104 	addi	fp,sp,4
 4014680:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 4014684:	000b883a 	mov	r5,zero
 4014688:	e13fff17 	ldw	r4,-4(fp)
 401468c:	40145b40 	call	40145b4 <perf_get_section_time>
 4014690:	100b883a 	mov	r5,r2
 4014694:	180d883a 	mov	r6,r3
 4014698:	2807883a 	mov	r3,r5
 401469c:	3009883a 	mov	r4,r6
}
 40146a0:	1805883a 	mov	r2,r3
 40146a4:	2007883a 	mov	r3,r4
 40146a8:	e037883a 	mov	sp,fp
 40146ac:	dfc00117 	ldw	ra,4(sp)
 40146b0:	df000017 	ldw	fp,0(sp)
 40146b4:	dec00204 	addi	sp,sp,8
 40146b8:	f800283a 	ret

040146bc <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 40146bc:	defffd04 	addi	sp,sp,-12
 40146c0:	df000215 	stw	fp,8(sp)
 40146c4:	df000204 	addi	fp,sp,8
 40146c8:	e13ffe15 	stw	r4,-8(fp)
 40146cc:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 40146d0:	e0bfff17 	ldw	r2,-4(fp)
 40146d4:	1004913a 	slli	r2,r2,4
 40146d8:	10800204 	addi	r2,r2,8
 40146dc:	1007883a 	mov	r3,r2
 40146e0:	e0bffe17 	ldw	r2,-8(fp)
 40146e4:	10c5883a 	add	r2,r2,r3
 40146e8:	10800037 	ldwio	r2,0(r2)
}
 40146ec:	e037883a 	mov	sp,fp
 40146f0:	df000017 	ldw	fp,0(sp)
 40146f4:	dec00104 	addi	sp,sp,4
 40146f8:	f800283a 	ret

040146fc <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 40146fc:	deffff04 	addi	sp,sp,-4
 4014700:	df000015 	stw	fp,0(sp)
 4014704:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
 4014708:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
 401470c:	e037883a 	mov	sp,fp
 4014710:	df000017 	ldw	fp,0(sp)
 4014714:	dec00104 	addi	sp,sp,4
 4014718:	f800283a 	ret

0401471c <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 401471c:	deffff04 	addi	sp,sp,-4
 4014720:	df000015 	stw	fp,0(sp)
 4014724:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 4014728:	00817db4 	movhi	r2,1526
 401472c:	10b84004 	addi	r2,r2,-7936
}
 4014730:	e037883a 	mov	sp,fp
 4014734:	df000017 	ldw	fp,0(sp)
 4014738:	dec00104 	addi	sp,sp,4
 401473c:	f800283a 	ret

04014740 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4014740:	defffa04 	addi	sp,sp,-24
 4014744:	dfc00515 	stw	ra,20(sp)
 4014748:	df000415 	stw	fp,16(sp)
 401474c:	df000404 	addi	fp,sp,16
 4014750:	e13ffe15 	stw	r4,-8(fp)
 4014754:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4014758:	e0bfff17 	ldw	r2,-4(fp)
 401475c:	10800017 	ldw	r2,0(r2)
 4014760:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4014764:	e13ffe17 	ldw	r4,-8(fp)
 4014768:	4004a780 	call	4004a78 <strlen>
 401476c:	10800044 	addi	r2,r2,1
 4014770:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4014774:	00000d06 	br	40147ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4014778:	e0bffc17 	ldw	r2,-16(fp)
 401477c:	10800217 	ldw	r2,8(r2)
 4014780:	e0fffd17 	ldw	r3,-12(fp)
 4014784:	180d883a 	mov	r6,r3
 4014788:	e17ffe17 	ldw	r5,-8(fp)
 401478c:	1009883a 	mov	r4,r2
 4014790:	4014b2c0 	call	4014b2c <memcmp>
 4014794:	1000021e 	bne	r2,zero,40147a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4014798:	e0bffc17 	ldw	r2,-16(fp)
 401479c:	00000706 	br	40147bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40147a0:	e0bffc17 	ldw	r2,-16(fp)
 40147a4:	10800017 	ldw	r2,0(r2)
 40147a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40147ac:	e0fffc17 	ldw	r3,-16(fp)
 40147b0:	e0bfff17 	ldw	r2,-4(fp)
 40147b4:	18bff01e 	bne	r3,r2,4014778 <__alt_data_end+0xfc014778>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40147b8:	0005883a 	mov	r2,zero
}
 40147bc:	e037883a 	mov	sp,fp
 40147c0:	dfc00117 	ldw	ra,4(sp)
 40147c4:	df000017 	ldw	fp,0(sp)
 40147c8:	dec00204 	addi	sp,sp,8
 40147cc:	f800283a 	ret

040147d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40147d0:	defffb04 	addi	sp,sp,-20
 40147d4:	dfc00415 	stw	ra,16(sp)
 40147d8:	df000315 	stw	fp,12(sp)
 40147dc:	df000304 	addi	fp,sp,12
 40147e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40147e4:	d0a00f17 	ldw	r2,-32708(gp)
 40147e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40147ec:	00003106 	br	40148b4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40147f0:	e0bffd17 	ldw	r2,-12(fp)
 40147f4:	10800217 	ldw	r2,8(r2)
 40147f8:	1009883a 	mov	r4,r2
 40147fc:	4004a780 	call	4004a78 <strlen>
 4014800:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4014804:	e0bffd17 	ldw	r2,-12(fp)
 4014808:	10c00217 	ldw	r3,8(r2)
 401480c:	e0bffe17 	ldw	r2,-8(fp)
 4014810:	10bfffc4 	addi	r2,r2,-1
 4014814:	1885883a 	add	r2,r3,r2
 4014818:	10800003 	ldbu	r2,0(r2)
 401481c:	10803fcc 	andi	r2,r2,255
 4014820:	1080201c 	xori	r2,r2,128
 4014824:	10bfe004 	addi	r2,r2,-128
 4014828:	10800bd8 	cmpnei	r2,r2,47
 401482c:	1000031e 	bne	r2,zero,401483c <alt_find_file+0x6c>
    {
      len -= 1;
 4014830:	e0bffe17 	ldw	r2,-8(fp)
 4014834:	10bfffc4 	addi	r2,r2,-1
 4014838:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401483c:	e0bffe17 	ldw	r2,-8(fp)
 4014840:	e0ffff17 	ldw	r3,-4(fp)
 4014844:	1885883a 	add	r2,r3,r2
 4014848:	10800003 	ldbu	r2,0(r2)
 401484c:	10803fcc 	andi	r2,r2,255
 4014850:	1080201c 	xori	r2,r2,128
 4014854:	10bfe004 	addi	r2,r2,-128
 4014858:	10800be0 	cmpeqi	r2,r2,47
 401485c:	1000081e 	bne	r2,zero,4014880 <alt_find_file+0xb0>
 4014860:	e0bffe17 	ldw	r2,-8(fp)
 4014864:	e0ffff17 	ldw	r3,-4(fp)
 4014868:	1885883a 	add	r2,r3,r2
 401486c:	10800003 	ldbu	r2,0(r2)
 4014870:	10803fcc 	andi	r2,r2,255
 4014874:	1080201c 	xori	r2,r2,128
 4014878:	10bfe004 	addi	r2,r2,-128
 401487c:	10000a1e 	bne	r2,zero,40148a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4014880:	e0bffd17 	ldw	r2,-12(fp)
 4014884:	10800217 	ldw	r2,8(r2)
 4014888:	e0fffe17 	ldw	r3,-8(fp)
 401488c:	180d883a 	mov	r6,r3
 4014890:	e17fff17 	ldw	r5,-4(fp)
 4014894:	1009883a 	mov	r4,r2
 4014898:	4014b2c0 	call	4014b2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401489c:	1000021e 	bne	r2,zero,40148a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40148a0:	e0bffd17 	ldw	r2,-12(fp)
 40148a4:	00000706 	br	40148c4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40148a8:	e0bffd17 	ldw	r2,-12(fp)
 40148ac:	10800017 	ldw	r2,0(r2)
 40148b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40148b4:	e0fffd17 	ldw	r3,-12(fp)
 40148b8:	d0a00f04 	addi	r2,gp,-32708
 40148bc:	18bfcc1e 	bne	r3,r2,40147f0 <__alt_data_end+0xfc0147f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40148c0:	0005883a 	mov	r2,zero
}
 40148c4:	e037883a 	mov	sp,fp
 40148c8:	dfc00117 	ldw	ra,4(sp)
 40148cc:	df000017 	ldw	fp,0(sp)
 40148d0:	dec00204 	addi	sp,sp,8
 40148d4:	f800283a 	ret

040148d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40148d8:	defffc04 	addi	sp,sp,-16
 40148dc:	df000315 	stw	fp,12(sp)
 40148e0:	df000304 	addi	fp,sp,12
 40148e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40148e8:	00bffa04 	movi	r2,-24
 40148ec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40148f0:	e03ffd15 	stw	zero,-12(fp)
 40148f4:	00001906 	br	401495c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 40148f8:	00810074 	movhi	r2,1025
 40148fc:	10979604 	addi	r2,r2,24152
 4014900:	e0fffd17 	ldw	r3,-12(fp)
 4014904:	18c00324 	muli	r3,r3,12
 4014908:	10c5883a 	add	r2,r2,r3
 401490c:	10800017 	ldw	r2,0(r2)
 4014910:	10000f1e 	bne	r2,zero,4014950 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4014914:	00810074 	movhi	r2,1025
 4014918:	10979604 	addi	r2,r2,24152
 401491c:	e0fffd17 	ldw	r3,-12(fp)
 4014920:	18c00324 	muli	r3,r3,12
 4014924:	10c5883a 	add	r2,r2,r3
 4014928:	e0ffff17 	ldw	r3,-4(fp)
 401492c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4014930:	d0e01317 	ldw	r3,-32692(gp)
 4014934:	e0bffd17 	ldw	r2,-12(fp)
 4014938:	1880020e 	bge	r3,r2,4014944 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 401493c:	e0bffd17 	ldw	r2,-12(fp)
 4014940:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
 4014944:	e0bffd17 	ldw	r2,-12(fp)
 4014948:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 401494c:	00000606 	br	4014968 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4014950:	e0bffd17 	ldw	r2,-12(fp)
 4014954:	10800044 	addi	r2,r2,1
 4014958:	e0bffd15 	stw	r2,-12(fp)
 401495c:	e0bffd17 	ldw	r2,-12(fp)
 4014960:	10800810 	cmplti	r2,r2,32
 4014964:	103fe41e 	bne	r2,zero,40148f8 <__alt_data_end+0xfc0148f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4014968:	e0bffe17 	ldw	r2,-8(fp)
}
 401496c:	e037883a 	mov	sp,fp
 4014970:	df000017 	ldw	fp,0(sp)
 4014974:	dec00104 	addi	sp,sp,4
 4014978:	f800283a 	ret

0401497c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 401497c:	defffb04 	addi	sp,sp,-20
 4014980:	df000415 	stw	fp,16(sp)
 4014984:	df000404 	addi	fp,sp,16
 4014988:	e13ffe15 	stw	r4,-8(fp)
 401498c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4014990:	e0bfff17 	ldw	r2,-4(fp)
 4014994:	10840070 	cmpltui	r2,r2,4097
 4014998:	1000021e 	bne	r2,zero,40149a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 401499c:	00840004 	movi	r2,4096
 40149a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40149a4:	e0fffe17 	ldw	r3,-8(fp)
 40149a8:	e0bfff17 	ldw	r2,-4(fp)
 40149ac:	1885883a 	add	r2,r3,r2
 40149b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40149b4:	e0bffe17 	ldw	r2,-8(fp)
 40149b8:	e0bffc15 	stw	r2,-16(fp)
 40149bc:	00000506 	br	40149d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40149c0:	e0bffc17 	ldw	r2,-16(fp)
 40149c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40149c8:	e0bffc17 	ldw	r2,-16(fp)
 40149cc:	10800804 	addi	r2,r2,32
 40149d0:	e0bffc15 	stw	r2,-16(fp)
 40149d4:	e0fffc17 	ldw	r3,-16(fp)
 40149d8:	e0bffd17 	ldw	r2,-12(fp)
 40149dc:	18bff836 	bltu	r3,r2,40149c0 <__alt_data_end+0xfc0149c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40149e0:	e0bffe17 	ldw	r2,-8(fp)
 40149e4:	108007cc 	andi	r2,r2,31
 40149e8:	10000226 	beq	r2,zero,40149f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40149ec:	e0bffc17 	ldw	r2,-16(fp)
 40149f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40149f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40149f8:	0001883a 	nop
 40149fc:	e037883a 	mov	sp,fp
 4014a00:	df000017 	ldw	fp,0(sp)
 4014a04:	dec00104 	addi	sp,sp,4
 4014a08:	f800283a 	ret

04014a0c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4014a0c:	defffe04 	addi	sp,sp,-8
 4014a10:	df000115 	stw	fp,4(sp)
 4014a14:	df000104 	addi	fp,sp,4
 4014a18:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4014a1c:	e0bfff17 	ldw	r2,-4(fp)
 4014a20:	10bffe84 	addi	r2,r2,-6
 4014a24:	10c00428 	cmpgeui	r3,r2,16
 4014a28:	18001a1e 	bne	r3,zero,4014a94 <alt_exception_cause_generated_bad_addr+0x88>
 4014a2c:	100690ba 	slli	r3,r2,2
 4014a30:	00810074 	movhi	r2,1025
 4014a34:	10929104 	addi	r2,r2,19012
 4014a38:	1885883a 	add	r2,r3,r2
 4014a3c:	10800017 	ldw	r2,0(r2)
 4014a40:	1000683a 	jmp	r2
 4014a44:	04014a84 	movi	r16,1322
 4014a48:	04014a84 	movi	r16,1322
 4014a4c:	04014a94 	movui	r16,1322
 4014a50:	04014a94 	movui	r16,1322
 4014a54:	04014a94 	movui	r16,1322
 4014a58:	04014a84 	movi	r16,1322
 4014a5c:	04014a8c 	andi	r16,zero,1322
 4014a60:	04014a94 	movui	r16,1322
 4014a64:	04014a84 	movi	r16,1322
 4014a68:	04014a84 	movi	r16,1322
 4014a6c:	04014a94 	movui	r16,1322
 4014a70:	04014a84 	movi	r16,1322
 4014a74:	04014a8c 	andi	r16,zero,1322
 4014a78:	04014a94 	movui	r16,1322
 4014a7c:	04014a94 	movui	r16,1322
 4014a80:	04014a84 	movi	r16,1322
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4014a84:	00800044 	movi	r2,1
 4014a88:	00000306 	br	4014a98 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4014a8c:	0005883a 	mov	r2,zero
 4014a90:	00000106 	br	4014a98 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4014a94:	0005883a 	mov	r2,zero
  }
}
 4014a98:	e037883a 	mov	sp,fp
 4014a9c:	df000017 	ldw	fp,0(sp)
 4014aa0:	dec00104 	addi	sp,sp,4
 4014aa4:	f800283a 	ret

04014aa8 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 4014aa8:	defffd04 	addi	sp,sp,-12
 4014aac:	dfc00215 	stw	ra,8(sp)
 4014ab0:	df000115 	stw	fp,4(sp)
 4014ab4:	df000104 	addi	fp,sp,4
 4014ab8:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 4014abc:	000f883a 	mov	r7,zero
 4014ac0:	000d883a 	mov	r6,zero
 4014ac4:	e17fff17 	ldw	r5,-4(fp)
 4014ac8:	0009883a 	mov	r4,zero
 4014acc:	4014c600 	call	4014c60 <__register_exitproc>
}
 4014ad0:	e037883a 	mov	sp,fp
 4014ad4:	dfc00117 	ldw	ra,4(sp)
 4014ad8:	df000017 	ldw	fp,0(sp)
 4014adc:	dec00204 	addi	sp,sp,8
 4014ae0:	f800283a 	ret

04014ae4 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 4014ae4:	defffd04 	addi	sp,sp,-12
 4014ae8:	dfc00215 	stw	ra,8(sp)
 4014aec:	df000115 	stw	fp,4(sp)
 4014af0:	df000104 	addi	fp,sp,4
 4014af4:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 4014af8:	000b883a 	mov	r5,zero
 4014afc:	e13fff17 	ldw	r4,-4(fp)
 4014b00:	4014dd00 	call	4014dd0 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 4014b04:	d0a00a17 	ldw	r2,-32728(gp)
 4014b08:	10800f17 	ldw	r2,60(r2)
 4014b0c:	10000526 	beq	r2,zero,4014b24 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 4014b10:	d0a00a17 	ldw	r2,-32728(gp)
 4014b14:	10800f17 	ldw	r2,60(r2)
 4014b18:	d0e00a17 	ldw	r3,-32728(gp)
 4014b1c:	1809883a 	mov	r4,r3
 4014b20:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 4014b24:	e13fff17 	ldw	r4,-4(fp)
 4014b28:	401502c0 	call	401502c <_exit>

04014b2c <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 4014b2c:	defff804 	addi	sp,sp,-32
 4014b30:	df000715 	stw	fp,28(sp)
 4014b34:	df000704 	addi	fp,sp,28
 4014b38:	e13ffd15 	stw	r4,-12(fp)
 4014b3c:	e17ffe15 	stw	r5,-8(fp)
 4014b40:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 4014b44:	e0bffd17 	ldw	r2,-12(fp)
 4014b48:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 4014b4c:	e0bffe17 	ldw	r2,-8(fp)
 4014b50:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 4014b54:	e0bfff17 	ldw	r2,-4(fp)
 4014b58:	10800130 	cmpltui	r2,r2,4
 4014b5c:	1000371e 	bne	r2,zero,4014c3c <memcmp+0x110>
 4014b60:	e0fff917 	ldw	r3,-28(fp)
 4014b64:	e0bffa17 	ldw	r2,-24(fp)
 4014b68:	1884b03a 	or	r2,r3,r2
 4014b6c:	108000cc 	andi	r2,r2,3
 4014b70:	1000321e 	bne	r2,zero,4014c3c <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 4014b74:	e0bff917 	ldw	r2,-28(fp)
 4014b78:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 4014b7c:	e0bffa17 	ldw	r2,-24(fp)
 4014b80:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 4014b84:	00000e06 	br	4014bc0 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 4014b88:	e0bffb17 	ldw	r2,-20(fp)
 4014b8c:	10c00017 	ldw	r3,0(r2)
 4014b90:	e0bffc17 	ldw	r2,-16(fp)
 4014b94:	10800017 	ldw	r2,0(r2)
 4014b98:	18800d1e 	bne	r3,r2,4014bd0 <memcmp+0xa4>
   	    break;
          a1++;
 4014b9c:	e0bffb17 	ldw	r2,-20(fp)
 4014ba0:	10800104 	addi	r2,r2,4
 4014ba4:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 4014ba8:	e0bffc17 	ldw	r2,-16(fp)
 4014bac:	10800104 	addi	r2,r2,4
 4014bb0:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 4014bb4:	e0bfff17 	ldw	r2,-4(fp)
 4014bb8:	10bfff04 	addi	r2,r2,-4
 4014bbc:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 4014bc0:	e0bfff17 	ldw	r2,-4(fp)
 4014bc4:	10800128 	cmpgeui	r2,r2,4
 4014bc8:	103fef1e 	bne	r2,zero,4014b88 <__alt_data_end+0xfc014b88>
 4014bcc:	00000106 	br	4014bd4 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 4014bd0:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 4014bd4:	e0bffb17 	ldw	r2,-20(fp)
 4014bd8:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 4014bdc:	e0bffc17 	ldw	r2,-16(fp)
 4014be0:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 4014be4:	00001506 	br	4014c3c <memcmp+0x110>
    {
      if (*s1 != *s2)
 4014be8:	e0bff917 	ldw	r2,-28(fp)
 4014bec:	10c00003 	ldbu	r3,0(r2)
 4014bf0:	e0bffa17 	ldw	r2,-24(fp)
 4014bf4:	10800003 	ldbu	r2,0(r2)
 4014bf8:	18c03fcc 	andi	r3,r3,255
 4014bfc:	10803fcc 	andi	r2,r2,255
 4014c00:	18800826 	beq	r3,r2,4014c24 <memcmp+0xf8>
	return *s1 - *s2;
 4014c04:	e0bff917 	ldw	r2,-28(fp)
 4014c08:	10800003 	ldbu	r2,0(r2)
 4014c0c:	10c03fcc 	andi	r3,r2,255
 4014c10:	e0bffa17 	ldw	r2,-24(fp)
 4014c14:	10800003 	ldbu	r2,0(r2)
 4014c18:	10803fcc 	andi	r2,r2,255
 4014c1c:	1885c83a 	sub	r2,r3,r2
 4014c20:	00000b06 	br	4014c50 <memcmp+0x124>
      s1++;
 4014c24:	e0bff917 	ldw	r2,-28(fp)
 4014c28:	10800044 	addi	r2,r2,1
 4014c2c:	e0bff915 	stw	r2,-28(fp)
      s2++;
 4014c30:	e0bffa17 	ldw	r2,-24(fp)
 4014c34:	10800044 	addi	r2,r2,1
 4014c38:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 4014c3c:	e0bfff17 	ldw	r2,-4(fp)
 4014c40:	10ffffc4 	addi	r3,r2,-1
 4014c44:	e0ffff15 	stw	r3,-4(fp)
 4014c48:	103fe71e 	bne	r2,zero,4014be8 <__alt_data_end+0xfc014be8>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 4014c4c:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 4014c50:	e037883a 	mov	sp,fp
 4014c54:	df000017 	ldw	fp,0(sp)
 4014c58:	dec00104 	addi	sp,sp,4
 4014c5c:	f800283a 	ret

04014c60 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 4014c60:	defff804 	addi	sp,sp,-32
 4014c64:	dfc00715 	stw	ra,28(sp)
 4014c68:	df000615 	stw	fp,24(sp)
 4014c6c:	dc000515 	stw	r16,20(sp)
 4014c70:	df000604 	addi	fp,sp,24
 4014c74:	e13ffb15 	stw	r4,-20(fp)
 4014c78:	e17ffc15 	stw	r5,-16(fp)
 4014c7c:	e1bffd15 	stw	r6,-12(fp)
 4014c80:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 4014c84:	d0a00a17 	ldw	r2,-32728(gp)
 4014c88:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 4014c8c:	8000041e 	bne	r16,zero,4014ca0 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 4014c90:	d0a00a17 	ldw	r2,-32728(gp)
 4014c94:	d0e00a17 	ldw	r3,-32728(gp)
 4014c98:	1c005304 	addi	r16,r3,332
 4014c9c:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 4014ca0:	80800117 	ldw	r2,4(r16)
 4014ca4:	10800810 	cmplti	r2,r2,32
 4014ca8:	1000131e 	bne	r2,zero,4014cf8 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 4014cac:	00800034 	movhi	r2,0
 4014cb0:	10800004 	addi	r2,r2,0
 4014cb4:	1000021e 	bne	r2,zero,4014cc0 <__register_exitproc+0x60>
	return -1;
 4014cb8:	00bfffc4 	movi	r2,-1
 4014cbc:	00003e06 	br	4014db8 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 4014cc0:	01006404 	movi	r4,400
 4014cc4:	00000000 	call	0 <__reset-0x4000000>
 4014cc8:	1021883a 	mov	r16,r2
      if (p == NULL)
 4014ccc:	8000021e 	bne	r16,zero,4014cd8 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 4014cd0:	00bfffc4 	movi	r2,-1
 4014cd4:	00003806 	br	4014db8 <__register_exitproc+0x158>
	}
      p->_ind = 0;
 4014cd8:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 4014cdc:	d0a00a17 	ldw	r2,-32728(gp)
 4014ce0:	10805217 	ldw	r2,328(r2)
 4014ce4:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 4014ce8:	d0a00a17 	ldw	r2,-32728(gp)
 4014cec:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 4014cf0:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 4014cf4:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 4014cf8:	e0bffb17 	ldw	r2,-20(fp)
 4014cfc:	10002426 	beq	r2,zero,4014d90 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 4014d00:	80802204 	addi	r2,r16,136
 4014d04:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 4014d08:	80800117 	ldw	r2,4(r16)
 4014d0c:	e0fffa17 	ldw	r3,-24(fp)
 4014d10:	1085883a 	add	r2,r2,r2
 4014d14:	1085883a 	add	r2,r2,r2
 4014d18:	1885883a 	add	r2,r3,r2
 4014d1c:	e0fffd17 	ldw	r3,-12(fp)
 4014d20:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 4014d24:	e0bffa17 	ldw	r2,-24(fp)
 4014d28:	10804017 	ldw	r2,256(r2)
 4014d2c:	80c00117 	ldw	r3,4(r16)
 4014d30:	01000044 	movi	r4,1
 4014d34:	20c6983a 	sll	r3,r4,r3
 4014d38:	10c6b03a 	or	r3,r2,r3
 4014d3c:	e0bffa17 	ldw	r2,-24(fp)
 4014d40:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 4014d44:	80800117 	ldw	r2,4(r16)
 4014d48:	e0fffa17 	ldw	r3,-24(fp)
 4014d4c:	10800804 	addi	r2,r2,32
 4014d50:	1085883a 	add	r2,r2,r2
 4014d54:	1085883a 	add	r2,r2,r2
 4014d58:	1885883a 	add	r2,r3,r2
 4014d5c:	e0fffe17 	ldw	r3,-8(fp)
 4014d60:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 4014d64:	e0bffb17 	ldw	r2,-20(fp)
 4014d68:	10800098 	cmpnei	r2,r2,2
 4014d6c:	1000081e 	bne	r2,zero,4014d90 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 4014d70:	e0bffa17 	ldw	r2,-24(fp)
 4014d74:	10804117 	ldw	r2,260(r2)
 4014d78:	80c00117 	ldw	r3,4(r16)
 4014d7c:	01000044 	movi	r4,1
 4014d80:	20c6983a 	sll	r3,r4,r3
 4014d84:	10c6b03a 	or	r3,r2,r3
 4014d88:	e0bffa17 	ldw	r2,-24(fp)
 4014d8c:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 4014d90:	80800117 	ldw	r2,4(r16)
 4014d94:	10c00044 	addi	r3,r2,1
 4014d98:	80c00115 	stw	r3,4(r16)
 4014d9c:	10800084 	addi	r2,r2,2
 4014da0:	1085883a 	add	r2,r2,r2
 4014da4:	1085883a 	add	r2,r2,r2
 4014da8:	8085883a 	add	r2,r16,r2
 4014dac:	e0fffc17 	ldw	r3,-16(fp)
 4014db0:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 4014db4:	0005883a 	mov	r2,zero
}
 4014db8:	e6ffff04 	addi	sp,fp,-4
 4014dbc:	dfc00217 	ldw	ra,8(sp)
 4014dc0:	df000117 	ldw	fp,4(sp)
 4014dc4:	dc000017 	ldw	r16,0(sp)
 4014dc8:	dec00304 	addi	sp,sp,12
 4014dcc:	f800283a 	ret

04014dd0 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 4014dd0:	defff504 	addi	sp,sp,-44
 4014dd4:	dfc00a15 	stw	ra,40(sp)
 4014dd8:	df000915 	stw	fp,36(sp)
 4014ddc:	dc800815 	stw	r18,32(sp)
 4014de0:	dc400715 	stw	r17,28(sp)
 4014de4:	dc000615 	stw	r16,24(sp)
 4014de8:	df000904 	addi	fp,sp,36
 4014dec:	e13ffb15 	stw	r4,-20(fp)
 4014df0:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 4014df4:	d0a00a17 	ldw	r2,-32728(gp)
 4014df8:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 4014dfc:	d0a00a17 	ldw	r2,-32728(gp)
 4014e00:	10805204 	addi	r2,r2,328
 4014e04:	e0bff715 	stw	r2,-36(fp)
  while (p)
 4014e08:	00006006 	br	4014f8c <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 4014e0c:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 4014e10:	80800117 	ldw	r2,4(r16)
 4014e14:	147fffc4 	addi	r17,r2,-1
 4014e18:	00004a06 	br	4014f44 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 4014e1c:	00800044 	movi	r2,1
 4014e20:	1444983a 	sll	r2,r2,r17
 4014e24:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 4014e28:	e0bffc17 	ldw	r2,-16(fp)
 4014e2c:	10000826 	beq	r2,zero,4014e50 <__call_exitprocs+0x80>
 4014e30:	90004026 	beq	r18,zero,4014f34 <__call_exitprocs+0x164>
 4014e34:	88800804 	addi	r2,r17,32
 4014e38:	1085883a 	add	r2,r2,r2
 4014e3c:	1085883a 	add	r2,r2,r2
 4014e40:	9085883a 	add	r2,r18,r2
 4014e44:	10c00017 	ldw	r3,0(r2)
 4014e48:	e0bffc17 	ldw	r2,-16(fp)
 4014e4c:	1880391e 	bne	r3,r2,4014f34 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 4014e50:	88800084 	addi	r2,r17,2
 4014e54:	1085883a 	add	r2,r2,r2
 4014e58:	1085883a 	add	r2,r2,r2
 4014e5c:	8085883a 	add	r2,r16,r2
 4014e60:	10800017 	ldw	r2,0(r2)
 4014e64:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 4014e68:	80800117 	ldw	r2,4(r16)
 4014e6c:	10bfffc4 	addi	r2,r2,-1
 4014e70:	1440041e 	bne	r2,r17,4014e84 <__call_exitprocs+0xb4>
	    p->_ind--;
 4014e74:	80800117 	ldw	r2,4(r16)
 4014e78:	10bfffc4 	addi	r2,r2,-1
 4014e7c:	80800115 	stw	r2,4(r16)
 4014e80:	00000506 	br	4014e98 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 4014e84:	88800084 	addi	r2,r17,2
 4014e88:	1085883a 	add	r2,r2,r2
 4014e8c:	1085883a 	add	r2,r2,r2
 4014e90:	8085883a 	add	r2,r16,r2
 4014e94:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 4014e98:	e0bff917 	ldw	r2,-28(fp)
 4014e9c:	10002726 	beq	r2,zero,4014f3c <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 4014ea0:	80800117 	ldw	r2,4(r16)
 4014ea4:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 4014ea8:	90000426 	beq	r18,zero,4014ebc <__call_exitprocs+0xec>
 4014eac:	90c04017 	ldw	r3,256(r18)
 4014eb0:	e0bff817 	ldw	r2,-32(fp)
 4014eb4:	1884703a 	and	r2,r3,r2
 4014eb8:	1000031e 	bne	r2,zero,4014ec8 <__call_exitprocs+0xf8>
	    fn ();
 4014ebc:	e0bff917 	ldw	r2,-28(fp)
 4014ec0:	103ee83a 	callr	r2
 4014ec4:	00001406 	br	4014f18 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 4014ec8:	90c04117 	ldw	r3,260(r18)
 4014ecc:	e0bff817 	ldw	r2,-32(fp)
 4014ed0:	1884703a 	and	r2,r3,r2
 4014ed4:	1000091e 	bne	r2,zero,4014efc <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 4014ed8:	8c45883a 	add	r2,r17,r17
 4014edc:	1085883a 	add	r2,r2,r2
 4014ee0:	9085883a 	add	r2,r18,r2
 4014ee4:	10c00017 	ldw	r3,0(r2)
 4014ee8:	e0bff917 	ldw	r2,-28(fp)
 4014eec:	180b883a 	mov	r5,r3
 4014ef0:	e13ffb17 	ldw	r4,-20(fp)
 4014ef4:	103ee83a 	callr	r2
 4014ef8:	00000706 	br	4014f18 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 4014efc:	8c45883a 	add	r2,r17,r17
 4014f00:	1085883a 	add	r2,r2,r2
 4014f04:	9085883a 	add	r2,r18,r2
 4014f08:	10c00017 	ldw	r3,0(r2)
 4014f0c:	e0bff917 	ldw	r2,-28(fp)
 4014f10:	1809883a 	mov	r4,r3
 4014f14:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 4014f18:	80c00117 	ldw	r3,4(r16)
 4014f1c:	e0bffa17 	ldw	r2,-24(fp)
 4014f20:	18bfb41e 	bne	r3,r2,4014df4 <__alt_data_end+0xfc014df4>
 4014f24:	e0bff717 	ldw	r2,-36(fp)
 4014f28:	10800017 	ldw	r2,0(r2)
 4014f2c:	143fb11e 	bne	r2,r16,4014df4 <__alt_data_end+0xfc014df4>
 4014f30:	00000306 	br	4014f40 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 4014f34:	0001883a 	nop
 4014f38:	00000106 	br	4014f40 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 4014f3c:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 4014f40:	8c7fffc4 	addi	r17,r17,-1
 4014f44:	883fb50e 	bge	r17,zero,4014e1c <__alt_data_end+0xfc014e1c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 4014f48:	00800034 	movhi	r2,0
 4014f4c:	10800004 	addi	r2,r2,0
 4014f50:	10001026 	beq	r2,zero,4014f94 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 4014f54:	80800117 	ldw	r2,4(r16)
 4014f58:	10000a1e 	bne	r2,zero,4014f84 <__call_exitprocs+0x1b4>
 4014f5c:	80800017 	ldw	r2,0(r16)
 4014f60:	10000826 	beq	r2,zero,4014f84 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 4014f64:	80c00017 	ldw	r3,0(r16)
 4014f68:	e0bff717 	ldw	r2,-36(fp)
 4014f6c:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 4014f70:	8009883a 	mov	r4,r16
 4014f74:	00000000 	call	0 <__reset-0x4000000>
	  p = *lastp;
 4014f78:	e0bff717 	ldw	r2,-36(fp)
 4014f7c:	14000017 	ldw	r16,0(r2)
 4014f80:	00000206 	br	4014f8c <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 4014f84:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 4014f88:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 4014f8c:	803f9f1e 	bne	r16,zero,4014e0c <__alt_data_end+0xfc014e0c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 4014f90:	00000106 	br	4014f98 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 4014f94:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 4014f98:	0001883a 	nop
 4014f9c:	e6fffd04 	addi	sp,fp,-12
 4014fa0:	dfc00417 	ldw	ra,16(sp)
 4014fa4:	df000317 	ldw	fp,12(sp)
 4014fa8:	dc800217 	ldw	r18,8(sp)
 4014fac:	dc400117 	ldw	r17,4(sp)
 4014fb0:	dc000017 	ldw	r16,0(sp)
 4014fb4:	dec00504 	addi	sp,sp,20
 4014fb8:	f800283a 	ret

04014fbc <__floatundidf>:
 4014fbc:	defffc04 	addi	sp,sp,-16
 4014fc0:	dc800215 	stw	r18,8(sp)
 4014fc4:	2025883a 	mov	r18,r4
 4014fc8:	2809883a 	mov	r4,r5
 4014fcc:	dfc00315 	stw	ra,12(sp)
 4014fd0:	dc400115 	stw	r17,4(sp)
 4014fd4:	dc000015 	stw	r16,0(sp)
 4014fd8:	4011fdc0 	call	4011fdc <__floatunsidf>
 4014fdc:	000d883a 	mov	r6,zero
 4014fe0:	01d07c34 	movhi	r7,16880
 4014fe4:	180b883a 	mov	r5,r3
 4014fe8:	1009883a 	mov	r4,r2
 4014fec:	40031c00 	call	40031c0 <__muldf3>
 4014ff0:	9009883a 	mov	r4,r18
 4014ff4:	1023883a 	mov	r17,r2
 4014ff8:	1821883a 	mov	r16,r3
 4014ffc:	4011fdc0 	call	4011fdc <__floatunsidf>
 4015000:	880d883a 	mov	r6,r17
 4015004:	800f883a 	mov	r7,r16
 4015008:	1009883a 	mov	r4,r2
 401500c:	180b883a 	mov	r5,r3
 4015010:	4001dd40 	call	4001dd4 <__adddf3>
 4015014:	dfc00317 	ldw	ra,12(sp)
 4015018:	dc800217 	ldw	r18,8(sp)
 401501c:	dc400117 	ldw	r17,4(sp)
 4015020:	dc000017 	ldw	r16,0(sp)
 4015024:	dec00404 	addi	sp,sp,16
 4015028:	f800283a 	ret

0401502c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401502c:	defffd04 	addi	sp,sp,-12
 4015030:	df000215 	stw	fp,8(sp)
 4015034:	df000204 	addi	fp,sp,8
 4015038:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401503c:	0001883a 	nop
 4015040:	e0bfff17 	ldw	r2,-4(fp)
 4015044:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4015048:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401504c:	10000226 	beq	r2,zero,4015058 <_exit+0x2c>
    ALT_SIM_FAIL();
 4015050:	002af070 	cmpltui	zero,zero,43969
 4015054:	00000106 	br	401505c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4015058:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401505c:	003fff06 	br	401505c <__alt_data_end+0xfc01505c>
