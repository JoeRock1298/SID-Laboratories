
tecnica1.elf:     file format elf32-littlenios2
tecnica1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00013204 memsz 0x00013204 flags r-x
    LOAD off    0x00014224 vaddr 0x04013224 paddr 0x04014dac align 2**12
         filesz 0x00001b88 memsz 0x00001b88 flags rw-
    LOAD off    0x00016934 vaddr 0x04016934 paddr 0x04016934 align 2**12
         filesz 0x00000000 memsz 0x0000290c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012b28  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b8  04012d6c  04012d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b88  04013224  04014dac  00014224  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000290c  04016934  04016934  00016934  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04019240  04019240  00015dac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015dac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001170  00000000  00000000  00015dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029238  00000000  00000000  00016f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aa07  00000000  00000000  00040178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d1f7  00000000  00000000  0004ab7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000027d4  00000000  00000000  00057d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000457f  00000000  00000000  0005a54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000183dc  00000000  00000000  0005eacb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00076ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a98  00000000  00000000  00076ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c562  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0007c565  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c568  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c569  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c56a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c56e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c572  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007c576  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007c57f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007c588  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000010  00000000  00000000  0007c591  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003d  00000000  00000000  0007c5a1  2**0
                  CONTENTS, READONLY
 29 .jdi          00003dae  00000000  00000000  0007c5de  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00079fb4  00000000  00000000  0008038c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
04012d6c l    d  .rodata	00000000 .rodata
04013224 l    d  .rwdata	00000000 .rwdata
04016934 l    d  .bss	00000000 .bss
04019240 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tecnica1_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 backpropagation_best2019_superdef_ver2_alumnos-1.c
00000000 l    df *ABS*	00000000 s_tanh.c
04014ce0 l     O .rwdata	00000008 one
04014ce8 l     O .rwdata	00000008 two
04014cf0 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
04014cf8 l     O .rwdata	00000008 one
04014d00 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 s_expm1.c
04014d08 l     O .rwdata	00000008 one
04014d10 l     O .rwdata	00000008 huge
04014d18 l     O .rwdata	00000008 tiny
04014d20 l     O .rwdata	00000008 o_threshold
04014d28 l     O .rwdata	00000008 ln2_hi
04014d30 l     O .rwdata	00000008 ln2_lo
04014d38 l     O .rwdata	00000008 invln2
04014d40 l     O .rwdata	00000008 Q1
04014d48 l     O .rwdata	00000008 Q2
04014d50 l     O .rwdata	00000008 Q3
04014d58 l     O .rwdata	00000008 Q4
04014d60 l     O .rwdata	00000008 Q5
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
04013224 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
04012f76 l     O .rodata	00000010 zeroes.4404
04007fd4 l     F .text	000000bc __sbprintf
04012f86 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040081e4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04009d14 l     F .text	00000008 __fp_unlock
04009d28 l     F .text	0000019c __sinit.part.1
04009ec4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04013668 l     O .rwdata	00000020 lc_ctype_charset
04013648 l     O .rwdata	00000020 lc_message_charset
04013688 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04012fb4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400d410 l     F .text	000000fc __sprint_r.part.0
040130e8 l     O .rodata	00000010 blanks.4348
040130d8 l     O .rodata	00000010 zeroes.4349
0400e99c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0400ff44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04010050 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401007c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401035c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401043c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04010528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
040106fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04014d9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
04010aec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04010c20 l     F .text	00000034 alt_dev_reg
04013c70 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04010f1c l     F .text	0000020c altera_avalon_jtag_uart_irq
04011128 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04011760 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04011c48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040120bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040121fc l     F .text	0000003c alt_get_errno
04012238 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
04016994 g     O .bss	00000004 alt_instruction_exception_handler
04005b10 g     F .text	00000018 putchar
0400c960 g     F .text	00000074 _mprec_log10
0400ca4c g     F .text	0000008c __any_on
0400f090 g     F .text	00000054 _isatty_r
04012fc0 g     O .rodata	00000028 __mprec_tinytens
04010638 g     F .text	0000007c alt_main
04005b28 g     F .text	000000c0 _puts_r
04002070 g     F .text	00000dfc expm1
04019140 g     O .bss	00000100 alt_irq
04002e6c g     F .text	00000088 fabs
0400f0e4 g     F .text	00000060 _lseek_r
040018b4 g     F .text	00000174 sqrt
04014dac g       *ABS*	00000000 __flash_rwdata_start
040041f4 g     F .text	00000088 .hidden __eqdf2
0400ab2c g     F .text	0000005c _gettimeofday_r
04019240 g       *ABS*	00000000 __alt_heap_start
04005acc g     F .text	0000003c printf
0400f1a4 g     F .text	0000009c _wcrtomb_r
0400d2d0 g     F .text	0000005c __sseek
0400a064 g     F .text	00000010 __sinit
040125dc g     F .text	00000024 alt_get_cpu_freq
0400ea58 g     F .text	00000140 __swbuf_r
0400ab88 g     F .text	0000007c _setlocale_r
04009ecc g     F .text	00000068 __sfmoreglue
040106d8 g     F .text	00000024 __malloc_unlock
0400b858 g     F .text	0000015c memmove
04011854 g     F .text	00000280 perf_print_formatted_report
0400a04c g     F .text	00000018 _cleanup
04016934 g     O .bss	00000004 patNum
0400badc g     F .text	000000a8 _Balloc
0400427c g     F .text	000000dc .hidden __gtdf2
04012450 g     F .text	00000024 altera_nios2_gen2_irq_init
04005a8c g     F .text	00000010 __errno
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400f034 g     F .text	0000005c _fstat_r
04016950 g     O .bss	00000004 errno
0400d24c g     F .text	00000008 __seofread
04016980 g     O .bss	00000004 alt_argv
0401ccd0 g       *ABS*	00000000 _gp
04016938 g     O .bss	00000004 errThisPat
04016940 g     O .bss	00000004 RMSerror
04013af0 g     O .rwdata	00000180 alt_fd_list
04000744 g     F .text	00000040 WeightChangesH2O
04000874 g     F .text	000000cc WeightChangesH1H2
04005b08 g     F .text	00000008 _putchar_r
04012600 g     F .text	00000090 alt_find_dev
0400b710 g     F .text	00000148 memcpy
04009d1c g     F .text	0000000c _cleanup_r
040054e0 g     F .text	000000dc .hidden __floatsidf
04012180 g     F .text	0000007c alt_io_redirect
04004358 g     F .text	000000f4 .hidden __ltdf2
04012d6c g       *ABS*	00000000 __DTOR_END__
04005be8 g     F .text	00000014 puts
040128cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
04002ef4 g     F .text	00000104 __fpclassifyd
0400c8bc g     F .text	000000a4 __ratio
04005d40 g     F .text	00000030 system
0400e980 g     F .text	0000001c __vfiprintf_internal
04011320 g     F .text	0000021c altera_avalon_jtag_uart_read
04005a9c g     F .text	00000030 _printf_r
040059d0 g     F .text	00000064 .hidden __udivsi3
04010398 g     F .text	000000a4 isatty
04013010 g     O .rodata	000000c8 __mprec_tens
0400ac04 g     F .text	0000000c __locale_charset
0401696c g     O .bss	00000008 alt_timezone
0401283c g     F .text	00000090 alt_icache_flush
04016968 g     O .bss	00000004 __malloc_top_pad
0401257c g     F .text	00000040 perf_get_num_starts
04014d74 g     O .rwdata	00000004 __mb_cur_max
0400ac34 g     F .text	0000000c _localeconv_r
04014cd8 g     O .rwdata	00000004 LR_H2O
0400bee8 g     F .text	0000003c __i2b
0400a4e8 g     F .text	000004bc __sfvwrite_r
0400d1a4 g     F .text	00000054 _sbrk_r
04000a9c g     F .text	00000128 WeightChangesIH1
04000bc4 g     F .text	00000120 WeightUpdatesIH1
0400f144 g     F .text	00000060 _read_r
04014d94 g     O .rwdata	00000004 alt_max_fd
0400ed28 g     F .text	000000f0 _fclose_r
04009ce4 g     F .text	00000030 fflush
04016964 g     O .bss	00000004 __malloc_max_sbrked_mem
040055bc g     F .text	00000110 .hidden __extendsfdf2
04005d10 g     F .text	00000030 _system_r
04003060 g     F .text	000008ac .hidden __adddf3
04001134 g     F .text	000000d8 displayResults
04014cd4 g     O .rwdata	00000004 LR_IH1
0400c664 g     F .text	0000010c __b2d
0400f964 g     F .text	00000538 .hidden __umoddi3
04010564 g     F .text	000000d4 lseek
04014d68 g     O .rwdata	00000004 __fdlib_version
040169c0 g     O .bss	00000050 hiddenVal2
04014d6c g     O .rwdata	00000004 _global_impure_ptr
0400034c g     F .text	000003f8 calcNet
0400cc40 g     F .text	00000564 _realloc_r
04019240 g       *ABS*	00000000 __bss_end
04011fcc g     F .text	000000f0 alt_iic_isr_register
040109e4 g     F .text	00000108 alt_tick
0400f3ec g     F .text	00000578 .hidden __udivdi3
0400ef90 g     F .text	00000024 _fputwc_r
04012fe8 g     O .rodata	00000028 __mprec_bigtens
0400bccc g     F .text	00000104 __s2b
0400fe9c g     F .text	000000a8 .hidden __floatunsidf
0400c3a4 g     F .text	00000060 __mcmp
0400a084 g     F .text	00000018 __fp_lock_all
04011f80 g     F .text	0000004c alt_ic_irq_enabled
04010948 g     F .text	0000009c alt_alarm_stop
0400120c g     F .text	000000c0 calcOverallError
04016990 g     O .bss	00000004 alt_irq_active
04014cdc g     O .rwdata	00000004 LR_H1H2
040000fc g     F .exceptions	000000d4 alt_irq_handler
04013ac8 g     O .rwdata	00000028 alt_dev_null
04011c00 g     F .text	00000048 alt_dcache_flush_all
0400bdd0 g     F .text	00000068 __hi0bits
04005460 g     F .text	00000080 .hidden __fixdfsi
04014dac g       *ABS*	00000000 __ram_rwdata_end
04016a10 g     O .bss	00000050 delta_h2
04014d8c g     O .rwdata	00000008 alt_dev_list
04010b28 g     F .text	000000f8 write
0400cad8 g     F .text	000000a0 _putc_r
04016a60 g     O .bss	00000054 weightsH2O
04013224 g       *ABS*	00000000 __ram_rodata_end
040100b8 g     F .text	000000b0 fstat
04004358 g     F .text	000000f4 .hidden __ledf2
04000940 g     F .text	0000015c WeightUpdatesH1H2
0400c11c g     F .text	00000140 __pow5mult
0400d524 g     F .text	0000145c ___vfiprintf_internal_r
0401695c g     O .bss	00000004 __nlocale_changed
04005a34 g     F .text	00000058 .hidden __umodsi3
04019240 g       *ABS*	00000000 end
04010e5c g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04012d6c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
040117d8 g     F .text	0000007c alt_avalon_timer_sc_init
04005874 g     F .text	00000064 .hidden __clzsi2
0401153c g     F .text	00000224 altera_avalon_jtag_uart_write
040014e0 g     F .text	000003d4 tanh
0400a074 g     F .text	00000004 __sfp_lock_acquire
04000fb0 g     F .text	00000184 initData
0400b62c g     F .text	000000e4 memchr
04005dc0 g     F .text	000021f8 ___vfprintf_internal_r
04000784 g     F .text	000000f0 WeightUpdatesH2O
0400a1d8 g     F .text	00000310 _free_r
04000290 g     F .text	000000bc print_array
0400ac10 g     F .text	00000010 __locale_mb_cur_max
04012b48 g     F .text	00000180 __call_exitprocs
04016958 g     O .bss	00000004 __mlocale_changed
04014d78 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04016988 g     O .bss	00000004 _alt_tick_rate
04014cd0 g     O .rwdata	00000004 numEpochs
04016ab4 g     O .bss	000000c8 ponderacion1
04012cc8 g     F .text	00000070 .hidden __floatundidf
04005c14 g     F .text	00000064 rand
0400c25c g     F .text	00000148 __lshift
0401698c g     O .bss	00000004 _alt_nticks
04010738 g     F .text	000000fc read
04010c8c g     F .text	0000006c alt_sys_init
04012a30 g     F .text	00000118 __register_exitproc
0400bf24 g     F .text	000001f8 __multiply
040111c8 g     F .text	00000068 altera_avalon_jtag_uart_close
04013224 g       *ABS*	00000000 __ram_rwdata_start
04012d6c g       *ABS*	00000000 __ram_rodata_start
04016998 g     O .bss	00000028 __malloc_current_mallinfo
04016b7c g     O .bss	000000c8 der_hiddenVal1
0400c770 g     F .text	0000014c __d2b
04016944 g     O .bss	00000004 outPred
04010cf8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04012798 g     F .text	000000a4 alt_get_fd
04000ce4 g     F .text	0000003c getRand
0400ec10 g     F .text	00000054 _close_r
04012474 g     F .text	000000bc perf_get_section_time
04016948 g     O .bss	00000004 ponderacion3
040129b4 g     F .text	0000007c memcmp
04010db8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04019240 g       *ABS*	00000000 __alt_stack_base
04010e08 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04008090 g     F .text	00000154 __swsetup_r
0400390c g     F .text	000008e8 .hidden __divdf3
04009f34 g     F .text	00000118 __sfp
0400c9d4 g     F .text	00000078 __copybits
04012530 g     F .text	0000004c perf_get_total_time
04016c44 g     O .bss	00000ff0 weightsH1H2_old
040136c0 g     O .rwdata	00000408 __malloc_av_
0400a080 g     F .text	00000004 __sinit_lock_release
0400444c g     F .text	00000718 .hidden __muldf3
0400d1f8 g     F .text	00000054 __sread
04012690 g     F .text	00000108 alt_find_file
04011c84 g     F .text	000000a4 alt_dev_llist_insert
040106b4 g     F .text	00000024 __malloc_lock
04010898 g     F .text	000000b0 sbrk
04009c88 g     F .text	0000005c _fflush_r
0400ec64 g     F .text	000000c4 _calloc_r
04010168 g     F .text	000001f4 gettimeofday
04016934 g       *ABS*	00000000 __bss_start
0400b9b4 g     F .text	00000128 memset
04000d20 g     F .text	00000290 initWeights
040012cc g     F .text	00000214 main
04016984 g     O .bss	00000004 alt_envp
04016960 g     O .bss	00000004 __malloc_max_total_mem
04010d58 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400eb98 g     F .text	00000018 __swbuf
04005bfc g     F .text	00000018 srand
0400d32c g     F .text	00000008 __sclose
04002ff8 g     F .text	00000068 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0400ee18 g     F .text	00000014 fclose
040056cc g     F .text	000001a8 .hidden __truncdfsf2
040083e4 g     F .text	00001688 _dtoa_r
0400ae20 g     F .text	0000080c _malloc_r
0400f300 g     F .text	00000030 __ascii_wctomb
04005d70 g     F .text	00000050 time
04014d98 g     O .rwdata	00000004 alt_errno
0400a9a4 g     F .text	000000c4 _fwalk
0400cb78 g     F .text	000000c8 putc
040058d8 g     F .text	00000084 .hidden __divsi3
0400a0b4 g     F .text	00000124 _malloc_trim_r
04012d6c g       *ABS*	00000000 __CTOR_END__
0400d334 g     F .text	000000dc strcmp
04012d6c g       *ABS*	00000000 __flash_rodata_start
04017c34 g     O .bss	000000c8 hiddenVal1
04012d6c g       *ABS*	00000000 __DTOR_LIST__
040041f4 g     F .text	00000088 .hidden __nedf2
04010c54 g     F .text	00000038 alt_irq_init
04010834 g     F .text	00000064 alt_release_fd
04012e29 g     O .rodata	00000100 .hidden __clz_tab
04016954 g     O .bss	00000004 _PathLocale
04012968 g     F .text	00000014 atexit
0400ebb0 g     F .text	00000060 _write_r
0400ac40 g     F .text	00000018 setlocale
04014d70 g     O .rwdata	00000004 _impure_ptr
0401697c g     O .bss	00000004 alt_argc
04009a6c g     F .text	0000021c __sflush_r
04011d88 g     F .text	00000060 _do_dtors
0400ac2c g     F .text	00000008 __locale_cjk_lang
04000020 g       .exceptions	00000000 alt_irq_entry
0400c600 g     F .text	00000064 __ulp
0400a09c g     F .text	00000018 __fp_unlock_all
04014d84 g     O .rwdata	00000008 alt_fs_list
04017cfc g     O .bss	00000258 weightsIH1
04017f54 g     O .bss	00000054 weightsH2O_old
0401694c g     O .bss	00000004 der_outPred
04016974 g     O .bss	00000008 alt_resettime
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400ac58 g     F .text	0000000c localeconv
04001a28 g     F .text	00000648 __ieee754_sqrt
04011e1c g     F .text	00000050 alt_ic_isr_register
04014dac g       *ABS*	00000000 _edata
04019240 g       *ABS*	00000000 _end
0400ee2c g     F .text	00000164 __fputwc
04000244 g       *ABS*	00000000 __ram_exceptions_end
04011230 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04011ef4 g     F .text	0000008c alt_ic_irq_disable
04017fa8 g     O .bss	00000030 trainInputs
0400d254 g     F .text	0000007c __swrite
04014d7c g     O .rwdata	00000004 __malloc_trim_threshold
040125bc g     F .text	00000020 alt_get_performance_counter_base
0400ac20 g     F .text	0000000c __locale_msgcharset
0401297c g     F .text	00000038 exit
0400aa68 g     F .text	000000c4 _fwalk_reent
0400c404 g     F .text	000001fc __mdiff
0400595c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400a078 g     F .text	00000004 __sfp_lock_release
04017fd8 g     O .bss	00000010 trainOutput
04000000 g       *ABS*	00000000 __alt_mem_sdram
04017fe8 g     O .bss	00000050 ponderacion2
04018038 g     O .bss	00000ff0 weightsH1H2
04012d38 g     F .text	00000034 _exit
04011ad4 g     F .text	0000012c alt_alarm_start
0401693c g     O .bss	00000004 delta_o
0400f38c g     F .text	00000060 .hidden __muldi3
0400ac64 g     F .text	000001bc __smakebuf_r
04005c78 g     F .text	00000098 strlen
040122fc g     F .text	00000154 open
0400427c g     F .text	000000dc .hidden __gedf2
04019028 g     O .bss	00000050 der_hiddenVal2
04014d80 g     O .rwdata	00000004 __wctomb
0400d50c g     F .text	00000018 __sprint_r
04011de8 g     F .text	00000034 alt_icache_flush_all
04014da8 g     O .rwdata	00000004 alt_priority_mask
04019078 g     O .bss	000000c8 delta_h1
04011e6c g     F .text	00000088 alt_ic_irq_enable
04007fb8 g     F .text	0000001c __vfprintf_internal
0400f330 g     F .text	0000005c _wctomb_r
04004b64 g     F .text	000008fc .hidden __subdf3
0400be38 g     F .text	000000b0 __lo0bits
04014da0 g     O .rwdata	00000008 alt_alarm_list
04011d28 g     F .text	00000060 _do_ctors
0400f240 g     F .text	000000c0 wcrtomb
0400ff80 g     F .text	000000d0 close
040104a4 g     F .text	00000084 alt_load
0400efb4 g     F .text	00000080 fputwc
0400a07c g     F .text	00000004 __sinit_lock_acquire
0400bbac g     F .text	00000120 __multadd
0400bb84 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10a45004 	addi	r2,r2,-28352
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10a45004 	addi	r2,r2,-28352
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a73117 	ldw	r2,-25404(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a73117 	ldw	r2,-25404(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xfc000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000260:	d6b33414 	ori	gp,gp,52432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000268:	109a4d14 	ori	r2,r2,26932

    movhi r3, %hi(__bss_end)
 400026c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000270:	18e49014 	ori	r3,r3,37440

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xfc000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40104a40 	call	40104a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	40106380 	call	4010638 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xfc00028c>

04000290 <print_array>:

//==============================================================
//************** function definitions **************************
//==============================================================
void print_array(float data[], int n)
{
 4000290:	defffb04 	addi	sp,sp,-20
 4000294:	dfc00415 	stw	ra,16(sp)
 4000298:	df000315 	stw	fp,12(sp)
 400029c:	df000304 	addi	fp,sp,12
 40002a0:	e13ffe15 	stw	r4,-8(fp)
 40002a4:	e17fff15 	stw	r5,-4(fp)
    int i;

    printf("[");
 40002a8:	010016c4 	movi	r4,91
 40002ac:	4005b100 	call	4005b10 <putchar>
    for (i = 0; i < n; i++)
 40002b0:	e03ffd15 	stw	zero,-12(fp)
 40002b4:	00001906 	br	400031c <print_array+0x8c>
    {

        printf("%f",data[i]);
 40002b8:	e0bffd17 	ldw	r2,-12(fp)
 40002bc:	1085883a 	add	r2,r2,r2
 40002c0:	1085883a 	add	r2,r2,r2
 40002c4:	1007883a 	mov	r3,r2
 40002c8:	e0bffe17 	ldw	r2,-8(fp)
 40002cc:	10c5883a 	add	r2,r2,r3
 40002d0:	10c00017 	ldw	r3,0(r2)
 40002d4:	1809883a 	mov	r4,r3
 40002d8:	40055bc0 	call	40055bc <__extendsfdf2>
 40002dc:	100d883a 	mov	r6,r2
 40002e0:	180f883a 	mov	r7,r3
 40002e4:	300b883a 	mov	r5,r6
 40002e8:	380d883a 	mov	r6,r7
 40002ec:	01010074 	movhi	r4,1025
 40002f0:	210b5b04 	addi	r4,r4,11628
 40002f4:	4005acc0 	call	4005acc <printf>
        if (i != n-1)
 40002f8:	e0bfff17 	ldw	r2,-4(fp)
 40002fc:	10ffffc4 	addi	r3,r2,-1
 4000300:	e0bffd17 	ldw	r2,-12(fp)
 4000304:	18800226 	beq	r3,r2,4000310 <print_array+0x80>
        {
            printf(",");
 4000308:	01000b04 	movi	r4,44
 400030c:	4005b100 	call	4005b10 <putchar>
void print_array(float data[], int n)
{
    int i;

    printf("[");
    for (i = 0; i < n; i++)
 4000310:	e0bffd17 	ldw	r2,-12(fp)
 4000314:	10800044 	addi	r2,r2,1
 4000318:	e0bffd15 	stw	r2,-12(fp)
 400031c:	e0fffd17 	ldw	r3,-12(fp)
 4000320:	e0bfff17 	ldw	r2,-4(fp)
 4000324:	18bfe416 	blt	r3,r2,40002b8 <__alt_data_end+0xfc0002b8>
        if (i != n-1)
        {
            printf(",");
        }
    }
    printf("]\n");
 4000328:	01010074 	movhi	r4,1025
 400032c:	210b5c04 	addi	r4,r4,11632
 4000330:	4005be80 	call	4005be8 <puts>
}
 4000334:	0001883a 	nop
 4000338:	e037883a 	mov	sp,fp
 400033c:	dfc00117 	ldw	ra,4(sp)
 4000340:	df000017 	ldw	fp,0(sp)
 4000344:	dec00204 	addi	sp,sp,8
 4000348:	f800283a 	ret

0400034c <calcNet>:

//***********************************
// calculates the network output
void calcNet(void)
{
 400034c:	defffc04 	addi	sp,sp,-16
 4000350:	dfc00315 	stw	ra,12(sp)
 4000354:	df000215 	stw	fp,8(sp)
 4000358:	df000204 	addi	fp,sp,8
    //calculate the outputs of the hidden neurons of hidden layer 1
    //the hidden neurons are tanh
    int i = 0;
 400035c:	e03ffe15 	stw	zero,-8(fp)
    int j =0;
 4000360:	e03fff15 	stw	zero,-4(fp)


    for(i = 0;i<numHidden1;i++)
 4000364:	e03ffe15 	stw	zero,-8(fp)
 4000368:	00005b06 	br	40004d8 <calcNet+0x18c>
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];
 400036c:	00810074 	movhi	r2,1025
 4000370:	109f3f04 	addi	r2,r2,31996
 4000374:	e0fffe17 	ldw	r3,-8(fp)
 4000378:	18c01904 	addi	r3,r3,100
 400037c:	18c7883a 	add	r3,r3,r3
 4000380:	18c7883a 	add	r3,r3,r3
 4000384:	10c5883a 	add	r2,r2,r3
 4000388:	11000017 	ldw	r4,0(r2)
 400038c:	00810074 	movhi	r2,1025
 4000390:	109aad04 	addi	r2,r2,27316
 4000394:	e0fffe17 	ldw	r3,-8(fp)
 4000398:	18c7883a 	add	r3,r3,r3
 400039c:	18c7883a 	add	r3,r3,r3
 40003a0:	10c5883a 	add	r2,r2,r3
 40003a4:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numInputs;j++)
 40003a8:	e03fff15 	stw	zero,-4(fp)
 40003ac:	00002906 	br	4000454 <calcNet+0x108>
        {

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);
 40003b0:	00810074 	movhi	r2,1025
 40003b4:	109aad04 	addi	r2,r2,27316
 40003b8:	e0fffe17 	ldw	r3,-8(fp)
 40003bc:	18c7883a 	add	r3,r3,r3
 40003c0:	18c7883a 	add	r3,r3,r3
 40003c4:	10c5883a 	add	r2,r2,r3
 40003c8:	11400017 	ldw	r5,0(r2)
 40003cc:	d1271917 	ldw	r4,-25500(gp)
 40003d0:	00c10074 	movhi	r3,1025
 40003d4:	18dfea04 	addi	r3,r3,32680
 40003d8:	2005883a 	mov	r2,r4
 40003dc:	1085883a 	add	r2,r2,r2
 40003e0:	1105883a 	add	r2,r2,r4
 40003e4:	e13fff17 	ldw	r4,-4(fp)
 40003e8:	1105883a 	add	r2,r2,r4
 40003ec:	1085883a 	add	r2,r2,r2
 40003f0:	1085883a 	add	r2,r2,r2
 40003f4:	1885883a 	add	r2,r3,r2
 40003f8:	11000017 	ldw	r4,0(r2)
 40003fc:	00810074 	movhi	r2,1025
 4000400:	109f3f04 	addi	r2,r2,31996
 4000404:	e0ffff17 	ldw	r3,-4(fp)
 4000408:	19800ca4 	muli	r6,r3,50
 400040c:	e0fffe17 	ldw	r3,-8(fp)
 4000410:	30c7883a 	add	r3,r6,r3
 4000414:	18c7883a 	add	r3,r3,r3
 4000418:	18c7883a 	add	r3,r3,r3
 400041c:	10c7883a 	add	r3,r2,r3
 4000420:	18800017 	ldw	r2,0(r3)
 4000424:	2085ff32 	custom	252,r2,r4,r2
 4000428:	2889ff72 	custom	253,r4,r5,r2
 400042c:	00810074 	movhi	r2,1025
 4000430:	109aad04 	addi	r2,r2,27316
 4000434:	e0fffe17 	ldw	r3,-8(fp)
 4000438:	18c7883a 	add	r3,r3,r3
 400043c:	18c7883a 	add	r3,r3,r3
 4000440:	10c5883a 	add	r2,r2,r3
 4000444:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden1;i++)
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];

        for(j = 0;j<numInputs;j++)
 4000448:	e0bfff17 	ldw	r2,-4(fp)
 400044c:	10800044 	addi	r2,r2,1
 4000450:	e0bfff15 	stw	r2,-4(fp)
 4000454:	e0bfff17 	ldw	r2,-4(fp)
 4000458:	10800090 	cmplti	r2,r2,2
 400045c:	103fd41e 	bne	r2,zero,40003b0 <__alt_data_end+0xfc0003b0>

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);

        }

			hiddenVal1[i] = tanh(ponderacion1[i]);
 4000460:	00810074 	movhi	r2,1025
 4000464:	109aad04 	addi	r2,r2,27316
 4000468:	e0fffe17 	ldw	r3,-8(fp)
 400046c:	18c7883a 	add	r3,r3,r3
 4000470:	18c7883a 	add	r3,r3,r3
 4000474:	10c5883a 	add	r2,r2,r3
 4000478:	10c00017 	ldw	r3,0(r2)
 400047c:	1809883a 	mov	r4,r3
 4000480:	40055bc0 	call	40055bc <__extendsfdf2>
 4000484:	100b883a 	mov	r5,r2
 4000488:	180d883a 	mov	r6,r3
 400048c:	2809883a 	mov	r4,r5
 4000490:	300b883a 	mov	r5,r6
 4000494:	40014e00 	call	40014e0 <tanh>
 4000498:	100b883a 	mov	r5,r2
 400049c:	180d883a 	mov	r6,r3
 40004a0:	2809883a 	mov	r4,r5
 40004a4:	300b883a 	mov	r5,r6
 40004a8:	40056cc0 	call	40056cc <__truncdfsf2>
 40004ac:	1009883a 	mov	r4,r2
 40004b0:	00810074 	movhi	r2,1025
 40004b4:	109f0d04 	addi	r2,r2,31796
 40004b8:	e0fffe17 	ldw	r3,-8(fp)
 40004bc:	18c7883a 	add	r3,r3,r3
 40004c0:	18c7883a 	add	r3,r3,r3
 40004c4:	10c5883a 	add	r2,r2,r3
 40004c8:	11000015 	stw	r4,0(r2)
    //the hidden neurons are tanh
    int i = 0;
    int j =0;


    for(i = 0;i<numHidden1;i++)
 40004cc:	e0bffe17 	ldw	r2,-8(fp)
 40004d0:	10800044 	addi	r2,r2,1
 40004d4:	e0bffe15 	stw	r2,-8(fp)
 40004d8:	e0bffe17 	ldw	r2,-8(fp)
 40004dc:	10800c90 	cmplti	r2,r2,50
 40004e0:	103fa21e 	bne	r2,zero,400036c <__alt_data_end+0xfc00036c>
			hiddenVal1[i] = tanh(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
 40004e4:	e03ffe15 	stw	zero,-8(fp)
 40004e8:	00005606 	br	4000644 <calcNet+0x2f8>
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];
 40004ec:	008100b4 	movhi	r2,1026
 40004f0:	10a00e04 	addi	r2,r2,-32712
 40004f4:	e0fffe17 	ldw	r3,-8(fp)
 40004f8:	18c0fa04 	addi	r3,r3,1000
 40004fc:	18c7883a 	add	r3,r3,r3
 4000500:	18c7883a 	add	r3,r3,r3
 4000504:	10c5883a 	add	r2,r2,r3
 4000508:	11000017 	ldw	r4,0(r2)
 400050c:	00810074 	movhi	r2,1025
 4000510:	109ffa04 	addi	r2,r2,32744
 4000514:	e0fffe17 	ldw	r3,-8(fp)
 4000518:	18c7883a 	add	r3,r3,r3
 400051c:	18c7883a 	add	r3,r3,r3
 4000520:	10c5883a 	add	r2,r2,r3
 4000524:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numHidden1;j++)
 4000528:	e03fff15 	stw	zero,-4(fp)
 400052c:	00002406 	br	40005c0 <calcNet+0x274>
        {

        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);
 4000530:	00810074 	movhi	r2,1025
 4000534:	109ffa04 	addi	r2,r2,32744
 4000538:	e0fffe17 	ldw	r3,-8(fp)
 400053c:	18c7883a 	add	r3,r3,r3
 4000540:	18c7883a 	add	r3,r3,r3
 4000544:	10c5883a 	add	r2,r2,r3
 4000548:	11000017 	ldw	r4,0(r2)
 400054c:	00810074 	movhi	r2,1025
 4000550:	109f0d04 	addi	r2,r2,31796
 4000554:	e0ffff17 	ldw	r3,-4(fp)
 4000558:	18c7883a 	add	r3,r3,r3
 400055c:	18c7883a 	add	r3,r3,r3
 4000560:	10c5883a 	add	r2,r2,r3
 4000564:	11400017 	ldw	r5,0(r2)
 4000568:	008100b4 	movhi	r2,1026
 400056c:	10a00e04 	addi	r2,r2,-32712
 4000570:	e0ffff17 	ldw	r3,-4(fp)
 4000574:	19800524 	muli	r6,r3,20
 4000578:	e0fffe17 	ldw	r3,-8(fp)
 400057c:	30c7883a 	add	r3,r6,r3
 4000580:	18c7883a 	add	r3,r3,r3
 4000584:	18c7883a 	add	r3,r3,r3
 4000588:	10c7883a 	add	r3,r2,r3
 400058c:	18800017 	ldw	r2,0(r3)
 4000590:	2885ff32 	custom	252,r2,r5,r2
 4000594:	2089ff72 	custom	253,r4,r4,r2
 4000598:	00810074 	movhi	r2,1025
 400059c:	109ffa04 	addi	r2,r2,32744
 40005a0:	e0fffe17 	ldw	r3,-8(fp)
 40005a4:	18c7883a 	add	r3,r3,r3
 40005a8:	18c7883a 	add	r3,r3,r3
 40005ac:	10c5883a 	add	r2,r2,r3
 40005b0:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden2;i++)
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];

        for(j = 0;j<numHidden1;j++)
 40005b4:	e0bfff17 	ldw	r2,-4(fp)
 40005b8:	10800044 	addi	r2,r2,1
 40005bc:	e0bfff15 	stw	r2,-4(fp)
 40005c0:	e0bfff17 	ldw	r2,-4(fp)
 40005c4:	10800c90 	cmplti	r2,r2,50
 40005c8:	103fd91e 	bne	r2,zero,4000530 <__alt_data_end+0xfc000530>
        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);

        }


			hiddenVal2[i] = tanh(ponderacion2[i]);
 40005cc:	00810074 	movhi	r2,1025
 40005d0:	109ffa04 	addi	r2,r2,32744
 40005d4:	e0fffe17 	ldw	r3,-8(fp)
 40005d8:	18c7883a 	add	r3,r3,r3
 40005dc:	18c7883a 	add	r3,r3,r3
 40005e0:	10c5883a 	add	r2,r2,r3
 40005e4:	10c00017 	ldw	r3,0(r2)
 40005e8:	1809883a 	mov	r4,r3
 40005ec:	40055bc0 	call	40055bc <__extendsfdf2>
 40005f0:	100b883a 	mov	r5,r2
 40005f4:	180d883a 	mov	r6,r3
 40005f8:	2809883a 	mov	r4,r5
 40005fc:	300b883a 	mov	r5,r6
 4000600:	40014e00 	call	40014e0 <tanh>
 4000604:	100b883a 	mov	r5,r2
 4000608:	180d883a 	mov	r6,r3
 400060c:	2809883a 	mov	r4,r5
 4000610:	300b883a 	mov	r5,r6
 4000614:	40056cc0 	call	40056cc <__truncdfsf2>
 4000618:	1009883a 	mov	r4,r2
 400061c:	00810074 	movhi	r2,1025
 4000620:	109a7004 	addi	r2,r2,27072
 4000624:	e0fffe17 	ldw	r3,-8(fp)
 4000628:	18c7883a 	add	r3,r3,r3
 400062c:	18c7883a 	add	r3,r3,r3
 4000630:	10c5883a 	add	r2,r2,r3
 4000634:	11000015 	stw	r4,0(r2)
			hiddenVal1[i] = tanh(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
 4000638:	e0bffe17 	ldw	r2,-8(fp)
 400063c:	10800044 	addi	r2,r2,1
 4000640:	e0bffe15 	stw	r2,-8(fp)
 4000644:	e0bffe17 	ldw	r2,-8(fp)
 4000648:	10800510 	cmplti	r2,r2,20
 400064c:	103fa71e 	bne	r2,zero,40004ec <__alt_data_end+0xfc0004ec>

    }
   //calculate the output of the network
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];
 4000650:	00810074 	movhi	r2,1025
 4000654:	109a9804 	addi	r2,r2,27232
 4000658:	10c01417 	ldw	r3,80(r2)
 400065c:	d0e71e15 	stw	r3,-25480(gp)


   for(i = 0;i<numHidden2;i++)
 4000660:	e03ffe15 	stw	zero,-8(fp)
 4000664:	00001506 	br	40006bc <calcNet+0x370>
   {

    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];
 4000668:	00810074 	movhi	r2,1025
 400066c:	109a7004 	addi	r2,r2,27072
 4000670:	e0fffe17 	ldw	r3,-8(fp)
 4000674:	18c7883a 	add	r3,r3,r3
 4000678:	18c7883a 	add	r3,r3,r3
 400067c:	10c5883a 	add	r2,r2,r3
 4000680:	11000017 	ldw	r4,0(r2)
 4000684:	00810074 	movhi	r2,1025
 4000688:	109a9804 	addi	r2,r2,27232
 400068c:	e0fffe17 	ldw	r3,-8(fp)
 4000690:	18c7883a 	add	r3,r3,r3
 4000694:	18c7883a 	add	r3,r3,r3
 4000698:	10c7883a 	add	r3,r2,r3
 400069c:	18800017 	ldw	r2,0(r3)
 40006a0:	2087ff32 	custom	252,r3,r4,r2
 40006a4:	d0a71e17 	ldw	r2,-25480(gp)
 40006a8:	1885ff72 	custom	253,r2,r3,r2
 40006ac:	d0a71e15 	stw	r2,-25480(gp)
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];


   for(i = 0;i<numHidden2;i++)
 40006b0:	e0bffe17 	ldw	r2,-8(fp)
 40006b4:	10800044 	addi	r2,r2,1
 40006b8:	e0bffe15 	stw	r2,-8(fp)
 40006bc:	e0bffe17 	ldw	r2,-8(fp)
 40006c0:	10800510 	cmplti	r2,r2,20
 40006c4:	103fe81e 	bne	r2,zero,4000668 <__alt_data_end+0xfc000668>
    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];

   }


        outPred  = tanh(ponderacion3);
 40006c8:	d0a71e17 	ldw	r2,-25480(gp)
 40006cc:	1009883a 	mov	r4,r2
 40006d0:	40055bc0 	call	40055bc <__extendsfdf2>
 40006d4:	100b883a 	mov	r5,r2
 40006d8:	180d883a 	mov	r6,r3
 40006dc:	2809883a 	mov	r4,r5
 40006e0:	300b883a 	mov	r5,r6
 40006e4:	40014e00 	call	40014e0 <tanh>
 40006e8:	100b883a 	mov	r5,r2
 40006ec:	180d883a 	mov	r6,r3
 40006f0:	2809883a 	mov	r4,r5
 40006f4:	300b883a 	mov	r5,r6
 40006f8:	40056cc0 	call	40056cc <__truncdfsf2>
 40006fc:	1007883a 	mov	r3,r2
 4000700:	d0e71d15 	stw	r3,-25484(gp)

    //calculate the error
    errThisPat = trainOutput[patNum]-outPred;
 4000704:	d0e71917 	ldw	r3,-25500(gp)
 4000708:	00810074 	movhi	r2,1025
 400070c:	109ff604 	addi	r2,r2,32728
 4000710:	18c7883a 	add	r3,r3,r3
 4000714:	18c7883a 	add	r3,r3,r3
 4000718:	10c5883a 	add	r2,r2,r3
 400071c:	10c00017 	ldw	r3,0(r2)
 4000720:	d0a71d17 	ldw	r2,-25484(gp)
 4000724:	1885ffb2 	custom	254,r2,r3,r2
 4000728:	d0a71a15 	stw	r2,-25496(gp)

}
 400072c:	0001883a 	nop
 4000730:	e037883a 	mov	sp,fp
 4000734:	dfc00117 	ldw	ra,4(sp)
 4000738:	df000017 	ldw	fp,0(sp)
 400073c:	dec00204 	addi	sp,sp,8
 4000740:	f800283a 	ret

04000744 <WeightChangesH2O>:


//************************************
//adjust the weights hidden-output
void WeightChangesH2O(void)
{
 4000744:	deffff04 	addi	sp,sp,-4
 4000748:	df000015 	stw	fp,0(sp)
 400074c:	d839883a 	mov	fp,sp


		delta_o = (1 - (outPred * outPred))* errThisPat;
 4000750:	d0e71d17 	ldw	r3,-25484(gp)
 4000754:	d0a71d17 	ldw	r2,-25484(gp)
 4000758:	1885ff32 	custom	252,r2,r3,r2
 400075c:	00cfe034 	movhi	r3,16256
 4000760:	1887ffb2 	custom	254,r3,r3,r2
 4000764:	d0a71a17 	ldw	r2,-25496(gp)
 4000768:	1885ff32 	custom	252,r2,r3,r2
 400076c:	d0a71b15 	stw	r2,-25492(gp)


 }
 4000770:	0001883a 	nop
 4000774:	e037883a 	mov	sp,fp
 4000778:	df000017 	ldw	fp,0(sp)
 400077c:	dec00104 	addi	sp,sp,4
 4000780:	f800283a 	ret

04000784 <WeightUpdatesH2O>:

//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
 4000784:	defffd04 	addi	sp,sp,-12
 4000788:	df000215 	stw	fp,8(sp)
 400078c:	df000204 	addi	fp,sp,8
    int k=0;
 4000790:	e03ffe15 	stw	zero,-8(fp)
   for(k = 0;k<numHidden2+1;k++)
 4000794:	e03ffe15 	stw	zero,-8(fp)
 4000798:	00002e06 	br	4000854 <WeightUpdatesH2O+0xd0>
   {
    float weightChange =delta_o * LR_H2O * hiddenVal2[k];
 400079c:	d0e71b17 	ldw	r3,-25492(gp)
 40007a0:	008f7374 	movhi	r2,15821
 40007a4:	10b33344 	addi	r2,r2,-13107
 40007a8:	1889ff32 	custom	252,r4,r3,r2
 40007ac:	00810074 	movhi	r2,1025
 40007b0:	109a7004 	addi	r2,r2,27072
 40007b4:	e0fffe17 	ldw	r3,-8(fp)
 40007b8:	18c7883a 	add	r3,r3,r3
 40007bc:	18c7883a 	add	r3,r3,r3
 40007c0:	10c7883a 	add	r3,r2,r3
 40007c4:	18800017 	ldw	r2,0(r3)
 40007c8:	2085ff32 	custom	252,r2,r4,r2
 40007cc:	e0bfff15 	stw	r2,-4(fp)

    weightsH2O_old[k] = weightsH2O[k] ;
 40007d0:	00810074 	movhi	r2,1025
 40007d4:	109a9804 	addi	r2,r2,27232
 40007d8:	e0fffe17 	ldw	r3,-8(fp)
 40007dc:	18c7883a 	add	r3,r3,r3
 40007e0:	18c7883a 	add	r3,r3,r3
 40007e4:	10c5883a 	add	r2,r2,r3
 40007e8:	11000017 	ldw	r4,0(r2)
 40007ec:	00810074 	movhi	r2,1025
 40007f0:	109fd504 	addi	r2,r2,32596
 40007f4:	e0fffe17 	ldw	r3,-8(fp)
 40007f8:	18c7883a 	add	r3,r3,r3
 40007fc:	18c7883a 	add	r3,r3,r3
 4000800:	10c5883a 	add	r2,r2,r3
 4000804:	11000015 	stw	r4,0(r2)
    weightsH2O[k] = weightsH2O[k] + weightChange;
 4000808:	00810074 	movhi	r2,1025
 400080c:	109a9804 	addi	r2,r2,27232
 4000810:	e0fffe17 	ldw	r3,-8(fp)
 4000814:	18c7883a 	add	r3,r3,r3
 4000818:	18c7883a 	add	r3,r3,r3
 400081c:	10c5883a 	add	r2,r2,r3
 4000820:	10c00017 	ldw	r3,0(r2)
 4000824:	e0bfff17 	ldw	r2,-4(fp)
 4000828:	1889ff72 	custom	253,r4,r3,r2
 400082c:	00810074 	movhi	r2,1025
 4000830:	109a9804 	addi	r2,r2,27232
 4000834:	e0fffe17 	ldw	r3,-8(fp)
 4000838:	18c7883a 	add	r3,r3,r3
 400083c:	18c7883a 	add	r3,r3,r3
 4000840:	10c5883a 	add	r2,r2,r3
 4000844:	11000015 	stw	r4,0(r2)
//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
    int k=0;
   for(k = 0;k<numHidden2+1;k++)
 4000848:	e0bffe17 	ldw	r2,-8(fp)
 400084c:	10800044 	addi	r2,r2,1
 4000850:	e0bffe15 	stw	r2,-8(fp)
 4000854:	e0bffe17 	ldw	r2,-8(fp)
 4000858:	10800550 	cmplti	r2,r2,21
 400085c:	103fcf1e 	bne	r2,zero,400079c <__alt_data_end+0xfc00079c>
    weightsH2O_old[k] = weightsH2O[k] ;
    weightsH2O[k] = weightsH2O[k] + weightChange;

   }

 }
 4000860:	0001883a 	nop
 4000864:	e037883a 	mov	sp,fp
 4000868:	df000017 	ldw	fp,0(sp)
 400086c:	dec00104 	addi	sp,sp,4
 4000870:	f800283a 	ret

04000874 <WeightChangesH1H2>:

//************************************
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{
 4000874:	defffe04 	addi	sp,sp,-8
 4000878:	df000115 	stw	fp,4(sp)
 400087c:	df000104 	addi	fp,sp,4

  int i=0; 
 4000880:	e03fff15 	stw	zero,-4(fp)
  for(i = 0;i<numHidden2;i++)
 4000884:	e03fff15 	stw	zero,-4(fp)
 4000888:	00002506 	br	4000920 <WeightChangesH1H2+0xac>
  {

		delta_h2[i] = (1 - (hiddenVal2[i] * hiddenVal2[i]))* delta_o* weightsH2O_old[i];
 400088c:	00810074 	movhi	r2,1025
 4000890:	109a7004 	addi	r2,r2,27072
 4000894:	e0ffff17 	ldw	r3,-4(fp)
 4000898:	18c7883a 	add	r3,r3,r3
 400089c:	18c7883a 	add	r3,r3,r3
 40008a0:	10c5883a 	add	r2,r2,r3
 40008a4:	11000017 	ldw	r4,0(r2)
 40008a8:	00810074 	movhi	r2,1025
 40008ac:	109a7004 	addi	r2,r2,27072
 40008b0:	e0ffff17 	ldw	r3,-4(fp)
 40008b4:	18c7883a 	add	r3,r3,r3
 40008b8:	18c7883a 	add	r3,r3,r3
 40008bc:	10c7883a 	add	r3,r2,r3
 40008c0:	18800017 	ldw	r2,0(r3)
 40008c4:	2085ff32 	custom	252,r2,r4,r2
 40008c8:	00cfe034 	movhi	r3,16256
 40008cc:	1887ffb2 	custom	254,r3,r3,r2
 40008d0:	d0a71b17 	ldw	r2,-25492(gp)
 40008d4:	1889ff32 	custom	252,r4,r3,r2
 40008d8:	00810074 	movhi	r2,1025
 40008dc:	109fd504 	addi	r2,r2,32596
 40008e0:	e0ffff17 	ldw	r3,-4(fp)
 40008e4:	18c7883a 	add	r3,r3,r3
 40008e8:	18c7883a 	add	r3,r3,r3
 40008ec:	10c7883a 	add	r3,r2,r3
 40008f0:	18800017 	ldw	r2,0(r3)
 40008f4:	2089ff32 	custom	252,r4,r4,r2
 40008f8:	00810074 	movhi	r2,1025
 40008fc:	109a8404 	addi	r2,r2,27152
 4000900:	e0ffff17 	ldw	r3,-4(fp)
 4000904:	18c7883a 	add	r3,r3,r3
 4000908:	18c7883a 	add	r3,r3,r3
 400090c:	10c5883a 	add	r2,r2,r3
 4000910:	11000015 	stw	r4,0(r2)
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{

  int i=0; 
  for(i = 0;i<numHidden2;i++)
 4000914:	e0bfff17 	ldw	r2,-4(fp)
 4000918:	10800044 	addi	r2,r2,1
 400091c:	e0bfff15 	stw	r2,-4(fp)
 4000920:	e0bfff17 	ldw	r2,-4(fp)
 4000924:	10800510 	cmplti	r2,r2,20
 4000928:	103fd81e 	bne	r2,zero,400088c <__alt_data_end+0xfc00088c>



  }

}
 400092c:	0001883a 	nop
 4000930:	e037883a 	mov	sp,fp
 4000934:	df000017 	ldw	fp,0(sp)
 4000938:	dec00104 	addi	sp,sp,4
 400093c:	f800283a 	ret

04000940 <WeightUpdatesH1H2>:

//************************************
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{
 4000940:	defffc04 	addi	sp,sp,-16
 4000944:	df000315 	stw	fp,12(sp)
 4000948:	df000304 	addi	fp,sp,12

  int i=0;
 400094c:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden2;i++)
 4000950:	e03ffd15 	stw	zero,-12(fp)
 4000954:	00004906 	br	4000a7c <WeightUpdatesH1H2+0x13c>
  {
   int k=0;
 4000958:	e03ffe15 	stw	zero,-8(fp)
   for( k = 0;k<numHidden1+1;k++)
 400095c:	e03ffe15 	stw	zero,-8(fp)
 4000960:	00004006 	br	4000a64 <WeightUpdatesH1H2+0x124>
   {
    float weightChange = delta_h2[i] * LR_H1H2 * hiddenVal1[k];
 4000964:	00810074 	movhi	r2,1025
 4000968:	109a8404 	addi	r2,r2,27152
 400096c:	e0fffd17 	ldw	r3,-12(fp)
 4000970:	18c7883a 	add	r3,r3,r3
 4000974:	18c7883a 	add	r3,r3,r3
 4000978:	10c5883a 	add	r2,r2,r3
 400097c:	10c00017 	ldw	r3,0(r2)
 4000980:	008f7374 	movhi	r2,15821
 4000984:	10b33344 	addi	r2,r2,-13107
 4000988:	1889ff32 	custom	252,r4,r3,r2
 400098c:	00810074 	movhi	r2,1025
 4000990:	109f0d04 	addi	r2,r2,31796
 4000994:	e0fffe17 	ldw	r3,-8(fp)
 4000998:	18c7883a 	add	r3,r3,r3
 400099c:	18c7883a 	add	r3,r3,r3
 40009a0:	10c7883a 	add	r3,r2,r3
 40009a4:	18800017 	ldw	r2,0(r3)
 40009a8:	2085ff32 	custom	252,r2,r4,r2
 40009ac:	e0bfff15 	stw	r2,-4(fp)

   weightsH1H2_old[k][i] = weightsH1H2[k][i];
 40009b0:	008100b4 	movhi	r2,1026
 40009b4:	10a00e04 	addi	r2,r2,-32712
 40009b8:	e0fffe17 	ldw	r3,-8(fp)
 40009bc:	19000524 	muli	r4,r3,20
 40009c0:	e0fffd17 	ldw	r3,-12(fp)
 40009c4:	20c7883a 	add	r3,r4,r3
 40009c8:	18c7883a 	add	r3,r3,r3
 40009cc:	18c7883a 	add	r3,r3,r3
 40009d0:	10c5883a 	add	r2,r2,r3
 40009d4:	11000017 	ldw	r4,0(r2)
 40009d8:	00810074 	movhi	r2,1025
 40009dc:	109b1104 	addi	r2,r2,27716
 40009e0:	e0fffe17 	ldw	r3,-8(fp)
 40009e4:	19400524 	muli	r5,r3,20
 40009e8:	e0fffd17 	ldw	r3,-12(fp)
 40009ec:	28c7883a 	add	r3,r5,r3
 40009f0:	18c7883a 	add	r3,r3,r3
 40009f4:	18c7883a 	add	r3,r3,r3
 40009f8:	10c5883a 	add	r2,r2,r3
 40009fc:	11000015 	stw	r4,0(r2)
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;
 4000a00:	008100b4 	movhi	r2,1026
 4000a04:	10a00e04 	addi	r2,r2,-32712
 4000a08:	e0fffe17 	ldw	r3,-8(fp)
 4000a0c:	19000524 	muli	r4,r3,20
 4000a10:	e0fffd17 	ldw	r3,-12(fp)
 4000a14:	20c7883a 	add	r3,r4,r3
 4000a18:	18c7883a 	add	r3,r3,r3
 4000a1c:	18c7883a 	add	r3,r3,r3
 4000a20:	10c5883a 	add	r2,r2,r3
 4000a24:	10c00017 	ldw	r3,0(r2)
 4000a28:	e0bfff17 	ldw	r2,-4(fp)
 4000a2c:	1889ff72 	custom	253,r4,r3,r2
 4000a30:	008100b4 	movhi	r2,1026
 4000a34:	10a00e04 	addi	r2,r2,-32712
 4000a38:	e0fffe17 	ldw	r3,-8(fp)
 4000a3c:	19400524 	muli	r5,r3,20
 4000a40:	e0fffd17 	ldw	r3,-12(fp)
 4000a44:	28c7883a 	add	r3,r5,r3
 4000a48:	18c7883a 	add	r3,r3,r3
 4000a4c:	18c7883a 	add	r3,r3,r3
 4000a50:	10c5883a 	add	r2,r2,r3
 4000a54:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden2;i++)
  {
   int k=0;
   for( k = 0;k<numHidden1+1;k++)
 4000a58:	e0bffe17 	ldw	r2,-8(fp)
 4000a5c:	10800044 	addi	r2,r2,1
 4000a60:	e0bffe15 	stw	r2,-8(fp)
 4000a64:	e0bffe17 	ldw	r2,-8(fp)
 4000a68:	10800cd0 	cmplti	r2,r2,51
 4000a6c:	103fbd1e 	bne	r2,zero,4000964 <__alt_data_end+0xfc000964>
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
 4000a70:	e0bffd17 	ldw	r2,-12(fp)
 4000a74:	10800044 	addi	r2,r2,1
 4000a78:	e0bffd15 	stw	r2,-12(fp)
 4000a7c:	e0bffd17 	ldw	r2,-12(fp)
 4000a80:	10800510 	cmplti	r2,r2,20
 4000a84:	103fb41e 	bne	r2,zero,4000958 <__alt_data_end+0xfc000958>
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;

   }
  }

}
 4000a88:	0001883a 	nop
 4000a8c:	e037883a 	mov	sp,fp
 4000a90:	df000017 	ldw	fp,0(sp)
 4000a94:	dec00104 	addi	sp,sp,4
 4000a98:	f800283a 	ret

04000a9c <WeightChangesIH1>:
//************************************
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{
 4000a9c:	defffc04 	addi	sp,sp,-16
 4000aa0:	df000315 	stw	fp,12(sp)
 4000aa4:	df000304 	addi	fp,sp,12

  int i=0; 
 4000aa8:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
 4000aac:	e03ffd15 	stw	zero,-12(fp)
 4000ab0:	00003c06 	br	4000ba4 <WeightChangesIH1+0x108>
  {

    int j=0;
 4000ab4:	e03ffe15 	stw	zero,-8(fp)
    float sum_delta=0.0;
 4000ab8:	e03fff15 	stw	zero,-4(fp)
    for ( j = 0;j<numHidden2;j++)
 4000abc:	e03ffe15 	stw	zero,-8(fp)
 4000ac0:	00001806 	br	4000b24 <WeightChangesIH1+0x88>
    {

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];
 4000ac4:	00810074 	movhi	r2,1025
 4000ac8:	109a8404 	addi	r2,r2,27152
 4000acc:	e0fffe17 	ldw	r3,-8(fp)
 4000ad0:	18c7883a 	add	r3,r3,r3
 4000ad4:	18c7883a 	add	r3,r3,r3
 4000ad8:	10c5883a 	add	r2,r2,r3
 4000adc:	11000017 	ldw	r4,0(r2)
 4000ae0:	00810074 	movhi	r2,1025
 4000ae4:	109b1104 	addi	r2,r2,27716
 4000ae8:	e0fffd17 	ldw	r3,-12(fp)
 4000aec:	19400524 	muli	r5,r3,20
 4000af0:	e0fffe17 	ldw	r3,-8(fp)
 4000af4:	28c7883a 	add	r3,r5,r3
 4000af8:	18c7883a 	add	r3,r3,r3
 4000afc:	18c7883a 	add	r3,r3,r3
 4000b00:	10c7883a 	add	r3,r2,r3
 4000b04:	18800017 	ldw	r2,0(r3)
 4000b08:	2085ff32 	custom	252,r2,r4,r2
 4000b0c:	e0ffff17 	ldw	r3,-4(fp)
 4000b10:	1885ff72 	custom	253,r2,r3,r2
 4000b14:	e0bfff15 	stw	r2,-4(fp)
  for(i = 0;i<numHidden1;i++)
  {

    int j=0;
    float sum_delta=0.0;
    for ( j = 0;j<numHidden2;j++)
 4000b18:	e0bffe17 	ldw	r2,-8(fp)
 4000b1c:	10800044 	addi	r2,r2,1
 4000b20:	e0bffe15 	stw	r2,-8(fp)
 4000b24:	e0bffe17 	ldw	r2,-8(fp)
 4000b28:	10800510 	cmplti	r2,r2,20
 4000b2c:	103fe51e 	bne	r2,zero,4000ac4 <__alt_data_end+0xfc000ac4>

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];

    }

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;
 4000b30:	00810074 	movhi	r2,1025
 4000b34:	109f0d04 	addi	r2,r2,31796
 4000b38:	e0fffd17 	ldw	r3,-12(fp)
 4000b3c:	18c7883a 	add	r3,r3,r3
 4000b40:	18c7883a 	add	r3,r3,r3
 4000b44:	10c5883a 	add	r2,r2,r3
 4000b48:	11000017 	ldw	r4,0(r2)
 4000b4c:	00810074 	movhi	r2,1025
 4000b50:	109f0d04 	addi	r2,r2,31796
 4000b54:	e0fffd17 	ldw	r3,-12(fp)
 4000b58:	18c7883a 	add	r3,r3,r3
 4000b5c:	18c7883a 	add	r3,r3,r3
 4000b60:	10c7883a 	add	r3,r2,r3
 4000b64:	18800017 	ldw	r2,0(r3)
 4000b68:	2085ff32 	custom	252,r2,r4,r2
 4000b6c:	00cfe034 	movhi	r3,16256
 4000b70:	1887ffb2 	custom	254,r3,r3,r2
 4000b74:	e0bfff17 	ldw	r2,-4(fp)
 4000b78:	1889ff32 	custom	252,r4,r3,r2
 4000b7c:	008100b4 	movhi	r2,1026
 4000b80:	10a41e04 	addi	r2,r2,-28552
 4000b84:	e0fffd17 	ldw	r3,-12(fp)
 4000b88:	18c7883a 	add	r3,r3,r3
 4000b8c:	18c7883a 	add	r3,r3,r3
 4000b90:	10c5883a 	add	r2,r2,r3
 4000b94:	11000015 	stw	r4,0(r2)
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{

  int i=0; 
  for(i = 0;i<numHidden1;i++)
 4000b98:	e0bffd17 	ldw	r2,-12(fp)
 4000b9c:	10800044 	addi	r2,r2,1
 4000ba0:	e0bffd15 	stw	r2,-12(fp)
 4000ba4:	e0bffd17 	ldw	r2,-12(fp)
 4000ba8:	10800c90 	cmplti	r2,r2,50
 4000bac:	103fc11e 	bne	r2,zero,4000ab4 <__alt_data_end+0xfc000ab4>

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;

  }

}
 4000bb0:	0001883a 	nop
 4000bb4:	e037883a 	mov	sp,fp
 4000bb8:	df000017 	ldw	fp,0(sp)
 4000bbc:	dec00104 	addi	sp,sp,4
 4000bc0:	f800283a 	ret

04000bc4 <WeightUpdatesIH1>:

//************************************
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{
 4000bc4:	defffc04 	addi	sp,sp,-16
 4000bc8:	df000315 	stw	fp,12(sp)
 4000bcc:	df000304 	addi	fp,sp,12

  int i=0;
 4000bd0:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
 4000bd4:	e03ffd15 	stw	zero,-12(fp)
 4000bd8:	00003a06 	br	4000cc4 <WeightUpdatesIH1+0x100>
  {
    int k=0;
 4000bdc:	e03ffe15 	stw	zero,-8(fp)
	for( k = 0;k<numInputs+1;k++)
 4000be0:	e03ffe15 	stw	zero,-8(fp)
 4000be4:	00003106 	br	4000cac <WeightUpdatesIH1+0xe8>
	{
    float weightChange = delta_h1[i] * LR_IH1 * trainInputs[patNum][k];
 4000be8:	008100b4 	movhi	r2,1026
 4000bec:	10a41e04 	addi	r2,r2,-28552
 4000bf0:	e0fffd17 	ldw	r3,-12(fp)
 4000bf4:	18c7883a 	add	r3,r3,r3
 4000bf8:	18c7883a 	add	r3,r3,r3
 4000bfc:	10c5883a 	add	r2,r2,r3
 4000c00:	10c00017 	ldw	r3,0(r2)
 4000c04:	008f7374 	movhi	r2,15821
 4000c08:	10b33344 	addi	r2,r2,-13107
 4000c0c:	188bff32 	custom	252,r5,r3,r2
 4000c10:	d1271917 	ldw	r4,-25500(gp)
 4000c14:	00c10074 	movhi	r3,1025
 4000c18:	18dfea04 	addi	r3,r3,32680
 4000c1c:	2005883a 	mov	r2,r4
 4000c20:	1085883a 	add	r2,r2,r2
 4000c24:	1105883a 	add	r2,r2,r4
 4000c28:	e13ffe17 	ldw	r4,-8(fp)
 4000c2c:	1105883a 	add	r2,r2,r4
 4000c30:	1085883a 	add	r2,r2,r2
 4000c34:	1085883a 	add	r2,r2,r2
 4000c38:	1887883a 	add	r3,r3,r2
 4000c3c:	18800017 	ldw	r2,0(r3)
 4000c40:	2885ff32 	custom	252,r2,r5,r2
 4000c44:	e0bfff15 	stw	r2,-4(fp)

     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;
 4000c48:	00810074 	movhi	r2,1025
 4000c4c:	109f3f04 	addi	r2,r2,31996
 4000c50:	e0fffe17 	ldw	r3,-8(fp)
 4000c54:	19000ca4 	muli	r4,r3,50
 4000c58:	e0fffd17 	ldw	r3,-12(fp)
 4000c5c:	20c7883a 	add	r3,r4,r3
 4000c60:	18c7883a 	add	r3,r3,r3
 4000c64:	18c7883a 	add	r3,r3,r3
 4000c68:	10c5883a 	add	r2,r2,r3
 4000c6c:	10c00017 	ldw	r3,0(r2)
 4000c70:	e0bfff17 	ldw	r2,-4(fp)
 4000c74:	1889ff72 	custom	253,r4,r3,r2
 4000c78:	00810074 	movhi	r2,1025
 4000c7c:	109f3f04 	addi	r2,r2,31996
 4000c80:	e0fffe17 	ldw	r3,-8(fp)
 4000c84:	19400ca4 	muli	r5,r3,50
 4000c88:	e0fffd17 	ldw	r3,-12(fp)
 4000c8c:	28c7883a 	add	r3,r5,r3
 4000c90:	18c7883a 	add	r3,r3,r3
 4000c94:	18c7883a 	add	r3,r3,r3
 4000c98:	10c5883a 	add	r2,r2,r3
 4000c9c:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden1;i++)
  {
    int k=0;
	for( k = 0;k<numInputs+1;k++)
 4000ca0:	e0bffe17 	ldw	r2,-8(fp)
 4000ca4:	10800044 	addi	r2,r2,1
 4000ca8:	e0bffe15 	stw	r2,-8(fp)
 4000cac:	e0bffe17 	ldw	r2,-8(fp)
 4000cb0:	108000d0 	cmplti	r2,r2,3
 4000cb4:	103fcc1e 	bne	r2,zero,4000be8 <__alt_data_end+0xfc000be8>
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
 4000cb8:	e0bffd17 	ldw	r2,-12(fp)
 4000cbc:	10800044 	addi	r2,r2,1
 4000cc0:	e0bffd15 	stw	r2,-12(fp)
 4000cc4:	e0bffd17 	ldw	r2,-12(fp)
 4000cc8:	10800c90 	cmplti	r2,r2,50
 4000ccc:	103fc31e 	bne	r2,zero,4000bdc <__alt_data_end+0xfc000bdc>
     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;

   }
  }

}
 4000cd0:	0001883a 	nop
 4000cd4:	e037883a 	mov	sp,fp
 4000cd8:	df000017 	ldw	fp,0(sp)
 4000cdc:	dec00104 	addi	sp,sp,4
 4000ce0:	f800283a 	ret

04000ce4 <getRand>:

//************************************
// generates a random number
float getRand(void)
{
 4000ce4:	defffe04 	addi	sp,sp,-8
 4000ce8:	dfc00115 	stw	ra,4(sp)
 4000cec:	df000015 	stw	fp,0(sp)
 4000cf0:	d839883a 	mov	fp,sp
 return ((float)rand())/(float)RAND_MAX;
 4000cf4:	4005c140 	call	4005c14 <rand>
 4000cf8:	1007feb2 	custom	250,r3,r2,zero
 4000cfc:	0093c034 	movhi	r2,20224
 4000d00:	1885fff2 	custom	255,r2,r3,r2
 4000d04:	1007883a 	mov	r3,r2
}
 4000d08:	1805883a 	mov	r2,r3
 4000d0c:	e037883a 	mov	sp,fp
 4000d10:	dfc00117 	ldw	ra,4(sp)
 4000d14:	df000017 	ldw	fp,0(sp)
 4000d18:	dec00204 	addi	sp,sp,8
 4000d1c:	f800283a 	ret

04000d20 <initWeights>:


//************************************
// set weights to random numbers 
void initWeights(void)
{
 4000d20:	defffb04 	addi	sp,sp,-20
 4000d24:	dfc00415 	stw	ra,16(sp)
 4000d28:	df000315 	stw	fp,12(sp)
 4000d2c:	df000304 	addi	fp,sp,12
 int j=0;
 4000d30:	e03ffd15 	stw	zero,-12(fp)
 int i=0;
 4000d34:	e03ffe15 	stw	zero,-8(fp)
 int k=0;
 4000d38:	e03fff15 	stw	zero,-4(fp)

 for( j = 0;j<numHidden2+1;j++)
 4000d3c:	e03ffd15 	stw	zero,-12(fp)
 4000d40:	00002606 	br	4000ddc <initWeights+0xbc>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 4000d44:	4000ce40 	call	4000ce4 <getRand>
 4000d48:	1007883a 	mov	r3,r2
 4000d4c:	1809883a 	mov	r4,r3
 4000d50:	40055bc0 	call	40055bc <__extendsfdf2>
 4000d54:	1011883a 	mov	r8,r2
 4000d58:	1813883a 	mov	r9,r3
 4000d5c:	000d883a 	mov	r6,zero
 4000d60:	01cff834 	movhi	r7,16352
 4000d64:	4009883a 	mov	r4,r8
 4000d68:	480b883a 	mov	r5,r9
 4000d6c:	4004b640 	call	4004b64 <__subdf3>
 4000d70:	1009883a 	mov	r4,r2
 4000d74:	180b883a 	mov	r5,r3
 4000d78:	2005883a 	mov	r2,r4
 4000d7c:	2807883a 	mov	r3,r5
 4000d80:	000d883a 	mov	r6,zero
 4000d84:	01d00034 	movhi	r7,16384
 4000d88:	1009883a 	mov	r4,r2
 4000d8c:	180b883a 	mov	r5,r3
 4000d90:	400390c0 	call	400390c <__divdf3>
 4000d94:	1009883a 	mov	r4,r2
 4000d98:	180b883a 	mov	r5,r3
 4000d9c:	2005883a 	mov	r2,r4
 4000da0:	2807883a 	mov	r3,r5
 4000da4:	1009883a 	mov	r4,r2
 4000da8:	180b883a 	mov	r5,r3
 4000dac:	40056cc0 	call	40056cc <__truncdfsf2>
 4000db0:	1009883a 	mov	r4,r2
 4000db4:	00810074 	movhi	r2,1025
 4000db8:	109a9804 	addi	r2,r2,27232
 4000dbc:	e0fffd17 	ldw	r3,-12(fp)
 4000dc0:	18c7883a 	add	r3,r3,r3
 4000dc4:	18c7883a 	add	r3,r3,r3
 4000dc8:	10c5883a 	add	r2,r2,r3
 4000dcc:	11000015 	stw	r4,0(r2)
{
 int j=0;
 int i=0;
 int k=0;

 for( j = 0;j<numHidden2+1;j++)
 4000dd0:	e0bffd17 	ldw	r2,-12(fp)
 4000dd4:	10800044 	addi	r2,r2,1
 4000dd8:	e0bffd15 	stw	r2,-12(fp)
 4000ddc:	e0bffd17 	ldw	r2,-12(fp)
 4000de0:	10800550 	cmplti	r2,r2,21
 4000de4:	103fd71e 	bne	r2,zero,4000d44 <__alt_data_end+0xfc000d44>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
 4000de8:	e03fff15 	stw	zero,-4(fp)
 4000dec:	00003106 	br	4000eb4 <initWeights+0x194>
   {
    for( i = 0;i<numHidden1+1;i++)
 4000df0:	e03ffe15 	stw	zero,-8(fp)
 4000df4:	00002906 	br	4000e9c <initWeights+0x17c>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
 4000df8:	4000ce40 	call	4000ce4 <getRand>
 4000dfc:	1007883a 	mov	r3,r2
 4000e00:	1809883a 	mov	r4,r3
 4000e04:	40055bc0 	call	40055bc <__extendsfdf2>
 4000e08:	1011883a 	mov	r8,r2
 4000e0c:	1813883a 	mov	r9,r3
 4000e10:	000d883a 	mov	r6,zero
 4000e14:	01cff834 	movhi	r7,16352
 4000e18:	4009883a 	mov	r4,r8
 4000e1c:	480b883a 	mov	r5,r9
 4000e20:	4004b640 	call	4004b64 <__subdf3>
 4000e24:	1009883a 	mov	r4,r2
 4000e28:	180b883a 	mov	r5,r3
 4000e2c:	2005883a 	mov	r2,r4
 4000e30:	2807883a 	mov	r3,r5
 4000e34:	000d883a 	mov	r6,zero
 4000e38:	01d00034 	movhi	r7,16384
 4000e3c:	1009883a 	mov	r4,r2
 4000e40:	180b883a 	mov	r5,r3
 4000e44:	400390c0 	call	400390c <__divdf3>
 4000e48:	1009883a 	mov	r4,r2
 4000e4c:	180b883a 	mov	r5,r3
 4000e50:	2005883a 	mov	r2,r4
 4000e54:	2807883a 	mov	r3,r5
 4000e58:	1009883a 	mov	r4,r2
 4000e5c:	180b883a 	mov	r5,r3
 4000e60:	40056cc0 	call	40056cc <__truncdfsf2>
 4000e64:	100b883a 	mov	r5,r2
 4000e68:	008100b4 	movhi	r2,1026
 4000e6c:	10a00e04 	addi	r2,r2,-32712
 4000e70:	e0fffe17 	ldw	r3,-8(fp)
 4000e74:	19000524 	muli	r4,r3,20
 4000e78:	e0ffff17 	ldw	r3,-4(fp)
 4000e7c:	20c7883a 	add	r3,r4,r3
 4000e80:	18c7883a 	add	r3,r3,r3
 4000e84:	18c7883a 	add	r3,r3,r3
 4000e88:	10c5883a 	add	r2,r2,r3
 4000e8c:	11400015 	stw	r5,0(r2)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
   {
    for( i = 0;i<numHidden1+1;i++)
 4000e90:	e0bffe17 	ldw	r2,-8(fp)
 4000e94:	10800044 	addi	r2,r2,1
 4000e98:	e0bffe15 	stw	r2,-8(fp)
 4000e9c:	e0bffe17 	ldw	r2,-8(fp)
 4000ea0:	10800cd0 	cmplti	r2,r2,51
 4000ea4:	103fd41e 	bne	r2,zero,4000df8 <__alt_data_end+0xfc000df8>

 for( j = 0;j<numHidden2+1;j++)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
 4000ea8:	e0bfff17 	ldw	r2,-4(fp)
 4000eac:	10800044 	addi	r2,r2,1
 4000eb0:	e0bfff15 	stw	r2,-4(fp)
 4000eb4:	e0bfff17 	ldw	r2,-4(fp)
 4000eb8:	10800510 	cmplti	r2,r2,20
 4000ebc:	103fcc1e 	bne	r2,zero,4000df0 <__alt_data_end+0xfc000df0>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
 4000ec0:	e03fff15 	stw	zero,-4(fp)
 4000ec4:	00003106 	br	4000f8c <initWeights+0x26c>
   {
    for( i = 0;i<numInputs+1;i++)
 4000ec8:	e03ffe15 	stw	zero,-8(fp)
 4000ecc:	00002906 	br	4000f74 <initWeights+0x254>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
 4000ed0:	4000ce40 	call	4000ce4 <getRand>
 4000ed4:	1007883a 	mov	r3,r2
 4000ed8:	1809883a 	mov	r4,r3
 4000edc:	40055bc0 	call	40055bc <__extendsfdf2>
 4000ee0:	1011883a 	mov	r8,r2
 4000ee4:	1813883a 	mov	r9,r3
 4000ee8:	000d883a 	mov	r6,zero
 4000eec:	01cff834 	movhi	r7,16352
 4000ef0:	4009883a 	mov	r4,r8
 4000ef4:	480b883a 	mov	r5,r9
 4000ef8:	4004b640 	call	4004b64 <__subdf3>
 4000efc:	1009883a 	mov	r4,r2
 4000f00:	180b883a 	mov	r5,r3
 4000f04:	2005883a 	mov	r2,r4
 4000f08:	2807883a 	mov	r3,r5
 4000f0c:	000d883a 	mov	r6,zero
 4000f10:	01d00034 	movhi	r7,16384
 4000f14:	1009883a 	mov	r4,r2
 4000f18:	180b883a 	mov	r5,r3
 4000f1c:	400390c0 	call	400390c <__divdf3>
 4000f20:	1009883a 	mov	r4,r2
 4000f24:	180b883a 	mov	r5,r3
 4000f28:	2005883a 	mov	r2,r4
 4000f2c:	2807883a 	mov	r3,r5
 4000f30:	1009883a 	mov	r4,r2
 4000f34:	180b883a 	mov	r5,r3
 4000f38:	40056cc0 	call	40056cc <__truncdfsf2>
 4000f3c:	100b883a 	mov	r5,r2
 4000f40:	00810074 	movhi	r2,1025
 4000f44:	109f3f04 	addi	r2,r2,31996
 4000f48:	e0fffe17 	ldw	r3,-8(fp)
 4000f4c:	19000ca4 	muli	r4,r3,50
 4000f50:	e0ffff17 	ldw	r3,-4(fp)
 4000f54:	20c7883a 	add	r3,r4,r3
 4000f58:	18c7883a 	add	r3,r3,r3
 4000f5c:	18c7883a 	add	r3,r3,r3
 4000f60:	10c5883a 	add	r2,r2,r3
 4000f64:	11400015 	stw	r5,0(r2)
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
   {
    for( i = 0;i<numInputs+1;i++)
 4000f68:	e0bffe17 	ldw	r2,-8(fp)
 4000f6c:	10800044 	addi	r2,r2,1
 4000f70:	e0bffe15 	stw	r2,-8(fp)
 4000f74:	e0bffe17 	ldw	r2,-8(fp)
 4000f78:	108000d0 	cmplti	r2,r2,3
 4000f7c:	103fd41e 	bne	r2,zero,4000ed0 <__alt_data_end+0xfc000ed0>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
 4000f80:	e0bfff17 	ldw	r2,-4(fp)
 4000f84:	10800044 	addi	r2,r2,1
 4000f88:	e0bfff15 	stw	r2,-4(fp)
 4000f8c:	e0bfff17 	ldw	r2,-4(fp)
 4000f90:	10800c90 	cmplti	r2,r2,50
 4000f94:	103fcc1e 	bne	r2,zero,4000ec8 <__alt_data_end+0xfc000ec8>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsIH1[i][k]);
    }
   }
}
 4000f98:	0001883a 	nop
 4000f9c:	e037883a 	mov	sp,fp
 4000fa0:	dfc00117 	ldw	ra,4(sp)
 4000fa4:	df000017 	ldw	fp,0(sp)
 4000fa8:	dec00204 	addi	sp,sp,8
 4000fac:	f800283a 	ret

04000fb0 <initData>:


//************************************
// read in the data
void initData(void)
{
 4000fb0:	defffe04 	addi	sp,sp,-8
 4000fb4:	dfc00115 	stw	ra,4(sp)
 4000fb8:	df000015 	stw	fp,0(sp)
 4000fbc:	d839883a 	mov	fp,sp
    printf("initialising data\n");
 4000fc0:	01010074 	movhi	r4,1025
 4000fc4:	210b5d04 	addi	r4,r4,11636
 4000fc8:	4005be80 	call	4005be8 <puts>
    // [-1][1]
    // an extra input valued 1 is also added
    // to act as the bias
    // the output must lie in the range -1 to 1

    trainInputs[0][0]  = 0.95;
 4000fcc:	00810074 	movhi	r2,1025
 4000fd0:	109fea04 	addi	r2,r2,32680
 4000fd4:	00cfdcf4 	movhi	r3,16243
 4000fd8:	18ccccc4 	addi	r3,r3,13107
 4000fdc:	10c00015 	stw	r3,0(r2)
    trainInputs[0][1]  = -0.95;
 4000fe0:	00810074 	movhi	r2,1025
 4000fe4:	109fea04 	addi	r2,r2,32680
 4000fe8:	00efdcf4 	movhi	r3,49011
 4000fec:	18ccccc4 	addi	r3,r3,13107
 4000ff0:	10c00115 	stw	r3,4(r2)
    trainInputs[0][2]  = 1;    //bias
 4000ff4:	00810074 	movhi	r2,1025
 4000ff8:	109fea04 	addi	r2,r2,32680
 4000ffc:	00cfe034 	movhi	r3,16256
 4001000:	10c00215 	stw	r3,8(r2)
    trainOutput[0] = 0.95;
 4001004:	00810074 	movhi	r2,1025
 4001008:	109ff604 	addi	r2,r2,32728
 400100c:	00cfdcf4 	movhi	r3,16243
 4001010:	18ccccc4 	addi	r3,r3,13107
 4001014:	10c00015 	stw	r3,0(r2)

    trainInputs[1][0]  = -0.95;
 4001018:	00810074 	movhi	r2,1025
 400101c:	109fea04 	addi	r2,r2,32680
 4001020:	00efdcf4 	movhi	r3,49011
 4001024:	18ccccc4 	addi	r3,r3,13107
 4001028:	10c00315 	stw	r3,12(r2)
    trainInputs[1][1]  = 0.95;   
 400102c:	00810074 	movhi	r2,1025
 4001030:	109fea04 	addi	r2,r2,32680
 4001034:	00cfdcf4 	movhi	r3,16243
 4001038:	18ccccc4 	addi	r3,r3,13107
 400103c:	10c00415 	stw	r3,16(r2)
    trainInputs[1][2]  = 1;       //bias
 4001040:	00810074 	movhi	r2,1025
 4001044:	109fea04 	addi	r2,r2,32680
 4001048:	00cfe034 	movhi	r3,16256
 400104c:	10c00515 	stw	r3,20(r2)
    trainOutput[1] = 0.95;
 4001050:	00810074 	movhi	r2,1025
 4001054:	109ff604 	addi	r2,r2,32728
 4001058:	00cfdcf4 	movhi	r3,16243
 400105c:	18ccccc4 	addi	r3,r3,13107
 4001060:	10c00115 	stw	r3,4(r2)

    trainInputs[2][0]  = 0.95;
 4001064:	00810074 	movhi	r2,1025
 4001068:	109fea04 	addi	r2,r2,32680
 400106c:	00cfdcf4 	movhi	r3,16243
 4001070:	18ccccc4 	addi	r3,r3,13107
 4001074:	10c00615 	stw	r3,24(r2)
    trainInputs[2][1]  = 0.95;
 4001078:	00810074 	movhi	r2,1025
 400107c:	109fea04 	addi	r2,r2,32680
 4001080:	00cfdcf4 	movhi	r3,16243
 4001084:	18ccccc4 	addi	r3,r3,13107
 4001088:	10c00715 	stw	r3,28(r2)
   trainInputs[2][2]  = 1;        //bias
 400108c:	00810074 	movhi	r2,1025
 4001090:	109fea04 	addi	r2,r2,32680
 4001094:	00cfe034 	movhi	r3,16256
 4001098:	10c00815 	stw	r3,32(r2)
    trainOutput[2] = -0.95;
 400109c:	00810074 	movhi	r2,1025
 40010a0:	109ff604 	addi	r2,r2,32728
 40010a4:	00efdcf4 	movhi	r3,49011
 40010a8:	18ccccc4 	addi	r3,r3,13107
 40010ac:	10c00215 	stw	r3,8(r2)
    
    trainInputs[3][0]  = -0.95;
 40010b0:	00810074 	movhi	r2,1025
 40010b4:	109fea04 	addi	r2,r2,32680
 40010b8:	00efdcf4 	movhi	r3,49011
 40010bc:	18ccccc4 	addi	r3,r3,13107
 40010c0:	10c00915 	stw	r3,36(r2)
    trainInputs[3][1]  = -0.95;
 40010c4:	00810074 	movhi	r2,1025
 40010c8:	109fea04 	addi	r2,r2,32680
 40010cc:	00efdcf4 	movhi	r3,49011
 40010d0:	18ccccc4 	addi	r3,r3,13107
 40010d4:	10c00a15 	stw	r3,40(r2)
    trainInputs[3][2]  = 1;     //bias
 40010d8:	00810074 	movhi	r2,1025
 40010dc:	109fea04 	addi	r2,r2,32680
 40010e0:	00cfe034 	movhi	r3,16256
 40010e4:	10c00b15 	stw	r3,44(r2)
    trainOutput[3] = -0.95;
 40010e8:	00810074 	movhi	r2,1025
 40010ec:	109ff604 	addi	r2,r2,32728
 40010f0:	00efdcf4 	movhi	r3,49011
 40010f4:	18ccccc4 	addi	r3,r3,13107
 40010f8:	10c00315 	stw	r3,12(r2)
hiddenVal1[numHidden1]=1;//bias capa oculta1
 40010fc:	00810074 	movhi	r2,1025
 4001100:	109f0d04 	addi	r2,r2,31796
 4001104:	00cfe034 	movhi	r3,16256
 4001108:	10c03215 	stw	r3,200(r2)
hiddenVal2[numHidden2]=1;//bias capa oculta2
 400110c:	00810074 	movhi	r2,1025
 4001110:	109a7004 	addi	r2,r2,27072
 4001114:	00cfe034 	movhi	r3,16256
 4001118:	10c01415 	stw	r3,80(r2)
}
 400111c:	0001883a 	nop
 4001120:	e037883a 	mov	sp,fp
 4001124:	dfc00117 	ldw	ra,4(sp)
 4001128:	df000017 	ldw	fp,0(sp)
 400112c:	dec00204 	addi	sp,sp,8
 4001130:	f800283a 	ret

04001134 <displayResults>:


//************************************
// display results
void displayResults(void)
{
 4001134:	defff804 	addi	sp,sp,-32
 4001138:	dfc00715 	stw	ra,28(sp)
 400113c:	df000615 	stw	fp,24(sp)
 4001140:	dc800515 	stw	r18,20(sp)
 4001144:	dc400415 	stw	r17,16(sp)
 4001148:	dc000315 	stw	r16,12(sp)
 400114c:	df000604 	addi	fp,sp,24
 int i=0;
 4001150:	e03ffc15 	stw	zero,-16(fp)
 for( i = 0;i<numPatterns;i++)
 4001154:	e03ffc15 	stw	zero,-16(fp)
 4001158:	00002006 	br	40011dc <displayResults+0xa8>
 {
  patNum = i;
 400115c:	e0bffc17 	ldw	r2,-16(fp)
 4001160:	d0a71915 	stw	r2,-25500(gp)
  calcNet();
 4001164:	400034c0 	call	400034c <calcNet>
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
 4001168:	d0a71917 	ldw	r2,-25500(gp)
 400116c:	14800044 	addi	r18,r2,1
 4001170:	d0e71917 	ldw	r3,-25500(gp)
 4001174:	00810074 	movhi	r2,1025
 4001178:	109ff604 	addi	r2,r2,32728
 400117c:	18c7883a 	add	r3,r3,r3
 4001180:	18c7883a 	add	r3,r3,r3
 4001184:	10c5883a 	add	r2,r2,r3
 4001188:	10c00017 	ldw	r3,0(r2)
 400118c:	1809883a 	mov	r4,r3
 4001190:	40055bc0 	call	40055bc <__extendsfdf2>
 4001194:	1021883a 	mov	r16,r2
 4001198:	1823883a 	mov	r17,r3
 400119c:	d0a71d17 	ldw	r2,-25484(gp)
 40011a0:	1009883a 	mov	r4,r2
 40011a4:	40055bc0 	call	40055bc <__extendsfdf2>
 40011a8:	1009883a 	mov	r4,r2
 40011ac:	180b883a 	mov	r5,r3
 40011b0:	d9000015 	stw	r4,0(sp)
 40011b4:	d9400115 	stw	r5,4(sp)
 40011b8:	800d883a 	mov	r6,r16
 40011bc:	880f883a 	mov	r7,r17
 40011c0:	900b883a 	mov	r5,r18
 40011c4:	01010074 	movhi	r4,1025
 40011c8:	210b6204 	addi	r4,r4,11656
 40011cc:	4005acc0 	call	4005acc <printf>
//************************************
// display results
void displayResults(void)
{
 int i=0;
 for( i = 0;i<numPatterns;i++)
 40011d0:	e0bffc17 	ldw	r2,-16(fp)
 40011d4:	10800044 	addi	r2,r2,1
 40011d8:	e0bffc15 	stw	r2,-16(fp)
 40011dc:	e0bffc17 	ldw	r2,-16(fp)
 40011e0:	10800110 	cmplti	r2,r2,4
 40011e4:	103fdd1e 	bne	r2,zero,400115c <__alt_data_end+0xfc00115c>
 {
  patNum = i;
  calcNet();
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
 }
}
 40011e8:	0001883a 	nop
 40011ec:	e6fffd04 	addi	sp,fp,-12
 40011f0:	dfc00417 	ldw	ra,16(sp)
 40011f4:	df000317 	ldw	fp,12(sp)
 40011f8:	dc800217 	ldw	r18,8(sp)
 40011fc:	dc400117 	ldw	r17,4(sp)
 4001200:	dc000017 	ldw	r16,0(sp)
 4001204:	dec00504 	addi	sp,sp,20
 4001208:	f800283a 	ret

0400120c <calcOverallError>:


//************************************
// calculate the overall error
void calcOverallError(void)
{
 400120c:	defffd04 	addi	sp,sp,-12
 4001210:	dfc00215 	stw	ra,8(sp)
 4001214:	df000115 	stw	fp,4(sp)
 4001218:	df000104 	addi	fp,sp,4
     int i=0;
 400121c:	e03fff15 	stw	zero,-4(fp)
     RMSerror = 0.0;
 4001220:	d0271c15 	stw	zero,-25488(gp)
     for(i = 0;i<numPatterns;i++)
 4001224:	e03fff15 	stw	zero,-4(fp)
 4001228:	00000c06 	br	400125c <calcOverallError+0x50>
        {
         patNum = i;
 400122c:	e0bfff17 	ldw	r2,-4(fp)
 4001230:	d0a71915 	stw	r2,-25500(gp)
         calcNet();
 4001234:	400034c0 	call	400034c <calcNet>
         RMSerror = RMSerror + (errThisPat * errThisPat);
 4001238:	d0e71a17 	ldw	r3,-25496(gp)
 400123c:	d0a71a17 	ldw	r2,-25496(gp)
 4001240:	1887ff32 	custom	252,r3,r3,r2
 4001244:	d0a71c17 	ldw	r2,-25488(gp)
 4001248:	1885ff72 	custom	253,r2,r3,r2
 400124c:	d0a71c15 	stw	r2,-25488(gp)
// calculate the overall error
void calcOverallError(void)
{
     int i=0;
     RMSerror = 0.0;
     for(i = 0;i<numPatterns;i++)
 4001250:	e0bfff17 	ldw	r2,-4(fp)
 4001254:	10800044 	addi	r2,r2,1
 4001258:	e0bfff15 	stw	r2,-4(fp)
 400125c:	e0bfff17 	ldw	r2,-4(fp)
 4001260:	10800110 	cmplti	r2,r2,4
 4001264:	103ff11e 	bne	r2,zero,400122c <__alt_data_end+0xfc00122c>
        {
         patNum = i;
         calcNet();
         RMSerror = RMSerror + (errThisPat * errThisPat);
        }
     RMSerror = RMSerror/numPatterns;
 4001268:	d0e71c17 	ldw	r3,-25488(gp)
 400126c:	00902034 	movhi	r2,16512
 4001270:	1885fff2 	custom	255,r2,r3,r2
 4001274:	d0a71c15 	stw	r2,-25488(gp)
     RMSerror = sqrt(RMSerror);
 4001278:	d0a71c17 	ldw	r2,-25488(gp)
 400127c:	1009883a 	mov	r4,r2
 4001280:	40055bc0 	call	40055bc <__extendsfdf2>
 4001284:	100b883a 	mov	r5,r2
 4001288:	180d883a 	mov	r6,r3
 400128c:	2809883a 	mov	r4,r5
 4001290:	300b883a 	mov	r5,r6
 4001294:	40018b40 	call	40018b4 <sqrt>
 4001298:	100b883a 	mov	r5,r2
 400129c:	180d883a 	mov	r6,r3
 40012a0:	2809883a 	mov	r4,r5
 40012a4:	300b883a 	mov	r5,r6
 40012a8:	40056cc0 	call	40056cc <__truncdfsf2>
 40012ac:	1007883a 	mov	r3,r2
 40012b0:	d0e71c15 	stw	r3,-25488(gp)
}
 40012b4:	0001883a 	nop
 40012b8:	e037883a 	mov	sp,fp
 40012bc:	dfc00117 	ldw	ra,4(sp)
 40012c0:	df000017 	ldw	fp,0(sp)
 40012c4:	dec00204 	addi	sp,sp,8
 40012c8:	f800283a 	ret

040012cc <main>:
//********** THIS IS THE MAIN PROGRAM **************************
//==============================================================


int main(void)
{
 40012cc:	defff704 	addi	sp,sp,-36
 40012d0:	dfc00815 	stw	ra,32(sp)
 40012d4:	df000715 	stw	fp,28(sp)
 40012d8:	df000704 	addi	fp,sp,28
 // seed random number function
 srand ( time(NULL) );
 40012dc:	0009883a 	mov	r4,zero
 40012e0:	4005d700 	call	4005d70 <time>
 40012e4:	1009883a 	mov	r4,r2
 40012e8:	4005bfc0 	call	4005bfc <srand>
  PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 40012ec:	00800044 	movi	r2,1
 40012f0:	0007883a 	mov	r3,zero
 40012f4:	18800035 	stwio	r2,0(r3)
  PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 40012f8:	0007883a 	mov	r3,zero
 40012fc:	00800104 	movi	r2,4
 4001300:	10c00035 	stwio	r3,0(r2)
 // initiate the weights
  PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 1);
 4001304:	0007883a 	mov	r3,zero
 4001308:	00800504 	movi	r2,20
 400130c:	10c00035 	stwio	r3,0(r2)
 initWeights();
 4001310:	4000d200 	call	4000d20 <initWeights>
 // load in the data
 initData();
 4001314:	4000fb00 	call	4000fb0 <initData>
   PERF_END (PERFORMANCE_COUNTER_0_BASE, 1);
 4001318:	0007883a 	mov	r3,zero
 400131c:	00800404 	movi	r2,16
 4001320:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
 4001324:	e03ffe15 	stw	zero,-8(fp)
 4001328:	00004106 	br	4001430 <main+0x164>
    {
        for(i = 0;i<numPatterns;i++)
 400132c:	e03fff15 	stw	zero,-4(fp)
 4001330:	00002706 	br	40013d0 <main+0x104>
        {
          //select a pattern at random
          patNum = rand()%numPatterns;
 4001334:	4005c140 	call	4005c14 <rand>
 4001338:	1007883a 	mov	r3,r2
 400133c:	00a00034 	movhi	r2,32768
 4001340:	108000c4 	addi	r2,r2,3
 4001344:	1884703a 	and	r2,r3,r2
 4001348:	1000040e 	bge	r2,zero,400135c <main+0x90>
 400134c:	10bfffc4 	addi	r2,r2,-1
 4001350:	00ffff04 	movi	r3,-4
 4001354:	10c4b03a 	or	r2,r2,r3
 4001358:	10800044 	addi	r2,r2,1
 400135c:	d0a71915 	stw	r2,-25500(gp)

          //calculate the current network output
          //and error for this pattern
          //phase forward

          PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 2);
 4001360:	0007883a 	mov	r3,zero
 4001364:	00800904 	movi	r2,36
 4001368:	10c00035 	stwio	r3,0(r2)
          calcNet();
 400136c:	400034c0 	call	400034c <calcNet>
          PERF_END (PERFORMANCE_COUNTER_0_BASE, 2);
 4001370:	0007883a 	mov	r3,zero
 4001374:	00800804 	movi	r2,32
 4001378:	10c00035 	stwio	r3,0(r2)
          //change network weights
          //phase backward and update weights
          PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 3);
 400137c:	0007883a 	mov	r3,zero
 4001380:	00800d04 	movi	r2,52
 4001384:	10c00035 	stwio	r3,0(r2)
          WeightChangesH2O();
 4001388:	40007440 	call	4000744 <WeightChangesH2O>
          WeightChangesH1H2();         
 400138c:	40008740 	call	4000874 <WeightChangesH1H2>
          WeightChangesIH1();
 4001390:	4000a9c0 	call	4000a9c <WeightChangesIH1>
          PERF_END (PERFORMANCE_COUNTER_0_BASE, 3);
 4001394:	0007883a 	mov	r3,zero
 4001398:	00800c04 	movi	r2,48
 400139c:	10c00035 	stwio	r3,0(r2)
          PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 4);
 40013a0:	0007883a 	mov	r3,zero
 40013a4:	00801104 	movi	r2,68
 40013a8:	10c00035 	stwio	r3,0(r2)
          WeightUpdatesH2O();
 40013ac:	40007840 	call	4000784 <WeightUpdatesH2O>
          WeightUpdatesH1H2();
 40013b0:	40009400 	call	4000940 <WeightUpdatesH1H2>
          WeightUpdatesIH1();
 40013b4:	4000bc40 	call	4000bc4 <WeightUpdatesIH1>
          PERF_END (PERFORMANCE_COUNTER_0_BASE, 4);
 40013b8:	0007883a 	mov	r3,zero
 40013bc:	00801004 	movi	r2,64
 40013c0:	10c00035 	stwio	r3,0(r2)


 // train the network
    for(j = 0;j <= numEpochs;j++)
    {
        for(i = 0;i<numPatterns;i++)
 40013c4:	e0bfff17 	ldw	r2,-4(fp)
 40013c8:	10800044 	addi	r2,r2,1
 40013cc:	e0bfff15 	stw	r2,-4(fp)
 40013d0:	e0bfff17 	ldw	r2,-4(fp)
 40013d4:	10800110 	cmplti	r2,r2,4
 40013d8:	103fd61e 	bne	r2,zero,4001334 <__alt_data_end+0xfc001334>
          PERF_END (PERFORMANCE_COUNTER_0_BASE, 4);
        }

        //display the overall network error
        //after each epoch
        PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 5);
 40013dc:	0007883a 	mov	r3,zero
 40013e0:	00801504 	movi	r2,84
 40013e4:	10c00035 	stwio	r3,0(r2)
        calcOverallError();
 40013e8:	400120c0 	call	400120c <calcOverallError>
        printf("epoch = %d RMS Error = %f\n",j,RMSerror);
 40013ec:	d0a71c17 	ldw	r2,-25488(gp)
 40013f0:	1009883a 	mov	r4,r2
 40013f4:	40055bc0 	call	40055bc <__extendsfdf2>
 40013f8:	1009883a 	mov	r4,r2
 40013fc:	180b883a 	mov	r5,r3
 4001400:	200d883a 	mov	r6,r4
 4001404:	280f883a 	mov	r7,r5
 4001408:	e17ffe17 	ldw	r5,-8(fp)
 400140c:	01010074 	movhi	r4,1025
 4001410:	210b6c04 	addi	r4,r4,11696
 4001414:	4005acc0 	call	4005acc <printf>
        PERF_END (PERFORMANCE_COUNTER_0_BASE, 5);
 4001418:	0007883a 	mov	r3,zero
 400141c:	00801404 	movi	r2,80
 4001420:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
 4001424:	e0bffe17 	ldw	r2,-8(fp)
 4001428:	10800044 	addi	r2,r2,1
 400142c:	e0bffe15 	stw	r2,-8(fp)
 4001430:	00c03204 	movi	r3,200
 4001434:	e0bffe17 	ldw	r2,-8(fp)
 4001438:	18bfbc0e 	bge	r3,r2,400132c <__alt_data_end+0xfc00132c>
        PERF_END (PERFORMANCE_COUNTER_0_BASE, 5);
    }

 //training has finished
 //display the results
 PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 6);
 400143c:	0007883a 	mov	r3,zero
 4001440:	00801904 	movi	r2,100
 4001444:	10c00035 	stwio	r3,0(r2)
 displayResults();
 4001448:	40011340 	call	4001134 <displayResults>
 PERF_END (PERFORMANCE_COUNTER_0_BASE, 6);
 400144c:	0007883a 	mov	r3,zero
 4001450:	00801804 	movi	r2,96
 4001454:	10c00035 	stwio	r3,0(r2)
 
 PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 4001458:	0007883a 	mov	r3,zero
 400145c:	0005883a 	mov	r2,zero
 4001460:	10c00035 	stwio	r3,0(r2)

  perf_print_formatted_report((void *)PERFORMANCE_COUNTER_0_BASE,
 4001464:	00810074 	movhi	r2,1025
 4001468:	108b7504 	addi	r2,r2,11732
 400146c:	d8800415 	stw	r2,16(sp)
 4001470:	00810074 	movhi	r2,1025
 4001474:	108b7804 	addi	r2,r2,11744
 4001478:	d8800315 	stw	r2,12(sp)
 400147c:	00810074 	movhi	r2,1025
 4001480:	108b7c04 	addi	r2,r2,11760
 4001484:	d8800215 	stw	r2,8(sp)
 4001488:	00810074 	movhi	r2,1025
 400148c:	108b7f04 	addi	r2,r2,11772
 4001490:	d8800115 	stw	r2,4(sp)
 4001494:	00810074 	movhi	r2,1025
 4001498:	108b8304 	addi	r2,r2,11788
 400149c:	d8800015 	stw	r2,0(sp)
 40014a0:	01c10074 	movhi	r7,1025
 40014a4:	39cb7304 	addi	r7,r7,11724
 40014a8:	01800184 	movi	r6,6
 40014ac:	01417db4 	movhi	r5,1526
 40014b0:	29784004 	addi	r5,r5,-7936
 40014b4:	0009883a 	mov	r4,zero
 40014b8:	40118540 	call	4011854 <perf_print_formatted_report>
							  "FASE UPDATE",
                              "CALCULO ERROR",
                              "TEST FINAL"
                              );

 system("PAUSE");
 40014bc:	01010074 	movhi	r4,1025
 40014c0:	210b8704 	addi	r4,r4,11804
 40014c4:	4005d400 	call	4005d40 <system>
 return 0;
 40014c8:	0005883a 	mov	r2,zero
}
 40014cc:	e037883a 	mov	sp,fp
 40014d0:	dfc00117 	ldw	ra,4(sp)
 40014d4:	df000017 	ldw	fp,0(sp)
 40014d8:	dec00204 	addi	sp,sp,8
 40014dc:	f800283a 	ret

040014e0 <tanh>:
	double tanh(double x)
#else
	double tanh(x)
	double x;
#endif
{
 40014e0:	deffee04 	addi	sp,sp,-72
 40014e4:	dfc01115 	stw	ra,68(sp)
 40014e8:	df001015 	stw	fp,64(sp)
 40014ec:	dd400f15 	stw	r21,60(sp)
 40014f0:	dd000e15 	stw	r20,56(sp)
 40014f4:	dcc00d15 	stw	r19,52(sp)
 40014f8:	dc800c15 	stw	r18,48(sp)
 40014fc:	dc400b15 	stw	r17,44(sp)
 4001500:	dc000a15 	stw	r16,40(sp)
 4001504:	df001004 	addi	fp,sp,64
 4001508:	e13ff815 	stw	r4,-32(fp)
 400150c:	e17ff915 	stw	r5,-28(fp)
	double t,z;
	__int32_t jx,ix;

    /* High word of |x|. */
	GET_HIGH_WORD(jx,x);
 4001510:	e0bff817 	ldw	r2,-32(fp)
 4001514:	e0bff615 	stw	r2,-40(fp)
 4001518:	e0bff917 	ldw	r2,-28(fp)
 400151c:	e0bff715 	stw	r2,-36(fp)
 4001520:	e0bff717 	ldw	r2,-36(fp)
 4001524:	e0bff215 	stw	r2,-56(fp)
	ix = jx&0x7fffffff;
 4001528:	e0fff217 	ldw	r3,-56(fp)
 400152c:	00a00034 	movhi	r2,32768
 4001530:	10bfffc4 	addi	r2,r2,-1
 4001534:	1884703a 	and	r2,r3,r2
 4001538:	e0bff315 	stw	r2,-52(fp)

    /* x is INF or NaN */
	if(ix>=0x7ff00000) { 
 400153c:	e0fff317 	ldw	r3,-52(fp)
 4001540:	009ffc34 	movhi	r2,32752
 4001544:	18803016 	blt	r3,r2,4001608 <tanh+0x128>
	    if (jx>=0) return one/x+one;    /* tanh(+-inf)=+-1 */
 4001548:	e0bff217 	ldw	r2,-56(fp)
 400154c:	10001716 	blt	r2,zero,40015ac <tanh+0xcc>
 4001550:	0005883a 	mov	r2,zero
 4001554:	00cffc34 	movhi	r3,16368
 4001558:	e1bff817 	ldw	r6,-32(fp)
 400155c:	e1fff917 	ldw	r7,-28(fp)
 4001560:	1009883a 	mov	r4,r2
 4001564:	180b883a 	mov	r5,r3
 4001568:	400390c0 	call	400390c <__divdf3>
 400156c:	1009883a 	mov	r4,r2
 4001570:	180b883a 	mov	r5,r3
 4001574:	2011883a 	mov	r8,r4
 4001578:	2813883a 	mov	r9,r5
 400157c:	0005883a 	mov	r2,zero
 4001580:	00cffc34 	movhi	r3,16368
 4001584:	100d883a 	mov	r6,r2
 4001588:	180f883a 	mov	r7,r3
 400158c:	4009883a 	mov	r4,r8
 4001590:	480b883a 	mov	r5,r9
 4001594:	40030600 	call	4003060 <__adddf3>
 4001598:	1009883a 	mov	r4,r2
 400159c:	180b883a 	mov	r5,r3
 40015a0:	2021883a 	mov	r16,r4
 40015a4:	2823883a 	mov	r17,r5
 40015a8:	0000b306 	br	4001878 <tanh+0x398>
	    else       return one/x-one;    /* tanh(NaN) = NaN */
 40015ac:	0005883a 	mov	r2,zero
 40015b0:	00cffc34 	movhi	r3,16368
 40015b4:	e1bff817 	ldw	r6,-32(fp)
 40015b8:	e1fff917 	ldw	r7,-28(fp)
 40015bc:	1009883a 	mov	r4,r2
 40015c0:	180b883a 	mov	r5,r3
 40015c4:	400390c0 	call	400390c <__divdf3>
 40015c8:	1009883a 	mov	r4,r2
 40015cc:	180b883a 	mov	r5,r3
 40015d0:	2011883a 	mov	r8,r4
 40015d4:	2813883a 	mov	r9,r5
 40015d8:	0005883a 	mov	r2,zero
 40015dc:	00cffc34 	movhi	r3,16368
 40015e0:	100d883a 	mov	r6,r2
 40015e4:	180f883a 	mov	r7,r3
 40015e8:	4009883a 	mov	r4,r8
 40015ec:	480b883a 	mov	r5,r9
 40015f0:	4004b640 	call	4004b64 <__subdf3>
 40015f4:	1009883a 	mov	r4,r2
 40015f8:	180b883a 	mov	r5,r3
 40015fc:	2021883a 	mov	r16,r4
 4001600:	2823883a 	mov	r17,r5
 4001604:	00009c06 	br	4001878 <tanh+0x398>
	}

    /* |x| < 22 */
	if (ix < 0x40360000) {		/* |x|<22 */
 4001608:	e0fff317 	ldw	r3,-52(fp)
 400160c:	00900db4 	movhi	r2,16438
 4001610:	1880810e 	bge	r3,r2,4001818 <tanh+0x338>
	    if (ix<0x3c800000) 		/* |x|<2**-55 */
 4001614:	e0fff317 	ldw	r3,-52(fp)
 4001618:	008f2034 	movhi	r2,15488
 400161c:	1880150e 	bge	r3,r2,4001674 <tanh+0x194>
		return x*(one+x);    	/* tanh(small) = small */
 4001620:	0005883a 	mov	r2,zero
 4001624:	00cffc34 	movhi	r3,16368
 4001628:	e1bff817 	ldw	r6,-32(fp)
 400162c:	e1fff917 	ldw	r7,-28(fp)
 4001630:	1009883a 	mov	r4,r2
 4001634:	180b883a 	mov	r5,r3
 4001638:	40030600 	call	4003060 <__adddf3>
 400163c:	1009883a 	mov	r4,r2
 4001640:	180b883a 	mov	r5,r3
 4001644:	2005883a 	mov	r2,r4
 4001648:	2807883a 	mov	r3,r5
 400164c:	e1bff817 	ldw	r6,-32(fp)
 4001650:	e1fff917 	ldw	r7,-28(fp)
 4001654:	1009883a 	mov	r4,r2
 4001658:	180b883a 	mov	r5,r3
 400165c:	400444c0 	call	400444c <__muldf3>
 4001660:	1009883a 	mov	r4,r2
 4001664:	180b883a 	mov	r5,r3
 4001668:	2021883a 	mov	r16,r4
 400166c:	2823883a 	mov	r17,r5
 4001670:	00008106 	br	4001878 <tanh+0x398>
	    if (ix>=0x3ff00000) {	/* |x|>=1  */
 4001674:	e0fff317 	ldw	r3,-52(fp)
 4001678:	008ffc34 	movhi	r2,16368
 400167c:	18803716 	blt	r3,r2,400175c <tanh+0x27c>
		t = expm1(two*fabs(x));
 4001680:	e13ff817 	ldw	r4,-32(fp)
 4001684:	e17ff917 	ldw	r5,-28(fp)
 4001688:	4002e6c0 	call	4002e6c <fabs>
 400168c:	1011883a 	mov	r8,r2
 4001690:	1813883a 	mov	r9,r3
 4001694:	0005883a 	mov	r2,zero
 4001698:	00d00034 	movhi	r3,16384
 400169c:	100d883a 	mov	r6,r2
 40016a0:	180f883a 	mov	r7,r3
 40016a4:	4009883a 	mov	r4,r8
 40016a8:	480b883a 	mov	r5,r9
 40016ac:	400444c0 	call	400444c <__muldf3>
 40016b0:	1009883a 	mov	r4,r2
 40016b4:	180b883a 	mov	r5,r3
 40016b8:	2005883a 	mov	r2,r4
 40016bc:	2807883a 	mov	r3,r5
 40016c0:	1009883a 	mov	r4,r2
 40016c4:	180b883a 	mov	r5,r3
 40016c8:	40020700 	call	4002070 <expm1>
 40016cc:	e0bff415 	stw	r2,-48(fp)
 40016d0:	e0fff515 	stw	r3,-44(fp)
		z = one - two/(t+two);
 40016d4:	0025883a 	mov	r18,zero
 40016d8:	04cffc34 	movhi	r19,16368
 40016dc:	0029883a 	mov	r20,zero
 40016e0:	05500034 	movhi	r21,16384
 40016e4:	0005883a 	mov	r2,zero
 40016e8:	00d00034 	movhi	r3,16384
 40016ec:	e1bff417 	ldw	r6,-48(fp)
 40016f0:	e1fff517 	ldw	r7,-44(fp)
 40016f4:	1009883a 	mov	r4,r2
 40016f8:	180b883a 	mov	r5,r3
 40016fc:	40030600 	call	4003060 <__adddf3>
 4001700:	1009883a 	mov	r4,r2
 4001704:	180b883a 	mov	r5,r3
 4001708:	2005883a 	mov	r2,r4
 400170c:	2807883a 	mov	r3,r5
 4001710:	100d883a 	mov	r6,r2
 4001714:	180f883a 	mov	r7,r3
 4001718:	a009883a 	mov	r4,r20
 400171c:	a80b883a 	mov	r5,r21
 4001720:	400390c0 	call	400390c <__divdf3>
 4001724:	1009883a 	mov	r4,r2
 4001728:	180b883a 	mov	r5,r3
 400172c:	2005883a 	mov	r2,r4
 4001730:	2807883a 	mov	r3,r5
 4001734:	100d883a 	mov	r6,r2
 4001738:	180f883a 	mov	r7,r3
 400173c:	9009883a 	mov	r4,r18
 4001740:	980b883a 	mov	r5,r19
 4001744:	4004b640 	call	4004b64 <__subdf3>
 4001748:	1009883a 	mov	r4,r2
 400174c:	180b883a 	mov	r5,r3
 4001750:	e13ff015 	stw	r4,-64(fp)
 4001754:	e17ff115 	stw	r5,-60(fp)
 4001758:	00003e06 	br	4001854 <tanh+0x374>
	    } else {
	        t = expm1(-two*fabs(x));
 400175c:	0005883a 	mov	r2,zero
 4001760:	00d00034 	movhi	r3,16384
 4001764:	1029883a 	mov	r20,r2
 4001768:	1d60003c 	xorhi	r21,r3,32768
 400176c:	e13ff817 	ldw	r4,-32(fp)
 4001770:	e17ff917 	ldw	r5,-28(fp)
 4001774:	4002e6c0 	call	4002e6c <fabs>
 4001778:	1009883a 	mov	r4,r2
 400177c:	180b883a 	mov	r5,r3
 4001780:	200d883a 	mov	r6,r4
 4001784:	280f883a 	mov	r7,r5
 4001788:	a009883a 	mov	r4,r20
 400178c:	a80b883a 	mov	r5,r21
 4001790:	400444c0 	call	400444c <__muldf3>
 4001794:	1009883a 	mov	r4,r2
 4001798:	180b883a 	mov	r5,r3
 400179c:	2005883a 	mov	r2,r4
 40017a0:	2807883a 	mov	r3,r5
 40017a4:	1009883a 	mov	r4,r2
 40017a8:	180b883a 	mov	r5,r3
 40017ac:	40020700 	call	4002070 <expm1>
 40017b0:	e0bff415 	stw	r2,-48(fp)
 40017b4:	e0fff515 	stw	r3,-44(fp)
	        z= -t/(t+two);
 40017b8:	e4bff417 	ldw	r18,-48(fp)
 40017bc:	e0bff517 	ldw	r2,-44(fp)
 40017c0:	14e0003c 	xorhi	r19,r2,32768
 40017c4:	0005883a 	mov	r2,zero
 40017c8:	00d00034 	movhi	r3,16384
 40017cc:	e1bff417 	ldw	r6,-48(fp)
 40017d0:	e1fff517 	ldw	r7,-44(fp)
 40017d4:	1009883a 	mov	r4,r2
 40017d8:	180b883a 	mov	r5,r3
 40017dc:	40030600 	call	4003060 <__adddf3>
 40017e0:	1009883a 	mov	r4,r2
 40017e4:	180b883a 	mov	r5,r3
 40017e8:	2005883a 	mov	r2,r4
 40017ec:	2807883a 	mov	r3,r5
 40017f0:	100d883a 	mov	r6,r2
 40017f4:	180f883a 	mov	r7,r3
 40017f8:	9009883a 	mov	r4,r18
 40017fc:	980b883a 	mov	r5,r19
 4001800:	400390c0 	call	400390c <__divdf3>
 4001804:	1009883a 	mov	r4,r2
 4001808:	180b883a 	mov	r5,r3
 400180c:	e13ff015 	stw	r4,-64(fp)
 4001810:	e17ff115 	stw	r5,-60(fp)
 4001814:	00000f06 	br	4001854 <tanh+0x374>
	    }
    /* |x| > 22, return +-1 */
	} else {
	    z = one - tiny;		/* raised inexact flag */
 4001818:	0011883a 	mov	r8,zero
 400181c:	024ffc34 	movhi	r9,16368
 4001820:	00b0be74 	movhi	r2,49913
 4001824:	10bcd644 	addi	r2,r2,-3239
 4001828:	00c06974 	movhi	r3,421
 400182c:	18db87c4 	addi	r3,r3,28191
 4001830:	100d883a 	mov	r6,r2
 4001834:	180f883a 	mov	r7,r3
 4001838:	4009883a 	mov	r4,r8
 400183c:	480b883a 	mov	r5,r9
 4001840:	4004b640 	call	4004b64 <__subdf3>
 4001844:	1009883a 	mov	r4,r2
 4001848:	180b883a 	mov	r5,r3
 400184c:	e13ff015 	stw	r4,-64(fp)
 4001850:	e17ff115 	stw	r5,-60(fp)
	}
	return (jx>=0)? z: -z;
 4001854:	e0bff217 	ldw	r2,-56(fp)
 4001858:	1000040e 	bge	r2,zero,400186c <tanh+0x38c>
 400185c:	e43ff017 	ldw	r16,-64(fp)
 4001860:	e0bff117 	ldw	r2,-60(fp)
 4001864:	1460003c 	xorhi	r17,r2,32768
 4001868:	00000206 	br	4001874 <tanh+0x394>
 400186c:	e43ff017 	ldw	r16,-64(fp)
 4001870:	e47ff117 	ldw	r17,-60(fp)
 4001874:	0001883a 	nop
 4001878:	8007883a 	mov	r3,r16
 400187c:	8809883a 	mov	r4,r17
}
 4001880:	1805883a 	mov	r2,r3
 4001884:	2007883a 	mov	r3,r4
 4001888:	e6fffa04 	addi	sp,fp,-24
 400188c:	dfc00717 	ldw	ra,28(sp)
 4001890:	df000617 	ldw	fp,24(sp)
 4001894:	dd400517 	ldw	r21,20(sp)
 4001898:	dd000417 	ldw	r20,16(sp)
 400189c:	dcc00317 	ldw	r19,12(sp)
 40018a0:	dc800217 	ldw	r18,8(sp)
 40018a4:	dc400117 	ldw	r17,4(sp)
 40018a8:	dc000017 	ldw	r16,0(sp)
 40018ac:	dec00804 	addi	sp,sp,32
 40018b0:	f800283a 	ret

040018b4 <sqrt>:
	double sqrt(double x)		/* wrapper sqrt */
#else
	double sqrt(x)			/* wrapper sqrt */
	double x;
#endif
{
 40018b4:	defff104 	addi	sp,sp,-60
 40018b8:	dfc00e15 	stw	ra,56(sp)
 40018bc:	df000d15 	stw	fp,52(sp)
 40018c0:	df000d04 	addi	fp,sp,52
 40018c4:	e13ffe15 	stw	r4,-8(fp)
 40018c8:	e17fff15 	stw	r5,-4(fp)
#ifdef _IEEE_LIBM
	return __ieee754_sqrt(x);
#else
	struct exception exc;
	double z;
	z = __ieee754_sqrt(x);
 40018cc:	e13ffe17 	ldw	r4,-8(fp)
 40018d0:	e17fff17 	ldw	r5,-4(fp)
 40018d4:	4001a280 	call	4001a28 <__ieee754_sqrt>
 40018d8:	e0bff315 	stw	r2,-52(fp)
 40018dc:	e0fff415 	stw	r3,-48(fp)
	if(_LIB_VERSION == _IEEE_ || isnan(x)) return z;
 40018e0:	d0a02617 	ldw	r2,-32616(gp)
 40018e4:	10bfffe0 	cmpeqi	r2,r2,-1
 40018e8:	1000041e 	bne	r2,zero,40018fc <sqrt+0x48>
 40018ec:	e13ffe17 	ldw	r4,-8(fp)
 40018f0:	e17fff17 	ldw	r5,-4(fp)
 40018f4:	4002ef40 	call	4002ef4 <__fpclassifyd>
 40018f8:	1000031e 	bne	r2,zero,4001908 <sqrt+0x54>
 40018fc:	e0bff317 	ldw	r2,-52(fp)
 4001900:	e0fff417 	ldw	r3,-48(fp)
 4001904:	00003f06 	br	4001a04 <sqrt+0x150>
	if(x<0.0) {
 4001908:	000d883a 	mov	r6,zero
 400190c:	000f883a 	mov	r7,zero
 4001910:	e13ffe17 	ldw	r4,-8(fp)
 4001914:	e17fff17 	ldw	r5,-4(fp)
 4001918:	40043580 	call	4004358 <__ledf2>
 400191c:	1000370e 	bge	r2,zero,40019fc <sqrt+0x148>
	  exc.type = DOMAIN;
 4001920:	00800044 	movi	r2,1
 4001924:	e0bff515 	stw	r2,-44(fp)
	  exc.name = "sqrt";
 4001928:	00810074 	movhi	r2,1025
 400192c:	108b8904 	addi	r2,r2,11812
 4001930:	e0bff615 	stw	r2,-40(fp)
	  exc.err = 0;
 4001934:	e03ffd15 	stw	zero,-12(fp)
	  exc.arg1 = exc.arg2 = x;
 4001938:	e0bffe17 	ldw	r2,-8(fp)
 400193c:	e0bff915 	stw	r2,-28(fp)
 4001940:	e0bfff17 	ldw	r2,-4(fp)
 4001944:	e0bffa15 	stw	r2,-24(fp)
 4001948:	e0bff917 	ldw	r2,-28(fp)
 400194c:	e0fffa17 	ldw	r3,-24(fp)
 4001950:	e0bff715 	stw	r2,-36(fp)
 4001954:	e0fff815 	stw	r3,-32(fp)
	  if (_LIB_VERSION == _SVID_)
 4001958:	d0a02617 	ldw	r2,-32616(gp)
 400195c:	1000031e 	bne	r2,zero,400196c <sqrt+0xb8>
	    exc.retval = 0.0;
 4001960:	e03ffb15 	stw	zero,-20(fp)
 4001964:	e03ffc15 	stw	zero,-16(fp)
 4001968:	00000b06 	br	4001998 <sqrt+0xe4>
          else
            exc.retval = 0.0/0.0;
 400196c:	000d883a 	mov	r6,zero
 4001970:	000f883a 	mov	r7,zero
 4001974:	0009883a 	mov	r4,zero
 4001978:	000b883a 	mov	r5,zero
 400197c:	400390c0 	call	400390c <__divdf3>
 4001980:	1009883a 	mov	r4,r2
 4001984:	180b883a 	mov	r5,r3
 4001988:	2005883a 	mov	r2,r4
 400198c:	2807883a 	mov	r3,r5
 4001990:	e0bffb15 	stw	r2,-20(fp)
 4001994:	e0fffc15 	stw	r3,-16(fp)
          if (_LIB_VERSION == _POSIX_)
 4001998:	d0a02617 	ldw	r2,-32616(gp)
 400199c:	10800098 	cmpnei	r2,r2,2
 40019a0:	1000051e 	bne	r2,zero,40019b8 <sqrt+0x104>
            errno = EDOM;
 40019a4:	4005a8c0 	call	4005a8c <__errno>
 40019a8:	1007883a 	mov	r3,r2
 40019ac:	00800844 	movi	r2,33
 40019b0:	18800015 	stw	r2,0(r3)
 40019b4:	00000806 	br	40019d8 <sqrt+0x124>
          else if (!matherr(&exc)) {
 40019b8:	e0bff504 	addi	r2,fp,-44
 40019bc:	1009883a 	mov	r4,r2
 40019c0:	4002ff80 	call	4002ff8 <matherr>
 40019c4:	1000041e 	bne	r2,zero,40019d8 <sqrt+0x124>
            errno = EDOM;
 40019c8:	4005a8c0 	call	4005a8c <__errno>
 40019cc:	1007883a 	mov	r3,r2
 40019d0:	00800844 	movi	r2,33
 40019d4:	18800015 	stw	r2,0(r3)
          }
          if (exc.err != 0)
 40019d8:	e0bffd17 	ldw	r2,-12(fp)
 40019dc:	10000426 	beq	r2,zero,40019f0 <sqrt+0x13c>
	    errno = exc.err;
 40019e0:	4005a8c0 	call	4005a8c <__errno>
 40019e4:	1007883a 	mov	r3,r2
 40019e8:	e0bffd17 	ldw	r2,-12(fp)
 40019ec:	18800015 	stw	r2,0(r3)
	  return exc.retval; 
 40019f0:	e0bffb17 	ldw	r2,-20(fp)
 40019f4:	e0fffc17 	ldw	r3,-16(fp)
 40019f8:	00000206 	br	4001a04 <sqrt+0x150>
	} else
	    return z;
 40019fc:	e0bff317 	ldw	r2,-52(fp)
 4001a00:	e0fff417 	ldw	r3,-48(fp)
 4001a04:	1009883a 	mov	r4,r2
 4001a08:	180b883a 	mov	r5,r3
#endif
}
 4001a0c:	2005883a 	mov	r2,r4
 4001a10:	2807883a 	mov	r3,r5
 4001a14:	e037883a 	mov	sp,fp
 4001a18:	dfc00117 	ldw	ra,4(sp)
 4001a1c:	df000017 	ldw	fp,0(sp)
 4001a20:	dec00204 	addi	sp,sp,8
 4001a24:	f800283a 	ret

04001a28 <__ieee754_sqrt>:
	double __ieee754_sqrt(double x)
#else
	double __ieee754_sqrt(x)
	double x;
#endif
{
 4001a28:	deffe804 	addi	sp,sp,-96
 4001a2c:	dfc01715 	stw	ra,92(sp)
 4001a30:	df001615 	stw	fp,88(sp)
 4001a34:	dc401515 	stw	r17,84(sp)
 4001a38:	dc001415 	stw	r16,80(sp)
 4001a3c:	df001604 	addi	fp,sp,88
 4001a40:	e13ffc15 	stw	r4,-16(fp)
 4001a44:	e17ffd15 	stw	r5,-12(fp)
	double z;
	__int32_t sign = (int)0x80000000; 
 4001a48:	00a00034 	movhi	r2,32768
 4001a4c:	e0bff315 	stw	r2,-52(fp)
	__uint32_t r,t1,s1,ix1,q1;
	__int32_t ix0,s0,q,m,t,i;

	EXTRACT_WORDS(ix0,ix1,x);
 4001a50:	e0bffc17 	ldw	r2,-16(fp)
 4001a54:	e0bff815 	stw	r2,-32(fp)
 4001a58:	e0bffd17 	ldw	r2,-12(fp)
 4001a5c:	e0bff915 	stw	r2,-28(fp)
 4001a60:	e0bff917 	ldw	r2,-28(fp)
 4001a64:	e0bfee15 	stw	r2,-72(fp)
 4001a68:	e0bff817 	ldw	r2,-32(fp)
 4001a6c:	e0bfec15 	stw	r2,-80(fp)

    /* take care of Inf and NaN */
	if((ix0&0x7ff00000)==0x7ff00000) {			
 4001a70:	e0bfee17 	ldw	r2,-72(fp)
 4001a74:	10dffc2c 	andhi	r3,r2,32752
 4001a78:	009ffc34 	movhi	r2,32752
 4001a7c:	1880131e 	bne	r3,r2,4001acc <__ieee754_sqrt+0xa4>
	    return x*x+x;		/* sqrt(NaN)=NaN, sqrt(+inf)=+inf
 4001a80:	e1bffc17 	ldw	r6,-16(fp)
 4001a84:	e1fffd17 	ldw	r7,-12(fp)
 4001a88:	e13ffc17 	ldw	r4,-16(fp)
 4001a8c:	e17ffd17 	ldw	r5,-12(fp)
 4001a90:	400444c0 	call	400444c <__muldf3>
 4001a94:	1009883a 	mov	r4,r2
 4001a98:	180b883a 	mov	r5,r3
 4001a9c:	2005883a 	mov	r2,r4
 4001aa0:	2807883a 	mov	r3,r5
 4001aa4:	e1bffc17 	ldw	r6,-16(fp)
 4001aa8:	e1fffd17 	ldw	r7,-12(fp)
 4001aac:	1009883a 	mov	r4,r2
 4001ab0:	180b883a 	mov	r5,r3
 4001ab4:	40030600 	call	4003060 <__adddf3>
 4001ab8:	1009883a 	mov	r4,r2
 4001abc:	180b883a 	mov	r5,r3
 4001ac0:	2005883a 	mov	r2,r4
 4001ac4:	2807883a 	mov	r3,r5
 4001ac8:	00015e06 	br	4002044 <__ieee754_sqrt+0x61c>
					   sqrt(-inf)=sNaN */
	} 
    /* take care of zero */
	if(ix0<=0) {
 4001acc:	e0bfee17 	ldw	r2,-72(fp)
 4001ad0:	00802916 	blt	zero,r2,4001b78 <__ieee754_sqrt+0x150>
	    if(((ix0&(~sign))|ix1)==0) return x;/* sqrt(+-0) = +-0 */
 4001ad4:	e0bff317 	ldw	r2,-52(fp)
 4001ad8:	0086303a 	nor	r3,zero,r2
 4001adc:	e0bfee17 	ldw	r2,-72(fp)
 4001ae0:	1884703a 	and	r2,r3,r2
 4001ae4:	1007883a 	mov	r3,r2
 4001ae8:	e0bfec17 	ldw	r2,-80(fp)
 4001aec:	1884b03a 	or	r2,r3,r2
 4001af0:	1000031e 	bne	r2,zero,4001b00 <__ieee754_sqrt+0xd8>
 4001af4:	e0bffc17 	ldw	r2,-16(fp)
 4001af8:	e0fffd17 	ldw	r3,-12(fp)
 4001afc:	00015106 	br	4002044 <__ieee754_sqrt+0x61c>
	    else if(ix0<0)
 4001b00:	e0bfee17 	ldw	r2,-72(fp)
 4001b04:	10001c0e 	bge	r2,zero,4001b78 <__ieee754_sqrt+0x150>
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
 4001b08:	e1bffc17 	ldw	r6,-16(fp)
 4001b0c:	e1fffd17 	ldw	r7,-12(fp)
 4001b10:	e13ffc17 	ldw	r4,-16(fp)
 4001b14:	e17ffd17 	ldw	r5,-12(fp)
 4001b18:	4004b640 	call	4004b64 <__subdf3>
 4001b1c:	1009883a 	mov	r4,r2
 4001b20:	180b883a 	mov	r5,r3
 4001b24:	2021883a 	mov	r16,r4
 4001b28:	2823883a 	mov	r17,r5
 4001b2c:	e1bffc17 	ldw	r6,-16(fp)
 4001b30:	e1fffd17 	ldw	r7,-12(fp)
 4001b34:	e13ffc17 	ldw	r4,-16(fp)
 4001b38:	e17ffd17 	ldw	r5,-12(fp)
 4001b3c:	4004b640 	call	4004b64 <__subdf3>
 4001b40:	1009883a 	mov	r4,r2
 4001b44:	180b883a 	mov	r5,r3
 4001b48:	2005883a 	mov	r2,r4
 4001b4c:	2807883a 	mov	r3,r5
 4001b50:	100d883a 	mov	r6,r2
 4001b54:	180f883a 	mov	r7,r3
 4001b58:	8009883a 	mov	r4,r16
 4001b5c:	880b883a 	mov	r5,r17
 4001b60:	400390c0 	call	400390c <__divdf3>
 4001b64:	1009883a 	mov	r4,r2
 4001b68:	180b883a 	mov	r5,r3
 4001b6c:	2005883a 	mov	r2,r4
 4001b70:	2807883a 	mov	r3,r5
 4001b74:	00013306 	br	4002044 <__ieee754_sqrt+0x61c>
	}
    /* normalize x */
	m = (ix0>>20);
 4001b78:	e0bfee17 	ldw	r2,-72(fp)
 4001b7c:	1005d53a 	srai	r2,r2,20
 4001b80:	e0bff115 	stw	r2,-60(fp)
	if(m==0) {				/* subnormal x */
 4001b84:	e0bff117 	ldw	r2,-60(fp)
 4001b88:	10002a1e 	bne	r2,zero,4001c34 <__ieee754_sqrt+0x20c>
	    while(ix0==0) {
 4001b8c:	00000b06 	br	4001bbc <__ieee754_sqrt+0x194>
		m -= 21;
 4001b90:	e0bff117 	ldw	r2,-60(fp)
 4001b94:	10bffac4 	addi	r2,r2,-21
 4001b98:	e0bff115 	stw	r2,-60(fp)
		ix0 |= (ix1>>11); ix1 <<= 21;
 4001b9c:	e0bfec17 	ldw	r2,-80(fp)
 4001ba0:	1006d2fa 	srli	r3,r2,11
 4001ba4:	e0bfee17 	ldw	r2,-72(fp)
 4001ba8:	1884b03a 	or	r2,r3,r2
 4001bac:	e0bfee15 	stw	r2,-72(fp)
 4001bb0:	e0bfec17 	ldw	r2,-80(fp)
 4001bb4:	1004957a 	slli	r2,r2,21
 4001bb8:	e0bfec15 	stw	r2,-80(fp)
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
	}
    /* normalize x */
	m = (ix0>>20);
	if(m==0) {				/* subnormal x */
	    while(ix0==0) {
 4001bbc:	e0bfee17 	ldw	r2,-72(fp)
 4001bc0:	103ff326 	beq	r2,zero,4001b90 <__alt_data_end+0xfc001b90>
		m -= 21;
		ix0 |= (ix1>>11); ix1 <<= 21;
	    }
	    for(i=0;(ix0&0x00100000)==0;i++) ix0<<=1;
 4001bc4:	e03ff215 	stw	zero,-56(fp)
 4001bc8:	00000606 	br	4001be4 <__ieee754_sqrt+0x1bc>
 4001bcc:	e0bfee17 	ldw	r2,-72(fp)
 4001bd0:	1085883a 	add	r2,r2,r2
 4001bd4:	e0bfee15 	stw	r2,-72(fp)
 4001bd8:	e0bff217 	ldw	r2,-56(fp)
 4001bdc:	10800044 	addi	r2,r2,1
 4001be0:	e0bff215 	stw	r2,-56(fp)
 4001be4:	e0bfee17 	ldw	r2,-72(fp)
 4001be8:	1080042c 	andhi	r2,r2,16
 4001bec:	103ff726 	beq	r2,zero,4001bcc <__alt_data_end+0xfc001bcc>
	    m -= i-1;
 4001bf0:	e0bff217 	ldw	r2,-56(fp)
 4001bf4:	10bfffc4 	addi	r2,r2,-1
 4001bf8:	e0fff117 	ldw	r3,-60(fp)
 4001bfc:	1885c83a 	sub	r2,r3,r2
 4001c00:	e0bff115 	stw	r2,-60(fp)
	    ix0 |= (ix1>>(32-i));
 4001c04:	00c00804 	movi	r3,32
 4001c08:	e0bff217 	ldw	r2,-56(fp)
 4001c0c:	1885c83a 	sub	r2,r3,r2
 4001c10:	e0ffec17 	ldw	r3,-80(fp)
 4001c14:	1886d83a 	srl	r3,r3,r2
 4001c18:	e0bfee17 	ldw	r2,-72(fp)
 4001c1c:	1884b03a 	or	r2,r3,r2
 4001c20:	e0bfee15 	stw	r2,-72(fp)
	    ix1 <<= i;
 4001c24:	e0ffec17 	ldw	r3,-80(fp)
 4001c28:	e0bff217 	ldw	r2,-56(fp)
 4001c2c:	1884983a 	sll	r2,r3,r2
 4001c30:	e0bfec15 	stw	r2,-80(fp)
	}
	m -= 1023;	/* unbias exponent */
 4001c34:	e0bff117 	ldw	r2,-60(fp)
 4001c38:	10bf0044 	addi	r2,r2,-1023
 4001c3c:	e0bff115 	stw	r2,-60(fp)
	ix0 = (ix0&0x000fffff)|0x00100000;
 4001c40:	e0ffee17 	ldw	r3,-72(fp)
 4001c44:	00800434 	movhi	r2,16
 4001c48:	10bfffc4 	addi	r2,r2,-1
 4001c4c:	1884703a 	and	r2,r3,r2
 4001c50:	10800434 	orhi	r2,r2,16
 4001c54:	e0bfee15 	stw	r2,-72(fp)
	if(m&1){	/* odd m, double x to make it even */
 4001c58:	e0bff117 	ldw	r2,-60(fp)
 4001c5c:	1080004c 	andi	r2,r2,1
 4001c60:	10000d26 	beq	r2,zero,4001c98 <__ieee754_sqrt+0x270>
	    ix0 += ix0 + ((ix1&sign)>>31);
 4001c64:	e0fff317 	ldw	r3,-52(fp)
 4001c68:	e0bfec17 	ldw	r2,-80(fp)
 4001c6c:	1884703a 	and	r2,r3,r2
 4001c70:	1006d7fa 	srli	r3,r2,31
 4001c74:	e0bfee17 	ldw	r2,-72(fp)
 4001c78:	1887883a 	add	r3,r3,r2
 4001c7c:	e0bfee17 	ldw	r2,-72(fp)
 4001c80:	1885883a 	add	r2,r3,r2
 4001c84:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 4001c88:	e0ffec17 	ldw	r3,-80(fp)
 4001c8c:	e0bfec17 	ldw	r2,-80(fp)
 4001c90:	1885883a 	add	r2,r3,r2
 4001c94:	e0bfec15 	stw	r2,-80(fp)
	}
	m >>= 1;	/* m = [m/2] */
 4001c98:	e0bff117 	ldw	r2,-60(fp)
 4001c9c:	1005d07a 	srai	r2,r2,1
 4001ca0:	e0bff115 	stw	r2,-60(fp)

    /* generate sqrt(x) bit by bit */
	ix0 += ix0 + ((ix1&sign)>>31);
 4001ca4:	e0fff317 	ldw	r3,-52(fp)
 4001ca8:	e0bfec17 	ldw	r2,-80(fp)
 4001cac:	1884703a 	and	r2,r3,r2
 4001cb0:	1006d7fa 	srli	r3,r2,31
 4001cb4:	e0bfee17 	ldw	r2,-72(fp)
 4001cb8:	1887883a 	add	r3,r3,r2
 4001cbc:	e0bfee17 	ldw	r2,-72(fp)
 4001cc0:	1885883a 	add	r2,r3,r2
 4001cc4:	e0bfee15 	stw	r2,-72(fp)
	ix1 += ix1;
 4001cc8:	e0ffec17 	ldw	r3,-80(fp)
 4001ccc:	e0bfec17 	ldw	r2,-80(fp)
 4001cd0:	1885883a 	add	r2,r3,r2
 4001cd4:	e0bfec15 	stw	r2,-80(fp)
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
 4001cd8:	e03feb15 	stw	zero,-84(fp)
 4001cdc:	e03fef15 	stw	zero,-68(fp)
 4001ce0:	e0bfef17 	ldw	r2,-68(fp)
 4001ce4:	e0bfed15 	stw	r2,-76(fp)
 4001ce8:	e0bfed17 	ldw	r2,-76(fp)
 4001cec:	e0bff015 	stw	r2,-64(fp)
	r = 0x00200000;		/* r = moving bit from right to left */
 4001cf0:	00800834 	movhi	r2,32
 4001cf4:	e0bfea15 	stw	r2,-88(fp)

	while(r!=0) {
 4001cf8:	00002306 	br	4001d88 <__ieee754_sqrt+0x360>
	    t = s0+r; 
 4001cfc:	e0ffef17 	ldw	r3,-68(fp)
 4001d00:	e0bfea17 	ldw	r2,-88(fp)
 4001d04:	1885883a 	add	r2,r3,r2
 4001d08:	e0bff415 	stw	r2,-48(fp)
	    if(t<=ix0) { 
 4001d0c:	e0bff417 	ldw	r2,-48(fp)
 4001d10:	e0ffee17 	ldw	r3,-72(fp)
 4001d14:	18800c16 	blt	r3,r2,4001d48 <__ieee754_sqrt+0x320>
		s0   = t+r; 
 4001d18:	e0fff417 	ldw	r3,-48(fp)
 4001d1c:	e0bfea17 	ldw	r2,-88(fp)
 4001d20:	1885883a 	add	r2,r3,r2
 4001d24:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t; 
 4001d28:	e0ffee17 	ldw	r3,-72(fp)
 4001d2c:	e0bff417 	ldw	r2,-48(fp)
 4001d30:	1885c83a 	sub	r2,r3,r2
 4001d34:	e0bfee15 	stw	r2,-72(fp)
		q   += r; 
 4001d38:	e0fff017 	ldw	r3,-64(fp)
 4001d3c:	e0bfea17 	ldw	r2,-88(fp)
 4001d40:	1885883a 	add	r2,r3,r2
 4001d44:	e0bff015 	stw	r2,-64(fp)
	    } 
	    ix0 += ix0 + ((ix1&sign)>>31);
 4001d48:	e0fff317 	ldw	r3,-52(fp)
 4001d4c:	e0bfec17 	ldw	r2,-80(fp)
 4001d50:	1884703a 	and	r2,r3,r2
 4001d54:	1006d7fa 	srli	r3,r2,31
 4001d58:	e0bfee17 	ldw	r2,-72(fp)
 4001d5c:	1887883a 	add	r3,r3,r2
 4001d60:	e0bfee17 	ldw	r2,-72(fp)
 4001d64:	1885883a 	add	r2,r3,r2
 4001d68:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 4001d6c:	e0ffec17 	ldw	r3,-80(fp)
 4001d70:	e0bfec17 	ldw	r2,-80(fp)
 4001d74:	1885883a 	add	r2,r3,r2
 4001d78:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 4001d7c:	e0bfea17 	ldw	r2,-88(fp)
 4001d80:	1004d07a 	srli	r2,r2,1
 4001d84:	e0bfea15 	stw	r2,-88(fp)
	ix0 += ix0 + ((ix1&sign)>>31);
	ix1 += ix1;
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
	r = 0x00200000;		/* r = moving bit from right to left */

	while(r!=0) {
 4001d88:	e0bfea17 	ldw	r2,-88(fp)
 4001d8c:	103fdb1e 	bne	r2,zero,4001cfc <__alt_data_end+0xfc001cfc>
	    ix0 += ix0 + ((ix1&sign)>>31);
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
 4001d90:	e0bff317 	ldw	r2,-52(fp)
 4001d94:	e0bfea15 	stw	r2,-88(fp)
	while(r!=0) {
 4001d98:	00004106 	br	4001ea0 <__ieee754_sqrt+0x478>
	    t1 = s1+r; 
 4001d9c:	e0ffeb17 	ldw	r3,-84(fp)
 4001da0:	e0bfea17 	ldw	r2,-88(fp)
 4001da4:	1885883a 	add	r2,r3,r2
 4001da8:	e0bff515 	stw	r2,-44(fp)
	    t  = s0;
 4001dac:	e0bfef17 	ldw	r2,-68(fp)
 4001db0:	e0bff415 	stw	r2,-48(fp)
	    if((t<ix0)||((t==ix0)&&(t1<=ix1))) { 
 4001db4:	e0fff417 	ldw	r3,-48(fp)
 4001db8:	e0bfee17 	ldw	r2,-72(fp)
 4001dbc:	18800616 	blt	r3,r2,4001dd8 <__ieee754_sqrt+0x3b0>
 4001dc0:	e0fff417 	ldw	r3,-48(fp)
 4001dc4:	e0bfee17 	ldw	r2,-72(fp)
 4001dc8:	1880251e 	bne	r3,r2,4001e60 <__ieee754_sqrt+0x438>
 4001dcc:	e0bff517 	ldw	r2,-44(fp)
 4001dd0:	e0ffec17 	ldw	r3,-80(fp)
 4001dd4:	18802236 	bltu	r3,r2,4001e60 <__ieee754_sqrt+0x438>
		s1  = t1+r;
 4001dd8:	e0fff517 	ldw	r3,-44(fp)
 4001ddc:	e0bfea17 	ldw	r2,-88(fp)
 4001de0:	1885883a 	add	r2,r3,r2
 4001de4:	e0bfeb15 	stw	r2,-84(fp)
		if(((t1&sign)==sign)&&(s1&sign)==0) s0 += 1;
 4001de8:	e0fff317 	ldw	r3,-52(fp)
 4001dec:	e0bff517 	ldw	r2,-44(fp)
 4001df0:	1886703a 	and	r3,r3,r2
 4001df4:	e0bff317 	ldw	r2,-52(fp)
 4001df8:	1880071e 	bne	r3,r2,4001e18 <__ieee754_sqrt+0x3f0>
 4001dfc:	e0fff317 	ldw	r3,-52(fp)
 4001e00:	e0bfeb17 	ldw	r2,-84(fp)
 4001e04:	1884703a 	and	r2,r3,r2
 4001e08:	1000031e 	bne	r2,zero,4001e18 <__ieee754_sqrt+0x3f0>
 4001e0c:	e0bfef17 	ldw	r2,-68(fp)
 4001e10:	10800044 	addi	r2,r2,1
 4001e14:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t;
 4001e18:	e0ffee17 	ldw	r3,-72(fp)
 4001e1c:	e0bff417 	ldw	r2,-48(fp)
 4001e20:	1885c83a 	sub	r2,r3,r2
 4001e24:	e0bfee15 	stw	r2,-72(fp)
		if (ix1 < t1) ix0 -= 1;
 4001e28:	e0ffec17 	ldw	r3,-80(fp)
 4001e2c:	e0bff517 	ldw	r2,-44(fp)
 4001e30:	1880032e 	bgeu	r3,r2,4001e40 <__ieee754_sqrt+0x418>
 4001e34:	e0bfee17 	ldw	r2,-72(fp)
 4001e38:	10bfffc4 	addi	r2,r2,-1
 4001e3c:	e0bfee15 	stw	r2,-72(fp)
		ix1 -= t1;
 4001e40:	e0ffec17 	ldw	r3,-80(fp)
 4001e44:	e0bff517 	ldw	r2,-44(fp)
 4001e48:	1885c83a 	sub	r2,r3,r2
 4001e4c:	e0bfec15 	stw	r2,-80(fp)
		q1  += r;
 4001e50:	e0ffed17 	ldw	r3,-76(fp)
 4001e54:	e0bfea17 	ldw	r2,-88(fp)
 4001e58:	1885883a 	add	r2,r3,r2
 4001e5c:	e0bfed15 	stw	r2,-76(fp)
	    }
	    ix0 += ix0 + ((ix1&sign)>>31);
 4001e60:	e0fff317 	ldw	r3,-52(fp)
 4001e64:	e0bfec17 	ldw	r2,-80(fp)
 4001e68:	1884703a 	and	r2,r3,r2
 4001e6c:	1006d7fa 	srli	r3,r2,31
 4001e70:	e0bfee17 	ldw	r2,-72(fp)
 4001e74:	1887883a 	add	r3,r3,r2
 4001e78:	e0bfee17 	ldw	r2,-72(fp)
 4001e7c:	1885883a 	add	r2,r3,r2
 4001e80:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 4001e84:	e0ffec17 	ldw	r3,-80(fp)
 4001e88:	e0bfec17 	ldw	r2,-80(fp)
 4001e8c:	1885883a 	add	r2,r3,r2
 4001e90:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 4001e94:	e0bfea17 	ldw	r2,-88(fp)
 4001e98:	1004d07a 	srli	r2,r2,1
 4001e9c:	e0bfea15 	stw	r2,-88(fp)
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
	while(r!=0) {
 4001ea0:	e0bfea17 	ldw	r2,-88(fp)
 4001ea4:	103fbd1e 	bne	r2,zero,4001d9c <__alt_data_end+0xfc001d9c>
	    ix1 += ix1;
	    r>>=1;
	}

    /* use floating add to find out rounding direction */
	if((ix0|ix1)!=0) {
 4001ea8:	e0ffee17 	ldw	r3,-72(fp)
 4001eac:	e0bfec17 	ldw	r2,-80(fp)
 4001eb0:	1884b03a 	or	r2,r3,r2
 4001eb4:	10004526 	beq	r2,zero,4001fcc <__ieee754_sqrt+0x5a4>
	    z = one-tiny; /* trigger inexact flag */
 4001eb8:	0011883a 	mov	r8,zero
 4001ebc:	024ffc34 	movhi	r9,16368
 4001ec0:	00b0be74 	movhi	r2,49913
 4001ec4:	10bcd644 	addi	r2,r2,-3239
 4001ec8:	00c06974 	movhi	r3,421
 4001ecc:	18db87c4 	addi	r3,r3,28191
 4001ed0:	100d883a 	mov	r6,r2
 4001ed4:	180f883a 	mov	r7,r3
 4001ed8:	4009883a 	mov	r4,r8
 4001edc:	480b883a 	mov	r5,r9
 4001ee0:	4004b640 	call	4004b64 <__subdf3>
 4001ee4:	1009883a 	mov	r4,r2
 4001ee8:	180b883a 	mov	r5,r3
 4001eec:	e13ff615 	stw	r4,-40(fp)
 4001ef0:	e17ff715 	stw	r5,-36(fp)
	    if (z>=one) {
 4001ef4:	0005883a 	mov	r2,zero
 4001ef8:	00cffc34 	movhi	r3,16368
 4001efc:	100d883a 	mov	r6,r2
 4001f00:	180f883a 	mov	r7,r3
 4001f04:	e13ff617 	ldw	r4,-40(fp)
 4001f08:	e17ff717 	ldw	r5,-36(fp)
 4001f0c:	400427c0 	call	400427c <__gedf2>
 4001f10:	10002e16 	blt	r2,zero,4001fcc <__ieee754_sqrt+0x5a4>
	        z = one+tiny;
 4001f14:	0011883a 	mov	r8,zero
 4001f18:	024ffc34 	movhi	r9,16368
 4001f1c:	00b0be74 	movhi	r2,49913
 4001f20:	10bcd644 	addi	r2,r2,-3239
 4001f24:	00c06974 	movhi	r3,421
 4001f28:	18db87c4 	addi	r3,r3,28191
 4001f2c:	100d883a 	mov	r6,r2
 4001f30:	180f883a 	mov	r7,r3
 4001f34:	4009883a 	mov	r4,r8
 4001f38:	480b883a 	mov	r5,r9
 4001f3c:	40030600 	call	4003060 <__adddf3>
 4001f40:	1009883a 	mov	r4,r2
 4001f44:	180b883a 	mov	r5,r3
 4001f48:	e13ff615 	stw	r4,-40(fp)
 4001f4c:	e17ff715 	stw	r5,-36(fp)
	        if (q1==(__uint32_t)0xffffffff) { q1=0; q += 1;}
 4001f50:	e0bfed17 	ldw	r2,-76(fp)
 4001f54:	10bfffd8 	cmpnei	r2,r2,-1
 4001f58:	1000051e 	bne	r2,zero,4001f70 <__ieee754_sqrt+0x548>
 4001f5c:	e03fed15 	stw	zero,-76(fp)
 4001f60:	e0bff017 	ldw	r2,-64(fp)
 4001f64:	10800044 	addi	r2,r2,1
 4001f68:	e0bff015 	stw	r2,-64(fp)
 4001f6c:	00001706 	br	4001fcc <__ieee754_sqrt+0x5a4>
		else if (z>one) {
 4001f70:	0005883a 	mov	r2,zero
 4001f74:	00cffc34 	movhi	r3,16368
 4001f78:	100d883a 	mov	r6,r2
 4001f7c:	180f883a 	mov	r7,r3
 4001f80:	e13ff617 	ldw	r4,-40(fp)
 4001f84:	e17ff717 	ldw	r5,-36(fp)
 4001f88:	400427c0 	call	400427c <__gedf2>
 4001f8c:	00800a0e 	bge	zero,r2,4001fb8 <__ieee754_sqrt+0x590>
		    if (q1==(__uint32_t)0xfffffffe) q+=1;
 4001f90:	e0bfed17 	ldw	r2,-76(fp)
 4001f94:	10bfff98 	cmpnei	r2,r2,-2
 4001f98:	1000031e 	bne	r2,zero,4001fa8 <__ieee754_sqrt+0x580>
 4001f9c:	e0bff017 	ldw	r2,-64(fp)
 4001fa0:	10800044 	addi	r2,r2,1
 4001fa4:	e0bff015 	stw	r2,-64(fp)
		    q1+=2; 
 4001fa8:	e0bfed17 	ldw	r2,-76(fp)
 4001fac:	10800084 	addi	r2,r2,2
 4001fb0:	e0bfed15 	stw	r2,-76(fp)
 4001fb4:	00000506 	br	4001fcc <__ieee754_sqrt+0x5a4>
		} else
	            q1 += (q1&1);
 4001fb8:	e0bfed17 	ldw	r2,-76(fp)
 4001fbc:	1080004c 	andi	r2,r2,1
 4001fc0:	e0ffed17 	ldw	r3,-76(fp)
 4001fc4:	1885883a 	add	r2,r3,r2
 4001fc8:	e0bfed15 	stw	r2,-76(fp)
	    }
	}
	ix0 = (q>>1)+0x3fe00000;
 4001fcc:	e0bff017 	ldw	r2,-64(fp)
 4001fd0:	1007d07a 	srai	r3,r2,1
 4001fd4:	008ff834 	movhi	r2,16352
 4001fd8:	1885883a 	add	r2,r3,r2
 4001fdc:	e0bfee15 	stw	r2,-72(fp)
	ix1 =  q1>>1;
 4001fe0:	e0bfed17 	ldw	r2,-76(fp)
 4001fe4:	1004d07a 	srli	r2,r2,1
 4001fe8:	e0bfec15 	stw	r2,-80(fp)
	if ((q&1)==1) ix1 |= sign;
 4001fec:	e0bff017 	ldw	r2,-64(fp)
 4001ff0:	1080004c 	andi	r2,r2,1
 4001ff4:	10000426 	beq	r2,zero,4002008 <__ieee754_sqrt+0x5e0>
 4001ff8:	e0bff317 	ldw	r2,-52(fp)
 4001ffc:	e0ffec17 	ldw	r3,-80(fp)
 4002000:	1884b03a 	or	r2,r3,r2
 4002004:	e0bfec15 	stw	r2,-80(fp)
	ix0 += (m <<20);
 4002008:	e0bff117 	ldw	r2,-60(fp)
 400200c:	1004953a 	slli	r2,r2,20
 4002010:	e0ffee17 	ldw	r3,-72(fp)
 4002014:	1885883a 	add	r2,r3,r2
 4002018:	e0bfee15 	stw	r2,-72(fp)
	INSERT_WORDS(z,ix0,ix1);
 400201c:	e0bfee17 	ldw	r2,-72(fp)
 4002020:	e0bffb15 	stw	r2,-20(fp)
 4002024:	e0bfec17 	ldw	r2,-80(fp)
 4002028:	e0bffa15 	stw	r2,-24(fp)
 400202c:	e0bffa17 	ldw	r2,-24(fp)
 4002030:	e0bff615 	stw	r2,-40(fp)
 4002034:	e0bffb17 	ldw	r2,-20(fp)
 4002038:	e0bff715 	stw	r2,-36(fp)
	return z;
 400203c:	e0bff617 	ldw	r2,-40(fp)
 4002040:	e0fff717 	ldw	r3,-36(fp)
 4002044:	1009883a 	mov	r4,r2
 4002048:	180b883a 	mov	r5,r3
}
 400204c:	2005883a 	mov	r2,r4
 4002050:	2807883a 	mov	r3,r5
 4002054:	e6fffe04 	addi	sp,fp,-8
 4002058:	dfc00317 	ldw	ra,12(sp)
 400205c:	df000217 	ldw	fp,8(sp)
 4002060:	dc400117 	ldw	r17,4(sp)
 4002064:	dc000017 	ldw	r16,0(sp)
 4002068:	dec00404 	addi	sp,sp,16
 400206c:	f800283a 	ret

04002070 <expm1>:
	double expm1(double x)
#else
	double expm1(x)
	double x;
#endif
{
 4002070:	deffcd04 	addi	sp,sp,-204
 4002074:	dfc03215 	stw	ra,200(sp)
 4002078:	df003115 	stw	fp,196(sp)
 400207c:	dc403015 	stw	r17,192(sp)
 4002080:	dc002f15 	stw	r16,188(sp)
 4002084:	df003104 	addi	fp,sp,196
 4002088:	e13ffc15 	stw	r4,-16(fp)
 400208c:	e17ffd15 	stw	r5,-12(fp)
	double y,hi,lo,c,t,e,hxs,hfx,r1;
	__int32_t k,xsb;
	__uint32_t hx;

	GET_HIGH_WORD(hx,x);
 4002090:	e0bffc17 	ldw	r2,-16(fp)
 4002094:	e0bfe815 	stw	r2,-96(fp)
 4002098:	e0bffd17 	ldw	r2,-12(fp)
 400209c:	e0bfe915 	stw	r2,-92(fp)
 40020a0:	e0bfe917 	ldw	r2,-92(fp)
 40020a4:	e0bfd815 	stw	r2,-160(fp)
	xsb = hx&0x80000000;		/* sign bit of x */
 40020a8:	e0bfd817 	ldw	r2,-160(fp)
 40020ac:	10a0002c 	andhi	r2,r2,32768
 40020b0:	e0bfd915 	stw	r2,-156(fp)
	if(xsb==0) y=x; else y= -x;	/* y = |x| */
 40020b4:	e0bfd917 	ldw	r2,-156(fp)
 40020b8:	1000051e 	bne	r2,zero,40020d0 <expm1+0x60>
 40020bc:	e0bffc17 	ldw	r2,-16(fp)
 40020c0:	e0bfcf15 	stw	r2,-196(fp)
 40020c4:	e0bffd17 	ldw	r2,-12(fp)
 40020c8:	e0bfd015 	stw	r2,-192(fp)
 40020cc:	00000506 	br	40020e4 <expm1+0x74>
 40020d0:	e0bffc17 	ldw	r2,-16(fp)
 40020d4:	e0bfcf15 	stw	r2,-196(fp)
 40020d8:	e0bffd17 	ldw	r2,-12(fp)
 40020dc:	10a0003c 	xorhi	r2,r2,32768
 40020e0:	e0bfd015 	stw	r2,-192(fp)
	hx &= 0x7fffffff;		/* high word of |x| */
 40020e4:	e0ffd817 	ldw	r3,-160(fp)
 40020e8:	00a00034 	movhi	r2,32768
 40020ec:	10bfffc4 	addi	r2,r2,-1
 40020f0:	1884703a 	and	r2,r3,r2
 40020f4:	e0bfd815 	stw	r2,-160(fp)

    /* filter out huge and non-finite argument */
	if(hx >= 0x4043687A) {			/* if |x|>=56*ln2 */
 40020f8:	e0ffd817 	ldw	r3,-160(fp)
 40020fc:	009010f4 	movhi	r2,16451
 4002100:	109a1e44 	addi	r2,r2,26745
 4002104:	10c0692e 	bgeu	r2,r3,40022ac <expm1+0x23c>
	    if(hx >= 0x40862E42) {		/* if |x|>=709.78... */
 4002108:	e0ffd817 	ldw	r3,-160(fp)
 400210c:	009021b4 	movhi	r2,16518
 4002110:	108b9044 	addi	r2,r2,11841
 4002114:	10c0402e 	bgeu	r2,r3,4002218 <expm1+0x1a8>
                if(hx>=0x7ff00000) {
 4002118:	e0ffd817 	ldw	r3,-160(fp)
 400211c:	009ffc34 	movhi	r2,32752
 4002120:	18802136 	bltu	r3,r2,40021a8 <expm1+0x138>
		    __uint32_t low;
		    GET_LOW_WORD(low,x);
 4002124:	e0bffc17 	ldw	r2,-16(fp)
 4002128:	e0bfea15 	stw	r2,-88(fp)
 400212c:	e0bffd17 	ldw	r2,-12(fp)
 4002130:	e0bfeb15 	stw	r2,-84(fp)
 4002134:	e0bfea17 	ldw	r2,-88(fp)
 4002138:	e0bfda15 	stw	r2,-152(fp)
		    if(((hx&0xfffff)|low)!=0) 
 400213c:	e0ffd817 	ldw	r3,-160(fp)
 4002140:	00800434 	movhi	r2,16
 4002144:	10bfffc4 	addi	r2,r2,-1
 4002148:	1886703a 	and	r3,r3,r2
 400214c:	e0bfda17 	ldw	r2,-152(fp)
 4002150:	1884b03a 	or	r2,r3,r2
 4002154:	10000c26 	beq	r2,zero,4002188 <expm1+0x118>
		         return x+x; 	 /* NaN */
 4002158:	e0bffc17 	ldw	r2,-16(fp)
 400215c:	e0fffd17 	ldw	r3,-12(fp)
 4002160:	100d883a 	mov	r6,r2
 4002164:	180f883a 	mov	r7,r3
 4002168:	1009883a 	mov	r4,r2
 400216c:	180b883a 	mov	r5,r3
 4002170:	40030600 	call	4003060 <__adddf3>
 4002174:	1009883a 	mov	r4,r2
 4002178:	180b883a 	mov	r5,r3
 400217c:	2005883a 	mov	r2,r4
 4002180:	2807883a 	mov	r3,r5
 4002184:	00032e06 	br	4002e40 <expm1+0xdd0>
		    else return (xsb==0)? x:-1.0;/* exp(+-inf)={inf,-1} */
 4002188:	e0bfd917 	ldw	r2,-156(fp)
 400218c:	1000031e 	bne	r2,zero,400219c <expm1+0x12c>
 4002190:	e0bffc17 	ldw	r2,-16(fp)
 4002194:	e0fffd17 	ldw	r3,-12(fp)
 4002198:	00032906 	br	4002e40 <expm1+0xdd0>
 400219c:	0005883a 	mov	r2,zero
 40021a0:	00effc34 	movhi	r3,49136
 40021a4:	00032606 	br	4002e40 <expm1+0xdd0>
	        }
	        if(x > o_threshold) return huge*huge; /* overflow */
 40021a8:	00bfbeb4 	movhi	r2,65274
 40021ac:	108e7bc4 	addi	r2,r2,14831
 40021b0:	00d021b4 	movhi	r3,16518
 40021b4:	18cb9084 	addi	r3,r3,11842
 40021b8:	100d883a 	mov	r6,r2
 40021bc:	180f883a 	mov	r7,r3
 40021c0:	e13ffc17 	ldw	r4,-16(fp)
 40021c4:	e17ffd17 	ldw	r5,-12(fp)
 40021c8:	400427c0 	call	400427c <__gedf2>
 40021cc:	0080120e 	bge	zero,r2,4002218 <expm1+0x1a8>
 40021d0:	00a20034 	movhi	r2,34816
 40021d4:	109d6704 	addi	r2,r2,30108
 40021d8:	00df8e34 	movhi	r3,32312
 40021dc:	18f90f04 	addi	r3,r3,-7108
 40021e0:	01220034 	movhi	r4,34816
 40021e4:	211d6704 	addi	r4,r4,30108
 40021e8:	015f8e34 	movhi	r5,32312
 40021ec:	29790f04 	addi	r5,r5,-7108
 40021f0:	200d883a 	mov	r6,r4
 40021f4:	280f883a 	mov	r7,r5
 40021f8:	1009883a 	mov	r4,r2
 40021fc:	180b883a 	mov	r5,r3
 4002200:	400444c0 	call	400444c <__muldf3>
 4002204:	1009883a 	mov	r4,r2
 4002208:	180b883a 	mov	r5,r3
 400220c:	2005883a 	mov	r2,r4
 4002210:	2807883a 	mov	r3,r5
 4002214:	00030a06 	br	4002e40 <expm1+0xdd0>
	    }
	    if(xsb!=0) { /* x < -56*ln2, return -1.0 with inexact */
 4002218:	e0bfd917 	ldw	r2,-156(fp)
 400221c:	10002326 	beq	r2,zero,40022ac <expm1+0x23c>
		if(x+tiny<0.0)		/* raise inexact */
 4002220:	00b0be74 	movhi	r2,49913
 4002224:	10bcd644 	addi	r2,r2,-3239
 4002228:	00c06974 	movhi	r3,421
 400222c:	18db87c4 	addi	r3,r3,28191
 4002230:	e1bffc17 	ldw	r6,-16(fp)
 4002234:	e1fffd17 	ldw	r7,-12(fp)
 4002238:	1009883a 	mov	r4,r2
 400223c:	180b883a 	mov	r5,r3
 4002240:	40030600 	call	4003060 <__adddf3>
 4002244:	1009883a 	mov	r4,r2
 4002248:	180b883a 	mov	r5,r3
 400224c:	2005883a 	mov	r2,r4
 4002250:	2807883a 	mov	r3,r5
 4002254:	000d883a 	mov	r6,zero
 4002258:	000f883a 	mov	r7,zero
 400225c:	1009883a 	mov	r4,r2
 4002260:	180b883a 	mov	r5,r3
 4002264:	40043580 	call	4004358 <__ledf2>
 4002268:	1000100e 	bge	r2,zero,40022ac <expm1+0x23c>
		return tiny-one;	/* return -1 */
 400226c:	00b0be74 	movhi	r2,49913
 4002270:	10bcd644 	addi	r2,r2,-3239
 4002274:	00c06974 	movhi	r3,421
 4002278:	18db87c4 	addi	r3,r3,28191
 400227c:	0009883a 	mov	r4,zero
 4002280:	014ffc34 	movhi	r5,16368
 4002284:	200d883a 	mov	r6,r4
 4002288:	280f883a 	mov	r7,r5
 400228c:	1009883a 	mov	r4,r2
 4002290:	180b883a 	mov	r5,r3
 4002294:	4004b640 	call	4004b64 <__subdf3>
 4002298:	1009883a 	mov	r4,r2
 400229c:	180b883a 	mov	r5,r3
 40022a0:	2005883a 	mov	r2,r4
 40022a4:	2807883a 	mov	r3,r5
 40022a8:	0002e506 	br	4002e40 <expm1+0xdd0>
	    }
	}

    /* argument reduction */
	if(hx > 0x3fd62e42) {		/* if  |x| > 0.5 ln2 */ 
 40022ac:	e0ffd817 	ldw	r3,-160(fp)
 40022b0:	008ff5b4 	movhi	r2,16342
 40022b4:	108b9084 	addi	r2,r2,11842
 40022b8:	10c0962e 	bgeu	r2,r3,4002514 <expm1+0x4a4>
	    if(hx < 0x3FF0A2B2) {	/* and |x| < 1.5 ln2 */
 40022bc:	e0ffd817 	ldw	r3,-160(fp)
 40022c0:	008ffc74 	movhi	r2,16369
 40022c4:	10a8ac44 	addi	r2,r2,-23887
 40022c8:	10c02d36 	bltu	r2,r3,4002380 <expm1+0x310>
		if(xsb==0)
 40022cc:	e0bfd917 	ldw	r2,-156(fp)
 40022d0:	1000151e 	bne	r2,zero,4002328 <expm1+0x2b8>
		    {hi = x - ln2_hi; lo =  ln2_lo;  k =  1;}
 40022d4:	00bfb834 	movhi	r2,65248
 40022d8:	00cff9b4 	movhi	r3,16358
 40022dc:	18cb9084 	addi	r3,r3,11842
 40022e0:	100d883a 	mov	r6,r2
 40022e4:	180f883a 	mov	r7,r3
 40022e8:	e13ffc17 	ldw	r4,-16(fp)
 40022ec:	e17ffd17 	ldw	r5,-12(fp)
 40022f0:	4004b640 	call	4004b64 <__subdf3>
 40022f4:	1009883a 	mov	r4,r2
 40022f8:	180b883a 	mov	r5,r3
 40022fc:	e13fd115 	stw	r4,-188(fp)
 4002300:	e17fd215 	stw	r5,-184(fp)
 4002304:	008d5e74 	movhi	r2,13689
 4002308:	108f1d84 	addi	r2,r2,15478
 400230c:	e0bfd315 	stw	r2,-180(fp)
 4002310:	008f7ab4 	movhi	r2,15850
 4002314:	108e7bc4 	addi	r2,r2,14831
 4002318:	e0bfd415 	stw	r2,-176(fp)
 400231c:	00800044 	movi	r2,1
 4002320:	e0bfd715 	stw	r2,-164(fp)
 4002324:	00005f06 	br	40024a4 <expm1+0x434>
		else
		    {hi = x + ln2_hi; lo = -ln2_lo;  k = -1;}
 4002328:	00bfb834 	movhi	r2,65248
 400232c:	00cff9b4 	movhi	r3,16358
 4002330:	18cb9084 	addi	r3,r3,11842
 4002334:	100d883a 	mov	r6,r2
 4002338:	180f883a 	mov	r7,r3
 400233c:	e13ffc17 	ldw	r4,-16(fp)
 4002340:	e17ffd17 	ldw	r5,-12(fp)
 4002344:	40030600 	call	4003060 <__adddf3>
 4002348:	1009883a 	mov	r4,r2
 400234c:	180b883a 	mov	r5,r3
 4002350:	e13fd115 	stw	r4,-188(fp)
 4002354:	e17fd215 	stw	r5,-184(fp)
 4002358:	008d5e74 	movhi	r2,13689
 400235c:	108f1d84 	addi	r2,r2,15478
 4002360:	00cf7ab4 	movhi	r3,15850
 4002364:	18ce7bc4 	addi	r3,r3,14831
 4002368:	e0bfd315 	stw	r2,-180(fp)
 400236c:	18a0003c 	xorhi	r2,r3,32768
 4002370:	e0bfd415 	stw	r2,-176(fp)
 4002374:	00bfffc4 	movi	r2,-1
 4002378:	e0bfd715 	stw	r2,-164(fp)
 400237c:	00004906 	br	40024a4 <expm1+0x434>
	    } else {
		k  = invln2*x+((xsb==0)?0.5:-0.5);
 4002380:	00994b34 	movhi	r2,25900
 4002384:	10a0bf84 	addi	r2,r2,-32002
 4002388:	00cffdf4 	movhi	r3,16375
 400238c:	18c551c4 	addi	r3,r3,5447
 4002390:	e1bffc17 	ldw	r6,-16(fp)
 4002394:	e1fffd17 	ldw	r7,-12(fp)
 4002398:	1009883a 	mov	r4,r2
 400239c:	180b883a 	mov	r5,r3
 40023a0:	400444c0 	call	400444c <__muldf3>
 40023a4:	1009883a 	mov	r4,r2
 40023a8:	180b883a 	mov	r5,r3
 40023ac:	2011883a 	mov	r8,r4
 40023b0:	2813883a 	mov	r9,r5
 40023b4:	e0bfd917 	ldw	r2,-156(fp)
 40023b8:	1000031e 	bne	r2,zero,40023c8 <expm1+0x358>
 40023bc:	0005883a 	mov	r2,zero
 40023c0:	00cff834 	movhi	r3,16352
 40023c4:	00000206 	br	40023d0 <expm1+0x360>
 40023c8:	0005883a 	mov	r2,zero
 40023cc:	00eff834 	movhi	r3,49120
 40023d0:	100d883a 	mov	r6,r2
 40023d4:	180f883a 	mov	r7,r3
 40023d8:	4009883a 	mov	r4,r8
 40023dc:	480b883a 	mov	r5,r9
 40023e0:	40030600 	call	4003060 <__adddf3>
 40023e4:	1009883a 	mov	r4,r2
 40023e8:	180b883a 	mov	r5,r3
 40023ec:	2005883a 	mov	r2,r4
 40023f0:	2807883a 	mov	r3,r5
 40023f4:	1009883a 	mov	r4,r2
 40023f8:	180b883a 	mov	r5,r3
 40023fc:	40054600 	call	4005460 <__fixdfsi>
 4002400:	e0bfd715 	stw	r2,-164(fp)
		t  = k;
 4002404:	e13fd717 	ldw	r4,-164(fp)
 4002408:	40054e00 	call	40054e0 <__floatsidf>
 400240c:	1009883a 	mov	r4,r2
 4002410:	180b883a 	mov	r5,r3
 4002414:	e13fdb15 	stw	r4,-148(fp)
 4002418:	e17fdc15 	stw	r5,-144(fp)
		hi = x - t*ln2_hi;	/* t*ln2_hi is exact here */
 400241c:	00bfb834 	movhi	r2,65248
 4002420:	00cff9b4 	movhi	r3,16358
 4002424:	18cb9084 	addi	r3,r3,11842
 4002428:	e1bfdb17 	ldw	r6,-148(fp)
 400242c:	e1ffdc17 	ldw	r7,-144(fp)
 4002430:	1009883a 	mov	r4,r2
 4002434:	180b883a 	mov	r5,r3
 4002438:	400444c0 	call	400444c <__muldf3>
 400243c:	1009883a 	mov	r4,r2
 4002440:	180b883a 	mov	r5,r3
 4002444:	2005883a 	mov	r2,r4
 4002448:	2807883a 	mov	r3,r5
 400244c:	100d883a 	mov	r6,r2
 4002450:	180f883a 	mov	r7,r3
 4002454:	e13ffc17 	ldw	r4,-16(fp)
 4002458:	e17ffd17 	ldw	r5,-12(fp)
 400245c:	4004b640 	call	4004b64 <__subdf3>
 4002460:	1009883a 	mov	r4,r2
 4002464:	180b883a 	mov	r5,r3
 4002468:	e13fd115 	stw	r4,-188(fp)
 400246c:	e17fd215 	stw	r5,-184(fp)
		lo = t*ln2_lo;
 4002470:	008d5e74 	movhi	r2,13689
 4002474:	108f1d84 	addi	r2,r2,15478
 4002478:	00cf7ab4 	movhi	r3,15850
 400247c:	18ce7bc4 	addi	r3,r3,14831
 4002480:	100d883a 	mov	r6,r2
 4002484:	180f883a 	mov	r7,r3
 4002488:	e13fdb17 	ldw	r4,-148(fp)
 400248c:	e17fdc17 	ldw	r5,-144(fp)
 4002490:	400444c0 	call	400444c <__muldf3>
 4002494:	1009883a 	mov	r4,r2
 4002498:	180b883a 	mov	r5,r3
 400249c:	e13fd315 	stw	r4,-180(fp)
 40024a0:	e17fd415 	stw	r5,-176(fp)
	    }
	    x  = hi - lo;
 40024a4:	e1bfd317 	ldw	r6,-180(fp)
 40024a8:	e1ffd417 	ldw	r7,-176(fp)
 40024ac:	e13fd117 	ldw	r4,-188(fp)
 40024b0:	e17fd217 	ldw	r5,-184(fp)
 40024b4:	4004b640 	call	4004b64 <__subdf3>
 40024b8:	1009883a 	mov	r4,r2
 40024bc:	180b883a 	mov	r5,r3
 40024c0:	e13ffc15 	stw	r4,-16(fp)
 40024c4:	e17ffd15 	stw	r5,-12(fp)
	    c  = (hi-x)-lo;
 40024c8:	e1bffc17 	ldw	r6,-16(fp)
 40024cc:	e1fffd17 	ldw	r7,-12(fp)
 40024d0:	e13fd117 	ldw	r4,-188(fp)
 40024d4:	e17fd217 	ldw	r5,-184(fp)
 40024d8:	4004b640 	call	4004b64 <__subdf3>
 40024dc:	1009883a 	mov	r4,r2
 40024e0:	180b883a 	mov	r5,r3
 40024e4:	2005883a 	mov	r2,r4
 40024e8:	2807883a 	mov	r3,r5
 40024ec:	e1bfd317 	ldw	r6,-180(fp)
 40024f0:	e1ffd417 	ldw	r7,-176(fp)
 40024f4:	1009883a 	mov	r4,r2
 40024f8:	180b883a 	mov	r5,r3
 40024fc:	4004b640 	call	4004b64 <__subdf3>
 4002500:	1009883a 	mov	r4,r2
 4002504:	180b883a 	mov	r5,r3
 4002508:	e13fd515 	stw	r4,-172(fp)
 400250c:	e17fd615 	stw	r5,-168(fp)
 4002510:	00003106 	br	40025d8 <expm1+0x568>
	} 
	else if(hx < 0x3c900000) {  	/* when |x|<2**-54, return x */
 4002514:	e0ffd817 	ldw	r3,-160(fp)
 4002518:	008f2434 	movhi	r2,15504
 400251c:	18802d2e 	bgeu	r3,r2,40025d4 <expm1+0x564>
	    t = huge+x;	/* return x with inexact flags when x!=0 */
 4002520:	00a20034 	movhi	r2,34816
 4002524:	109d6704 	addi	r2,r2,30108
 4002528:	00df8e34 	movhi	r3,32312
 400252c:	18f90f04 	addi	r3,r3,-7108
 4002530:	e1bffc17 	ldw	r6,-16(fp)
 4002534:	e1fffd17 	ldw	r7,-12(fp)
 4002538:	1009883a 	mov	r4,r2
 400253c:	180b883a 	mov	r5,r3
 4002540:	40030600 	call	4003060 <__adddf3>
 4002544:	1009883a 	mov	r4,r2
 4002548:	180b883a 	mov	r5,r3
 400254c:	e13fdb15 	stw	r4,-148(fp)
 4002550:	e17fdc15 	stw	r5,-144(fp)
	    return x - (t-(huge+x));	
 4002554:	00a20034 	movhi	r2,34816
 4002558:	109d6704 	addi	r2,r2,30108
 400255c:	00df8e34 	movhi	r3,32312
 4002560:	18f90f04 	addi	r3,r3,-7108
 4002564:	e1bffc17 	ldw	r6,-16(fp)
 4002568:	e1fffd17 	ldw	r7,-12(fp)
 400256c:	1009883a 	mov	r4,r2
 4002570:	180b883a 	mov	r5,r3
 4002574:	40030600 	call	4003060 <__adddf3>
 4002578:	1009883a 	mov	r4,r2
 400257c:	180b883a 	mov	r5,r3
 4002580:	2005883a 	mov	r2,r4
 4002584:	2807883a 	mov	r3,r5
 4002588:	100d883a 	mov	r6,r2
 400258c:	180f883a 	mov	r7,r3
 4002590:	e13fdb17 	ldw	r4,-148(fp)
 4002594:	e17fdc17 	ldw	r5,-144(fp)
 4002598:	4004b640 	call	4004b64 <__subdf3>
 400259c:	1009883a 	mov	r4,r2
 40025a0:	180b883a 	mov	r5,r3
 40025a4:	2005883a 	mov	r2,r4
 40025a8:	2807883a 	mov	r3,r5
 40025ac:	100d883a 	mov	r6,r2
 40025b0:	180f883a 	mov	r7,r3
 40025b4:	e13ffc17 	ldw	r4,-16(fp)
 40025b8:	e17ffd17 	ldw	r5,-12(fp)
 40025bc:	4004b640 	call	4004b64 <__subdf3>
 40025c0:	1009883a 	mov	r4,r2
 40025c4:	180b883a 	mov	r5,r3
 40025c8:	2005883a 	mov	r2,r4
 40025cc:	2807883a 	mov	r3,r5
 40025d0:	00021b06 	br	4002e40 <expm1+0xdd0>
	}
	else k = 0;
 40025d4:	e03fd715 	stw	zero,-164(fp)

    /* x is now in primary range */
	hfx = 0.5*x;
 40025d8:	000d883a 	mov	r6,zero
 40025dc:	01cff834 	movhi	r7,16352
 40025e0:	e13ffc17 	ldw	r4,-16(fp)
 40025e4:	e17ffd17 	ldw	r5,-12(fp)
 40025e8:	400444c0 	call	400444c <__muldf3>
 40025ec:	1009883a 	mov	r4,r2
 40025f0:	180b883a 	mov	r5,r3
 40025f4:	e13fdd15 	stw	r4,-140(fp)
 40025f8:	e17fde15 	stw	r5,-136(fp)
	hxs = x*hfx;
 40025fc:	e1bfdd17 	ldw	r6,-140(fp)
 4002600:	e1ffde17 	ldw	r7,-136(fp)
 4002604:	e13ffc17 	ldw	r4,-16(fp)
 4002608:	e17ffd17 	ldw	r5,-12(fp)
 400260c:	400444c0 	call	400444c <__muldf3>
 4002610:	1009883a 	mov	r4,r2
 4002614:	180b883a 	mov	r5,r3
 4002618:	e13fdf15 	stw	r4,-132(fp)
 400261c:	e17fe015 	stw	r5,-128(fp)
	r1 = one+hxs*(Q1+hxs*(Q2+hxs*(Q3+hxs*(Q4+hxs*Q5))));
 4002620:	009b82b4 	movhi	r2,28170
 4002624:	10b0cb44 	addi	r2,r2,-15571
 4002628:	00efa2f4 	movhi	r3,48779
 400262c:	18ff6dc4 	addi	r3,r3,-585
 4002630:	e1bfdf17 	ldw	r6,-132(fp)
 4002634:	e1ffe017 	ldw	r7,-128(fp)
 4002638:	1009883a 	mov	r4,r2
 400263c:	180b883a 	mov	r5,r3
 4002640:	400444c0 	call	400444c <__muldf3>
 4002644:	1009883a 	mov	r4,r2
 4002648:	180b883a 	mov	r5,r3
 400264c:	2011883a 	mov	r8,r4
 4002650:	2813883a 	mov	r9,r5
 4002654:	00a1b9b4 	movhi	r2,34534
 4002658:	10948e44 	addi	r2,r2,21049
 400265c:	00cfb474 	movhi	r3,16081
 4002660:	18f3f284 	addi	r3,r3,-12342
 4002664:	100d883a 	mov	r6,r2
 4002668:	180f883a 	mov	r7,r3
 400266c:	4009883a 	mov	r4,r8
 4002670:	480b883a 	mov	r5,r9
 4002674:	40030600 	call	4003060 <__adddf3>
 4002678:	1009883a 	mov	r4,r2
 400267c:	180b883a 	mov	r5,r3
 4002680:	2005883a 	mov	r2,r4
 4002684:	2807883a 	mov	r3,r5
 4002688:	e1bfdf17 	ldw	r6,-132(fp)
 400268c:	e1ffe017 	ldw	r7,-128(fp)
 4002690:	1009883a 	mov	r4,r2
 4002694:	180b883a 	mov	r5,r3
 4002698:	400444c0 	call	400444c <__muldf3>
 400269c:	1009883a 	mov	r4,r2
 40026a0:	180b883a 	mov	r5,r3
 40026a4:	2011883a 	mov	r8,r4
 40026a8:	2813883a 	mov	r9,r5
 40026ac:	00a7aaf4 	movhi	r2,40619
 40026b0:	10b6edc4 	addi	r2,r2,-9289
 40026b4:	00efc574 	movhi	r3,48917
 40026b8:	18f38644 	addi	r3,r3,-12775
 40026bc:	100d883a 	mov	r6,r2
 40026c0:	180f883a 	mov	r7,r3
 40026c4:	4009883a 	mov	r4,r8
 40026c8:	480b883a 	mov	r5,r9
 40026cc:	40030600 	call	4003060 <__adddf3>
 40026d0:	1009883a 	mov	r4,r2
 40026d4:	180b883a 	mov	r5,r3
 40026d8:	2005883a 	mov	r2,r4
 40026dc:	2807883a 	mov	r3,r5
 40026e0:	e1bfdf17 	ldw	r6,-132(fp)
 40026e4:	e1ffe017 	ldw	r7,-128(fp)
 40026e8:	1009883a 	mov	r4,r2
 40026ec:	180b883a 	mov	r5,r3
 40026f0:	400444c0 	call	400444c <__muldf3>
 40026f4:	1009883a 	mov	r4,r2
 40026f8:	180b883a 	mov	r5,r3
 40026fc:	2011883a 	mov	r8,r4
 4002700:	2813883a 	mov	r9,r5
 4002704:	00867fb4 	movhi	r2,6654
 4002708:	10956144 	addi	r2,r2,21893
 400270c:	00cfd6b4 	movhi	r3,16218
 4002710:	18c06804 	addi	r3,r3,416
 4002714:	100d883a 	mov	r6,r2
 4002718:	180f883a 	mov	r7,r3
 400271c:	4009883a 	mov	r4,r8
 4002720:	480b883a 	mov	r5,r9
 4002724:	40030600 	call	4003060 <__adddf3>
 4002728:	1009883a 	mov	r4,r2
 400272c:	180b883a 	mov	r5,r3
 4002730:	2005883a 	mov	r2,r4
 4002734:	2807883a 	mov	r3,r5
 4002738:	e1bfdf17 	ldw	r6,-132(fp)
 400273c:	e1ffe017 	ldw	r7,-128(fp)
 4002740:	1009883a 	mov	r4,r2
 4002744:	180b883a 	mov	r5,r3
 4002748:	400444c0 	call	400444c <__muldf3>
 400274c:	1009883a 	mov	r4,r2
 4002750:	180b883a 	mov	r5,r3
 4002754:	2011883a 	mov	r8,r4
 4002758:	2813883a 	mov	r9,r5
 400275c:	00844474 	movhi	r2,4369
 4002760:	10843d04 	addi	r2,r2,4340
 4002764:	00efe874 	movhi	r3,49057
 4002768:	18c44444 	addi	r3,r3,4369
 400276c:	100d883a 	mov	r6,r2
 4002770:	180f883a 	mov	r7,r3
 4002774:	4009883a 	mov	r4,r8
 4002778:	480b883a 	mov	r5,r9
 400277c:	40030600 	call	4003060 <__adddf3>
 4002780:	1009883a 	mov	r4,r2
 4002784:	180b883a 	mov	r5,r3
 4002788:	2005883a 	mov	r2,r4
 400278c:	2807883a 	mov	r3,r5
 4002790:	e1bfdf17 	ldw	r6,-132(fp)
 4002794:	e1ffe017 	ldw	r7,-128(fp)
 4002798:	1009883a 	mov	r4,r2
 400279c:	180b883a 	mov	r5,r3
 40027a0:	400444c0 	call	400444c <__muldf3>
 40027a4:	1009883a 	mov	r4,r2
 40027a8:	180b883a 	mov	r5,r3
 40027ac:	2011883a 	mov	r8,r4
 40027b0:	2813883a 	mov	r9,r5
 40027b4:	0005883a 	mov	r2,zero
 40027b8:	00cffc34 	movhi	r3,16368
 40027bc:	100d883a 	mov	r6,r2
 40027c0:	180f883a 	mov	r7,r3
 40027c4:	4009883a 	mov	r4,r8
 40027c8:	480b883a 	mov	r5,r9
 40027cc:	40030600 	call	4003060 <__adddf3>
 40027d0:	1009883a 	mov	r4,r2
 40027d4:	180b883a 	mov	r5,r3
 40027d8:	e13fe115 	stw	r4,-124(fp)
 40027dc:	e17fe215 	stw	r5,-120(fp)
	t  = 3.0-r1*hfx;
 40027e0:	e1bfdd17 	ldw	r6,-140(fp)
 40027e4:	e1ffde17 	ldw	r7,-136(fp)
 40027e8:	e13fe117 	ldw	r4,-124(fp)
 40027ec:	e17fe217 	ldw	r5,-120(fp)
 40027f0:	400444c0 	call	400444c <__muldf3>
 40027f4:	1009883a 	mov	r4,r2
 40027f8:	180b883a 	mov	r5,r3
 40027fc:	2005883a 	mov	r2,r4
 4002800:	2807883a 	mov	r3,r5
 4002804:	100d883a 	mov	r6,r2
 4002808:	180f883a 	mov	r7,r3
 400280c:	0009883a 	mov	r4,zero
 4002810:	01500234 	movhi	r5,16392
 4002814:	4004b640 	call	4004b64 <__subdf3>
 4002818:	1009883a 	mov	r4,r2
 400281c:	180b883a 	mov	r5,r3
 4002820:	e13fdb15 	stw	r4,-148(fp)
 4002824:	e17fdc15 	stw	r5,-144(fp)
	e  = hxs*((r1-t)/(6.0 - x*t));
 4002828:	e1bfdb17 	ldw	r6,-148(fp)
 400282c:	e1ffdc17 	ldw	r7,-144(fp)
 4002830:	e13fe117 	ldw	r4,-124(fp)
 4002834:	e17fe217 	ldw	r5,-120(fp)
 4002838:	4004b640 	call	4004b64 <__subdf3>
 400283c:	1009883a 	mov	r4,r2
 4002840:	180b883a 	mov	r5,r3
 4002844:	2021883a 	mov	r16,r4
 4002848:	2823883a 	mov	r17,r5
 400284c:	e1bfdb17 	ldw	r6,-148(fp)
 4002850:	e1ffdc17 	ldw	r7,-144(fp)
 4002854:	e13ffc17 	ldw	r4,-16(fp)
 4002858:	e17ffd17 	ldw	r5,-12(fp)
 400285c:	400444c0 	call	400444c <__muldf3>
 4002860:	1009883a 	mov	r4,r2
 4002864:	180b883a 	mov	r5,r3
 4002868:	2005883a 	mov	r2,r4
 400286c:	2807883a 	mov	r3,r5
 4002870:	100d883a 	mov	r6,r2
 4002874:	180f883a 	mov	r7,r3
 4002878:	0009883a 	mov	r4,zero
 400287c:	01500634 	movhi	r5,16408
 4002880:	4004b640 	call	4004b64 <__subdf3>
 4002884:	1009883a 	mov	r4,r2
 4002888:	180b883a 	mov	r5,r3
 400288c:	2005883a 	mov	r2,r4
 4002890:	2807883a 	mov	r3,r5
 4002894:	100d883a 	mov	r6,r2
 4002898:	180f883a 	mov	r7,r3
 400289c:	8009883a 	mov	r4,r16
 40028a0:	880b883a 	mov	r5,r17
 40028a4:	400390c0 	call	400390c <__divdf3>
 40028a8:	1009883a 	mov	r4,r2
 40028ac:	180b883a 	mov	r5,r3
 40028b0:	2005883a 	mov	r2,r4
 40028b4:	2807883a 	mov	r3,r5
 40028b8:	e1bfdf17 	ldw	r6,-132(fp)
 40028bc:	e1ffe017 	ldw	r7,-128(fp)
 40028c0:	1009883a 	mov	r4,r2
 40028c4:	180b883a 	mov	r5,r3
 40028c8:	400444c0 	call	400444c <__muldf3>
 40028cc:	1009883a 	mov	r4,r2
 40028d0:	180b883a 	mov	r5,r3
 40028d4:	e13fe315 	stw	r4,-116(fp)
 40028d8:	e17fe415 	stw	r5,-112(fp)
	if(k==0) return x - (x*e-hxs);		/* c is 0 */
 40028dc:	e0bfd717 	ldw	r2,-164(fp)
 40028e0:	10001c1e 	bne	r2,zero,4002954 <expm1+0x8e4>
 40028e4:	e1bfe317 	ldw	r6,-116(fp)
 40028e8:	e1ffe417 	ldw	r7,-112(fp)
 40028ec:	e13ffc17 	ldw	r4,-16(fp)
 40028f0:	e17ffd17 	ldw	r5,-12(fp)
 40028f4:	400444c0 	call	400444c <__muldf3>
 40028f8:	1009883a 	mov	r4,r2
 40028fc:	180b883a 	mov	r5,r3
 4002900:	2005883a 	mov	r2,r4
 4002904:	2807883a 	mov	r3,r5
 4002908:	e1bfdf17 	ldw	r6,-132(fp)
 400290c:	e1ffe017 	ldw	r7,-128(fp)
 4002910:	1009883a 	mov	r4,r2
 4002914:	180b883a 	mov	r5,r3
 4002918:	4004b640 	call	4004b64 <__subdf3>
 400291c:	1009883a 	mov	r4,r2
 4002920:	180b883a 	mov	r5,r3
 4002924:	2005883a 	mov	r2,r4
 4002928:	2807883a 	mov	r3,r5
 400292c:	100d883a 	mov	r6,r2
 4002930:	180f883a 	mov	r7,r3
 4002934:	e13ffc17 	ldw	r4,-16(fp)
 4002938:	e17ffd17 	ldw	r5,-12(fp)
 400293c:	4004b640 	call	4004b64 <__subdf3>
 4002940:	1009883a 	mov	r4,r2
 4002944:	180b883a 	mov	r5,r3
 4002948:	2005883a 	mov	r2,r4
 400294c:	2807883a 	mov	r3,r5
 4002950:	00013b06 	br	4002e40 <expm1+0xdd0>
	else {
	    e  = (x*(e-c)-c);
 4002954:	e1bfd517 	ldw	r6,-172(fp)
 4002958:	e1ffd617 	ldw	r7,-168(fp)
 400295c:	e13fe317 	ldw	r4,-116(fp)
 4002960:	e17fe417 	ldw	r5,-112(fp)
 4002964:	4004b640 	call	4004b64 <__subdf3>
 4002968:	1009883a 	mov	r4,r2
 400296c:	180b883a 	mov	r5,r3
 4002970:	2005883a 	mov	r2,r4
 4002974:	2807883a 	mov	r3,r5
 4002978:	e1bffc17 	ldw	r6,-16(fp)
 400297c:	e1fffd17 	ldw	r7,-12(fp)
 4002980:	1009883a 	mov	r4,r2
 4002984:	180b883a 	mov	r5,r3
 4002988:	400444c0 	call	400444c <__muldf3>
 400298c:	1009883a 	mov	r4,r2
 4002990:	180b883a 	mov	r5,r3
 4002994:	2005883a 	mov	r2,r4
 4002998:	2807883a 	mov	r3,r5
 400299c:	e1bfd517 	ldw	r6,-172(fp)
 40029a0:	e1ffd617 	ldw	r7,-168(fp)
 40029a4:	1009883a 	mov	r4,r2
 40029a8:	180b883a 	mov	r5,r3
 40029ac:	4004b640 	call	4004b64 <__subdf3>
 40029b0:	1009883a 	mov	r4,r2
 40029b4:	180b883a 	mov	r5,r3
 40029b8:	e13fe315 	stw	r4,-116(fp)
 40029bc:	e17fe415 	stw	r5,-112(fp)
	    e -= hxs;
 40029c0:	e1bfdf17 	ldw	r6,-132(fp)
 40029c4:	e1ffe017 	ldw	r7,-128(fp)
 40029c8:	e13fe317 	ldw	r4,-116(fp)
 40029cc:	e17fe417 	ldw	r5,-112(fp)
 40029d0:	4004b640 	call	4004b64 <__subdf3>
 40029d4:	1009883a 	mov	r4,r2
 40029d8:	180b883a 	mov	r5,r3
 40029dc:	e13fe315 	stw	r4,-116(fp)
 40029e0:	e17fe415 	stw	r5,-112(fp)
	    if(k== -1) return 0.5*(x-e)-0.5;
 40029e4:	e0bfd717 	ldw	r2,-164(fp)
 40029e8:	10bfffd8 	cmpnei	r2,r2,-1
 40029ec:	10001c1e 	bne	r2,zero,4002a60 <expm1+0x9f0>
 40029f0:	e1bfe317 	ldw	r6,-116(fp)
 40029f4:	e1ffe417 	ldw	r7,-112(fp)
 40029f8:	e13ffc17 	ldw	r4,-16(fp)
 40029fc:	e17ffd17 	ldw	r5,-12(fp)
 4002a00:	4004b640 	call	4004b64 <__subdf3>
 4002a04:	1009883a 	mov	r4,r2
 4002a08:	180b883a 	mov	r5,r3
 4002a0c:	2005883a 	mov	r2,r4
 4002a10:	2807883a 	mov	r3,r5
 4002a14:	000d883a 	mov	r6,zero
 4002a18:	01cff834 	movhi	r7,16352
 4002a1c:	1009883a 	mov	r4,r2
 4002a20:	180b883a 	mov	r5,r3
 4002a24:	400444c0 	call	400444c <__muldf3>
 4002a28:	1009883a 	mov	r4,r2
 4002a2c:	180b883a 	mov	r5,r3
 4002a30:	2005883a 	mov	r2,r4
 4002a34:	2807883a 	mov	r3,r5
 4002a38:	000d883a 	mov	r6,zero
 4002a3c:	01cff834 	movhi	r7,16352
 4002a40:	1009883a 	mov	r4,r2
 4002a44:	180b883a 	mov	r5,r3
 4002a48:	4004b640 	call	4004b64 <__subdf3>
 4002a4c:	1009883a 	mov	r4,r2
 4002a50:	180b883a 	mov	r5,r3
 4002a54:	2005883a 	mov	r2,r4
 4002a58:	2807883a 	mov	r3,r5
 4002a5c:	0000f806 	br	4002e40 <expm1+0xdd0>
          if(k==1) {
 4002a60:	e0bfd717 	ldw	r2,-164(fp)
 4002a64:	10800058 	cmpnei	r2,r2,1
 4002a68:	1000401e 	bne	r2,zero,4002b6c <expm1+0xafc>
	       	if(x < -0.25) return -2.0*(e-(x+0.5));
 4002a6c:	000d883a 	mov	r6,zero
 4002a70:	01eff434 	movhi	r7,49104
 4002a74:	e13ffc17 	ldw	r4,-16(fp)
 4002a78:	e17ffd17 	ldw	r5,-12(fp)
 4002a7c:	40043580 	call	4004358 <__ledf2>
 4002a80:	10001c0e 	bge	r2,zero,4002af4 <expm1+0xa84>
 4002a84:	000d883a 	mov	r6,zero
 4002a88:	01cff834 	movhi	r7,16352
 4002a8c:	e13ffc17 	ldw	r4,-16(fp)
 4002a90:	e17ffd17 	ldw	r5,-12(fp)
 4002a94:	40030600 	call	4003060 <__adddf3>
 4002a98:	1009883a 	mov	r4,r2
 4002a9c:	180b883a 	mov	r5,r3
 4002aa0:	2005883a 	mov	r2,r4
 4002aa4:	2807883a 	mov	r3,r5
 4002aa8:	100d883a 	mov	r6,r2
 4002aac:	180f883a 	mov	r7,r3
 4002ab0:	e13fe317 	ldw	r4,-116(fp)
 4002ab4:	e17fe417 	ldw	r5,-112(fp)
 4002ab8:	4004b640 	call	4004b64 <__subdf3>
 4002abc:	1009883a 	mov	r4,r2
 4002ac0:	180b883a 	mov	r5,r3
 4002ac4:	2005883a 	mov	r2,r4
 4002ac8:	2807883a 	mov	r3,r5
 4002acc:	000d883a 	mov	r6,zero
 4002ad0:	01f00034 	movhi	r7,49152
 4002ad4:	1009883a 	mov	r4,r2
 4002ad8:	180b883a 	mov	r5,r3
 4002adc:	400444c0 	call	400444c <__muldf3>
 4002ae0:	1009883a 	mov	r4,r2
 4002ae4:	180b883a 	mov	r5,r3
 4002ae8:	2005883a 	mov	r2,r4
 4002aec:	2807883a 	mov	r3,r5
 4002af0:	0000d306 	br	4002e40 <expm1+0xdd0>
	       	else 	      return  one+2.0*(x-e);
 4002af4:	e1bfe317 	ldw	r6,-116(fp)
 4002af8:	e1ffe417 	ldw	r7,-112(fp)
 4002afc:	e13ffc17 	ldw	r4,-16(fp)
 4002b00:	e17ffd17 	ldw	r5,-12(fp)
 4002b04:	4004b640 	call	4004b64 <__subdf3>
 4002b08:	1009883a 	mov	r4,r2
 4002b0c:	180b883a 	mov	r5,r3
 4002b10:	2005883a 	mov	r2,r4
 4002b14:	2807883a 	mov	r3,r5
 4002b18:	100d883a 	mov	r6,r2
 4002b1c:	180f883a 	mov	r7,r3
 4002b20:	1009883a 	mov	r4,r2
 4002b24:	180b883a 	mov	r5,r3
 4002b28:	40030600 	call	4003060 <__adddf3>
 4002b2c:	1009883a 	mov	r4,r2
 4002b30:	180b883a 	mov	r5,r3
 4002b34:	2011883a 	mov	r8,r4
 4002b38:	2813883a 	mov	r9,r5
 4002b3c:	0005883a 	mov	r2,zero
 4002b40:	00cffc34 	movhi	r3,16368
 4002b44:	100d883a 	mov	r6,r2
 4002b48:	180f883a 	mov	r7,r3
 4002b4c:	4009883a 	mov	r4,r8
 4002b50:	480b883a 	mov	r5,r9
 4002b54:	40030600 	call	4003060 <__adddf3>
 4002b58:	1009883a 	mov	r4,r2
 4002b5c:	180b883a 	mov	r5,r3
 4002b60:	2005883a 	mov	r2,r4
 4002b64:	2807883a 	mov	r3,r5
 4002b68:	0000b506 	br	4002e40 <expm1+0xdd0>
          }
	    if (k <= -2 || k>56) {   /* suffice to return exp(x)-1 */
 4002b6c:	e0bfd717 	ldw	r2,-164(fp)
 4002b70:	10bfffd0 	cmplti	r2,r2,-1
 4002b74:	1000031e 	bne	r2,zero,4002b84 <expm1+0xb14>
 4002b78:	e0bfd717 	ldw	r2,-164(fp)
 4002b7c:	10800e50 	cmplti	r2,r2,57
 4002b80:	1000341e 	bne	r2,zero,4002c54 <expm1+0xbe4>
	        __uint32_t high;
	        y = one-(e-x);
 4002b84:	0021883a 	mov	r16,zero
 4002b88:	044ffc34 	movhi	r17,16368
 4002b8c:	e1bffc17 	ldw	r6,-16(fp)
 4002b90:	e1fffd17 	ldw	r7,-12(fp)
 4002b94:	e13fe317 	ldw	r4,-116(fp)
 4002b98:	e17fe417 	ldw	r5,-112(fp)
 4002b9c:	4004b640 	call	4004b64 <__subdf3>
 4002ba0:	1009883a 	mov	r4,r2
 4002ba4:	180b883a 	mov	r5,r3
 4002ba8:	2005883a 	mov	r2,r4
 4002bac:	2807883a 	mov	r3,r5
 4002bb0:	100d883a 	mov	r6,r2
 4002bb4:	180f883a 	mov	r7,r3
 4002bb8:	8009883a 	mov	r4,r16
 4002bbc:	880b883a 	mov	r5,r17
 4002bc0:	4004b640 	call	4004b64 <__subdf3>
 4002bc4:	1009883a 	mov	r4,r2
 4002bc8:	180b883a 	mov	r5,r3
 4002bcc:	e13fcf15 	stw	r4,-196(fp)
 4002bd0:	e17fd015 	stw	r5,-192(fp)
		GET_HIGH_WORD(high,y);
 4002bd4:	e0bfcf17 	ldw	r2,-196(fp)
 4002bd8:	e0bfec15 	stw	r2,-80(fp)
 4002bdc:	e0bfd017 	ldw	r2,-192(fp)
 4002be0:	e0bfed15 	stw	r2,-76(fp)
 4002be4:	e0bfed17 	ldw	r2,-76(fp)
 4002be8:	e0bfe715 	stw	r2,-100(fp)
		SET_HIGH_WORD(y,high+(k<<20));	/* add k to y's exponent */
 4002bec:	e0bfcf17 	ldw	r2,-196(fp)
 4002bf0:	e0bfee15 	stw	r2,-72(fp)
 4002bf4:	e0bfd017 	ldw	r2,-192(fp)
 4002bf8:	e0bfef15 	stw	r2,-68(fp)
 4002bfc:	e0bfd717 	ldw	r2,-164(fp)
 4002c00:	1004953a 	slli	r2,r2,20
 4002c04:	1007883a 	mov	r3,r2
 4002c08:	e0bfe717 	ldw	r2,-100(fp)
 4002c0c:	1885883a 	add	r2,r3,r2
 4002c10:	e0bfef15 	stw	r2,-68(fp)
 4002c14:	e0bfee17 	ldw	r2,-72(fp)
 4002c18:	e0bfcf15 	stw	r2,-196(fp)
 4002c1c:	e0bfef17 	ldw	r2,-68(fp)
 4002c20:	e0bfd015 	stw	r2,-192(fp)
	        return y-one;
 4002c24:	0005883a 	mov	r2,zero
 4002c28:	00cffc34 	movhi	r3,16368
 4002c2c:	100d883a 	mov	r6,r2
 4002c30:	180f883a 	mov	r7,r3
 4002c34:	e13fcf17 	ldw	r4,-196(fp)
 4002c38:	e17fd017 	ldw	r5,-192(fp)
 4002c3c:	4004b640 	call	4004b64 <__subdf3>
 4002c40:	1009883a 	mov	r4,r2
 4002c44:	180b883a 	mov	r5,r3
 4002c48:	2005883a 	mov	r2,r4
 4002c4c:	2807883a 	mov	r3,r5
 4002c50:	00007b06 	br	4002e40 <expm1+0xdd0>
	    }
	    t = one;
 4002c54:	e03fdb15 	stw	zero,-148(fp)
 4002c58:	008ffc34 	movhi	r2,16368
 4002c5c:	e0bfdc15 	stw	r2,-144(fp)
	    if(k<20) {
 4002c60:	e0bfd717 	ldw	r2,-164(fp)
 4002c64:	10800508 	cmpgei	r2,r2,20
 4002c68:	1000351e 	bne	r2,zero,4002d40 <expm1+0xcd0>
	        __uint32_t high;
	        SET_HIGH_WORD(t,0x3ff00000 - (0x200000>>k));  /* t=1-2^-k */
 4002c6c:	e0bfdb17 	ldw	r2,-148(fp)
 4002c70:	e0bff015 	stw	r2,-64(fp)
 4002c74:	e0bfdc17 	ldw	r2,-144(fp)
 4002c78:	e0bff115 	stw	r2,-60(fp)
 4002c7c:	00c00834 	movhi	r3,32
 4002c80:	e0bfd717 	ldw	r2,-164(fp)
 4002c84:	1885d83a 	sra	r2,r3,r2
 4002c88:	00cffc34 	movhi	r3,16368
 4002c8c:	1885c83a 	sub	r2,r3,r2
 4002c90:	e0bff115 	stw	r2,-60(fp)
 4002c94:	e0bff017 	ldw	r2,-64(fp)
 4002c98:	e0bfdb15 	stw	r2,-148(fp)
 4002c9c:	e0bff117 	ldw	r2,-60(fp)
 4002ca0:	e0bfdc15 	stw	r2,-144(fp)
	       	y = t-(e-x);
 4002ca4:	e1bffc17 	ldw	r6,-16(fp)
 4002ca8:	e1fffd17 	ldw	r7,-12(fp)
 4002cac:	e13fe317 	ldw	r4,-116(fp)
 4002cb0:	e17fe417 	ldw	r5,-112(fp)
 4002cb4:	4004b640 	call	4004b64 <__subdf3>
 4002cb8:	1009883a 	mov	r4,r2
 4002cbc:	180b883a 	mov	r5,r3
 4002cc0:	2005883a 	mov	r2,r4
 4002cc4:	2807883a 	mov	r3,r5
 4002cc8:	100d883a 	mov	r6,r2
 4002ccc:	180f883a 	mov	r7,r3
 4002cd0:	e13fdb17 	ldw	r4,-148(fp)
 4002cd4:	e17fdc17 	ldw	r5,-144(fp)
 4002cd8:	4004b640 	call	4004b64 <__subdf3>
 4002cdc:	1009883a 	mov	r4,r2
 4002ce0:	180b883a 	mov	r5,r3
 4002ce4:	e13fcf15 	stw	r4,-196(fp)
 4002ce8:	e17fd015 	stw	r5,-192(fp)
		GET_HIGH_WORD(high,y);
 4002cec:	e0bfcf17 	ldw	r2,-196(fp)
 4002cf0:	e0bff215 	stw	r2,-56(fp)
 4002cf4:	e0bfd017 	ldw	r2,-192(fp)
 4002cf8:	e0bff315 	stw	r2,-52(fp)
 4002cfc:	e0bff317 	ldw	r2,-52(fp)
 4002d00:	e0bfe515 	stw	r2,-108(fp)
		SET_HIGH_WORD(y,high+(k<<20));	/* add k to y's exponent */
 4002d04:	e0bfcf17 	ldw	r2,-196(fp)
 4002d08:	e0bff415 	stw	r2,-48(fp)
 4002d0c:	e0bfd017 	ldw	r2,-192(fp)
 4002d10:	e0bff515 	stw	r2,-44(fp)
 4002d14:	e0bfd717 	ldw	r2,-164(fp)
 4002d18:	1004953a 	slli	r2,r2,20
 4002d1c:	1007883a 	mov	r3,r2
 4002d20:	e0bfe517 	ldw	r2,-108(fp)
 4002d24:	1885883a 	add	r2,r3,r2
 4002d28:	e0bff515 	stw	r2,-44(fp)
 4002d2c:	e0bff417 	ldw	r2,-48(fp)
 4002d30:	e0bfcf15 	stw	r2,-196(fp)
 4002d34:	e0bff517 	ldw	r2,-44(fp)
 4002d38:	e0bfd015 	stw	r2,-192(fp)
 4002d3c:	00003e06 	br	4002e38 <expm1+0xdc8>
	   } else {
	        __uint32_t high;
		SET_HIGH_WORD(t,((0x3ff-k)<<20));	/* 2^-k */
 4002d40:	e0bfdb17 	ldw	r2,-148(fp)
 4002d44:	e0bff615 	stw	r2,-40(fp)
 4002d48:	e0bfdc17 	ldw	r2,-144(fp)
 4002d4c:	e0bff715 	stw	r2,-36(fp)
 4002d50:	00c0ffc4 	movi	r3,1023
 4002d54:	e0bfd717 	ldw	r2,-164(fp)
 4002d58:	1885c83a 	sub	r2,r3,r2
 4002d5c:	1004953a 	slli	r2,r2,20
 4002d60:	e0bff715 	stw	r2,-36(fp)
 4002d64:	e0bff617 	ldw	r2,-40(fp)
 4002d68:	e0bfdb15 	stw	r2,-148(fp)
 4002d6c:	e0bff717 	ldw	r2,-36(fp)
 4002d70:	e0bfdc15 	stw	r2,-144(fp)
	       	y = x-(e+t);
 4002d74:	e1bfdb17 	ldw	r6,-148(fp)
 4002d78:	e1ffdc17 	ldw	r7,-144(fp)
 4002d7c:	e13fe317 	ldw	r4,-116(fp)
 4002d80:	e17fe417 	ldw	r5,-112(fp)
 4002d84:	40030600 	call	4003060 <__adddf3>
 4002d88:	1009883a 	mov	r4,r2
 4002d8c:	180b883a 	mov	r5,r3
 4002d90:	2005883a 	mov	r2,r4
 4002d94:	2807883a 	mov	r3,r5
 4002d98:	100d883a 	mov	r6,r2
 4002d9c:	180f883a 	mov	r7,r3
 4002da0:	e13ffc17 	ldw	r4,-16(fp)
 4002da4:	e17ffd17 	ldw	r5,-12(fp)
 4002da8:	4004b640 	call	4004b64 <__subdf3>
 4002dac:	1009883a 	mov	r4,r2
 4002db0:	180b883a 	mov	r5,r3
 4002db4:	e13fcf15 	stw	r4,-196(fp)
 4002db8:	e17fd015 	stw	r5,-192(fp)
	       	y += one;
 4002dbc:	0005883a 	mov	r2,zero
 4002dc0:	00cffc34 	movhi	r3,16368
 4002dc4:	100d883a 	mov	r6,r2
 4002dc8:	180f883a 	mov	r7,r3
 4002dcc:	e13fcf17 	ldw	r4,-196(fp)
 4002dd0:	e17fd017 	ldw	r5,-192(fp)
 4002dd4:	40030600 	call	4003060 <__adddf3>
 4002dd8:	1009883a 	mov	r4,r2
 4002ddc:	180b883a 	mov	r5,r3
 4002de0:	e13fcf15 	stw	r4,-196(fp)
 4002de4:	e17fd015 	stw	r5,-192(fp)
		GET_HIGH_WORD(high,y);
 4002de8:	e0bfcf17 	ldw	r2,-196(fp)
 4002dec:	e0bff815 	stw	r2,-32(fp)
 4002df0:	e0bfd017 	ldw	r2,-192(fp)
 4002df4:	e0bff915 	stw	r2,-28(fp)
 4002df8:	e0bff917 	ldw	r2,-28(fp)
 4002dfc:	e0bfe615 	stw	r2,-104(fp)
		SET_HIGH_WORD(y,high+(k<<20));	/* add k to y's exponent */
 4002e00:	e0bfcf17 	ldw	r2,-196(fp)
 4002e04:	e0bffa15 	stw	r2,-24(fp)
 4002e08:	e0bfd017 	ldw	r2,-192(fp)
 4002e0c:	e0bffb15 	stw	r2,-20(fp)
 4002e10:	e0bfd717 	ldw	r2,-164(fp)
 4002e14:	1004953a 	slli	r2,r2,20
 4002e18:	1007883a 	mov	r3,r2
 4002e1c:	e0bfe617 	ldw	r2,-104(fp)
 4002e20:	1885883a 	add	r2,r3,r2
 4002e24:	e0bffb15 	stw	r2,-20(fp)
 4002e28:	e0bffa17 	ldw	r2,-24(fp)
 4002e2c:	e0bfcf15 	stw	r2,-196(fp)
 4002e30:	e0bffb17 	ldw	r2,-20(fp)
 4002e34:	e0bfd015 	stw	r2,-192(fp)
	    }
	}
	return y;
 4002e38:	e0bfcf17 	ldw	r2,-196(fp)
 4002e3c:	e0ffd017 	ldw	r3,-192(fp)
 4002e40:	1009883a 	mov	r4,r2
 4002e44:	180b883a 	mov	r5,r3
}
 4002e48:	2005883a 	mov	r2,r4
 4002e4c:	2807883a 	mov	r3,r5
 4002e50:	e6fffe04 	addi	sp,fp,-8
 4002e54:	dfc00317 	ldw	ra,12(sp)
 4002e58:	df000217 	ldw	fp,8(sp)
 4002e5c:	dc400117 	ldw	r17,4(sp)
 4002e60:	dc000017 	ldw	r16,0(sp)
 4002e64:	dec00404 	addi	sp,sp,16
 4002e68:	f800283a 	ret

04002e6c <fabs>:
	double fabs(double x)
#else
	double fabs(x)
	double x;
#endif
{
 4002e6c:	defff804 	addi	sp,sp,-32
 4002e70:	df000715 	stw	fp,28(sp)
 4002e74:	df000704 	addi	fp,sp,28
 4002e78:	e13ffe15 	stw	r4,-8(fp)
 4002e7c:	e17fff15 	stw	r5,-4(fp)
	__uint32_t high;
	GET_HIGH_WORD(high,x);
 4002e80:	e0bffe17 	ldw	r2,-8(fp)
 4002e84:	e0bffa15 	stw	r2,-24(fp)
 4002e88:	e0bfff17 	ldw	r2,-4(fp)
 4002e8c:	e0bffb15 	stw	r2,-20(fp)
 4002e90:	e0bffb17 	ldw	r2,-20(fp)
 4002e94:	e0bff915 	stw	r2,-28(fp)
	SET_HIGH_WORD(x,high&0x7fffffff);
 4002e98:	e0bffe17 	ldw	r2,-8(fp)
 4002e9c:	e0bffc15 	stw	r2,-16(fp)
 4002ea0:	e0bfff17 	ldw	r2,-4(fp)
 4002ea4:	e0bffd15 	stw	r2,-12(fp)
 4002ea8:	e0fff917 	ldw	r3,-28(fp)
 4002eac:	00a00034 	movhi	r2,32768
 4002eb0:	10bfffc4 	addi	r2,r2,-1
 4002eb4:	1884703a 	and	r2,r3,r2
 4002eb8:	e0bffd15 	stw	r2,-12(fp)
 4002ebc:	e0bffc17 	ldw	r2,-16(fp)
 4002ec0:	e0bffe15 	stw	r2,-8(fp)
 4002ec4:	e0bffd17 	ldw	r2,-12(fp)
 4002ec8:	e0bfff15 	stw	r2,-4(fp)
        return x;
 4002ecc:	e0bffe17 	ldw	r2,-8(fp)
 4002ed0:	e0ffff17 	ldw	r3,-4(fp)
 4002ed4:	1009883a 	mov	r4,r2
 4002ed8:	180b883a 	mov	r5,r3
}
 4002edc:	2005883a 	mov	r2,r4
 4002ee0:	2807883a 	mov	r3,r5
 4002ee4:	e037883a 	mov	sp,fp
 4002ee8:	df000017 	ldw	fp,0(sp)
 4002eec:	dec00104 	addi	sp,sp,4
 4002ef0:	f800283a 	ret

04002ef4 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 4002ef4:	defff904 	addi	sp,sp,-28
 4002ef8:	df000615 	stw	fp,24(sp)
 4002efc:	df000604 	addi	fp,sp,24
 4002f00:	e13ffe15 	stw	r4,-8(fp)
 4002f04:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 4002f08:	e0bffe17 	ldw	r2,-8(fp)
 4002f0c:	e0bffc15 	stw	r2,-16(fp)
 4002f10:	e0bfff17 	ldw	r2,-4(fp)
 4002f14:	e0bffd15 	stw	r2,-12(fp)
 4002f18:	e0bffd17 	ldw	r2,-12(fp)
 4002f1c:	e0bffa15 	stw	r2,-24(fp)
 4002f20:	e0bffc17 	ldw	r2,-16(fp)
 4002f24:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 4002f28:	e0bffa17 	ldw	r2,-24(fp)
 4002f2c:	1000021e 	bne	r2,zero,4002f38 <__fpclassifyd+0x44>
 4002f30:	e0bffb17 	ldw	r2,-20(fp)
 4002f34:	10000526 	beq	r2,zero,4002f4c <__fpclassifyd+0x58>
 4002f38:	e0fffa17 	ldw	r3,-24(fp)
 4002f3c:	00a00034 	movhi	r2,32768
 4002f40:	1880041e 	bne	r3,r2,4002f54 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 4002f44:	e0bffb17 	ldw	r2,-20(fp)
 4002f48:	1000021e 	bne	r2,zero,4002f54 <__fpclassifyd+0x60>
    return FP_ZERO;
 4002f4c:	00800084 	movi	r2,2
 4002f50:	00002506 	br	4002fe8 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 4002f54:	e0fffa17 	ldw	r3,-24(fp)
 4002f58:	00800434 	movhi	r2,16
 4002f5c:	18800336 	bltu	r3,r2,4002f6c <__fpclassifyd+0x78>
 4002f60:	e0fffa17 	ldw	r3,-24(fp)
 4002f64:	009ffc34 	movhi	r2,32752
 4002f68:	18800636 	bltu	r3,r2,4002f84 <__fpclassifyd+0x90>
 4002f6c:	e0fffa17 	ldw	r3,-24(fp)
 4002f70:	00a00434 	movhi	r2,32784
 4002f74:	18800536 	bltu	r3,r2,4002f8c <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 4002f78:	e0fffa17 	ldw	r3,-24(fp)
 4002f7c:	00bffc34 	movhi	r2,65520
 4002f80:	1880022e 	bgeu	r3,r2,4002f8c <__fpclassifyd+0x98>
    return FP_NORMAL;
 4002f84:	00800104 	movi	r2,4
 4002f88:	00001706 	br	4002fe8 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 4002f8c:	e0fffa17 	ldw	r3,-24(fp)
 4002f90:	00800434 	movhi	r2,16
 4002f94:	18800536 	bltu	r3,r2,4002fac <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 4002f98:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 4002f9c:	1000050e 	bge	r2,zero,4002fb4 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 4002fa0:	e0fffa17 	ldw	r3,-24(fp)
 4002fa4:	00a00434 	movhi	r2,32784
 4002fa8:	1880022e 	bgeu	r3,r2,4002fb4 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 4002fac:	008000c4 	movi	r2,3
 4002fb0:	00000d06 	br	4002fe8 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 4002fb4:	e0fffa17 	ldw	r3,-24(fp)
 4002fb8:	009ffc34 	movhi	r2,32752
 4002fbc:	1880021e 	bne	r3,r2,4002fc8 <__fpclassifyd+0xd4>
 4002fc0:	e0bffb17 	ldw	r2,-20(fp)
 4002fc4:	10000526 	beq	r2,zero,4002fdc <__fpclassifyd+0xe8>
 4002fc8:	e0fffa17 	ldw	r3,-24(fp)
 4002fcc:	00bffc34 	movhi	r2,65520
 4002fd0:	1880041e 	bne	r3,r2,4002fe4 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 4002fd4:	e0bffb17 	ldw	r2,-20(fp)
 4002fd8:	1000021e 	bne	r2,zero,4002fe4 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 4002fdc:	00800044 	movi	r2,1
 4002fe0:	00000106 	br	4002fe8 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 4002fe4:	0005883a 	mov	r2,zero
}
 4002fe8:	e037883a 	mov	sp,fp
 4002fec:	df000017 	ldw	fp,0(sp)
 4002ff0:	dec00104 	addi	sp,sp,4
 4002ff4:	f800283a 	ret

04002ff8 <matherr>:
	int matherr(struct exception *x)
#else
	int matherr(x)
	struct exception *x;
#endif
{
 4002ff8:	defffc04 	addi	sp,sp,-16
 4002ffc:	dfc00315 	stw	ra,12(sp)
 4003000:	df000215 	stw	fp,8(sp)
 4003004:	df000204 	addi	fp,sp,8
 4003008:	e13fff15 	stw	r4,-4(fp)
	int n=0;
 400300c:	e03ffe15 	stw	zero,-8(fp)
	if(x->arg1!=x->arg1) return 0;
 4003010:	e13fff17 	ldw	r4,-4(fp)
 4003014:	20800217 	ldw	r2,8(r4)
 4003018:	20c00317 	ldw	r3,12(r4)
 400301c:	e1bfff17 	ldw	r6,-4(fp)
 4003020:	31000217 	ldw	r4,8(r6)
 4003024:	31400317 	ldw	r5,12(r6)
 4003028:	200d883a 	mov	r6,r4
 400302c:	280f883a 	mov	r7,r5
 4003030:	1009883a 	mov	r4,r2
 4003034:	180b883a 	mov	r5,r3
 4003038:	40041f40 	call	40041f4 <__eqdf2>
 400303c:	10000226 	beq	r2,zero,4003048 <matherr+0x50>
 4003040:	0005883a 	mov	r2,zero
 4003044:	00000106 	br	400304c <matherr+0x54>
	return n;
 4003048:	e0bffe17 	ldw	r2,-8(fp)
}
 400304c:	e037883a 	mov	sp,fp
 4003050:	dfc00117 	ldw	ra,4(sp)
 4003054:	df000017 	ldw	fp,0(sp)
 4003058:	dec00204 	addi	sp,sp,8
 400305c:	f800283a 	ret

04003060 <__adddf3>:
 4003060:	02c00434 	movhi	r11,16
 4003064:	5affffc4 	addi	r11,r11,-1
 4003068:	2806d7fa 	srli	r3,r5,31
 400306c:	2ad4703a 	and	r10,r5,r11
 4003070:	3ad2703a 	and	r9,r7,r11
 4003074:	3804d53a 	srli	r2,r7,20
 4003078:	3018d77a 	srli	r12,r6,29
 400307c:	280ad53a 	srli	r5,r5,20
 4003080:	501490fa 	slli	r10,r10,3
 4003084:	2010d77a 	srli	r8,r4,29
 4003088:	481290fa 	slli	r9,r9,3
 400308c:	380ed7fa 	srli	r7,r7,31
 4003090:	defffb04 	addi	sp,sp,-20
 4003094:	dc800215 	stw	r18,8(sp)
 4003098:	dc400115 	stw	r17,4(sp)
 400309c:	dc000015 	stw	r16,0(sp)
 40030a0:	dfc00415 	stw	ra,16(sp)
 40030a4:	dcc00315 	stw	r19,12(sp)
 40030a8:	1c803fcc 	andi	r18,r3,255
 40030ac:	2c01ffcc 	andi	r16,r5,2047
 40030b0:	5210b03a 	or	r8,r10,r8
 40030b4:	202290fa 	slli	r17,r4,3
 40030b8:	1081ffcc 	andi	r2,r2,2047
 40030bc:	4b12b03a 	or	r9,r9,r12
 40030c0:	300c90fa 	slli	r6,r6,3
 40030c4:	91c07526 	beq	r18,r7,400329c <__adddf3+0x23c>
 40030c8:	8087c83a 	sub	r3,r16,r2
 40030cc:	00c0ab0e 	bge	zero,r3,400337c <__adddf3+0x31c>
 40030d0:	10002a1e 	bne	r2,zero,400317c <__adddf3+0x11c>
 40030d4:	4984b03a 	or	r2,r9,r6
 40030d8:	1000961e 	bne	r2,zero,4003334 <__adddf3+0x2d4>
 40030dc:	888001cc 	andi	r2,r17,7
 40030e0:	10000726 	beq	r2,zero,4003100 <__adddf3+0xa0>
 40030e4:	888003cc 	andi	r2,r17,15
 40030e8:	00c00104 	movi	r3,4
 40030ec:	10c00426 	beq	r2,r3,4003100 <__adddf3+0xa0>
 40030f0:	88c7883a 	add	r3,r17,r3
 40030f4:	1c63803a 	cmpltu	r17,r3,r17
 40030f8:	4451883a 	add	r8,r8,r17
 40030fc:	1823883a 	mov	r17,r3
 4003100:	4080202c 	andhi	r2,r8,128
 4003104:	10005926 	beq	r2,zero,400326c <__adddf3+0x20c>
 4003108:	84000044 	addi	r16,r16,1
 400310c:	0081ffc4 	movi	r2,2047
 4003110:	8080ba26 	beq	r16,r2,40033fc <__adddf3+0x39c>
 4003114:	00bfe034 	movhi	r2,65408
 4003118:	10bfffc4 	addi	r2,r2,-1
 400311c:	4090703a 	and	r8,r8,r2
 4003120:	4004977a 	slli	r2,r8,29
 4003124:	4010927a 	slli	r8,r8,9
 4003128:	8822d0fa 	srli	r17,r17,3
 400312c:	8401ffcc 	andi	r16,r16,2047
 4003130:	4010d33a 	srli	r8,r8,12
 4003134:	9007883a 	mov	r3,r18
 4003138:	1444b03a 	or	r2,r2,r17
 400313c:	8401ffcc 	andi	r16,r16,2047
 4003140:	8020953a 	slli	r16,r16,20
 4003144:	18c03fcc 	andi	r3,r3,255
 4003148:	01000434 	movhi	r4,16
 400314c:	213fffc4 	addi	r4,r4,-1
 4003150:	180697fa 	slli	r3,r3,31
 4003154:	4110703a 	and	r8,r8,r4
 4003158:	4410b03a 	or	r8,r8,r16
 400315c:	40c6b03a 	or	r3,r8,r3
 4003160:	dfc00417 	ldw	ra,16(sp)
 4003164:	dcc00317 	ldw	r19,12(sp)
 4003168:	dc800217 	ldw	r18,8(sp)
 400316c:	dc400117 	ldw	r17,4(sp)
 4003170:	dc000017 	ldw	r16,0(sp)
 4003174:	dec00504 	addi	sp,sp,20
 4003178:	f800283a 	ret
 400317c:	0081ffc4 	movi	r2,2047
 4003180:	80bfd626 	beq	r16,r2,40030dc <__alt_data_end+0xfc0030dc>
 4003184:	4a402034 	orhi	r9,r9,128
 4003188:	00800e04 	movi	r2,56
 400318c:	10c09f16 	blt	r2,r3,400340c <__adddf3+0x3ac>
 4003190:	008007c4 	movi	r2,31
 4003194:	10c0c216 	blt	r2,r3,40034a0 <__adddf3+0x440>
 4003198:	00800804 	movi	r2,32
 400319c:	10c5c83a 	sub	r2,r2,r3
 40031a0:	488a983a 	sll	r5,r9,r2
 40031a4:	30c8d83a 	srl	r4,r6,r3
 40031a8:	3084983a 	sll	r2,r6,r2
 40031ac:	48c6d83a 	srl	r3,r9,r3
 40031b0:	290cb03a 	or	r6,r5,r4
 40031b4:	1004c03a 	cmpne	r2,r2,zero
 40031b8:	308cb03a 	or	r6,r6,r2
 40031bc:	898dc83a 	sub	r6,r17,r6
 40031c0:	89a3803a 	cmpltu	r17,r17,r6
 40031c4:	40d1c83a 	sub	r8,r8,r3
 40031c8:	4451c83a 	sub	r8,r8,r17
 40031cc:	3023883a 	mov	r17,r6
 40031d0:	4080202c 	andhi	r2,r8,128
 40031d4:	10002326 	beq	r2,zero,4003264 <__adddf3+0x204>
 40031d8:	04c02034 	movhi	r19,128
 40031dc:	9cffffc4 	addi	r19,r19,-1
 40031e0:	44e6703a 	and	r19,r8,r19
 40031e4:	98007626 	beq	r19,zero,40033c0 <__adddf3+0x360>
 40031e8:	9809883a 	mov	r4,r19
 40031ec:	40058740 	call	4005874 <__clzsi2>
 40031f0:	10fffe04 	addi	r3,r2,-8
 40031f4:	010007c4 	movi	r4,31
 40031f8:	20c07716 	blt	r4,r3,40033d8 <__adddf3+0x378>
 40031fc:	00800804 	movi	r2,32
 4003200:	10c5c83a 	sub	r2,r2,r3
 4003204:	8884d83a 	srl	r2,r17,r2
 4003208:	98d0983a 	sll	r8,r19,r3
 400320c:	88e2983a 	sll	r17,r17,r3
 4003210:	1204b03a 	or	r2,r2,r8
 4003214:	1c007416 	blt	r3,r16,40033e8 <__adddf3+0x388>
 4003218:	1c21c83a 	sub	r16,r3,r16
 400321c:	82000044 	addi	r8,r16,1
 4003220:	00c007c4 	movi	r3,31
 4003224:	1a009116 	blt	r3,r8,400346c <__adddf3+0x40c>
 4003228:	00c00804 	movi	r3,32
 400322c:	1a07c83a 	sub	r3,r3,r8
 4003230:	8a08d83a 	srl	r4,r17,r8
 4003234:	88e2983a 	sll	r17,r17,r3
 4003238:	10c6983a 	sll	r3,r2,r3
 400323c:	1210d83a 	srl	r8,r2,r8
 4003240:	8804c03a 	cmpne	r2,r17,zero
 4003244:	1906b03a 	or	r3,r3,r4
 4003248:	18a2b03a 	or	r17,r3,r2
 400324c:	0021883a 	mov	r16,zero
 4003250:	003fa206 	br	40030dc <__alt_data_end+0xfc0030dc>
 4003254:	1890b03a 	or	r8,r3,r2
 4003258:	40017d26 	beq	r8,zero,4003850 <__adddf3+0x7f0>
 400325c:	1011883a 	mov	r8,r2
 4003260:	1823883a 	mov	r17,r3
 4003264:	888001cc 	andi	r2,r17,7
 4003268:	103f9e1e 	bne	r2,zero,40030e4 <__alt_data_end+0xfc0030e4>
 400326c:	4004977a 	slli	r2,r8,29
 4003270:	8822d0fa 	srli	r17,r17,3
 4003274:	4010d0fa 	srli	r8,r8,3
 4003278:	9007883a 	mov	r3,r18
 400327c:	1444b03a 	or	r2,r2,r17
 4003280:	0101ffc4 	movi	r4,2047
 4003284:	81002426 	beq	r16,r4,4003318 <__adddf3+0x2b8>
 4003288:	8120703a 	and	r16,r16,r4
 400328c:	01000434 	movhi	r4,16
 4003290:	213fffc4 	addi	r4,r4,-1
 4003294:	4110703a 	and	r8,r8,r4
 4003298:	003fa806 	br	400313c <__alt_data_end+0xfc00313c>
 400329c:	8089c83a 	sub	r4,r16,r2
 40032a0:	01005e0e 	bge	zero,r4,400341c <__adddf3+0x3bc>
 40032a4:	10002b26 	beq	r2,zero,4003354 <__adddf3+0x2f4>
 40032a8:	0081ffc4 	movi	r2,2047
 40032ac:	80bf8b26 	beq	r16,r2,40030dc <__alt_data_end+0xfc0030dc>
 40032b0:	4a402034 	orhi	r9,r9,128
 40032b4:	00800e04 	movi	r2,56
 40032b8:	1100a40e 	bge	r2,r4,400354c <__adddf3+0x4ec>
 40032bc:	498cb03a 	or	r6,r9,r6
 40032c0:	300ac03a 	cmpne	r5,r6,zero
 40032c4:	0013883a 	mov	r9,zero
 40032c8:	2c4b883a 	add	r5,r5,r17
 40032cc:	2c63803a 	cmpltu	r17,r5,r17
 40032d0:	4a11883a 	add	r8,r9,r8
 40032d4:	8a11883a 	add	r8,r17,r8
 40032d8:	2823883a 	mov	r17,r5
 40032dc:	4080202c 	andhi	r2,r8,128
 40032e0:	103fe026 	beq	r2,zero,4003264 <__alt_data_end+0xfc003264>
 40032e4:	84000044 	addi	r16,r16,1
 40032e8:	0081ffc4 	movi	r2,2047
 40032ec:	8080d226 	beq	r16,r2,4003638 <__adddf3+0x5d8>
 40032f0:	00bfe034 	movhi	r2,65408
 40032f4:	10bfffc4 	addi	r2,r2,-1
 40032f8:	4090703a 	and	r8,r8,r2
 40032fc:	880ad07a 	srli	r5,r17,1
 4003300:	400897fa 	slli	r4,r8,31
 4003304:	88c0004c 	andi	r3,r17,1
 4003308:	28e2b03a 	or	r17,r5,r3
 400330c:	4010d07a 	srli	r8,r8,1
 4003310:	2462b03a 	or	r17,r4,r17
 4003314:	003f7106 	br	40030dc <__alt_data_end+0xfc0030dc>
 4003318:	4088b03a 	or	r4,r8,r2
 400331c:	20014526 	beq	r4,zero,4003834 <__adddf3+0x7d4>
 4003320:	01000434 	movhi	r4,16
 4003324:	42000234 	orhi	r8,r8,8
 4003328:	213fffc4 	addi	r4,r4,-1
 400332c:	4110703a 	and	r8,r8,r4
 4003330:	003f8206 	br	400313c <__alt_data_end+0xfc00313c>
 4003334:	18ffffc4 	addi	r3,r3,-1
 4003338:	1800491e 	bne	r3,zero,4003460 <__adddf3+0x400>
 400333c:	898bc83a 	sub	r5,r17,r6
 4003340:	8963803a 	cmpltu	r17,r17,r5
 4003344:	4251c83a 	sub	r8,r8,r9
 4003348:	4451c83a 	sub	r8,r8,r17
 400334c:	2823883a 	mov	r17,r5
 4003350:	003f9f06 	br	40031d0 <__alt_data_end+0xfc0031d0>
 4003354:	4984b03a 	or	r2,r9,r6
 4003358:	103f6026 	beq	r2,zero,40030dc <__alt_data_end+0xfc0030dc>
 400335c:	213fffc4 	addi	r4,r4,-1
 4003360:	2000931e 	bne	r4,zero,40035b0 <__adddf3+0x550>
 4003364:	898d883a 	add	r6,r17,r6
 4003368:	3463803a 	cmpltu	r17,r6,r17
 400336c:	4251883a 	add	r8,r8,r9
 4003370:	8a11883a 	add	r8,r17,r8
 4003374:	3023883a 	mov	r17,r6
 4003378:	003fd806 	br	40032dc <__alt_data_end+0xfc0032dc>
 400337c:	1800541e 	bne	r3,zero,40034d0 <__adddf3+0x470>
 4003380:	80800044 	addi	r2,r16,1
 4003384:	1081ffcc 	andi	r2,r2,2047
 4003388:	00c00044 	movi	r3,1
 400338c:	1880a00e 	bge	r3,r2,4003610 <__adddf3+0x5b0>
 4003390:	8989c83a 	sub	r4,r17,r6
 4003394:	8905803a 	cmpltu	r2,r17,r4
 4003398:	4267c83a 	sub	r19,r8,r9
 400339c:	98a7c83a 	sub	r19,r19,r2
 40033a0:	9880202c 	andhi	r2,r19,128
 40033a4:	10006326 	beq	r2,zero,4003534 <__adddf3+0x4d4>
 40033a8:	3463c83a 	sub	r17,r6,r17
 40033ac:	4a07c83a 	sub	r3,r9,r8
 40033b0:	344d803a 	cmpltu	r6,r6,r17
 40033b4:	19a7c83a 	sub	r19,r3,r6
 40033b8:	3825883a 	mov	r18,r7
 40033bc:	983f8a1e 	bne	r19,zero,40031e8 <__alt_data_end+0xfc0031e8>
 40033c0:	8809883a 	mov	r4,r17
 40033c4:	40058740 	call	4005874 <__clzsi2>
 40033c8:	10800804 	addi	r2,r2,32
 40033cc:	10fffe04 	addi	r3,r2,-8
 40033d0:	010007c4 	movi	r4,31
 40033d4:	20ff890e 	bge	r4,r3,40031fc <__alt_data_end+0xfc0031fc>
 40033d8:	10bff604 	addi	r2,r2,-40
 40033dc:	8884983a 	sll	r2,r17,r2
 40033e0:	0023883a 	mov	r17,zero
 40033e4:	1c3f8c0e 	bge	r3,r16,4003218 <__alt_data_end+0xfc003218>
 40033e8:	023fe034 	movhi	r8,65408
 40033ec:	423fffc4 	addi	r8,r8,-1
 40033f0:	80e1c83a 	sub	r16,r16,r3
 40033f4:	1210703a 	and	r8,r2,r8
 40033f8:	003f3806 	br	40030dc <__alt_data_end+0xfc0030dc>
 40033fc:	9007883a 	mov	r3,r18
 4003400:	0011883a 	mov	r8,zero
 4003404:	0005883a 	mov	r2,zero
 4003408:	003f4c06 	br	400313c <__alt_data_end+0xfc00313c>
 400340c:	498cb03a 	or	r6,r9,r6
 4003410:	300cc03a 	cmpne	r6,r6,zero
 4003414:	0007883a 	mov	r3,zero
 4003418:	003f6806 	br	40031bc <__alt_data_end+0xfc0031bc>
 400341c:	20009c1e 	bne	r4,zero,4003690 <__adddf3+0x630>
 4003420:	80800044 	addi	r2,r16,1
 4003424:	1141ffcc 	andi	r5,r2,2047
 4003428:	01000044 	movi	r4,1
 400342c:	2140670e 	bge	r4,r5,40035cc <__adddf3+0x56c>
 4003430:	0101ffc4 	movi	r4,2047
 4003434:	11007f26 	beq	r2,r4,4003634 <__adddf3+0x5d4>
 4003438:	898d883a 	add	r6,r17,r6
 400343c:	4247883a 	add	r3,r8,r9
 4003440:	3451803a 	cmpltu	r8,r6,r17
 4003444:	40d1883a 	add	r8,r8,r3
 4003448:	402297fa 	slli	r17,r8,31
 400344c:	300cd07a 	srli	r6,r6,1
 4003450:	4010d07a 	srli	r8,r8,1
 4003454:	1021883a 	mov	r16,r2
 4003458:	89a2b03a 	or	r17,r17,r6
 400345c:	003f1f06 	br	40030dc <__alt_data_end+0xfc0030dc>
 4003460:	0081ffc4 	movi	r2,2047
 4003464:	80bf481e 	bne	r16,r2,4003188 <__alt_data_end+0xfc003188>
 4003468:	003f1c06 	br	40030dc <__alt_data_end+0xfc0030dc>
 400346c:	843ff844 	addi	r16,r16,-31
 4003470:	01000804 	movi	r4,32
 4003474:	1406d83a 	srl	r3,r2,r16
 4003478:	41005026 	beq	r8,r4,40035bc <__adddf3+0x55c>
 400347c:	01001004 	movi	r4,64
 4003480:	2211c83a 	sub	r8,r4,r8
 4003484:	1204983a 	sll	r2,r2,r8
 4003488:	88a2b03a 	or	r17,r17,r2
 400348c:	8822c03a 	cmpne	r17,r17,zero
 4003490:	1c62b03a 	or	r17,r3,r17
 4003494:	0011883a 	mov	r8,zero
 4003498:	0021883a 	mov	r16,zero
 400349c:	003f7106 	br	4003264 <__alt_data_end+0xfc003264>
 40034a0:	193ff804 	addi	r4,r3,-32
 40034a4:	00800804 	movi	r2,32
 40034a8:	4908d83a 	srl	r4,r9,r4
 40034ac:	18804526 	beq	r3,r2,40035c4 <__adddf3+0x564>
 40034b0:	00801004 	movi	r2,64
 40034b4:	10c5c83a 	sub	r2,r2,r3
 40034b8:	4886983a 	sll	r3,r9,r2
 40034bc:	198cb03a 	or	r6,r3,r6
 40034c0:	300cc03a 	cmpne	r6,r6,zero
 40034c4:	218cb03a 	or	r6,r4,r6
 40034c8:	0007883a 	mov	r3,zero
 40034cc:	003f3b06 	br	40031bc <__alt_data_end+0xfc0031bc>
 40034d0:	80002a26 	beq	r16,zero,400357c <__adddf3+0x51c>
 40034d4:	0101ffc4 	movi	r4,2047
 40034d8:	11006826 	beq	r2,r4,400367c <__adddf3+0x61c>
 40034dc:	00c7c83a 	sub	r3,zero,r3
 40034e0:	42002034 	orhi	r8,r8,128
 40034e4:	01000e04 	movi	r4,56
 40034e8:	20c07c16 	blt	r4,r3,40036dc <__adddf3+0x67c>
 40034ec:	010007c4 	movi	r4,31
 40034f0:	20c0da16 	blt	r4,r3,400385c <__adddf3+0x7fc>
 40034f4:	01000804 	movi	r4,32
 40034f8:	20c9c83a 	sub	r4,r4,r3
 40034fc:	4114983a 	sll	r10,r8,r4
 4003500:	88cad83a 	srl	r5,r17,r3
 4003504:	8908983a 	sll	r4,r17,r4
 4003508:	40c6d83a 	srl	r3,r8,r3
 400350c:	5162b03a 	or	r17,r10,r5
 4003510:	2008c03a 	cmpne	r4,r4,zero
 4003514:	8922b03a 	or	r17,r17,r4
 4003518:	3463c83a 	sub	r17,r6,r17
 400351c:	48c7c83a 	sub	r3,r9,r3
 4003520:	344d803a 	cmpltu	r6,r6,r17
 4003524:	1991c83a 	sub	r8,r3,r6
 4003528:	1021883a 	mov	r16,r2
 400352c:	3825883a 	mov	r18,r7
 4003530:	003f2706 	br	40031d0 <__alt_data_end+0xfc0031d0>
 4003534:	24d0b03a 	or	r8,r4,r19
 4003538:	40001b1e 	bne	r8,zero,40035a8 <__adddf3+0x548>
 400353c:	0005883a 	mov	r2,zero
 4003540:	0007883a 	mov	r3,zero
 4003544:	0021883a 	mov	r16,zero
 4003548:	003f4d06 	br	4003280 <__alt_data_end+0xfc003280>
 400354c:	008007c4 	movi	r2,31
 4003550:	11003c16 	blt	r2,r4,4003644 <__adddf3+0x5e4>
 4003554:	00800804 	movi	r2,32
 4003558:	1105c83a 	sub	r2,r2,r4
 400355c:	488e983a 	sll	r7,r9,r2
 4003560:	310ad83a 	srl	r5,r6,r4
 4003564:	3084983a 	sll	r2,r6,r2
 4003568:	4912d83a 	srl	r9,r9,r4
 400356c:	394ab03a 	or	r5,r7,r5
 4003570:	1004c03a 	cmpne	r2,r2,zero
 4003574:	288ab03a 	or	r5,r5,r2
 4003578:	003f5306 	br	40032c8 <__alt_data_end+0xfc0032c8>
 400357c:	4448b03a 	or	r4,r8,r17
 4003580:	20003e26 	beq	r4,zero,400367c <__adddf3+0x61c>
 4003584:	00c6303a 	nor	r3,zero,r3
 4003588:	18003a1e 	bne	r3,zero,4003674 <__adddf3+0x614>
 400358c:	3463c83a 	sub	r17,r6,r17
 4003590:	4a07c83a 	sub	r3,r9,r8
 4003594:	344d803a 	cmpltu	r6,r6,r17
 4003598:	1991c83a 	sub	r8,r3,r6
 400359c:	1021883a 	mov	r16,r2
 40035a0:	3825883a 	mov	r18,r7
 40035a4:	003f0a06 	br	40031d0 <__alt_data_end+0xfc0031d0>
 40035a8:	2023883a 	mov	r17,r4
 40035ac:	003f0d06 	br	40031e4 <__alt_data_end+0xfc0031e4>
 40035b0:	0081ffc4 	movi	r2,2047
 40035b4:	80bf3f1e 	bne	r16,r2,40032b4 <__alt_data_end+0xfc0032b4>
 40035b8:	003ec806 	br	40030dc <__alt_data_end+0xfc0030dc>
 40035bc:	0005883a 	mov	r2,zero
 40035c0:	003fb106 	br	4003488 <__alt_data_end+0xfc003488>
 40035c4:	0007883a 	mov	r3,zero
 40035c8:	003fbc06 	br	40034bc <__alt_data_end+0xfc0034bc>
 40035cc:	4444b03a 	or	r2,r8,r17
 40035d0:	8000871e 	bne	r16,zero,40037f0 <__adddf3+0x790>
 40035d4:	1000ba26 	beq	r2,zero,40038c0 <__adddf3+0x860>
 40035d8:	4984b03a 	or	r2,r9,r6
 40035dc:	103ebf26 	beq	r2,zero,40030dc <__alt_data_end+0xfc0030dc>
 40035e0:	8985883a 	add	r2,r17,r6
 40035e4:	4247883a 	add	r3,r8,r9
 40035e8:	1451803a 	cmpltu	r8,r2,r17
 40035ec:	40d1883a 	add	r8,r8,r3
 40035f0:	40c0202c 	andhi	r3,r8,128
 40035f4:	1023883a 	mov	r17,r2
 40035f8:	183f1a26 	beq	r3,zero,4003264 <__alt_data_end+0xfc003264>
 40035fc:	00bfe034 	movhi	r2,65408
 4003600:	10bfffc4 	addi	r2,r2,-1
 4003604:	2021883a 	mov	r16,r4
 4003608:	4090703a 	and	r8,r8,r2
 400360c:	003eb306 	br	40030dc <__alt_data_end+0xfc0030dc>
 4003610:	4444b03a 	or	r2,r8,r17
 4003614:	8000291e 	bne	r16,zero,40036bc <__adddf3+0x65c>
 4003618:	10004b1e 	bne	r2,zero,4003748 <__adddf3+0x6e8>
 400361c:	4990b03a 	or	r8,r9,r6
 4003620:	40008b26 	beq	r8,zero,4003850 <__adddf3+0x7f0>
 4003624:	4811883a 	mov	r8,r9
 4003628:	3023883a 	mov	r17,r6
 400362c:	3825883a 	mov	r18,r7
 4003630:	003eaa06 	br	40030dc <__alt_data_end+0xfc0030dc>
 4003634:	1021883a 	mov	r16,r2
 4003638:	0011883a 	mov	r8,zero
 400363c:	0005883a 	mov	r2,zero
 4003640:	003f0f06 	br	4003280 <__alt_data_end+0xfc003280>
 4003644:	217ff804 	addi	r5,r4,-32
 4003648:	00800804 	movi	r2,32
 400364c:	494ad83a 	srl	r5,r9,r5
 4003650:	20807d26 	beq	r4,r2,4003848 <__adddf3+0x7e8>
 4003654:	00801004 	movi	r2,64
 4003658:	1109c83a 	sub	r4,r2,r4
 400365c:	4912983a 	sll	r9,r9,r4
 4003660:	498cb03a 	or	r6,r9,r6
 4003664:	300cc03a 	cmpne	r6,r6,zero
 4003668:	298ab03a 	or	r5,r5,r6
 400366c:	0013883a 	mov	r9,zero
 4003670:	003f1506 	br	40032c8 <__alt_data_end+0xfc0032c8>
 4003674:	0101ffc4 	movi	r4,2047
 4003678:	113f9a1e 	bne	r2,r4,40034e4 <__alt_data_end+0xfc0034e4>
 400367c:	4811883a 	mov	r8,r9
 4003680:	3023883a 	mov	r17,r6
 4003684:	1021883a 	mov	r16,r2
 4003688:	3825883a 	mov	r18,r7
 400368c:	003e9306 	br	40030dc <__alt_data_end+0xfc0030dc>
 4003690:	8000161e 	bne	r16,zero,40036ec <__adddf3+0x68c>
 4003694:	444ab03a 	or	r5,r8,r17
 4003698:	28005126 	beq	r5,zero,40037e0 <__adddf3+0x780>
 400369c:	0108303a 	nor	r4,zero,r4
 40036a0:	20004d1e 	bne	r4,zero,40037d8 <__adddf3+0x778>
 40036a4:	89a3883a 	add	r17,r17,r6
 40036a8:	4253883a 	add	r9,r8,r9
 40036ac:	898d803a 	cmpltu	r6,r17,r6
 40036b0:	3251883a 	add	r8,r6,r9
 40036b4:	1021883a 	mov	r16,r2
 40036b8:	003f0806 	br	40032dc <__alt_data_end+0xfc0032dc>
 40036bc:	1000301e 	bne	r2,zero,4003780 <__adddf3+0x720>
 40036c0:	4984b03a 	or	r2,r9,r6
 40036c4:	10007126 	beq	r2,zero,400388c <__adddf3+0x82c>
 40036c8:	4811883a 	mov	r8,r9
 40036cc:	3023883a 	mov	r17,r6
 40036d0:	3825883a 	mov	r18,r7
 40036d4:	0401ffc4 	movi	r16,2047
 40036d8:	003e8006 	br	40030dc <__alt_data_end+0xfc0030dc>
 40036dc:	4462b03a 	or	r17,r8,r17
 40036e0:	8822c03a 	cmpne	r17,r17,zero
 40036e4:	0007883a 	mov	r3,zero
 40036e8:	003f8b06 	br	4003518 <__alt_data_end+0xfc003518>
 40036ec:	0141ffc4 	movi	r5,2047
 40036f0:	11403b26 	beq	r2,r5,40037e0 <__adddf3+0x780>
 40036f4:	0109c83a 	sub	r4,zero,r4
 40036f8:	42002034 	orhi	r8,r8,128
 40036fc:	01400e04 	movi	r5,56
 4003700:	29006716 	blt	r5,r4,40038a0 <__adddf3+0x840>
 4003704:	014007c4 	movi	r5,31
 4003708:	29007016 	blt	r5,r4,40038cc <__adddf3+0x86c>
 400370c:	01400804 	movi	r5,32
 4003710:	290bc83a 	sub	r5,r5,r4
 4003714:	4154983a 	sll	r10,r8,r5
 4003718:	890ed83a 	srl	r7,r17,r4
 400371c:	894a983a 	sll	r5,r17,r5
 4003720:	4108d83a 	srl	r4,r8,r4
 4003724:	51e2b03a 	or	r17,r10,r7
 4003728:	280ac03a 	cmpne	r5,r5,zero
 400372c:	8962b03a 	or	r17,r17,r5
 4003730:	89a3883a 	add	r17,r17,r6
 4003734:	2253883a 	add	r9,r4,r9
 4003738:	898d803a 	cmpltu	r6,r17,r6
 400373c:	3251883a 	add	r8,r6,r9
 4003740:	1021883a 	mov	r16,r2
 4003744:	003ee506 	br	40032dc <__alt_data_end+0xfc0032dc>
 4003748:	4984b03a 	or	r2,r9,r6
 400374c:	103e6326 	beq	r2,zero,40030dc <__alt_data_end+0xfc0030dc>
 4003750:	8987c83a 	sub	r3,r17,r6
 4003754:	88c9803a 	cmpltu	r4,r17,r3
 4003758:	4245c83a 	sub	r2,r8,r9
 400375c:	1105c83a 	sub	r2,r2,r4
 4003760:	1100202c 	andhi	r4,r2,128
 4003764:	203ebb26 	beq	r4,zero,4003254 <__alt_data_end+0xfc003254>
 4003768:	3463c83a 	sub	r17,r6,r17
 400376c:	4a07c83a 	sub	r3,r9,r8
 4003770:	344d803a 	cmpltu	r6,r6,r17
 4003774:	1991c83a 	sub	r8,r3,r6
 4003778:	3825883a 	mov	r18,r7
 400377c:	003e5706 	br	40030dc <__alt_data_end+0xfc0030dc>
 4003780:	4984b03a 	or	r2,r9,r6
 4003784:	10002e26 	beq	r2,zero,4003840 <__adddf3+0x7e0>
 4003788:	4004d0fa 	srli	r2,r8,3
 400378c:	8822d0fa 	srli	r17,r17,3
 4003790:	4010977a 	slli	r8,r8,29
 4003794:	10c0022c 	andhi	r3,r2,8
 4003798:	4462b03a 	or	r17,r8,r17
 400379c:	18000826 	beq	r3,zero,40037c0 <__adddf3+0x760>
 40037a0:	4808d0fa 	srli	r4,r9,3
 40037a4:	20c0022c 	andhi	r3,r4,8
 40037a8:	1800051e 	bne	r3,zero,40037c0 <__adddf3+0x760>
 40037ac:	300cd0fa 	srli	r6,r6,3
 40037b0:	4806977a 	slli	r3,r9,29
 40037b4:	2005883a 	mov	r2,r4
 40037b8:	3825883a 	mov	r18,r7
 40037bc:	19a2b03a 	or	r17,r3,r6
 40037c0:	8810d77a 	srli	r8,r17,29
 40037c4:	100490fa 	slli	r2,r2,3
 40037c8:	882290fa 	slli	r17,r17,3
 40037cc:	0401ffc4 	movi	r16,2047
 40037d0:	4090b03a 	or	r8,r8,r2
 40037d4:	003e4106 	br	40030dc <__alt_data_end+0xfc0030dc>
 40037d8:	0141ffc4 	movi	r5,2047
 40037dc:	117fc71e 	bne	r2,r5,40036fc <__alt_data_end+0xfc0036fc>
 40037e0:	4811883a 	mov	r8,r9
 40037e4:	3023883a 	mov	r17,r6
 40037e8:	1021883a 	mov	r16,r2
 40037ec:	003e3b06 	br	40030dc <__alt_data_end+0xfc0030dc>
 40037f0:	10002f26 	beq	r2,zero,40038b0 <__adddf3+0x850>
 40037f4:	4984b03a 	or	r2,r9,r6
 40037f8:	10001126 	beq	r2,zero,4003840 <__adddf3+0x7e0>
 40037fc:	4004d0fa 	srli	r2,r8,3
 4003800:	8822d0fa 	srli	r17,r17,3
 4003804:	4010977a 	slli	r8,r8,29
 4003808:	10c0022c 	andhi	r3,r2,8
 400380c:	4462b03a 	or	r17,r8,r17
 4003810:	183feb26 	beq	r3,zero,40037c0 <__alt_data_end+0xfc0037c0>
 4003814:	4808d0fa 	srli	r4,r9,3
 4003818:	20c0022c 	andhi	r3,r4,8
 400381c:	183fe81e 	bne	r3,zero,40037c0 <__alt_data_end+0xfc0037c0>
 4003820:	300cd0fa 	srli	r6,r6,3
 4003824:	4806977a 	slli	r3,r9,29
 4003828:	2005883a 	mov	r2,r4
 400382c:	19a2b03a 	or	r17,r3,r6
 4003830:	003fe306 	br	40037c0 <__alt_data_end+0xfc0037c0>
 4003834:	0011883a 	mov	r8,zero
 4003838:	0005883a 	mov	r2,zero
 400383c:	003e3f06 	br	400313c <__alt_data_end+0xfc00313c>
 4003840:	0401ffc4 	movi	r16,2047
 4003844:	003e2506 	br	40030dc <__alt_data_end+0xfc0030dc>
 4003848:	0013883a 	mov	r9,zero
 400384c:	003f8406 	br	4003660 <__alt_data_end+0xfc003660>
 4003850:	0005883a 	mov	r2,zero
 4003854:	0007883a 	mov	r3,zero
 4003858:	003e8906 	br	4003280 <__alt_data_end+0xfc003280>
 400385c:	197ff804 	addi	r5,r3,-32
 4003860:	01000804 	movi	r4,32
 4003864:	414ad83a 	srl	r5,r8,r5
 4003868:	19002426 	beq	r3,r4,40038fc <__adddf3+0x89c>
 400386c:	01001004 	movi	r4,64
 4003870:	20c7c83a 	sub	r3,r4,r3
 4003874:	40c6983a 	sll	r3,r8,r3
 4003878:	1c46b03a 	or	r3,r3,r17
 400387c:	1806c03a 	cmpne	r3,r3,zero
 4003880:	28e2b03a 	or	r17,r5,r3
 4003884:	0007883a 	mov	r3,zero
 4003888:	003f2306 	br	4003518 <__alt_data_end+0xfc003518>
 400388c:	0007883a 	mov	r3,zero
 4003890:	5811883a 	mov	r8,r11
 4003894:	00bfffc4 	movi	r2,-1
 4003898:	0401ffc4 	movi	r16,2047
 400389c:	003e7806 	br	4003280 <__alt_data_end+0xfc003280>
 40038a0:	4462b03a 	or	r17,r8,r17
 40038a4:	8822c03a 	cmpne	r17,r17,zero
 40038a8:	0009883a 	mov	r4,zero
 40038ac:	003fa006 	br	4003730 <__alt_data_end+0xfc003730>
 40038b0:	4811883a 	mov	r8,r9
 40038b4:	3023883a 	mov	r17,r6
 40038b8:	0401ffc4 	movi	r16,2047
 40038bc:	003e0706 	br	40030dc <__alt_data_end+0xfc0030dc>
 40038c0:	4811883a 	mov	r8,r9
 40038c4:	3023883a 	mov	r17,r6
 40038c8:	003e0406 	br	40030dc <__alt_data_end+0xfc0030dc>
 40038cc:	21fff804 	addi	r7,r4,-32
 40038d0:	01400804 	movi	r5,32
 40038d4:	41ced83a 	srl	r7,r8,r7
 40038d8:	21400a26 	beq	r4,r5,4003904 <__adddf3+0x8a4>
 40038dc:	01401004 	movi	r5,64
 40038e0:	2909c83a 	sub	r4,r5,r4
 40038e4:	4108983a 	sll	r4,r8,r4
 40038e8:	2448b03a 	or	r4,r4,r17
 40038ec:	2008c03a 	cmpne	r4,r4,zero
 40038f0:	3922b03a 	or	r17,r7,r4
 40038f4:	0009883a 	mov	r4,zero
 40038f8:	003f8d06 	br	4003730 <__alt_data_end+0xfc003730>
 40038fc:	0007883a 	mov	r3,zero
 4003900:	003fdd06 	br	4003878 <__alt_data_end+0xfc003878>
 4003904:	0009883a 	mov	r4,zero
 4003908:	003ff706 	br	40038e8 <__alt_data_end+0xfc0038e8>

0400390c <__divdf3>:
 400390c:	defff204 	addi	sp,sp,-56
 4003910:	dd400915 	stw	r21,36(sp)
 4003914:	282ad53a 	srli	r21,r5,20
 4003918:	dd000815 	stw	r20,32(sp)
 400391c:	2828d7fa 	srli	r20,r5,31
 4003920:	dc000415 	stw	r16,16(sp)
 4003924:	04000434 	movhi	r16,16
 4003928:	df000c15 	stw	fp,48(sp)
 400392c:	843fffc4 	addi	r16,r16,-1
 4003930:	dfc00d15 	stw	ra,52(sp)
 4003934:	ddc00b15 	stw	r23,44(sp)
 4003938:	dd800a15 	stw	r22,40(sp)
 400393c:	dcc00715 	stw	r19,28(sp)
 4003940:	dc800615 	stw	r18,24(sp)
 4003944:	dc400515 	stw	r17,20(sp)
 4003948:	ad41ffcc 	andi	r21,r21,2047
 400394c:	2c20703a 	and	r16,r5,r16
 4003950:	a7003fcc 	andi	fp,r20,255
 4003954:	a8006126 	beq	r21,zero,4003adc <__divdf3+0x1d0>
 4003958:	0081ffc4 	movi	r2,2047
 400395c:	2025883a 	mov	r18,r4
 4003960:	a8803726 	beq	r21,r2,4003a40 <__divdf3+0x134>
 4003964:	80800434 	orhi	r2,r16,16
 4003968:	100490fa 	slli	r2,r2,3
 400396c:	2020d77a 	srli	r16,r4,29
 4003970:	202490fa 	slli	r18,r4,3
 4003974:	ad7f0044 	addi	r21,r21,-1023
 4003978:	80a0b03a 	or	r16,r16,r2
 400397c:	0027883a 	mov	r19,zero
 4003980:	0013883a 	mov	r9,zero
 4003984:	3804d53a 	srli	r2,r7,20
 4003988:	382cd7fa 	srli	r22,r7,31
 400398c:	04400434 	movhi	r17,16
 4003990:	8c7fffc4 	addi	r17,r17,-1
 4003994:	1081ffcc 	andi	r2,r2,2047
 4003998:	3011883a 	mov	r8,r6
 400399c:	3c62703a 	and	r17,r7,r17
 40039a0:	b5c03fcc 	andi	r23,r22,255
 40039a4:	10006c26 	beq	r2,zero,4003b58 <__divdf3+0x24c>
 40039a8:	00c1ffc4 	movi	r3,2047
 40039ac:	10c06426 	beq	r2,r3,4003b40 <__divdf3+0x234>
 40039b0:	88c00434 	orhi	r3,r17,16
 40039b4:	180690fa 	slli	r3,r3,3
 40039b8:	3022d77a 	srli	r17,r6,29
 40039bc:	301090fa 	slli	r8,r6,3
 40039c0:	10bf0044 	addi	r2,r2,-1023
 40039c4:	88e2b03a 	or	r17,r17,r3
 40039c8:	000f883a 	mov	r7,zero
 40039cc:	a58cf03a 	xor	r6,r20,r22
 40039d0:	3cc8b03a 	or	r4,r7,r19
 40039d4:	a8abc83a 	sub	r21,r21,r2
 40039d8:	008003c4 	movi	r2,15
 40039dc:	3007883a 	mov	r3,r6
 40039e0:	34c03fcc 	andi	r19,r6,255
 40039e4:	11009036 	bltu	r2,r4,4003c28 <__divdf3+0x31c>
 40039e8:	200890ba 	slli	r4,r4,2
 40039ec:	00810034 	movhi	r2,1024
 40039f0:	108e8004 	addi	r2,r2,14848
 40039f4:	2089883a 	add	r4,r4,r2
 40039f8:	20800017 	ldw	r2,0(r4)
 40039fc:	1000683a 	jmp	r2
 4003a00:	04003c28 	cmpgeui	r16,zero,240
 4003a04:	04003a78 	rdprs	r16,zero,233
 4003a08:	04003c18 	cmpnei	r16,zero,240
 4003a0c:	04003a6c 	andhi	r16,zero,233
 4003a10:	04003c18 	cmpnei	r16,zero,240
 4003a14:	04003bec 	andhi	r16,zero,239
 4003a18:	04003c18 	cmpnei	r16,zero,240
 4003a1c:	04003a6c 	andhi	r16,zero,233
 4003a20:	04003a78 	rdprs	r16,zero,233
 4003a24:	04003a78 	rdprs	r16,zero,233
 4003a28:	04003bec 	andhi	r16,zero,239
 4003a2c:	04003a6c 	andhi	r16,zero,233
 4003a30:	04003a5c 	xori	r16,zero,233
 4003a34:	04003a5c 	xori	r16,zero,233
 4003a38:	04003a5c 	xori	r16,zero,233
 4003a3c:	04003f0c 	andi	r16,zero,252
 4003a40:	2404b03a 	or	r2,r4,r16
 4003a44:	1000661e 	bne	r2,zero,4003be0 <__divdf3+0x2d4>
 4003a48:	04c00204 	movi	r19,8
 4003a4c:	0021883a 	mov	r16,zero
 4003a50:	0025883a 	mov	r18,zero
 4003a54:	02400084 	movi	r9,2
 4003a58:	003fca06 	br	4003984 <__alt_data_end+0xfc003984>
 4003a5c:	8023883a 	mov	r17,r16
 4003a60:	9011883a 	mov	r8,r18
 4003a64:	e02f883a 	mov	r23,fp
 4003a68:	480f883a 	mov	r7,r9
 4003a6c:	00800084 	movi	r2,2
 4003a70:	3881311e 	bne	r7,r2,4003f38 <__divdf3+0x62c>
 4003a74:	b827883a 	mov	r19,r23
 4003a78:	98c0004c 	andi	r3,r19,1
 4003a7c:	0081ffc4 	movi	r2,2047
 4003a80:	000b883a 	mov	r5,zero
 4003a84:	0025883a 	mov	r18,zero
 4003a88:	1004953a 	slli	r2,r2,20
 4003a8c:	18c03fcc 	andi	r3,r3,255
 4003a90:	04400434 	movhi	r17,16
 4003a94:	8c7fffc4 	addi	r17,r17,-1
 4003a98:	180697fa 	slli	r3,r3,31
 4003a9c:	2c4a703a 	and	r5,r5,r17
 4003aa0:	288ab03a 	or	r5,r5,r2
 4003aa4:	28c6b03a 	or	r3,r5,r3
 4003aa8:	9005883a 	mov	r2,r18
 4003aac:	dfc00d17 	ldw	ra,52(sp)
 4003ab0:	df000c17 	ldw	fp,48(sp)
 4003ab4:	ddc00b17 	ldw	r23,44(sp)
 4003ab8:	dd800a17 	ldw	r22,40(sp)
 4003abc:	dd400917 	ldw	r21,36(sp)
 4003ac0:	dd000817 	ldw	r20,32(sp)
 4003ac4:	dcc00717 	ldw	r19,28(sp)
 4003ac8:	dc800617 	ldw	r18,24(sp)
 4003acc:	dc400517 	ldw	r17,20(sp)
 4003ad0:	dc000417 	ldw	r16,16(sp)
 4003ad4:	dec00e04 	addi	sp,sp,56
 4003ad8:	f800283a 	ret
 4003adc:	2404b03a 	or	r2,r4,r16
 4003ae0:	2027883a 	mov	r19,r4
 4003ae4:	10003926 	beq	r2,zero,4003bcc <__divdf3+0x2c0>
 4003ae8:	80012e26 	beq	r16,zero,4003fa4 <__divdf3+0x698>
 4003aec:	8009883a 	mov	r4,r16
 4003af0:	d9800315 	stw	r6,12(sp)
 4003af4:	d9c00215 	stw	r7,8(sp)
 4003af8:	40058740 	call	4005874 <__clzsi2>
 4003afc:	d9800317 	ldw	r6,12(sp)
 4003b00:	d9c00217 	ldw	r7,8(sp)
 4003b04:	113ffd44 	addi	r4,r2,-11
 4003b08:	00c00704 	movi	r3,28
 4003b0c:	19012116 	blt	r3,r4,4003f94 <__divdf3+0x688>
 4003b10:	00c00744 	movi	r3,29
 4003b14:	147ffe04 	addi	r17,r2,-8
 4003b18:	1907c83a 	sub	r3,r3,r4
 4003b1c:	8460983a 	sll	r16,r16,r17
 4003b20:	98c6d83a 	srl	r3,r19,r3
 4003b24:	9c64983a 	sll	r18,r19,r17
 4003b28:	1c20b03a 	or	r16,r3,r16
 4003b2c:	1080fcc4 	addi	r2,r2,1011
 4003b30:	00abc83a 	sub	r21,zero,r2
 4003b34:	0027883a 	mov	r19,zero
 4003b38:	0013883a 	mov	r9,zero
 4003b3c:	003f9106 	br	4003984 <__alt_data_end+0xfc003984>
 4003b40:	3446b03a 	or	r3,r6,r17
 4003b44:	18001f1e 	bne	r3,zero,4003bc4 <__divdf3+0x2b8>
 4003b48:	0023883a 	mov	r17,zero
 4003b4c:	0011883a 	mov	r8,zero
 4003b50:	01c00084 	movi	r7,2
 4003b54:	003f9d06 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003b58:	3446b03a 	or	r3,r6,r17
 4003b5c:	18001526 	beq	r3,zero,4003bb4 <__divdf3+0x2a8>
 4003b60:	88011b26 	beq	r17,zero,4003fd0 <__divdf3+0x6c4>
 4003b64:	8809883a 	mov	r4,r17
 4003b68:	d9800315 	stw	r6,12(sp)
 4003b6c:	da400115 	stw	r9,4(sp)
 4003b70:	40058740 	call	4005874 <__clzsi2>
 4003b74:	d9800317 	ldw	r6,12(sp)
 4003b78:	da400117 	ldw	r9,4(sp)
 4003b7c:	113ffd44 	addi	r4,r2,-11
 4003b80:	00c00704 	movi	r3,28
 4003b84:	19010e16 	blt	r3,r4,4003fc0 <__divdf3+0x6b4>
 4003b88:	00c00744 	movi	r3,29
 4003b8c:	123ffe04 	addi	r8,r2,-8
 4003b90:	1907c83a 	sub	r3,r3,r4
 4003b94:	8a22983a 	sll	r17,r17,r8
 4003b98:	30c6d83a 	srl	r3,r6,r3
 4003b9c:	3210983a 	sll	r8,r6,r8
 4003ba0:	1c62b03a 	or	r17,r3,r17
 4003ba4:	1080fcc4 	addi	r2,r2,1011
 4003ba8:	0085c83a 	sub	r2,zero,r2
 4003bac:	000f883a 	mov	r7,zero
 4003bb0:	003f8606 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003bb4:	0023883a 	mov	r17,zero
 4003bb8:	0011883a 	mov	r8,zero
 4003bbc:	01c00044 	movi	r7,1
 4003bc0:	003f8206 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003bc4:	01c000c4 	movi	r7,3
 4003bc8:	003f8006 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003bcc:	04c00104 	movi	r19,4
 4003bd0:	0021883a 	mov	r16,zero
 4003bd4:	0025883a 	mov	r18,zero
 4003bd8:	02400044 	movi	r9,1
 4003bdc:	003f6906 	br	4003984 <__alt_data_end+0xfc003984>
 4003be0:	04c00304 	movi	r19,12
 4003be4:	024000c4 	movi	r9,3
 4003be8:	003f6606 	br	4003984 <__alt_data_end+0xfc003984>
 4003bec:	01400434 	movhi	r5,16
 4003bf0:	0007883a 	mov	r3,zero
 4003bf4:	297fffc4 	addi	r5,r5,-1
 4003bf8:	04bfffc4 	movi	r18,-1
 4003bfc:	0081ffc4 	movi	r2,2047
 4003c00:	003fa106 	br	4003a88 <__alt_data_end+0xfc003a88>
 4003c04:	00c00044 	movi	r3,1
 4003c08:	1887c83a 	sub	r3,r3,r2
 4003c0c:	01000e04 	movi	r4,56
 4003c10:	20c1210e 	bge	r4,r3,4004098 <__divdf3+0x78c>
 4003c14:	98c0004c 	andi	r3,r19,1
 4003c18:	0005883a 	mov	r2,zero
 4003c1c:	000b883a 	mov	r5,zero
 4003c20:	0025883a 	mov	r18,zero
 4003c24:	003f9806 	br	4003a88 <__alt_data_end+0xfc003a88>
 4003c28:	8c00fd36 	bltu	r17,r16,4004020 <__divdf3+0x714>
 4003c2c:	8440fb26 	beq	r16,r17,400401c <__divdf3+0x710>
 4003c30:	8007883a 	mov	r3,r16
 4003c34:	ad7fffc4 	addi	r21,r21,-1
 4003c38:	0021883a 	mov	r16,zero
 4003c3c:	4004d63a 	srli	r2,r8,24
 4003c40:	8822923a 	slli	r17,r17,8
 4003c44:	1809883a 	mov	r4,r3
 4003c48:	402c923a 	slli	r22,r8,8
 4003c4c:	88b8b03a 	or	fp,r17,r2
 4003c50:	e028d43a 	srli	r20,fp,16
 4003c54:	d8c00015 	stw	r3,0(sp)
 4003c58:	e5ffffcc 	andi	r23,fp,65535
 4003c5c:	a00b883a 	mov	r5,r20
 4003c60:	40059d00 	call	40059d0 <__udivsi3>
 4003c64:	d8c00017 	ldw	r3,0(sp)
 4003c68:	a00b883a 	mov	r5,r20
 4003c6c:	d8800315 	stw	r2,12(sp)
 4003c70:	1809883a 	mov	r4,r3
 4003c74:	4005a340 	call	4005a34 <__umodsi3>
 4003c78:	d9800317 	ldw	r6,12(sp)
 4003c7c:	1006943a 	slli	r3,r2,16
 4003c80:	9004d43a 	srli	r2,r18,16
 4003c84:	b9a3383a 	mul	r17,r23,r6
 4003c88:	10c4b03a 	or	r2,r2,r3
 4003c8c:	1440062e 	bgeu	r2,r17,4003ca8 <__divdf3+0x39c>
 4003c90:	1705883a 	add	r2,r2,fp
 4003c94:	30ffffc4 	addi	r3,r6,-1
 4003c98:	1700ee36 	bltu	r2,fp,4004054 <__divdf3+0x748>
 4003c9c:	1440ed2e 	bgeu	r2,r17,4004054 <__divdf3+0x748>
 4003ca0:	31bfff84 	addi	r6,r6,-2
 4003ca4:	1705883a 	add	r2,r2,fp
 4003ca8:	1463c83a 	sub	r17,r2,r17
 4003cac:	a00b883a 	mov	r5,r20
 4003cb0:	8809883a 	mov	r4,r17
 4003cb4:	d9800315 	stw	r6,12(sp)
 4003cb8:	40059d00 	call	40059d0 <__udivsi3>
 4003cbc:	a00b883a 	mov	r5,r20
 4003cc0:	8809883a 	mov	r4,r17
 4003cc4:	d8800215 	stw	r2,8(sp)
 4003cc8:	4005a340 	call	4005a34 <__umodsi3>
 4003ccc:	d9c00217 	ldw	r7,8(sp)
 4003cd0:	1004943a 	slli	r2,r2,16
 4003cd4:	94bfffcc 	andi	r18,r18,65535
 4003cd8:	b9d1383a 	mul	r8,r23,r7
 4003cdc:	90a4b03a 	or	r18,r18,r2
 4003ce0:	d9800317 	ldw	r6,12(sp)
 4003ce4:	9200062e 	bgeu	r18,r8,4003d00 <__divdf3+0x3f4>
 4003ce8:	9725883a 	add	r18,r18,fp
 4003cec:	38bfffc4 	addi	r2,r7,-1
 4003cf0:	9700d636 	bltu	r18,fp,400404c <__divdf3+0x740>
 4003cf4:	9200d52e 	bgeu	r18,r8,400404c <__divdf3+0x740>
 4003cf8:	39ffff84 	addi	r7,r7,-2
 4003cfc:	9725883a 	add	r18,r18,fp
 4003d00:	3004943a 	slli	r2,r6,16
 4003d04:	b012d43a 	srli	r9,r22,16
 4003d08:	b1bfffcc 	andi	r6,r22,65535
 4003d0c:	11e2b03a 	or	r17,r2,r7
 4003d10:	8806d43a 	srli	r3,r17,16
 4003d14:	893fffcc 	andi	r4,r17,65535
 4003d18:	218b383a 	mul	r5,r4,r6
 4003d1c:	30c5383a 	mul	r2,r6,r3
 4003d20:	2249383a 	mul	r4,r4,r9
 4003d24:	280ed43a 	srli	r7,r5,16
 4003d28:	9225c83a 	sub	r18,r18,r8
 4003d2c:	2089883a 	add	r4,r4,r2
 4003d30:	3909883a 	add	r4,r7,r4
 4003d34:	1a47383a 	mul	r3,r3,r9
 4003d38:	2080022e 	bgeu	r4,r2,4003d44 <__divdf3+0x438>
 4003d3c:	00800074 	movhi	r2,1
 4003d40:	1887883a 	add	r3,r3,r2
 4003d44:	2004d43a 	srli	r2,r4,16
 4003d48:	2008943a 	slli	r4,r4,16
 4003d4c:	297fffcc 	andi	r5,r5,65535
 4003d50:	10c7883a 	add	r3,r2,r3
 4003d54:	2149883a 	add	r4,r4,r5
 4003d58:	90c0a536 	bltu	r18,r3,4003ff0 <__divdf3+0x6e4>
 4003d5c:	90c0bf26 	beq	r18,r3,400405c <__divdf3+0x750>
 4003d60:	90c7c83a 	sub	r3,r18,r3
 4003d64:	810fc83a 	sub	r7,r16,r4
 4003d68:	81e5803a 	cmpltu	r18,r16,r7
 4003d6c:	1ca5c83a 	sub	r18,r3,r18
 4003d70:	e480c126 	beq	fp,r18,4004078 <__divdf3+0x76c>
 4003d74:	a00b883a 	mov	r5,r20
 4003d78:	9009883a 	mov	r4,r18
 4003d7c:	d9800315 	stw	r6,12(sp)
 4003d80:	d9c00215 	stw	r7,8(sp)
 4003d84:	da400115 	stw	r9,4(sp)
 4003d88:	40059d00 	call	40059d0 <__udivsi3>
 4003d8c:	a00b883a 	mov	r5,r20
 4003d90:	9009883a 	mov	r4,r18
 4003d94:	d8800015 	stw	r2,0(sp)
 4003d98:	4005a340 	call	4005a34 <__umodsi3>
 4003d9c:	d9c00217 	ldw	r7,8(sp)
 4003da0:	da000017 	ldw	r8,0(sp)
 4003da4:	1006943a 	slli	r3,r2,16
 4003da8:	3804d43a 	srli	r2,r7,16
 4003dac:	ba21383a 	mul	r16,r23,r8
 4003db0:	d9800317 	ldw	r6,12(sp)
 4003db4:	10c4b03a 	or	r2,r2,r3
 4003db8:	da400117 	ldw	r9,4(sp)
 4003dbc:	1400062e 	bgeu	r2,r16,4003dd8 <__divdf3+0x4cc>
 4003dc0:	1705883a 	add	r2,r2,fp
 4003dc4:	40ffffc4 	addi	r3,r8,-1
 4003dc8:	1700ad36 	bltu	r2,fp,4004080 <__divdf3+0x774>
 4003dcc:	1400ac2e 	bgeu	r2,r16,4004080 <__divdf3+0x774>
 4003dd0:	423fff84 	addi	r8,r8,-2
 4003dd4:	1705883a 	add	r2,r2,fp
 4003dd8:	1421c83a 	sub	r16,r2,r16
 4003ddc:	a00b883a 	mov	r5,r20
 4003de0:	8009883a 	mov	r4,r16
 4003de4:	d9800315 	stw	r6,12(sp)
 4003de8:	d9c00215 	stw	r7,8(sp)
 4003dec:	da000015 	stw	r8,0(sp)
 4003df0:	da400115 	stw	r9,4(sp)
 4003df4:	40059d00 	call	40059d0 <__udivsi3>
 4003df8:	8009883a 	mov	r4,r16
 4003dfc:	a00b883a 	mov	r5,r20
 4003e00:	1025883a 	mov	r18,r2
 4003e04:	4005a340 	call	4005a34 <__umodsi3>
 4003e08:	d9c00217 	ldw	r7,8(sp)
 4003e0c:	1004943a 	slli	r2,r2,16
 4003e10:	bcaf383a 	mul	r23,r23,r18
 4003e14:	393fffcc 	andi	r4,r7,65535
 4003e18:	2088b03a 	or	r4,r4,r2
 4003e1c:	d9800317 	ldw	r6,12(sp)
 4003e20:	da000017 	ldw	r8,0(sp)
 4003e24:	da400117 	ldw	r9,4(sp)
 4003e28:	25c0062e 	bgeu	r4,r23,4003e44 <__divdf3+0x538>
 4003e2c:	2709883a 	add	r4,r4,fp
 4003e30:	90bfffc4 	addi	r2,r18,-1
 4003e34:	27009436 	bltu	r4,fp,4004088 <__divdf3+0x77c>
 4003e38:	25c0932e 	bgeu	r4,r23,4004088 <__divdf3+0x77c>
 4003e3c:	94bfff84 	addi	r18,r18,-2
 4003e40:	2709883a 	add	r4,r4,fp
 4003e44:	4004943a 	slli	r2,r8,16
 4003e48:	25efc83a 	sub	r23,r4,r23
 4003e4c:	1490b03a 	or	r8,r2,r18
 4003e50:	4008d43a 	srli	r4,r8,16
 4003e54:	40ffffcc 	andi	r3,r8,65535
 4003e58:	30c5383a 	mul	r2,r6,r3
 4003e5c:	1a47383a 	mul	r3,r3,r9
 4003e60:	310d383a 	mul	r6,r6,r4
 4003e64:	100ad43a 	srli	r5,r2,16
 4003e68:	4913383a 	mul	r9,r9,r4
 4003e6c:	1987883a 	add	r3,r3,r6
 4003e70:	28c7883a 	add	r3,r5,r3
 4003e74:	1980022e 	bgeu	r3,r6,4003e80 <__divdf3+0x574>
 4003e78:	01000074 	movhi	r4,1
 4003e7c:	4913883a 	add	r9,r9,r4
 4003e80:	1808d43a 	srli	r4,r3,16
 4003e84:	1806943a 	slli	r3,r3,16
 4003e88:	10bfffcc 	andi	r2,r2,65535
 4003e8c:	2253883a 	add	r9,r4,r9
 4003e90:	1887883a 	add	r3,r3,r2
 4003e94:	ba403836 	bltu	r23,r9,4003f78 <__divdf3+0x66c>
 4003e98:	ba403626 	beq	r23,r9,4003f74 <__divdf3+0x668>
 4003e9c:	42000054 	ori	r8,r8,1
 4003ea0:	a880ffc4 	addi	r2,r21,1023
 4003ea4:	00bf570e 	bge	zero,r2,4003c04 <__alt_data_end+0xfc003c04>
 4003ea8:	40c001cc 	andi	r3,r8,7
 4003eac:	18000726 	beq	r3,zero,4003ecc <__divdf3+0x5c0>
 4003eb0:	40c003cc 	andi	r3,r8,15
 4003eb4:	01000104 	movi	r4,4
 4003eb8:	19000426 	beq	r3,r4,4003ecc <__divdf3+0x5c0>
 4003ebc:	4107883a 	add	r3,r8,r4
 4003ec0:	1a11803a 	cmpltu	r8,r3,r8
 4003ec4:	8a23883a 	add	r17,r17,r8
 4003ec8:	1811883a 	mov	r8,r3
 4003ecc:	88c0402c 	andhi	r3,r17,256
 4003ed0:	18000426 	beq	r3,zero,4003ee4 <__divdf3+0x5d8>
 4003ed4:	00ffc034 	movhi	r3,65280
 4003ed8:	18ffffc4 	addi	r3,r3,-1
 4003edc:	a8810004 	addi	r2,r21,1024
 4003ee0:	88e2703a 	and	r17,r17,r3
 4003ee4:	00c1ff84 	movi	r3,2046
 4003ee8:	18bee316 	blt	r3,r2,4003a78 <__alt_data_end+0xfc003a78>
 4003eec:	8824977a 	slli	r18,r17,29
 4003ef0:	4010d0fa 	srli	r8,r8,3
 4003ef4:	8822927a 	slli	r17,r17,9
 4003ef8:	1081ffcc 	andi	r2,r2,2047
 4003efc:	9224b03a 	or	r18,r18,r8
 4003f00:	880ad33a 	srli	r5,r17,12
 4003f04:	98c0004c 	andi	r3,r19,1
 4003f08:	003edf06 	br	4003a88 <__alt_data_end+0xfc003a88>
 4003f0c:	8080022c 	andhi	r2,r16,8
 4003f10:	10001226 	beq	r2,zero,4003f5c <__divdf3+0x650>
 4003f14:	8880022c 	andhi	r2,r17,8
 4003f18:	1000101e 	bne	r2,zero,4003f5c <__divdf3+0x650>
 4003f1c:	00800434 	movhi	r2,16
 4003f20:	89400234 	orhi	r5,r17,8
 4003f24:	10bfffc4 	addi	r2,r2,-1
 4003f28:	b007883a 	mov	r3,r22
 4003f2c:	288a703a 	and	r5,r5,r2
 4003f30:	4025883a 	mov	r18,r8
 4003f34:	003f3106 	br	4003bfc <__alt_data_end+0xfc003bfc>
 4003f38:	008000c4 	movi	r2,3
 4003f3c:	3880a626 	beq	r7,r2,40041d8 <__divdf3+0x8cc>
 4003f40:	00800044 	movi	r2,1
 4003f44:	3880521e 	bne	r7,r2,4004090 <__divdf3+0x784>
 4003f48:	b807883a 	mov	r3,r23
 4003f4c:	0005883a 	mov	r2,zero
 4003f50:	000b883a 	mov	r5,zero
 4003f54:	0025883a 	mov	r18,zero
 4003f58:	003ecb06 	br	4003a88 <__alt_data_end+0xfc003a88>
 4003f5c:	00800434 	movhi	r2,16
 4003f60:	81400234 	orhi	r5,r16,8
 4003f64:	10bfffc4 	addi	r2,r2,-1
 4003f68:	a007883a 	mov	r3,r20
 4003f6c:	288a703a 	and	r5,r5,r2
 4003f70:	003f2206 	br	4003bfc <__alt_data_end+0xfc003bfc>
 4003f74:	183fca26 	beq	r3,zero,4003ea0 <__alt_data_end+0xfc003ea0>
 4003f78:	e5ef883a 	add	r23,fp,r23
 4003f7c:	40bfffc4 	addi	r2,r8,-1
 4003f80:	bf00392e 	bgeu	r23,fp,4004068 <__divdf3+0x75c>
 4003f84:	1011883a 	mov	r8,r2
 4003f88:	ba7fc41e 	bne	r23,r9,4003e9c <__alt_data_end+0xfc003e9c>
 4003f8c:	b0ffc31e 	bne	r22,r3,4003e9c <__alt_data_end+0xfc003e9c>
 4003f90:	003fc306 	br	4003ea0 <__alt_data_end+0xfc003ea0>
 4003f94:	143ff604 	addi	r16,r2,-40
 4003f98:	9c20983a 	sll	r16,r19,r16
 4003f9c:	0025883a 	mov	r18,zero
 4003fa0:	003ee206 	br	4003b2c <__alt_data_end+0xfc003b2c>
 4003fa4:	d9800315 	stw	r6,12(sp)
 4003fa8:	d9c00215 	stw	r7,8(sp)
 4003fac:	40058740 	call	4005874 <__clzsi2>
 4003fb0:	10800804 	addi	r2,r2,32
 4003fb4:	d9c00217 	ldw	r7,8(sp)
 4003fb8:	d9800317 	ldw	r6,12(sp)
 4003fbc:	003ed106 	br	4003b04 <__alt_data_end+0xfc003b04>
 4003fc0:	147ff604 	addi	r17,r2,-40
 4003fc4:	3462983a 	sll	r17,r6,r17
 4003fc8:	0011883a 	mov	r8,zero
 4003fcc:	003ef506 	br	4003ba4 <__alt_data_end+0xfc003ba4>
 4003fd0:	3009883a 	mov	r4,r6
 4003fd4:	d9800315 	stw	r6,12(sp)
 4003fd8:	da400115 	stw	r9,4(sp)
 4003fdc:	40058740 	call	4005874 <__clzsi2>
 4003fe0:	10800804 	addi	r2,r2,32
 4003fe4:	da400117 	ldw	r9,4(sp)
 4003fe8:	d9800317 	ldw	r6,12(sp)
 4003fec:	003ee306 	br	4003b7c <__alt_data_end+0xfc003b7c>
 4003ff0:	85a1883a 	add	r16,r16,r22
 4003ff4:	8585803a 	cmpltu	r2,r16,r22
 4003ff8:	1705883a 	add	r2,r2,fp
 4003ffc:	14a5883a 	add	r18,r2,r18
 4004000:	88bfffc4 	addi	r2,r17,-1
 4004004:	e4800c2e 	bgeu	fp,r18,4004038 <__divdf3+0x72c>
 4004008:	90c03e36 	bltu	r18,r3,4004104 <__divdf3+0x7f8>
 400400c:	1c806926 	beq	r3,r18,40041b4 <__divdf3+0x8a8>
 4004010:	90c7c83a 	sub	r3,r18,r3
 4004014:	1023883a 	mov	r17,r2
 4004018:	003f5206 	br	4003d64 <__alt_data_end+0xfc003d64>
 400401c:	923f0436 	bltu	r18,r8,4003c30 <__alt_data_end+0xfc003c30>
 4004020:	800897fa 	slli	r4,r16,31
 4004024:	9004d07a 	srli	r2,r18,1
 4004028:	8006d07a 	srli	r3,r16,1
 400402c:	902097fa 	slli	r16,r18,31
 4004030:	20a4b03a 	or	r18,r4,r2
 4004034:	003f0106 	br	4003c3c <__alt_data_end+0xfc003c3c>
 4004038:	e4bff51e 	bne	fp,r18,4004010 <__alt_data_end+0xfc004010>
 400403c:	85bff22e 	bgeu	r16,r22,4004008 <__alt_data_end+0xfc004008>
 4004040:	e0c7c83a 	sub	r3,fp,r3
 4004044:	1023883a 	mov	r17,r2
 4004048:	003f4606 	br	4003d64 <__alt_data_end+0xfc003d64>
 400404c:	100f883a 	mov	r7,r2
 4004050:	003f2b06 	br	4003d00 <__alt_data_end+0xfc003d00>
 4004054:	180d883a 	mov	r6,r3
 4004058:	003f1306 	br	4003ca8 <__alt_data_end+0xfc003ca8>
 400405c:	813fe436 	bltu	r16,r4,4003ff0 <__alt_data_end+0xfc003ff0>
 4004060:	0007883a 	mov	r3,zero
 4004064:	003f3f06 	br	4003d64 <__alt_data_end+0xfc003d64>
 4004068:	ba402c36 	bltu	r23,r9,400411c <__divdf3+0x810>
 400406c:	4dc05426 	beq	r9,r23,40041c0 <__divdf3+0x8b4>
 4004070:	1011883a 	mov	r8,r2
 4004074:	003f8906 	br	4003e9c <__alt_data_end+0xfc003e9c>
 4004078:	023fffc4 	movi	r8,-1
 400407c:	003f8806 	br	4003ea0 <__alt_data_end+0xfc003ea0>
 4004080:	1811883a 	mov	r8,r3
 4004084:	003f5406 	br	4003dd8 <__alt_data_end+0xfc003dd8>
 4004088:	1025883a 	mov	r18,r2
 400408c:	003f6d06 	br	4003e44 <__alt_data_end+0xfc003e44>
 4004090:	b827883a 	mov	r19,r23
 4004094:	003f8206 	br	4003ea0 <__alt_data_end+0xfc003ea0>
 4004098:	010007c4 	movi	r4,31
 400409c:	20c02616 	blt	r4,r3,4004138 <__divdf3+0x82c>
 40040a0:	00800804 	movi	r2,32
 40040a4:	10c5c83a 	sub	r2,r2,r3
 40040a8:	888a983a 	sll	r5,r17,r2
 40040ac:	40c8d83a 	srl	r4,r8,r3
 40040b0:	4084983a 	sll	r2,r8,r2
 40040b4:	88e2d83a 	srl	r17,r17,r3
 40040b8:	2906b03a 	or	r3,r5,r4
 40040bc:	1004c03a 	cmpne	r2,r2,zero
 40040c0:	1886b03a 	or	r3,r3,r2
 40040c4:	188001cc 	andi	r2,r3,7
 40040c8:	10000726 	beq	r2,zero,40040e8 <__divdf3+0x7dc>
 40040cc:	188003cc 	andi	r2,r3,15
 40040d0:	01000104 	movi	r4,4
 40040d4:	11000426 	beq	r2,r4,40040e8 <__divdf3+0x7dc>
 40040d8:	1805883a 	mov	r2,r3
 40040dc:	10c00104 	addi	r3,r2,4
 40040e0:	1885803a 	cmpltu	r2,r3,r2
 40040e4:	88a3883a 	add	r17,r17,r2
 40040e8:	8880202c 	andhi	r2,r17,128
 40040ec:	10002726 	beq	r2,zero,400418c <__divdf3+0x880>
 40040f0:	98c0004c 	andi	r3,r19,1
 40040f4:	00800044 	movi	r2,1
 40040f8:	000b883a 	mov	r5,zero
 40040fc:	0025883a 	mov	r18,zero
 4004100:	003e6106 	br	4003a88 <__alt_data_end+0xfc003a88>
 4004104:	85a1883a 	add	r16,r16,r22
 4004108:	8585803a 	cmpltu	r2,r16,r22
 400410c:	1705883a 	add	r2,r2,fp
 4004110:	14a5883a 	add	r18,r2,r18
 4004114:	8c7fff84 	addi	r17,r17,-2
 4004118:	003f1106 	br	4003d60 <__alt_data_end+0xfc003d60>
 400411c:	b589883a 	add	r4,r22,r22
 4004120:	25ad803a 	cmpltu	r22,r4,r22
 4004124:	b739883a 	add	fp,r22,fp
 4004128:	40bfff84 	addi	r2,r8,-2
 400412c:	bf2f883a 	add	r23,r23,fp
 4004130:	202d883a 	mov	r22,r4
 4004134:	003f9306 	br	4003f84 <__alt_data_end+0xfc003f84>
 4004138:	013ff844 	movi	r4,-31
 400413c:	2085c83a 	sub	r2,r4,r2
 4004140:	8888d83a 	srl	r4,r17,r2
 4004144:	00800804 	movi	r2,32
 4004148:	18802126 	beq	r3,r2,40041d0 <__divdf3+0x8c4>
 400414c:	00801004 	movi	r2,64
 4004150:	10c5c83a 	sub	r2,r2,r3
 4004154:	8884983a 	sll	r2,r17,r2
 4004158:	1204b03a 	or	r2,r2,r8
 400415c:	1004c03a 	cmpne	r2,r2,zero
 4004160:	2084b03a 	or	r2,r4,r2
 4004164:	144001cc 	andi	r17,r2,7
 4004168:	88000d1e 	bne	r17,zero,40041a0 <__divdf3+0x894>
 400416c:	000b883a 	mov	r5,zero
 4004170:	1024d0fa 	srli	r18,r2,3
 4004174:	98c0004c 	andi	r3,r19,1
 4004178:	0005883a 	mov	r2,zero
 400417c:	9464b03a 	or	r18,r18,r17
 4004180:	003e4106 	br	4003a88 <__alt_data_end+0xfc003a88>
 4004184:	1007883a 	mov	r3,r2
 4004188:	0023883a 	mov	r17,zero
 400418c:	880a927a 	slli	r5,r17,9
 4004190:	1805883a 	mov	r2,r3
 4004194:	8822977a 	slli	r17,r17,29
 4004198:	280ad33a 	srli	r5,r5,12
 400419c:	003ff406 	br	4004170 <__alt_data_end+0xfc004170>
 40041a0:	10c003cc 	andi	r3,r2,15
 40041a4:	01000104 	movi	r4,4
 40041a8:	193ff626 	beq	r3,r4,4004184 <__alt_data_end+0xfc004184>
 40041ac:	0023883a 	mov	r17,zero
 40041b0:	003fca06 	br	40040dc <__alt_data_end+0xfc0040dc>
 40041b4:	813fd336 	bltu	r16,r4,4004104 <__alt_data_end+0xfc004104>
 40041b8:	1023883a 	mov	r17,r2
 40041bc:	003fa806 	br	4004060 <__alt_data_end+0xfc004060>
 40041c0:	b0ffd636 	bltu	r22,r3,400411c <__alt_data_end+0xfc00411c>
 40041c4:	1011883a 	mov	r8,r2
 40041c8:	b0ff341e 	bne	r22,r3,4003e9c <__alt_data_end+0xfc003e9c>
 40041cc:	003f3406 	br	4003ea0 <__alt_data_end+0xfc003ea0>
 40041d0:	0005883a 	mov	r2,zero
 40041d4:	003fe006 	br	4004158 <__alt_data_end+0xfc004158>
 40041d8:	00800434 	movhi	r2,16
 40041dc:	89400234 	orhi	r5,r17,8
 40041e0:	10bfffc4 	addi	r2,r2,-1
 40041e4:	b807883a 	mov	r3,r23
 40041e8:	288a703a 	and	r5,r5,r2
 40041ec:	4025883a 	mov	r18,r8
 40041f0:	003e8206 	br	4003bfc <__alt_data_end+0xfc003bfc>

040041f4 <__eqdf2>:
 40041f4:	2804d53a 	srli	r2,r5,20
 40041f8:	3806d53a 	srli	r3,r7,20
 40041fc:	02000434 	movhi	r8,16
 4004200:	423fffc4 	addi	r8,r8,-1
 4004204:	1081ffcc 	andi	r2,r2,2047
 4004208:	0281ffc4 	movi	r10,2047
 400420c:	2a12703a 	and	r9,r5,r8
 4004210:	18c1ffcc 	andi	r3,r3,2047
 4004214:	3a10703a 	and	r8,r7,r8
 4004218:	280ad7fa 	srli	r5,r5,31
 400421c:	380ed7fa 	srli	r7,r7,31
 4004220:	12801026 	beq	r2,r10,4004264 <__eqdf2+0x70>
 4004224:	0281ffc4 	movi	r10,2047
 4004228:	1a800a26 	beq	r3,r10,4004254 <__eqdf2+0x60>
 400422c:	10c00226 	beq	r2,r3,4004238 <__eqdf2+0x44>
 4004230:	00800044 	movi	r2,1
 4004234:	f800283a 	ret
 4004238:	4a3ffd1e 	bne	r9,r8,4004230 <__alt_data_end+0xfc004230>
 400423c:	21bffc1e 	bne	r4,r6,4004230 <__alt_data_end+0xfc004230>
 4004240:	29c00c26 	beq	r5,r7,4004274 <__eqdf2+0x80>
 4004244:	103ffa1e 	bne	r2,zero,4004230 <__alt_data_end+0xfc004230>
 4004248:	2244b03a 	or	r2,r4,r9
 400424c:	1004c03a 	cmpne	r2,r2,zero
 4004250:	f800283a 	ret
 4004254:	3214b03a 	or	r10,r6,r8
 4004258:	503ff426 	beq	r10,zero,400422c <__alt_data_end+0xfc00422c>
 400425c:	00800044 	movi	r2,1
 4004260:	f800283a 	ret
 4004264:	2254b03a 	or	r10,r4,r9
 4004268:	503fee26 	beq	r10,zero,4004224 <__alt_data_end+0xfc004224>
 400426c:	00800044 	movi	r2,1
 4004270:	f800283a 	ret
 4004274:	0005883a 	mov	r2,zero
 4004278:	f800283a 	ret

0400427c <__gedf2>:
 400427c:	2804d53a 	srli	r2,r5,20
 4004280:	3806d53a 	srli	r3,r7,20
 4004284:	02000434 	movhi	r8,16
 4004288:	423fffc4 	addi	r8,r8,-1
 400428c:	1081ffcc 	andi	r2,r2,2047
 4004290:	0241ffc4 	movi	r9,2047
 4004294:	2a14703a 	and	r10,r5,r8
 4004298:	18c1ffcc 	andi	r3,r3,2047
 400429c:	3a10703a 	and	r8,r7,r8
 40042a0:	280ad7fa 	srli	r5,r5,31
 40042a4:	380ed7fa 	srli	r7,r7,31
 40042a8:	12401d26 	beq	r2,r9,4004320 <__gedf2+0xa4>
 40042ac:	0241ffc4 	movi	r9,2047
 40042b0:	1a401226 	beq	r3,r9,40042fc <__gedf2+0x80>
 40042b4:	1000081e 	bne	r2,zero,40042d8 <__gedf2+0x5c>
 40042b8:	2296b03a 	or	r11,r4,r10
 40042bc:	5813003a 	cmpeq	r9,r11,zero
 40042c0:	1800091e 	bne	r3,zero,40042e8 <__gedf2+0x6c>
 40042c4:	3218b03a 	or	r12,r6,r8
 40042c8:	6000071e 	bne	r12,zero,40042e8 <__gedf2+0x6c>
 40042cc:	0005883a 	mov	r2,zero
 40042d0:	5800101e 	bne	r11,zero,4004314 <__gedf2+0x98>
 40042d4:	f800283a 	ret
 40042d8:	18000c1e 	bne	r3,zero,400430c <__gedf2+0x90>
 40042dc:	3212b03a 	or	r9,r6,r8
 40042e0:	48000c26 	beq	r9,zero,4004314 <__gedf2+0x98>
 40042e4:	0013883a 	mov	r9,zero
 40042e8:	39c03fcc 	andi	r7,r7,255
 40042ec:	48000826 	beq	r9,zero,4004310 <__gedf2+0x94>
 40042f0:	38000926 	beq	r7,zero,4004318 <__gedf2+0x9c>
 40042f4:	00800044 	movi	r2,1
 40042f8:	f800283a 	ret
 40042fc:	3212b03a 	or	r9,r6,r8
 4004300:	483fec26 	beq	r9,zero,40042b4 <__alt_data_end+0xfc0042b4>
 4004304:	00bfff84 	movi	r2,-2
 4004308:	f800283a 	ret
 400430c:	39c03fcc 	andi	r7,r7,255
 4004310:	29c00626 	beq	r5,r7,400432c <__gedf2+0xb0>
 4004314:	283ff726 	beq	r5,zero,40042f4 <__alt_data_end+0xfc0042f4>
 4004318:	00bfffc4 	movi	r2,-1
 400431c:	f800283a 	ret
 4004320:	2292b03a 	or	r9,r4,r10
 4004324:	483fe126 	beq	r9,zero,40042ac <__alt_data_end+0xfc0042ac>
 4004328:	003ff606 	br	4004304 <__alt_data_end+0xfc004304>
 400432c:	18bff916 	blt	r3,r2,4004314 <__alt_data_end+0xfc004314>
 4004330:	10c00316 	blt	r2,r3,4004340 <__gedf2+0xc4>
 4004334:	42bff736 	bltu	r8,r10,4004314 <__alt_data_end+0xfc004314>
 4004338:	52000326 	beq	r10,r8,4004348 <__gedf2+0xcc>
 400433c:	5200042e 	bgeu	r10,r8,4004350 <__gedf2+0xd4>
 4004340:	283fec1e 	bne	r5,zero,40042f4 <__alt_data_end+0xfc0042f4>
 4004344:	003ff406 	br	4004318 <__alt_data_end+0xfc004318>
 4004348:	313ff236 	bltu	r6,r4,4004314 <__alt_data_end+0xfc004314>
 400434c:	21bffc36 	bltu	r4,r6,4004340 <__alt_data_end+0xfc004340>
 4004350:	0005883a 	mov	r2,zero
 4004354:	f800283a 	ret

04004358 <__ledf2>:
 4004358:	2804d53a 	srli	r2,r5,20
 400435c:	3810d53a 	srli	r8,r7,20
 4004360:	00c00434 	movhi	r3,16
 4004364:	18ffffc4 	addi	r3,r3,-1
 4004368:	1081ffcc 	andi	r2,r2,2047
 400436c:	0241ffc4 	movi	r9,2047
 4004370:	28d4703a 	and	r10,r5,r3
 4004374:	4201ffcc 	andi	r8,r8,2047
 4004378:	38c6703a 	and	r3,r7,r3
 400437c:	280ad7fa 	srli	r5,r5,31
 4004380:	380ed7fa 	srli	r7,r7,31
 4004384:	12401f26 	beq	r2,r9,4004404 <__ledf2+0xac>
 4004388:	0241ffc4 	movi	r9,2047
 400438c:	42401426 	beq	r8,r9,40043e0 <__ledf2+0x88>
 4004390:	1000091e 	bne	r2,zero,40043b8 <__ledf2+0x60>
 4004394:	2296b03a 	or	r11,r4,r10
 4004398:	5813003a 	cmpeq	r9,r11,zero
 400439c:	29403fcc 	andi	r5,r5,255
 40043a0:	40000a1e 	bne	r8,zero,40043cc <__ledf2+0x74>
 40043a4:	30d8b03a 	or	r12,r6,r3
 40043a8:	6000081e 	bne	r12,zero,40043cc <__ledf2+0x74>
 40043ac:	0005883a 	mov	r2,zero
 40043b0:	5800111e 	bne	r11,zero,40043f8 <__ledf2+0xa0>
 40043b4:	f800283a 	ret
 40043b8:	29403fcc 	andi	r5,r5,255
 40043bc:	40000c1e 	bne	r8,zero,40043f0 <__ledf2+0x98>
 40043c0:	30d2b03a 	or	r9,r6,r3
 40043c4:	48000c26 	beq	r9,zero,40043f8 <__ledf2+0xa0>
 40043c8:	0013883a 	mov	r9,zero
 40043cc:	39c03fcc 	andi	r7,r7,255
 40043d0:	48000826 	beq	r9,zero,40043f4 <__ledf2+0x9c>
 40043d4:	38001126 	beq	r7,zero,400441c <__ledf2+0xc4>
 40043d8:	00800044 	movi	r2,1
 40043dc:	f800283a 	ret
 40043e0:	30d2b03a 	or	r9,r6,r3
 40043e4:	483fea26 	beq	r9,zero,4004390 <__alt_data_end+0xfc004390>
 40043e8:	00800084 	movi	r2,2
 40043ec:	f800283a 	ret
 40043f0:	39c03fcc 	andi	r7,r7,255
 40043f4:	39400726 	beq	r7,r5,4004414 <__ledf2+0xbc>
 40043f8:	2800081e 	bne	r5,zero,400441c <__ledf2+0xc4>
 40043fc:	00800044 	movi	r2,1
 4004400:	f800283a 	ret
 4004404:	2292b03a 	or	r9,r4,r10
 4004408:	483fdf26 	beq	r9,zero,4004388 <__alt_data_end+0xfc004388>
 400440c:	00800084 	movi	r2,2
 4004410:	f800283a 	ret
 4004414:	4080030e 	bge	r8,r2,4004424 <__ledf2+0xcc>
 4004418:	383fef26 	beq	r7,zero,40043d8 <__alt_data_end+0xfc0043d8>
 400441c:	00bfffc4 	movi	r2,-1
 4004420:	f800283a 	ret
 4004424:	123feb16 	blt	r2,r8,40043d4 <__alt_data_end+0xfc0043d4>
 4004428:	1abff336 	bltu	r3,r10,40043f8 <__alt_data_end+0xfc0043f8>
 400442c:	50c00326 	beq	r10,r3,400443c <__ledf2+0xe4>
 4004430:	50c0042e 	bgeu	r10,r3,4004444 <__ledf2+0xec>
 4004434:	283fe81e 	bne	r5,zero,40043d8 <__alt_data_end+0xfc0043d8>
 4004438:	003ff806 	br	400441c <__alt_data_end+0xfc00441c>
 400443c:	313fee36 	bltu	r6,r4,40043f8 <__alt_data_end+0xfc0043f8>
 4004440:	21bffc36 	bltu	r4,r6,4004434 <__alt_data_end+0xfc004434>
 4004444:	0005883a 	mov	r2,zero
 4004448:	f800283a 	ret

0400444c <__muldf3>:
 400444c:	defff304 	addi	sp,sp,-52
 4004450:	2804d53a 	srli	r2,r5,20
 4004454:	dd800915 	stw	r22,36(sp)
 4004458:	282cd7fa 	srli	r22,r5,31
 400445c:	dc000315 	stw	r16,12(sp)
 4004460:	04000434 	movhi	r16,16
 4004464:	dd400815 	stw	r21,32(sp)
 4004468:	dc800515 	stw	r18,20(sp)
 400446c:	843fffc4 	addi	r16,r16,-1
 4004470:	dfc00c15 	stw	ra,48(sp)
 4004474:	df000b15 	stw	fp,44(sp)
 4004478:	ddc00a15 	stw	r23,40(sp)
 400447c:	dd000715 	stw	r20,28(sp)
 4004480:	dcc00615 	stw	r19,24(sp)
 4004484:	dc400415 	stw	r17,16(sp)
 4004488:	1481ffcc 	andi	r18,r2,2047
 400448c:	2c20703a 	and	r16,r5,r16
 4004490:	b02b883a 	mov	r21,r22
 4004494:	b2403fcc 	andi	r9,r22,255
 4004498:	90006026 	beq	r18,zero,400461c <__muldf3+0x1d0>
 400449c:	0081ffc4 	movi	r2,2047
 40044a0:	2029883a 	mov	r20,r4
 40044a4:	90803626 	beq	r18,r2,4004580 <__muldf3+0x134>
 40044a8:	80800434 	orhi	r2,r16,16
 40044ac:	100490fa 	slli	r2,r2,3
 40044b0:	2020d77a 	srli	r16,r4,29
 40044b4:	202890fa 	slli	r20,r4,3
 40044b8:	94bf0044 	addi	r18,r18,-1023
 40044bc:	80a0b03a 	or	r16,r16,r2
 40044c0:	0027883a 	mov	r19,zero
 40044c4:	0039883a 	mov	fp,zero
 40044c8:	3804d53a 	srli	r2,r7,20
 40044cc:	382ed7fa 	srli	r23,r7,31
 40044d0:	04400434 	movhi	r17,16
 40044d4:	8c7fffc4 	addi	r17,r17,-1
 40044d8:	1081ffcc 	andi	r2,r2,2047
 40044dc:	3011883a 	mov	r8,r6
 40044e0:	3c62703a 	and	r17,r7,r17
 40044e4:	ba803fcc 	andi	r10,r23,255
 40044e8:	10006d26 	beq	r2,zero,40046a0 <__muldf3+0x254>
 40044ec:	00c1ffc4 	movi	r3,2047
 40044f0:	10c06526 	beq	r2,r3,4004688 <__muldf3+0x23c>
 40044f4:	88c00434 	orhi	r3,r17,16
 40044f8:	180690fa 	slli	r3,r3,3
 40044fc:	3022d77a 	srli	r17,r6,29
 4004500:	301090fa 	slli	r8,r6,3
 4004504:	10bf0044 	addi	r2,r2,-1023
 4004508:	88e2b03a 	or	r17,r17,r3
 400450c:	000b883a 	mov	r5,zero
 4004510:	9085883a 	add	r2,r18,r2
 4004514:	2cc8b03a 	or	r4,r5,r19
 4004518:	00c003c4 	movi	r3,15
 400451c:	bdacf03a 	xor	r22,r23,r22
 4004520:	12c00044 	addi	r11,r2,1
 4004524:	19009936 	bltu	r3,r4,400478c <__muldf3+0x340>
 4004528:	200890ba 	slli	r4,r4,2
 400452c:	00c10034 	movhi	r3,1024
 4004530:	18d15004 	addi	r3,r3,17728
 4004534:	20c9883a 	add	r4,r4,r3
 4004538:	20c00017 	ldw	r3,0(r4)
 400453c:	1800683a 	jmp	r3
 4004540:	0400478c 	andi	r16,zero,286
 4004544:	040045a0 	cmpeqi	r16,zero,278
 4004548:	040045a0 	cmpeqi	r16,zero,278
 400454c:	0400459c 	xori	r16,zero,278
 4004550:	04004768 	cmpgeui	r16,zero,285
 4004554:	04004768 	cmpgeui	r16,zero,285
 4004558:	04004750 	cmplti	r16,zero,285
 400455c:	0400459c 	xori	r16,zero,278
 4004560:	04004768 	cmpgeui	r16,zero,285
 4004564:	04004750 	cmplti	r16,zero,285
 4004568:	04004768 	cmpgeui	r16,zero,285
 400456c:	0400459c 	xori	r16,zero,278
 4004570:	04004778 	rdprs	r16,zero,285
 4004574:	04004778 	rdprs	r16,zero,285
 4004578:	04004778 	rdprs	r16,zero,285
 400457c:	04004994 	movui	r16,294
 4004580:	2404b03a 	or	r2,r4,r16
 4004584:	10006f1e 	bne	r2,zero,4004744 <__muldf3+0x2f8>
 4004588:	04c00204 	movi	r19,8
 400458c:	0021883a 	mov	r16,zero
 4004590:	0029883a 	mov	r20,zero
 4004594:	07000084 	movi	fp,2
 4004598:	003fcb06 	br	40044c8 <__alt_data_end+0xfc0044c8>
 400459c:	502d883a 	mov	r22,r10
 40045a0:	00800084 	movi	r2,2
 40045a4:	28805726 	beq	r5,r2,4004704 <__muldf3+0x2b8>
 40045a8:	008000c4 	movi	r2,3
 40045ac:	28816626 	beq	r5,r2,4004b48 <__muldf3+0x6fc>
 40045b0:	00800044 	movi	r2,1
 40045b4:	2881411e 	bne	r5,r2,4004abc <__muldf3+0x670>
 40045b8:	b02b883a 	mov	r21,r22
 40045bc:	0005883a 	mov	r2,zero
 40045c0:	000b883a 	mov	r5,zero
 40045c4:	0029883a 	mov	r20,zero
 40045c8:	1004953a 	slli	r2,r2,20
 40045cc:	a8c03fcc 	andi	r3,r21,255
 40045d0:	04400434 	movhi	r17,16
 40045d4:	8c7fffc4 	addi	r17,r17,-1
 40045d8:	180697fa 	slli	r3,r3,31
 40045dc:	2c4a703a 	and	r5,r5,r17
 40045e0:	288ab03a 	or	r5,r5,r2
 40045e4:	28c6b03a 	or	r3,r5,r3
 40045e8:	a005883a 	mov	r2,r20
 40045ec:	dfc00c17 	ldw	ra,48(sp)
 40045f0:	df000b17 	ldw	fp,44(sp)
 40045f4:	ddc00a17 	ldw	r23,40(sp)
 40045f8:	dd800917 	ldw	r22,36(sp)
 40045fc:	dd400817 	ldw	r21,32(sp)
 4004600:	dd000717 	ldw	r20,28(sp)
 4004604:	dcc00617 	ldw	r19,24(sp)
 4004608:	dc800517 	ldw	r18,20(sp)
 400460c:	dc400417 	ldw	r17,16(sp)
 4004610:	dc000317 	ldw	r16,12(sp)
 4004614:	dec00d04 	addi	sp,sp,52
 4004618:	f800283a 	ret
 400461c:	2404b03a 	or	r2,r4,r16
 4004620:	2027883a 	mov	r19,r4
 4004624:	10004226 	beq	r2,zero,4004730 <__muldf3+0x2e4>
 4004628:	8000fc26 	beq	r16,zero,4004a1c <__muldf3+0x5d0>
 400462c:	8009883a 	mov	r4,r16
 4004630:	d9800215 	stw	r6,8(sp)
 4004634:	d9c00015 	stw	r7,0(sp)
 4004638:	da400115 	stw	r9,4(sp)
 400463c:	40058740 	call	4005874 <__clzsi2>
 4004640:	d9800217 	ldw	r6,8(sp)
 4004644:	d9c00017 	ldw	r7,0(sp)
 4004648:	da400117 	ldw	r9,4(sp)
 400464c:	113ffd44 	addi	r4,r2,-11
 4004650:	00c00704 	movi	r3,28
 4004654:	1900ed16 	blt	r3,r4,4004a0c <__muldf3+0x5c0>
 4004658:	00c00744 	movi	r3,29
 400465c:	147ffe04 	addi	r17,r2,-8
 4004660:	1907c83a 	sub	r3,r3,r4
 4004664:	8460983a 	sll	r16,r16,r17
 4004668:	98c6d83a 	srl	r3,r19,r3
 400466c:	9c68983a 	sll	r20,r19,r17
 4004670:	1c20b03a 	or	r16,r3,r16
 4004674:	1080fcc4 	addi	r2,r2,1011
 4004678:	00a5c83a 	sub	r18,zero,r2
 400467c:	0027883a 	mov	r19,zero
 4004680:	0039883a 	mov	fp,zero
 4004684:	003f9006 	br	40044c8 <__alt_data_end+0xfc0044c8>
 4004688:	3446b03a 	or	r3,r6,r17
 400468c:	1800261e 	bne	r3,zero,4004728 <__muldf3+0x2dc>
 4004690:	0023883a 	mov	r17,zero
 4004694:	0011883a 	mov	r8,zero
 4004698:	01400084 	movi	r5,2
 400469c:	003f9c06 	br	4004510 <__alt_data_end+0xfc004510>
 40046a0:	3446b03a 	or	r3,r6,r17
 40046a4:	18001c26 	beq	r3,zero,4004718 <__muldf3+0x2cc>
 40046a8:	8800ce26 	beq	r17,zero,40049e4 <__muldf3+0x598>
 40046ac:	8809883a 	mov	r4,r17
 40046b0:	d9800215 	stw	r6,8(sp)
 40046b4:	da400115 	stw	r9,4(sp)
 40046b8:	da800015 	stw	r10,0(sp)
 40046bc:	40058740 	call	4005874 <__clzsi2>
 40046c0:	d9800217 	ldw	r6,8(sp)
 40046c4:	da400117 	ldw	r9,4(sp)
 40046c8:	da800017 	ldw	r10,0(sp)
 40046cc:	113ffd44 	addi	r4,r2,-11
 40046d0:	00c00704 	movi	r3,28
 40046d4:	1900bf16 	blt	r3,r4,40049d4 <__muldf3+0x588>
 40046d8:	00c00744 	movi	r3,29
 40046dc:	123ffe04 	addi	r8,r2,-8
 40046e0:	1907c83a 	sub	r3,r3,r4
 40046e4:	8a22983a 	sll	r17,r17,r8
 40046e8:	30c6d83a 	srl	r3,r6,r3
 40046ec:	3210983a 	sll	r8,r6,r8
 40046f0:	1c62b03a 	or	r17,r3,r17
 40046f4:	1080fcc4 	addi	r2,r2,1011
 40046f8:	0085c83a 	sub	r2,zero,r2
 40046fc:	000b883a 	mov	r5,zero
 4004700:	003f8306 	br	4004510 <__alt_data_end+0xfc004510>
 4004704:	b02b883a 	mov	r21,r22
 4004708:	0081ffc4 	movi	r2,2047
 400470c:	000b883a 	mov	r5,zero
 4004710:	0029883a 	mov	r20,zero
 4004714:	003fac06 	br	40045c8 <__alt_data_end+0xfc0045c8>
 4004718:	0023883a 	mov	r17,zero
 400471c:	0011883a 	mov	r8,zero
 4004720:	01400044 	movi	r5,1
 4004724:	003f7a06 	br	4004510 <__alt_data_end+0xfc004510>
 4004728:	014000c4 	movi	r5,3
 400472c:	003f7806 	br	4004510 <__alt_data_end+0xfc004510>
 4004730:	04c00104 	movi	r19,4
 4004734:	0021883a 	mov	r16,zero
 4004738:	0029883a 	mov	r20,zero
 400473c:	07000044 	movi	fp,1
 4004740:	003f6106 	br	40044c8 <__alt_data_end+0xfc0044c8>
 4004744:	04c00304 	movi	r19,12
 4004748:	070000c4 	movi	fp,3
 400474c:	003f5e06 	br	40044c8 <__alt_data_end+0xfc0044c8>
 4004750:	01400434 	movhi	r5,16
 4004754:	002b883a 	mov	r21,zero
 4004758:	297fffc4 	addi	r5,r5,-1
 400475c:	053fffc4 	movi	r20,-1
 4004760:	0081ffc4 	movi	r2,2047
 4004764:	003f9806 	br	40045c8 <__alt_data_end+0xfc0045c8>
 4004768:	8023883a 	mov	r17,r16
 400476c:	a011883a 	mov	r8,r20
 4004770:	e00b883a 	mov	r5,fp
 4004774:	003f8a06 	br	40045a0 <__alt_data_end+0xfc0045a0>
 4004778:	8023883a 	mov	r17,r16
 400477c:	a011883a 	mov	r8,r20
 4004780:	482d883a 	mov	r22,r9
 4004784:	e00b883a 	mov	r5,fp
 4004788:	003f8506 	br	40045a0 <__alt_data_end+0xfc0045a0>
 400478c:	a00ad43a 	srli	r5,r20,16
 4004790:	401ad43a 	srli	r13,r8,16
 4004794:	a53fffcc 	andi	r20,r20,65535
 4004798:	423fffcc 	andi	r8,r8,65535
 400479c:	4519383a 	mul	r12,r8,r20
 40047a0:	4147383a 	mul	r3,r8,r5
 40047a4:	6d09383a 	mul	r4,r13,r20
 40047a8:	600cd43a 	srli	r6,r12,16
 40047ac:	2b5d383a 	mul	r14,r5,r13
 40047b0:	20c9883a 	add	r4,r4,r3
 40047b4:	310d883a 	add	r6,r6,r4
 40047b8:	30c0022e 	bgeu	r6,r3,40047c4 <__muldf3+0x378>
 40047bc:	00c00074 	movhi	r3,1
 40047c0:	70dd883a 	add	r14,r14,r3
 40047c4:	8826d43a 	srli	r19,r17,16
 40047c8:	8bffffcc 	andi	r15,r17,65535
 40047cc:	7d23383a 	mul	r17,r15,r20
 40047d0:	7949383a 	mul	r4,r15,r5
 40047d4:	9d29383a 	mul	r20,r19,r20
 40047d8:	8814d43a 	srli	r10,r17,16
 40047dc:	3012943a 	slli	r9,r6,16
 40047e0:	a129883a 	add	r20,r20,r4
 40047e4:	633fffcc 	andi	r12,r12,65535
 40047e8:	5515883a 	add	r10,r10,r20
 40047ec:	3006d43a 	srli	r3,r6,16
 40047f0:	4b13883a 	add	r9,r9,r12
 40047f4:	2ccb383a 	mul	r5,r5,r19
 40047f8:	5100022e 	bgeu	r10,r4,4004804 <__muldf3+0x3b8>
 40047fc:	01000074 	movhi	r4,1
 4004800:	290b883a 	add	r5,r5,r4
 4004804:	802ad43a 	srli	r21,r16,16
 4004808:	843fffcc 	andi	r16,r16,65535
 400480c:	440d383a 	mul	r6,r8,r16
 4004810:	4565383a 	mul	r18,r8,r21
 4004814:	8349383a 	mul	r4,r16,r13
 4004818:	500e943a 	slli	r7,r10,16
 400481c:	3010d43a 	srli	r8,r6,16
 4004820:	5028d43a 	srli	r20,r10,16
 4004824:	2489883a 	add	r4,r4,r18
 4004828:	8abfffcc 	andi	r10,r17,65535
 400482c:	3a95883a 	add	r10,r7,r10
 4004830:	4119883a 	add	r12,r8,r4
 4004834:	a169883a 	add	r20,r20,r5
 4004838:	1a87883a 	add	r3,r3,r10
 400483c:	6d5b383a 	mul	r13,r13,r21
 4004840:	6480022e 	bgeu	r12,r18,400484c <__muldf3+0x400>
 4004844:	01000074 	movhi	r4,1
 4004848:	691b883a 	add	r13,r13,r4
 400484c:	7c25383a 	mul	r18,r15,r16
 4004850:	7d4b383a 	mul	r5,r15,r21
 4004854:	84cf383a 	mul	r7,r16,r19
 4004858:	901ed43a 	srli	r15,r18,16
 400485c:	6008d43a 	srli	r4,r12,16
 4004860:	6010943a 	slli	r8,r12,16
 4004864:	394f883a 	add	r7,r7,r5
 4004868:	333fffcc 	andi	r12,r6,65535
 400486c:	79df883a 	add	r15,r15,r7
 4004870:	235b883a 	add	r13,r4,r13
 4004874:	9d63383a 	mul	r17,r19,r21
 4004878:	4309883a 	add	r4,r8,r12
 400487c:	7940022e 	bgeu	r15,r5,4004888 <__muldf3+0x43c>
 4004880:	01400074 	movhi	r5,1
 4004884:	8963883a 	add	r17,r17,r5
 4004888:	780a943a 	slli	r5,r15,16
 400488c:	91bfffcc 	andi	r6,r18,65535
 4004890:	70c7883a 	add	r3,r14,r3
 4004894:	298d883a 	add	r6,r5,r6
 4004898:	1a8f803a 	cmpltu	r7,r3,r10
 400489c:	350b883a 	add	r5,r6,r20
 40048a0:	20c7883a 	add	r3,r4,r3
 40048a4:	3955883a 	add	r10,r7,r5
 40048a8:	1909803a 	cmpltu	r4,r3,r4
 40048ac:	6a91883a 	add	r8,r13,r10
 40048b0:	780cd43a 	srli	r6,r15,16
 40048b4:	2219883a 	add	r12,r4,r8
 40048b8:	2d0b803a 	cmpltu	r5,r5,r20
 40048bc:	51cf803a 	cmpltu	r7,r10,r7
 40048c0:	29ceb03a 	or	r7,r5,r7
 40048c4:	4351803a 	cmpltu	r8,r8,r13
 40048c8:	610b803a 	cmpltu	r5,r12,r4
 40048cc:	4148b03a 	or	r4,r8,r5
 40048d0:	398f883a 	add	r7,r7,r6
 40048d4:	3909883a 	add	r4,r7,r4
 40048d8:	1810927a 	slli	r8,r3,9
 40048dc:	2449883a 	add	r4,r4,r17
 40048e0:	2008927a 	slli	r4,r4,9
 40048e4:	6022d5fa 	srli	r17,r12,23
 40048e8:	1806d5fa 	srli	r3,r3,23
 40048ec:	4252b03a 	or	r9,r8,r9
 40048f0:	600a927a 	slli	r5,r12,9
 40048f4:	4810c03a 	cmpne	r8,r9,zero
 40048f8:	2462b03a 	or	r17,r4,r17
 40048fc:	40c6b03a 	or	r3,r8,r3
 4004900:	8900402c 	andhi	r4,r17,256
 4004904:	1950b03a 	or	r8,r3,r5
 4004908:	20000726 	beq	r4,zero,4004928 <__muldf3+0x4dc>
 400490c:	4006d07a 	srli	r3,r8,1
 4004910:	880497fa 	slli	r2,r17,31
 4004914:	4200004c 	andi	r8,r8,1
 4004918:	8822d07a 	srli	r17,r17,1
 400491c:	1a10b03a 	or	r8,r3,r8
 4004920:	1210b03a 	or	r8,r2,r8
 4004924:	5805883a 	mov	r2,r11
 4004928:	1140ffc4 	addi	r5,r2,1023
 400492c:	0140440e 	bge	zero,r5,4004a40 <__muldf3+0x5f4>
 4004930:	40c001cc 	andi	r3,r8,7
 4004934:	18000726 	beq	r3,zero,4004954 <__muldf3+0x508>
 4004938:	40c003cc 	andi	r3,r8,15
 400493c:	01000104 	movi	r4,4
 4004940:	19000426 	beq	r3,r4,4004954 <__muldf3+0x508>
 4004944:	4107883a 	add	r3,r8,r4
 4004948:	1a11803a 	cmpltu	r8,r3,r8
 400494c:	8a23883a 	add	r17,r17,r8
 4004950:	1811883a 	mov	r8,r3
 4004954:	88c0402c 	andhi	r3,r17,256
 4004958:	18000426 	beq	r3,zero,400496c <__muldf3+0x520>
 400495c:	11410004 	addi	r5,r2,1024
 4004960:	00bfc034 	movhi	r2,65280
 4004964:	10bfffc4 	addi	r2,r2,-1
 4004968:	88a2703a 	and	r17,r17,r2
 400496c:	0081ff84 	movi	r2,2046
 4004970:	117f6416 	blt	r2,r5,4004704 <__alt_data_end+0xfc004704>
 4004974:	8828977a 	slli	r20,r17,29
 4004978:	4010d0fa 	srli	r8,r8,3
 400497c:	8822927a 	slli	r17,r17,9
 4004980:	2881ffcc 	andi	r2,r5,2047
 4004984:	a228b03a 	or	r20,r20,r8
 4004988:	880ad33a 	srli	r5,r17,12
 400498c:	b02b883a 	mov	r21,r22
 4004990:	003f0d06 	br	40045c8 <__alt_data_end+0xfc0045c8>
 4004994:	8080022c 	andhi	r2,r16,8
 4004998:	10000926 	beq	r2,zero,40049c0 <__muldf3+0x574>
 400499c:	8880022c 	andhi	r2,r17,8
 40049a0:	1000071e 	bne	r2,zero,40049c0 <__muldf3+0x574>
 40049a4:	00800434 	movhi	r2,16
 40049a8:	89400234 	orhi	r5,r17,8
 40049ac:	10bfffc4 	addi	r2,r2,-1
 40049b0:	b82b883a 	mov	r21,r23
 40049b4:	288a703a 	and	r5,r5,r2
 40049b8:	4029883a 	mov	r20,r8
 40049bc:	003f6806 	br	4004760 <__alt_data_end+0xfc004760>
 40049c0:	00800434 	movhi	r2,16
 40049c4:	81400234 	orhi	r5,r16,8
 40049c8:	10bfffc4 	addi	r2,r2,-1
 40049cc:	288a703a 	and	r5,r5,r2
 40049d0:	003f6306 	br	4004760 <__alt_data_end+0xfc004760>
 40049d4:	147ff604 	addi	r17,r2,-40
 40049d8:	3462983a 	sll	r17,r6,r17
 40049dc:	0011883a 	mov	r8,zero
 40049e0:	003f4406 	br	40046f4 <__alt_data_end+0xfc0046f4>
 40049e4:	3009883a 	mov	r4,r6
 40049e8:	d9800215 	stw	r6,8(sp)
 40049ec:	da400115 	stw	r9,4(sp)
 40049f0:	da800015 	stw	r10,0(sp)
 40049f4:	40058740 	call	4005874 <__clzsi2>
 40049f8:	10800804 	addi	r2,r2,32
 40049fc:	da800017 	ldw	r10,0(sp)
 4004a00:	da400117 	ldw	r9,4(sp)
 4004a04:	d9800217 	ldw	r6,8(sp)
 4004a08:	003f3006 	br	40046cc <__alt_data_end+0xfc0046cc>
 4004a0c:	143ff604 	addi	r16,r2,-40
 4004a10:	9c20983a 	sll	r16,r19,r16
 4004a14:	0029883a 	mov	r20,zero
 4004a18:	003f1606 	br	4004674 <__alt_data_end+0xfc004674>
 4004a1c:	d9800215 	stw	r6,8(sp)
 4004a20:	d9c00015 	stw	r7,0(sp)
 4004a24:	da400115 	stw	r9,4(sp)
 4004a28:	40058740 	call	4005874 <__clzsi2>
 4004a2c:	10800804 	addi	r2,r2,32
 4004a30:	da400117 	ldw	r9,4(sp)
 4004a34:	d9c00017 	ldw	r7,0(sp)
 4004a38:	d9800217 	ldw	r6,8(sp)
 4004a3c:	003f0306 	br	400464c <__alt_data_end+0xfc00464c>
 4004a40:	00c00044 	movi	r3,1
 4004a44:	1947c83a 	sub	r3,r3,r5
 4004a48:	00800e04 	movi	r2,56
 4004a4c:	10feda16 	blt	r2,r3,40045b8 <__alt_data_end+0xfc0045b8>
 4004a50:	008007c4 	movi	r2,31
 4004a54:	10c01b16 	blt	r2,r3,4004ac4 <__muldf3+0x678>
 4004a58:	00800804 	movi	r2,32
 4004a5c:	10c5c83a 	sub	r2,r2,r3
 4004a60:	888a983a 	sll	r5,r17,r2
 4004a64:	40c8d83a 	srl	r4,r8,r3
 4004a68:	4084983a 	sll	r2,r8,r2
 4004a6c:	88e2d83a 	srl	r17,r17,r3
 4004a70:	2906b03a 	or	r3,r5,r4
 4004a74:	1004c03a 	cmpne	r2,r2,zero
 4004a78:	1886b03a 	or	r3,r3,r2
 4004a7c:	188001cc 	andi	r2,r3,7
 4004a80:	10000726 	beq	r2,zero,4004aa0 <__muldf3+0x654>
 4004a84:	188003cc 	andi	r2,r3,15
 4004a88:	01000104 	movi	r4,4
 4004a8c:	11000426 	beq	r2,r4,4004aa0 <__muldf3+0x654>
 4004a90:	1805883a 	mov	r2,r3
 4004a94:	10c00104 	addi	r3,r2,4
 4004a98:	1885803a 	cmpltu	r2,r3,r2
 4004a9c:	88a3883a 	add	r17,r17,r2
 4004aa0:	8880202c 	andhi	r2,r17,128
 4004aa4:	10001c26 	beq	r2,zero,4004b18 <__muldf3+0x6cc>
 4004aa8:	b02b883a 	mov	r21,r22
 4004aac:	00800044 	movi	r2,1
 4004ab0:	000b883a 	mov	r5,zero
 4004ab4:	0029883a 	mov	r20,zero
 4004ab8:	003ec306 	br	40045c8 <__alt_data_end+0xfc0045c8>
 4004abc:	5805883a 	mov	r2,r11
 4004ac0:	003f9906 	br	4004928 <__alt_data_end+0xfc004928>
 4004ac4:	00bff844 	movi	r2,-31
 4004ac8:	1145c83a 	sub	r2,r2,r5
 4004acc:	8888d83a 	srl	r4,r17,r2
 4004ad0:	00800804 	movi	r2,32
 4004ad4:	18801a26 	beq	r3,r2,4004b40 <__muldf3+0x6f4>
 4004ad8:	00801004 	movi	r2,64
 4004adc:	10c5c83a 	sub	r2,r2,r3
 4004ae0:	8884983a 	sll	r2,r17,r2
 4004ae4:	1204b03a 	or	r2,r2,r8
 4004ae8:	1004c03a 	cmpne	r2,r2,zero
 4004aec:	2084b03a 	or	r2,r4,r2
 4004af0:	144001cc 	andi	r17,r2,7
 4004af4:	88000d1e 	bne	r17,zero,4004b2c <__muldf3+0x6e0>
 4004af8:	000b883a 	mov	r5,zero
 4004afc:	1028d0fa 	srli	r20,r2,3
 4004b00:	b02b883a 	mov	r21,r22
 4004b04:	0005883a 	mov	r2,zero
 4004b08:	a468b03a 	or	r20,r20,r17
 4004b0c:	003eae06 	br	40045c8 <__alt_data_end+0xfc0045c8>
 4004b10:	1007883a 	mov	r3,r2
 4004b14:	0023883a 	mov	r17,zero
 4004b18:	880a927a 	slli	r5,r17,9
 4004b1c:	1805883a 	mov	r2,r3
 4004b20:	8822977a 	slli	r17,r17,29
 4004b24:	280ad33a 	srli	r5,r5,12
 4004b28:	003ff406 	br	4004afc <__alt_data_end+0xfc004afc>
 4004b2c:	10c003cc 	andi	r3,r2,15
 4004b30:	01000104 	movi	r4,4
 4004b34:	193ff626 	beq	r3,r4,4004b10 <__alt_data_end+0xfc004b10>
 4004b38:	0023883a 	mov	r17,zero
 4004b3c:	003fd506 	br	4004a94 <__alt_data_end+0xfc004a94>
 4004b40:	0005883a 	mov	r2,zero
 4004b44:	003fe706 	br	4004ae4 <__alt_data_end+0xfc004ae4>
 4004b48:	00800434 	movhi	r2,16
 4004b4c:	89400234 	orhi	r5,r17,8
 4004b50:	10bfffc4 	addi	r2,r2,-1
 4004b54:	b02b883a 	mov	r21,r22
 4004b58:	288a703a 	and	r5,r5,r2
 4004b5c:	4029883a 	mov	r20,r8
 4004b60:	003eff06 	br	4004760 <__alt_data_end+0xfc004760>

04004b64 <__subdf3>:
 4004b64:	02000434 	movhi	r8,16
 4004b68:	423fffc4 	addi	r8,r8,-1
 4004b6c:	defffb04 	addi	sp,sp,-20
 4004b70:	2a14703a 	and	r10,r5,r8
 4004b74:	3812d53a 	srli	r9,r7,20
 4004b78:	3a10703a 	and	r8,r7,r8
 4004b7c:	2006d77a 	srli	r3,r4,29
 4004b80:	3004d77a 	srli	r2,r6,29
 4004b84:	dc000015 	stw	r16,0(sp)
 4004b88:	501490fa 	slli	r10,r10,3
 4004b8c:	2820d53a 	srli	r16,r5,20
 4004b90:	401090fa 	slli	r8,r8,3
 4004b94:	dc800215 	stw	r18,8(sp)
 4004b98:	dc400115 	stw	r17,4(sp)
 4004b9c:	dfc00415 	stw	ra,16(sp)
 4004ba0:	202290fa 	slli	r17,r4,3
 4004ba4:	dcc00315 	stw	r19,12(sp)
 4004ba8:	4a41ffcc 	andi	r9,r9,2047
 4004bac:	0101ffc4 	movi	r4,2047
 4004bb0:	2824d7fa 	srli	r18,r5,31
 4004bb4:	8401ffcc 	andi	r16,r16,2047
 4004bb8:	50c6b03a 	or	r3,r10,r3
 4004bbc:	380ed7fa 	srli	r7,r7,31
 4004bc0:	408ab03a 	or	r5,r8,r2
 4004bc4:	300c90fa 	slli	r6,r6,3
 4004bc8:	49009626 	beq	r9,r4,4004e24 <__subdf3+0x2c0>
 4004bcc:	39c0005c 	xori	r7,r7,1
 4004bd0:	8245c83a 	sub	r2,r16,r9
 4004bd4:	3c807426 	beq	r7,r18,4004da8 <__subdf3+0x244>
 4004bd8:	0080af0e 	bge	zero,r2,4004e98 <__subdf3+0x334>
 4004bdc:	48002a1e 	bne	r9,zero,4004c88 <__subdf3+0x124>
 4004be0:	2988b03a 	or	r4,r5,r6
 4004be4:	20009a1e 	bne	r4,zero,4004e50 <__subdf3+0x2ec>
 4004be8:	888001cc 	andi	r2,r17,7
 4004bec:	10000726 	beq	r2,zero,4004c0c <__subdf3+0xa8>
 4004bf0:	888003cc 	andi	r2,r17,15
 4004bf4:	01000104 	movi	r4,4
 4004bf8:	11000426 	beq	r2,r4,4004c0c <__subdf3+0xa8>
 4004bfc:	890b883a 	add	r5,r17,r4
 4004c00:	2c63803a 	cmpltu	r17,r5,r17
 4004c04:	1c47883a 	add	r3,r3,r17
 4004c08:	2823883a 	mov	r17,r5
 4004c0c:	1880202c 	andhi	r2,r3,128
 4004c10:	10005926 	beq	r2,zero,4004d78 <__subdf3+0x214>
 4004c14:	84000044 	addi	r16,r16,1
 4004c18:	0081ffc4 	movi	r2,2047
 4004c1c:	8080be26 	beq	r16,r2,4004f18 <__subdf3+0x3b4>
 4004c20:	017fe034 	movhi	r5,65408
 4004c24:	297fffc4 	addi	r5,r5,-1
 4004c28:	1946703a 	and	r3,r3,r5
 4004c2c:	1804977a 	slli	r2,r3,29
 4004c30:	1806927a 	slli	r3,r3,9
 4004c34:	8822d0fa 	srli	r17,r17,3
 4004c38:	8401ffcc 	andi	r16,r16,2047
 4004c3c:	180ad33a 	srli	r5,r3,12
 4004c40:	9100004c 	andi	r4,r18,1
 4004c44:	1444b03a 	or	r2,r2,r17
 4004c48:	80c1ffcc 	andi	r3,r16,2047
 4004c4c:	1820953a 	slli	r16,r3,20
 4004c50:	20c03fcc 	andi	r3,r4,255
 4004c54:	180897fa 	slli	r4,r3,31
 4004c58:	00c00434 	movhi	r3,16
 4004c5c:	18ffffc4 	addi	r3,r3,-1
 4004c60:	28c6703a 	and	r3,r5,r3
 4004c64:	1c06b03a 	or	r3,r3,r16
 4004c68:	1906b03a 	or	r3,r3,r4
 4004c6c:	dfc00417 	ldw	ra,16(sp)
 4004c70:	dcc00317 	ldw	r19,12(sp)
 4004c74:	dc800217 	ldw	r18,8(sp)
 4004c78:	dc400117 	ldw	r17,4(sp)
 4004c7c:	dc000017 	ldw	r16,0(sp)
 4004c80:	dec00504 	addi	sp,sp,20
 4004c84:	f800283a 	ret
 4004c88:	0101ffc4 	movi	r4,2047
 4004c8c:	813fd626 	beq	r16,r4,4004be8 <__alt_data_end+0xfc004be8>
 4004c90:	29402034 	orhi	r5,r5,128
 4004c94:	01000e04 	movi	r4,56
 4004c98:	2080a316 	blt	r4,r2,4004f28 <__subdf3+0x3c4>
 4004c9c:	010007c4 	movi	r4,31
 4004ca0:	2080c616 	blt	r4,r2,4004fbc <__subdf3+0x458>
 4004ca4:	01000804 	movi	r4,32
 4004ca8:	2089c83a 	sub	r4,r4,r2
 4004cac:	2910983a 	sll	r8,r5,r4
 4004cb0:	308ed83a 	srl	r7,r6,r2
 4004cb4:	3108983a 	sll	r4,r6,r4
 4004cb8:	2884d83a 	srl	r2,r5,r2
 4004cbc:	41ccb03a 	or	r6,r8,r7
 4004cc0:	2008c03a 	cmpne	r4,r4,zero
 4004cc4:	310cb03a 	or	r6,r6,r4
 4004cc8:	898dc83a 	sub	r6,r17,r6
 4004ccc:	89a3803a 	cmpltu	r17,r17,r6
 4004cd0:	1887c83a 	sub	r3,r3,r2
 4004cd4:	1c47c83a 	sub	r3,r3,r17
 4004cd8:	3023883a 	mov	r17,r6
 4004cdc:	1880202c 	andhi	r2,r3,128
 4004ce0:	10002326 	beq	r2,zero,4004d70 <__subdf3+0x20c>
 4004ce4:	04c02034 	movhi	r19,128
 4004ce8:	9cffffc4 	addi	r19,r19,-1
 4004cec:	1ce6703a 	and	r19,r3,r19
 4004cf0:	98007a26 	beq	r19,zero,4004edc <__subdf3+0x378>
 4004cf4:	9809883a 	mov	r4,r19
 4004cf8:	40058740 	call	4005874 <__clzsi2>
 4004cfc:	113ffe04 	addi	r4,r2,-8
 4004d00:	00c007c4 	movi	r3,31
 4004d04:	19007b16 	blt	r3,r4,4004ef4 <__subdf3+0x390>
 4004d08:	00800804 	movi	r2,32
 4004d0c:	1105c83a 	sub	r2,r2,r4
 4004d10:	8884d83a 	srl	r2,r17,r2
 4004d14:	9906983a 	sll	r3,r19,r4
 4004d18:	8922983a 	sll	r17,r17,r4
 4004d1c:	10c4b03a 	or	r2,r2,r3
 4004d20:	24007816 	blt	r4,r16,4004f04 <__subdf3+0x3a0>
 4004d24:	2421c83a 	sub	r16,r4,r16
 4004d28:	80c00044 	addi	r3,r16,1
 4004d2c:	010007c4 	movi	r4,31
 4004d30:	20c09516 	blt	r4,r3,4004f88 <__subdf3+0x424>
 4004d34:	01400804 	movi	r5,32
 4004d38:	28cbc83a 	sub	r5,r5,r3
 4004d3c:	88c8d83a 	srl	r4,r17,r3
 4004d40:	8962983a 	sll	r17,r17,r5
 4004d44:	114a983a 	sll	r5,r2,r5
 4004d48:	10c6d83a 	srl	r3,r2,r3
 4004d4c:	8804c03a 	cmpne	r2,r17,zero
 4004d50:	290ab03a 	or	r5,r5,r4
 4004d54:	28a2b03a 	or	r17,r5,r2
 4004d58:	0021883a 	mov	r16,zero
 4004d5c:	003fa206 	br	4004be8 <__alt_data_end+0xfc004be8>
 4004d60:	2090b03a 	or	r8,r4,r2
 4004d64:	40018e26 	beq	r8,zero,40053a0 <__subdf3+0x83c>
 4004d68:	1007883a 	mov	r3,r2
 4004d6c:	2023883a 	mov	r17,r4
 4004d70:	888001cc 	andi	r2,r17,7
 4004d74:	103f9e1e 	bne	r2,zero,4004bf0 <__alt_data_end+0xfc004bf0>
 4004d78:	1804977a 	slli	r2,r3,29
 4004d7c:	8822d0fa 	srli	r17,r17,3
 4004d80:	1810d0fa 	srli	r8,r3,3
 4004d84:	9100004c 	andi	r4,r18,1
 4004d88:	1444b03a 	or	r2,r2,r17
 4004d8c:	00c1ffc4 	movi	r3,2047
 4004d90:	80c02826 	beq	r16,r3,4004e34 <__subdf3+0x2d0>
 4004d94:	01400434 	movhi	r5,16
 4004d98:	297fffc4 	addi	r5,r5,-1
 4004d9c:	80e0703a 	and	r16,r16,r3
 4004da0:	414a703a 	and	r5,r8,r5
 4004da4:	003fa806 	br	4004c48 <__alt_data_end+0xfc004c48>
 4004da8:	0080630e 	bge	zero,r2,4004f38 <__subdf3+0x3d4>
 4004dac:	48003026 	beq	r9,zero,4004e70 <__subdf3+0x30c>
 4004db0:	0101ffc4 	movi	r4,2047
 4004db4:	813f8c26 	beq	r16,r4,4004be8 <__alt_data_end+0xfc004be8>
 4004db8:	29402034 	orhi	r5,r5,128
 4004dbc:	01000e04 	movi	r4,56
 4004dc0:	2080a90e 	bge	r4,r2,4005068 <__subdf3+0x504>
 4004dc4:	298cb03a 	or	r6,r5,r6
 4004dc8:	3012c03a 	cmpne	r9,r6,zero
 4004dcc:	0005883a 	mov	r2,zero
 4004dd0:	4c53883a 	add	r9,r9,r17
 4004dd4:	4c63803a 	cmpltu	r17,r9,r17
 4004dd8:	10c7883a 	add	r3,r2,r3
 4004ddc:	88c7883a 	add	r3,r17,r3
 4004de0:	4823883a 	mov	r17,r9
 4004de4:	1880202c 	andhi	r2,r3,128
 4004de8:	1000d026 	beq	r2,zero,400512c <__subdf3+0x5c8>
 4004dec:	84000044 	addi	r16,r16,1
 4004df0:	0081ffc4 	movi	r2,2047
 4004df4:	8080fe26 	beq	r16,r2,40051f0 <__subdf3+0x68c>
 4004df8:	00bfe034 	movhi	r2,65408
 4004dfc:	10bfffc4 	addi	r2,r2,-1
 4004e00:	1886703a 	and	r3,r3,r2
 4004e04:	880ad07a 	srli	r5,r17,1
 4004e08:	180497fa 	slli	r2,r3,31
 4004e0c:	8900004c 	andi	r4,r17,1
 4004e10:	2922b03a 	or	r17,r5,r4
 4004e14:	1806d07a 	srli	r3,r3,1
 4004e18:	1462b03a 	or	r17,r2,r17
 4004e1c:	3825883a 	mov	r18,r7
 4004e20:	003f7106 	br	4004be8 <__alt_data_end+0xfc004be8>
 4004e24:	2984b03a 	or	r2,r5,r6
 4004e28:	103f6826 	beq	r2,zero,4004bcc <__alt_data_end+0xfc004bcc>
 4004e2c:	39c03fcc 	andi	r7,r7,255
 4004e30:	003f6706 	br	4004bd0 <__alt_data_end+0xfc004bd0>
 4004e34:	4086b03a 	or	r3,r8,r2
 4004e38:	18015226 	beq	r3,zero,4005384 <__subdf3+0x820>
 4004e3c:	00c00434 	movhi	r3,16
 4004e40:	41400234 	orhi	r5,r8,8
 4004e44:	18ffffc4 	addi	r3,r3,-1
 4004e48:	28ca703a 	and	r5,r5,r3
 4004e4c:	003f7e06 	br	4004c48 <__alt_data_end+0xfc004c48>
 4004e50:	10bfffc4 	addi	r2,r2,-1
 4004e54:	1000491e 	bne	r2,zero,4004f7c <__subdf3+0x418>
 4004e58:	898fc83a 	sub	r7,r17,r6
 4004e5c:	89e3803a 	cmpltu	r17,r17,r7
 4004e60:	1947c83a 	sub	r3,r3,r5
 4004e64:	1c47c83a 	sub	r3,r3,r17
 4004e68:	3823883a 	mov	r17,r7
 4004e6c:	003f9b06 	br	4004cdc <__alt_data_end+0xfc004cdc>
 4004e70:	2988b03a 	or	r4,r5,r6
 4004e74:	203f5c26 	beq	r4,zero,4004be8 <__alt_data_end+0xfc004be8>
 4004e78:	10bfffc4 	addi	r2,r2,-1
 4004e7c:	1000931e 	bne	r2,zero,40050cc <__subdf3+0x568>
 4004e80:	898d883a 	add	r6,r17,r6
 4004e84:	3463803a 	cmpltu	r17,r6,r17
 4004e88:	1947883a 	add	r3,r3,r5
 4004e8c:	88c7883a 	add	r3,r17,r3
 4004e90:	3023883a 	mov	r17,r6
 4004e94:	003fd306 	br	4004de4 <__alt_data_end+0xfc004de4>
 4004e98:	1000541e 	bne	r2,zero,4004fec <__subdf3+0x488>
 4004e9c:	80800044 	addi	r2,r16,1
 4004ea0:	1081ffcc 	andi	r2,r2,2047
 4004ea4:	01000044 	movi	r4,1
 4004ea8:	2080a20e 	bge	r4,r2,4005134 <__subdf3+0x5d0>
 4004eac:	8989c83a 	sub	r4,r17,r6
 4004eb0:	8905803a 	cmpltu	r2,r17,r4
 4004eb4:	1967c83a 	sub	r19,r3,r5
 4004eb8:	98a7c83a 	sub	r19,r19,r2
 4004ebc:	9880202c 	andhi	r2,r19,128
 4004ec0:	10006326 	beq	r2,zero,4005050 <__subdf3+0x4ec>
 4004ec4:	3463c83a 	sub	r17,r6,r17
 4004ec8:	28c7c83a 	sub	r3,r5,r3
 4004ecc:	344d803a 	cmpltu	r6,r6,r17
 4004ed0:	19a7c83a 	sub	r19,r3,r6
 4004ed4:	3825883a 	mov	r18,r7
 4004ed8:	983f861e 	bne	r19,zero,4004cf4 <__alt_data_end+0xfc004cf4>
 4004edc:	8809883a 	mov	r4,r17
 4004ee0:	40058740 	call	4005874 <__clzsi2>
 4004ee4:	10800804 	addi	r2,r2,32
 4004ee8:	113ffe04 	addi	r4,r2,-8
 4004eec:	00c007c4 	movi	r3,31
 4004ef0:	193f850e 	bge	r3,r4,4004d08 <__alt_data_end+0xfc004d08>
 4004ef4:	10bff604 	addi	r2,r2,-40
 4004ef8:	8884983a 	sll	r2,r17,r2
 4004efc:	0023883a 	mov	r17,zero
 4004f00:	243f880e 	bge	r4,r16,4004d24 <__alt_data_end+0xfc004d24>
 4004f04:	00ffe034 	movhi	r3,65408
 4004f08:	18ffffc4 	addi	r3,r3,-1
 4004f0c:	8121c83a 	sub	r16,r16,r4
 4004f10:	10c6703a 	and	r3,r2,r3
 4004f14:	003f3406 	br	4004be8 <__alt_data_end+0xfc004be8>
 4004f18:	9100004c 	andi	r4,r18,1
 4004f1c:	000b883a 	mov	r5,zero
 4004f20:	0005883a 	mov	r2,zero
 4004f24:	003f4806 	br	4004c48 <__alt_data_end+0xfc004c48>
 4004f28:	298cb03a 	or	r6,r5,r6
 4004f2c:	300cc03a 	cmpne	r6,r6,zero
 4004f30:	0005883a 	mov	r2,zero
 4004f34:	003f6406 	br	4004cc8 <__alt_data_end+0xfc004cc8>
 4004f38:	10009a1e 	bne	r2,zero,40051a4 <__subdf3+0x640>
 4004f3c:	82400044 	addi	r9,r16,1
 4004f40:	4881ffcc 	andi	r2,r9,2047
 4004f44:	02800044 	movi	r10,1
 4004f48:	5080670e 	bge	r10,r2,40050e8 <__subdf3+0x584>
 4004f4c:	0081ffc4 	movi	r2,2047
 4004f50:	4880af26 	beq	r9,r2,4005210 <__subdf3+0x6ac>
 4004f54:	898d883a 	add	r6,r17,r6
 4004f58:	1945883a 	add	r2,r3,r5
 4004f5c:	3447803a 	cmpltu	r3,r6,r17
 4004f60:	1887883a 	add	r3,r3,r2
 4004f64:	182297fa 	slli	r17,r3,31
 4004f68:	300cd07a 	srli	r6,r6,1
 4004f6c:	1806d07a 	srli	r3,r3,1
 4004f70:	4821883a 	mov	r16,r9
 4004f74:	89a2b03a 	or	r17,r17,r6
 4004f78:	003f1b06 	br	4004be8 <__alt_data_end+0xfc004be8>
 4004f7c:	0101ffc4 	movi	r4,2047
 4004f80:	813f441e 	bne	r16,r4,4004c94 <__alt_data_end+0xfc004c94>
 4004f84:	003f1806 	br	4004be8 <__alt_data_end+0xfc004be8>
 4004f88:	843ff844 	addi	r16,r16,-31
 4004f8c:	01400804 	movi	r5,32
 4004f90:	1408d83a 	srl	r4,r2,r16
 4004f94:	19405026 	beq	r3,r5,40050d8 <__subdf3+0x574>
 4004f98:	01401004 	movi	r5,64
 4004f9c:	28c7c83a 	sub	r3,r5,r3
 4004fa0:	10c4983a 	sll	r2,r2,r3
 4004fa4:	88a2b03a 	or	r17,r17,r2
 4004fa8:	8822c03a 	cmpne	r17,r17,zero
 4004fac:	2462b03a 	or	r17,r4,r17
 4004fb0:	0007883a 	mov	r3,zero
 4004fb4:	0021883a 	mov	r16,zero
 4004fb8:	003f6d06 	br	4004d70 <__alt_data_end+0xfc004d70>
 4004fbc:	11fff804 	addi	r7,r2,-32
 4004fc0:	01000804 	movi	r4,32
 4004fc4:	29ced83a 	srl	r7,r5,r7
 4004fc8:	11004526 	beq	r2,r4,40050e0 <__subdf3+0x57c>
 4004fcc:	01001004 	movi	r4,64
 4004fd0:	2089c83a 	sub	r4,r4,r2
 4004fd4:	2904983a 	sll	r2,r5,r4
 4004fd8:	118cb03a 	or	r6,r2,r6
 4004fdc:	300cc03a 	cmpne	r6,r6,zero
 4004fe0:	398cb03a 	or	r6,r7,r6
 4004fe4:	0005883a 	mov	r2,zero
 4004fe8:	003f3706 	br	4004cc8 <__alt_data_end+0xfc004cc8>
 4004fec:	80002a26 	beq	r16,zero,4005098 <__subdf3+0x534>
 4004ff0:	0101ffc4 	movi	r4,2047
 4004ff4:	49006626 	beq	r9,r4,4005190 <__subdf3+0x62c>
 4004ff8:	0085c83a 	sub	r2,zero,r2
 4004ffc:	18c02034 	orhi	r3,r3,128
 4005000:	01000e04 	movi	r4,56
 4005004:	20807e16 	blt	r4,r2,4005200 <__subdf3+0x69c>
 4005008:	010007c4 	movi	r4,31
 400500c:	2080e716 	blt	r4,r2,40053ac <__subdf3+0x848>
 4005010:	01000804 	movi	r4,32
 4005014:	2089c83a 	sub	r4,r4,r2
 4005018:	1914983a 	sll	r10,r3,r4
 400501c:	8890d83a 	srl	r8,r17,r2
 4005020:	8908983a 	sll	r4,r17,r4
 4005024:	1884d83a 	srl	r2,r3,r2
 4005028:	5222b03a 	or	r17,r10,r8
 400502c:	2006c03a 	cmpne	r3,r4,zero
 4005030:	88e2b03a 	or	r17,r17,r3
 4005034:	3463c83a 	sub	r17,r6,r17
 4005038:	2885c83a 	sub	r2,r5,r2
 400503c:	344d803a 	cmpltu	r6,r6,r17
 4005040:	1187c83a 	sub	r3,r2,r6
 4005044:	4821883a 	mov	r16,r9
 4005048:	3825883a 	mov	r18,r7
 400504c:	003f2306 	br	4004cdc <__alt_data_end+0xfc004cdc>
 4005050:	24d0b03a 	or	r8,r4,r19
 4005054:	40001b1e 	bne	r8,zero,40050c4 <__subdf3+0x560>
 4005058:	0005883a 	mov	r2,zero
 400505c:	0009883a 	mov	r4,zero
 4005060:	0021883a 	mov	r16,zero
 4005064:	003f4906 	br	4004d8c <__alt_data_end+0xfc004d8c>
 4005068:	010007c4 	movi	r4,31
 400506c:	20803a16 	blt	r4,r2,4005158 <__subdf3+0x5f4>
 4005070:	01000804 	movi	r4,32
 4005074:	2089c83a 	sub	r4,r4,r2
 4005078:	2912983a 	sll	r9,r5,r4
 400507c:	3090d83a 	srl	r8,r6,r2
 4005080:	3108983a 	sll	r4,r6,r4
 4005084:	2884d83a 	srl	r2,r5,r2
 4005088:	4a12b03a 	or	r9,r9,r8
 400508c:	2008c03a 	cmpne	r4,r4,zero
 4005090:	4912b03a 	or	r9,r9,r4
 4005094:	003f4e06 	br	4004dd0 <__alt_data_end+0xfc004dd0>
 4005098:	1c48b03a 	or	r4,r3,r17
 400509c:	20003c26 	beq	r4,zero,4005190 <__subdf3+0x62c>
 40050a0:	0084303a 	nor	r2,zero,r2
 40050a4:	1000381e 	bne	r2,zero,4005188 <__subdf3+0x624>
 40050a8:	3463c83a 	sub	r17,r6,r17
 40050ac:	28c5c83a 	sub	r2,r5,r3
 40050b0:	344d803a 	cmpltu	r6,r6,r17
 40050b4:	1187c83a 	sub	r3,r2,r6
 40050b8:	4821883a 	mov	r16,r9
 40050bc:	3825883a 	mov	r18,r7
 40050c0:	003f0606 	br	4004cdc <__alt_data_end+0xfc004cdc>
 40050c4:	2023883a 	mov	r17,r4
 40050c8:	003f0906 	br	4004cf0 <__alt_data_end+0xfc004cf0>
 40050cc:	0101ffc4 	movi	r4,2047
 40050d0:	813f3a1e 	bne	r16,r4,4004dbc <__alt_data_end+0xfc004dbc>
 40050d4:	003ec406 	br	4004be8 <__alt_data_end+0xfc004be8>
 40050d8:	0005883a 	mov	r2,zero
 40050dc:	003fb106 	br	4004fa4 <__alt_data_end+0xfc004fa4>
 40050e0:	0005883a 	mov	r2,zero
 40050e4:	003fbc06 	br	4004fd8 <__alt_data_end+0xfc004fd8>
 40050e8:	1c44b03a 	or	r2,r3,r17
 40050ec:	80008e1e 	bne	r16,zero,4005328 <__subdf3+0x7c4>
 40050f0:	1000c826 	beq	r2,zero,4005414 <__subdf3+0x8b0>
 40050f4:	2984b03a 	or	r2,r5,r6
 40050f8:	103ebb26 	beq	r2,zero,4004be8 <__alt_data_end+0xfc004be8>
 40050fc:	8989883a 	add	r4,r17,r6
 4005100:	1945883a 	add	r2,r3,r5
 4005104:	2447803a 	cmpltu	r3,r4,r17
 4005108:	1887883a 	add	r3,r3,r2
 400510c:	1880202c 	andhi	r2,r3,128
 4005110:	2023883a 	mov	r17,r4
 4005114:	103f1626 	beq	r2,zero,4004d70 <__alt_data_end+0xfc004d70>
 4005118:	00bfe034 	movhi	r2,65408
 400511c:	10bfffc4 	addi	r2,r2,-1
 4005120:	5021883a 	mov	r16,r10
 4005124:	1886703a 	and	r3,r3,r2
 4005128:	003eaf06 	br	4004be8 <__alt_data_end+0xfc004be8>
 400512c:	3825883a 	mov	r18,r7
 4005130:	003f0f06 	br	4004d70 <__alt_data_end+0xfc004d70>
 4005134:	1c44b03a 	or	r2,r3,r17
 4005138:	8000251e 	bne	r16,zero,40051d0 <__subdf3+0x66c>
 400513c:	1000661e 	bne	r2,zero,40052d8 <__subdf3+0x774>
 4005140:	2990b03a 	or	r8,r5,r6
 4005144:	40009626 	beq	r8,zero,40053a0 <__subdf3+0x83c>
 4005148:	2807883a 	mov	r3,r5
 400514c:	3023883a 	mov	r17,r6
 4005150:	3825883a 	mov	r18,r7
 4005154:	003ea406 	br	4004be8 <__alt_data_end+0xfc004be8>
 4005158:	127ff804 	addi	r9,r2,-32
 400515c:	01000804 	movi	r4,32
 4005160:	2a52d83a 	srl	r9,r5,r9
 4005164:	11008c26 	beq	r2,r4,4005398 <__subdf3+0x834>
 4005168:	01001004 	movi	r4,64
 400516c:	2085c83a 	sub	r2,r4,r2
 4005170:	2884983a 	sll	r2,r5,r2
 4005174:	118cb03a 	or	r6,r2,r6
 4005178:	300cc03a 	cmpne	r6,r6,zero
 400517c:	4992b03a 	or	r9,r9,r6
 4005180:	0005883a 	mov	r2,zero
 4005184:	003f1206 	br	4004dd0 <__alt_data_end+0xfc004dd0>
 4005188:	0101ffc4 	movi	r4,2047
 400518c:	493f9c1e 	bne	r9,r4,4005000 <__alt_data_end+0xfc005000>
 4005190:	2807883a 	mov	r3,r5
 4005194:	3023883a 	mov	r17,r6
 4005198:	4821883a 	mov	r16,r9
 400519c:	3825883a 	mov	r18,r7
 40051a0:	003e9106 	br	4004be8 <__alt_data_end+0xfc004be8>
 40051a4:	80001f1e 	bne	r16,zero,4005224 <__subdf3+0x6c0>
 40051a8:	1c48b03a 	or	r4,r3,r17
 40051ac:	20005a26 	beq	r4,zero,4005318 <__subdf3+0x7b4>
 40051b0:	0084303a 	nor	r2,zero,r2
 40051b4:	1000561e 	bne	r2,zero,4005310 <__subdf3+0x7ac>
 40051b8:	89a3883a 	add	r17,r17,r6
 40051bc:	1945883a 	add	r2,r3,r5
 40051c0:	898d803a 	cmpltu	r6,r17,r6
 40051c4:	3087883a 	add	r3,r6,r2
 40051c8:	4821883a 	mov	r16,r9
 40051cc:	003f0506 	br	4004de4 <__alt_data_end+0xfc004de4>
 40051d0:	10002b1e 	bne	r2,zero,4005280 <__subdf3+0x71c>
 40051d4:	2984b03a 	or	r2,r5,r6
 40051d8:	10008026 	beq	r2,zero,40053dc <__subdf3+0x878>
 40051dc:	2807883a 	mov	r3,r5
 40051e0:	3023883a 	mov	r17,r6
 40051e4:	3825883a 	mov	r18,r7
 40051e8:	0401ffc4 	movi	r16,2047
 40051ec:	003e7e06 	br	4004be8 <__alt_data_end+0xfc004be8>
 40051f0:	3809883a 	mov	r4,r7
 40051f4:	0011883a 	mov	r8,zero
 40051f8:	0005883a 	mov	r2,zero
 40051fc:	003ee306 	br	4004d8c <__alt_data_end+0xfc004d8c>
 4005200:	1c62b03a 	or	r17,r3,r17
 4005204:	8822c03a 	cmpne	r17,r17,zero
 4005208:	0005883a 	mov	r2,zero
 400520c:	003f8906 	br	4005034 <__alt_data_end+0xfc005034>
 4005210:	3809883a 	mov	r4,r7
 4005214:	4821883a 	mov	r16,r9
 4005218:	0011883a 	mov	r8,zero
 400521c:	0005883a 	mov	r2,zero
 4005220:	003eda06 	br	4004d8c <__alt_data_end+0xfc004d8c>
 4005224:	0101ffc4 	movi	r4,2047
 4005228:	49003b26 	beq	r9,r4,4005318 <__subdf3+0x7b4>
 400522c:	0085c83a 	sub	r2,zero,r2
 4005230:	18c02034 	orhi	r3,r3,128
 4005234:	01000e04 	movi	r4,56
 4005238:	20806e16 	blt	r4,r2,40053f4 <__subdf3+0x890>
 400523c:	010007c4 	movi	r4,31
 4005240:	20807716 	blt	r4,r2,4005420 <__subdf3+0x8bc>
 4005244:	01000804 	movi	r4,32
 4005248:	2089c83a 	sub	r4,r4,r2
 400524c:	1914983a 	sll	r10,r3,r4
 4005250:	8890d83a 	srl	r8,r17,r2
 4005254:	8908983a 	sll	r4,r17,r4
 4005258:	1884d83a 	srl	r2,r3,r2
 400525c:	5222b03a 	or	r17,r10,r8
 4005260:	2006c03a 	cmpne	r3,r4,zero
 4005264:	88e2b03a 	or	r17,r17,r3
 4005268:	89a3883a 	add	r17,r17,r6
 400526c:	1145883a 	add	r2,r2,r5
 4005270:	898d803a 	cmpltu	r6,r17,r6
 4005274:	3087883a 	add	r3,r6,r2
 4005278:	4821883a 	mov	r16,r9
 400527c:	003ed906 	br	4004de4 <__alt_data_end+0xfc004de4>
 4005280:	2984b03a 	or	r2,r5,r6
 4005284:	10004226 	beq	r2,zero,4005390 <__subdf3+0x82c>
 4005288:	1808d0fa 	srli	r4,r3,3
 400528c:	8822d0fa 	srli	r17,r17,3
 4005290:	1806977a 	slli	r3,r3,29
 4005294:	2080022c 	andhi	r2,r4,8
 4005298:	1c62b03a 	or	r17,r3,r17
 400529c:	10000826 	beq	r2,zero,40052c0 <__subdf3+0x75c>
 40052a0:	2812d0fa 	srli	r9,r5,3
 40052a4:	4880022c 	andhi	r2,r9,8
 40052a8:	1000051e 	bne	r2,zero,40052c0 <__subdf3+0x75c>
 40052ac:	300cd0fa 	srli	r6,r6,3
 40052b0:	2804977a 	slli	r2,r5,29
 40052b4:	4809883a 	mov	r4,r9
 40052b8:	3825883a 	mov	r18,r7
 40052bc:	11a2b03a 	or	r17,r2,r6
 40052c0:	8806d77a 	srli	r3,r17,29
 40052c4:	200890fa 	slli	r4,r4,3
 40052c8:	882290fa 	slli	r17,r17,3
 40052cc:	0401ffc4 	movi	r16,2047
 40052d0:	1906b03a 	or	r3,r3,r4
 40052d4:	003e4406 	br	4004be8 <__alt_data_end+0xfc004be8>
 40052d8:	2984b03a 	or	r2,r5,r6
 40052dc:	103e4226 	beq	r2,zero,4004be8 <__alt_data_end+0xfc004be8>
 40052e0:	8989c83a 	sub	r4,r17,r6
 40052e4:	8911803a 	cmpltu	r8,r17,r4
 40052e8:	1945c83a 	sub	r2,r3,r5
 40052ec:	1205c83a 	sub	r2,r2,r8
 40052f0:	1200202c 	andhi	r8,r2,128
 40052f4:	403e9a26 	beq	r8,zero,4004d60 <__alt_data_end+0xfc004d60>
 40052f8:	3463c83a 	sub	r17,r6,r17
 40052fc:	28c5c83a 	sub	r2,r5,r3
 4005300:	344d803a 	cmpltu	r6,r6,r17
 4005304:	1187c83a 	sub	r3,r2,r6
 4005308:	3825883a 	mov	r18,r7
 400530c:	003e3606 	br	4004be8 <__alt_data_end+0xfc004be8>
 4005310:	0101ffc4 	movi	r4,2047
 4005314:	493fc71e 	bne	r9,r4,4005234 <__alt_data_end+0xfc005234>
 4005318:	2807883a 	mov	r3,r5
 400531c:	3023883a 	mov	r17,r6
 4005320:	4821883a 	mov	r16,r9
 4005324:	003e3006 	br	4004be8 <__alt_data_end+0xfc004be8>
 4005328:	10003626 	beq	r2,zero,4005404 <__subdf3+0x8a0>
 400532c:	2984b03a 	or	r2,r5,r6
 4005330:	10001726 	beq	r2,zero,4005390 <__subdf3+0x82c>
 4005334:	1808d0fa 	srli	r4,r3,3
 4005338:	8822d0fa 	srli	r17,r17,3
 400533c:	1806977a 	slli	r3,r3,29
 4005340:	2080022c 	andhi	r2,r4,8
 4005344:	1c62b03a 	or	r17,r3,r17
 4005348:	10000726 	beq	r2,zero,4005368 <__subdf3+0x804>
 400534c:	2812d0fa 	srli	r9,r5,3
 4005350:	4880022c 	andhi	r2,r9,8
 4005354:	1000041e 	bne	r2,zero,4005368 <__subdf3+0x804>
 4005358:	300cd0fa 	srli	r6,r6,3
 400535c:	2804977a 	slli	r2,r5,29
 4005360:	4809883a 	mov	r4,r9
 4005364:	11a2b03a 	or	r17,r2,r6
 4005368:	8806d77a 	srli	r3,r17,29
 400536c:	200890fa 	slli	r4,r4,3
 4005370:	882290fa 	slli	r17,r17,3
 4005374:	3825883a 	mov	r18,r7
 4005378:	1906b03a 	or	r3,r3,r4
 400537c:	0401ffc4 	movi	r16,2047
 4005380:	003e1906 	br	4004be8 <__alt_data_end+0xfc004be8>
 4005384:	000b883a 	mov	r5,zero
 4005388:	0005883a 	mov	r2,zero
 400538c:	003e2e06 	br	4004c48 <__alt_data_end+0xfc004c48>
 4005390:	0401ffc4 	movi	r16,2047
 4005394:	003e1406 	br	4004be8 <__alt_data_end+0xfc004be8>
 4005398:	0005883a 	mov	r2,zero
 400539c:	003f7506 	br	4005174 <__alt_data_end+0xfc005174>
 40053a0:	0005883a 	mov	r2,zero
 40053a4:	0009883a 	mov	r4,zero
 40053a8:	003e7806 	br	4004d8c <__alt_data_end+0xfc004d8c>
 40053ac:	123ff804 	addi	r8,r2,-32
 40053b0:	01000804 	movi	r4,32
 40053b4:	1a10d83a 	srl	r8,r3,r8
 40053b8:	11002526 	beq	r2,r4,4005450 <__subdf3+0x8ec>
 40053bc:	01001004 	movi	r4,64
 40053c0:	2085c83a 	sub	r2,r4,r2
 40053c4:	1884983a 	sll	r2,r3,r2
 40053c8:	1444b03a 	or	r2,r2,r17
 40053cc:	1004c03a 	cmpne	r2,r2,zero
 40053d0:	40a2b03a 	or	r17,r8,r2
 40053d4:	0005883a 	mov	r2,zero
 40053d8:	003f1606 	br	4005034 <__alt_data_end+0xfc005034>
 40053dc:	02000434 	movhi	r8,16
 40053e0:	0009883a 	mov	r4,zero
 40053e4:	423fffc4 	addi	r8,r8,-1
 40053e8:	00bfffc4 	movi	r2,-1
 40053ec:	0401ffc4 	movi	r16,2047
 40053f0:	003e6606 	br	4004d8c <__alt_data_end+0xfc004d8c>
 40053f4:	1c62b03a 	or	r17,r3,r17
 40053f8:	8822c03a 	cmpne	r17,r17,zero
 40053fc:	0005883a 	mov	r2,zero
 4005400:	003f9906 	br	4005268 <__alt_data_end+0xfc005268>
 4005404:	2807883a 	mov	r3,r5
 4005408:	3023883a 	mov	r17,r6
 400540c:	0401ffc4 	movi	r16,2047
 4005410:	003df506 	br	4004be8 <__alt_data_end+0xfc004be8>
 4005414:	2807883a 	mov	r3,r5
 4005418:	3023883a 	mov	r17,r6
 400541c:	003df206 	br	4004be8 <__alt_data_end+0xfc004be8>
 4005420:	123ff804 	addi	r8,r2,-32
 4005424:	01000804 	movi	r4,32
 4005428:	1a10d83a 	srl	r8,r3,r8
 400542c:	11000a26 	beq	r2,r4,4005458 <__subdf3+0x8f4>
 4005430:	01001004 	movi	r4,64
 4005434:	2085c83a 	sub	r2,r4,r2
 4005438:	1884983a 	sll	r2,r3,r2
 400543c:	1444b03a 	or	r2,r2,r17
 4005440:	1004c03a 	cmpne	r2,r2,zero
 4005444:	40a2b03a 	or	r17,r8,r2
 4005448:	0005883a 	mov	r2,zero
 400544c:	003f8606 	br	4005268 <__alt_data_end+0xfc005268>
 4005450:	0005883a 	mov	r2,zero
 4005454:	003fdc06 	br	40053c8 <__alt_data_end+0xfc0053c8>
 4005458:	0005883a 	mov	r2,zero
 400545c:	003ff706 	br	400543c <__alt_data_end+0xfc00543c>

04005460 <__fixdfsi>:
 4005460:	280cd53a 	srli	r6,r5,20
 4005464:	00c00434 	movhi	r3,16
 4005468:	18ffffc4 	addi	r3,r3,-1
 400546c:	3181ffcc 	andi	r6,r6,2047
 4005470:	01c0ff84 	movi	r7,1022
 4005474:	28c6703a 	and	r3,r5,r3
 4005478:	280ad7fa 	srli	r5,r5,31
 400547c:	3980120e 	bge	r7,r6,40054c8 <__fixdfsi+0x68>
 4005480:	00810744 	movi	r2,1053
 4005484:	11800c16 	blt	r2,r6,40054b8 <__fixdfsi+0x58>
 4005488:	00810cc4 	movi	r2,1075
 400548c:	1185c83a 	sub	r2,r2,r6
 4005490:	01c007c4 	movi	r7,31
 4005494:	18c00434 	orhi	r3,r3,16
 4005498:	38800d16 	blt	r7,r2,40054d0 <__fixdfsi+0x70>
 400549c:	31befb44 	addi	r6,r6,-1043
 40054a0:	2084d83a 	srl	r2,r4,r2
 40054a4:	1986983a 	sll	r3,r3,r6
 40054a8:	1884b03a 	or	r2,r3,r2
 40054ac:	28000726 	beq	r5,zero,40054cc <__fixdfsi+0x6c>
 40054b0:	0085c83a 	sub	r2,zero,r2
 40054b4:	f800283a 	ret
 40054b8:	00a00034 	movhi	r2,32768
 40054bc:	10bfffc4 	addi	r2,r2,-1
 40054c0:	2885883a 	add	r2,r5,r2
 40054c4:	f800283a 	ret
 40054c8:	0005883a 	mov	r2,zero
 40054cc:	f800283a 	ret
 40054d0:	008104c4 	movi	r2,1043
 40054d4:	1185c83a 	sub	r2,r2,r6
 40054d8:	1884d83a 	srl	r2,r3,r2
 40054dc:	003ff306 	br	40054ac <__alt_data_end+0xfc0054ac>

040054e0 <__floatsidf>:
 40054e0:	defffd04 	addi	sp,sp,-12
 40054e4:	dfc00215 	stw	ra,8(sp)
 40054e8:	dc400115 	stw	r17,4(sp)
 40054ec:	dc000015 	stw	r16,0(sp)
 40054f0:	20002b26 	beq	r4,zero,40055a0 <__floatsidf+0xc0>
 40054f4:	2023883a 	mov	r17,r4
 40054f8:	2020d7fa 	srli	r16,r4,31
 40054fc:	20002d16 	blt	r4,zero,40055b4 <__floatsidf+0xd4>
 4005500:	8809883a 	mov	r4,r17
 4005504:	40058740 	call	4005874 <__clzsi2>
 4005508:	01410784 	movi	r5,1054
 400550c:	288bc83a 	sub	r5,r5,r2
 4005510:	01010cc4 	movi	r4,1075
 4005514:	2149c83a 	sub	r4,r4,r5
 4005518:	00c007c4 	movi	r3,31
 400551c:	1900160e 	bge	r3,r4,4005578 <__floatsidf+0x98>
 4005520:	00c104c4 	movi	r3,1043
 4005524:	1947c83a 	sub	r3,r3,r5
 4005528:	88c6983a 	sll	r3,r17,r3
 400552c:	00800434 	movhi	r2,16
 4005530:	10bfffc4 	addi	r2,r2,-1
 4005534:	1886703a 	and	r3,r3,r2
 4005538:	2941ffcc 	andi	r5,r5,2047
 400553c:	800d883a 	mov	r6,r16
 4005540:	0005883a 	mov	r2,zero
 4005544:	280a953a 	slli	r5,r5,20
 4005548:	31803fcc 	andi	r6,r6,255
 400554c:	01000434 	movhi	r4,16
 4005550:	300c97fa 	slli	r6,r6,31
 4005554:	213fffc4 	addi	r4,r4,-1
 4005558:	1906703a 	and	r3,r3,r4
 400555c:	1946b03a 	or	r3,r3,r5
 4005560:	1986b03a 	or	r3,r3,r6
 4005564:	dfc00217 	ldw	ra,8(sp)
 4005568:	dc400117 	ldw	r17,4(sp)
 400556c:	dc000017 	ldw	r16,0(sp)
 4005570:	dec00304 	addi	sp,sp,12
 4005574:	f800283a 	ret
 4005578:	00c002c4 	movi	r3,11
 400557c:	1887c83a 	sub	r3,r3,r2
 4005580:	88c6d83a 	srl	r3,r17,r3
 4005584:	8904983a 	sll	r2,r17,r4
 4005588:	01000434 	movhi	r4,16
 400558c:	213fffc4 	addi	r4,r4,-1
 4005590:	2941ffcc 	andi	r5,r5,2047
 4005594:	1906703a 	and	r3,r3,r4
 4005598:	800d883a 	mov	r6,r16
 400559c:	003fe906 	br	4005544 <__alt_data_end+0xfc005544>
 40055a0:	000d883a 	mov	r6,zero
 40055a4:	000b883a 	mov	r5,zero
 40055a8:	0007883a 	mov	r3,zero
 40055ac:	0005883a 	mov	r2,zero
 40055b0:	003fe406 	br	4005544 <__alt_data_end+0xfc005544>
 40055b4:	0123c83a 	sub	r17,zero,r4
 40055b8:	003fd106 	br	4005500 <__alt_data_end+0xfc005500>

040055bc <__extendsfdf2>:
 40055bc:	200ad5fa 	srli	r5,r4,23
 40055c0:	defffd04 	addi	sp,sp,-12
 40055c4:	dc400115 	stw	r17,4(sp)
 40055c8:	29403fcc 	andi	r5,r5,255
 40055cc:	29800044 	addi	r6,r5,1
 40055d0:	04402034 	movhi	r17,128
 40055d4:	dc000015 	stw	r16,0(sp)
 40055d8:	8c7fffc4 	addi	r17,r17,-1
 40055dc:	dfc00215 	stw	ra,8(sp)
 40055e0:	31803fcc 	andi	r6,r6,255
 40055e4:	00800044 	movi	r2,1
 40055e8:	8922703a 	and	r17,r17,r4
 40055ec:	2020d7fa 	srli	r16,r4,31
 40055f0:	1180110e 	bge	r2,r6,4005638 <__extendsfdf2+0x7c>
 40055f4:	880cd0fa 	srli	r6,r17,3
 40055f8:	8822977a 	slli	r17,r17,29
 40055fc:	2940e004 	addi	r5,r5,896
 4005600:	2941ffcc 	andi	r5,r5,2047
 4005604:	2804953a 	slli	r2,r5,20
 4005608:	01400434 	movhi	r5,16
 400560c:	800697fa 	slli	r3,r16,31
 4005610:	297fffc4 	addi	r5,r5,-1
 4005614:	314a703a 	and	r5,r6,r5
 4005618:	288ab03a 	or	r5,r5,r2
 400561c:	28c6b03a 	or	r3,r5,r3
 4005620:	8805883a 	mov	r2,r17
 4005624:	dfc00217 	ldw	ra,8(sp)
 4005628:	dc400117 	ldw	r17,4(sp)
 400562c:	dc000017 	ldw	r16,0(sp)
 4005630:	dec00304 	addi	sp,sp,12
 4005634:	f800283a 	ret
 4005638:	2800111e 	bne	r5,zero,4005680 <__extendsfdf2+0xc4>
 400563c:	88001c26 	beq	r17,zero,40056b0 <__extendsfdf2+0xf4>
 4005640:	8809883a 	mov	r4,r17
 4005644:	40058740 	call	4005874 <__clzsi2>
 4005648:	00c00284 	movi	r3,10
 400564c:	18801b16 	blt	r3,r2,40056bc <__extendsfdf2+0x100>
 4005650:	018002c4 	movi	r6,11
 4005654:	308dc83a 	sub	r6,r6,r2
 4005658:	11000544 	addi	r4,r2,21
 400565c:	8986d83a 	srl	r3,r17,r6
 4005660:	8922983a 	sll	r17,r17,r4
 4005664:	0180e244 	movi	r6,905
 4005668:	01400434 	movhi	r5,16
 400566c:	3085c83a 	sub	r2,r6,r2
 4005670:	297fffc4 	addi	r5,r5,-1
 4005674:	194c703a 	and	r6,r3,r5
 4005678:	1141ffcc 	andi	r5,r2,2047
 400567c:	003fe006 	br	4005600 <__alt_data_end+0xfc005600>
 4005680:	88000826 	beq	r17,zero,40056a4 <__extendsfdf2+0xe8>
 4005684:	880cd0fa 	srli	r6,r17,3
 4005688:	00800434 	movhi	r2,16
 400568c:	10bfffc4 	addi	r2,r2,-1
 4005690:	31800234 	orhi	r6,r6,8
 4005694:	8822977a 	slli	r17,r17,29
 4005698:	308c703a 	and	r6,r6,r2
 400569c:	0141ffc4 	movi	r5,2047
 40056a0:	003fd706 	br	4005600 <__alt_data_end+0xfc005600>
 40056a4:	0141ffc4 	movi	r5,2047
 40056a8:	000d883a 	mov	r6,zero
 40056ac:	003fd406 	br	4005600 <__alt_data_end+0xfc005600>
 40056b0:	000b883a 	mov	r5,zero
 40056b4:	000d883a 	mov	r6,zero
 40056b8:	003fd106 	br	4005600 <__alt_data_end+0xfc005600>
 40056bc:	11bffd44 	addi	r6,r2,-11
 40056c0:	8986983a 	sll	r3,r17,r6
 40056c4:	0023883a 	mov	r17,zero
 40056c8:	003fe606 	br	4005664 <__alt_data_end+0xfc005664>

040056cc <__truncdfsf2>:
 40056cc:	2810d53a 	srli	r8,r5,20
 40056d0:	01c00434 	movhi	r7,16
 40056d4:	39ffffc4 	addi	r7,r7,-1
 40056d8:	29ce703a 	and	r7,r5,r7
 40056dc:	4201ffcc 	andi	r8,r8,2047
 40056e0:	380e90fa 	slli	r7,r7,3
 40056e4:	200cd77a 	srli	r6,r4,29
 40056e8:	42400044 	addi	r9,r8,1
 40056ec:	4a41ffcc 	andi	r9,r9,2047
 40056f0:	00c00044 	movi	r3,1
 40056f4:	280ad7fa 	srli	r5,r5,31
 40056f8:	31ceb03a 	or	r7,r6,r7
 40056fc:	200490fa 	slli	r2,r4,3
 4005700:	1a40230e 	bge	r3,r9,4005790 <__truncdfsf2+0xc4>
 4005704:	40ff2004 	addi	r3,r8,-896
 4005708:	01803f84 	movi	r6,254
 400570c:	30c01516 	blt	r6,r3,4005764 <__truncdfsf2+0x98>
 4005710:	00c0380e 	bge	zero,r3,40057f4 <__truncdfsf2+0x128>
 4005714:	200c91ba 	slli	r6,r4,6
 4005718:	380e90fa 	slli	r7,r7,3
 400571c:	1004d77a 	srli	r2,r2,29
 4005720:	300cc03a 	cmpne	r6,r6,zero
 4005724:	31ccb03a 	or	r6,r6,r7
 4005728:	308cb03a 	or	r6,r6,r2
 400572c:	308001cc 	andi	r2,r6,7
 4005730:	10000426 	beq	r2,zero,4005744 <__truncdfsf2+0x78>
 4005734:	308003cc 	andi	r2,r6,15
 4005738:	01000104 	movi	r4,4
 400573c:	11000126 	beq	r2,r4,4005744 <__truncdfsf2+0x78>
 4005740:	31800104 	addi	r6,r6,4
 4005744:	3081002c 	andhi	r2,r6,1024
 4005748:	10001626 	beq	r2,zero,40057a4 <__truncdfsf2+0xd8>
 400574c:	18c00044 	addi	r3,r3,1
 4005750:	00803fc4 	movi	r2,255
 4005754:	18800326 	beq	r3,r2,4005764 <__truncdfsf2+0x98>
 4005758:	300c91ba 	slli	r6,r6,6
 400575c:	300cd27a 	srli	r6,r6,9
 4005760:	00000206 	br	400576c <__truncdfsf2+0xa0>
 4005764:	00ffffc4 	movi	r3,-1
 4005768:	000d883a 	mov	r6,zero
 400576c:	18c03fcc 	andi	r3,r3,255
 4005770:	180895fa 	slli	r4,r3,23
 4005774:	00c02034 	movhi	r3,128
 4005778:	280a97fa 	slli	r5,r5,31
 400577c:	18ffffc4 	addi	r3,r3,-1
 4005780:	30c6703a 	and	r3,r6,r3
 4005784:	1906b03a 	or	r3,r3,r4
 4005788:	1944b03a 	or	r2,r3,r5
 400578c:	f800283a 	ret
 4005790:	40000b1e 	bne	r8,zero,40057c0 <__truncdfsf2+0xf4>
 4005794:	388cb03a 	or	r6,r7,r2
 4005798:	0007883a 	mov	r3,zero
 400579c:	30000426 	beq	r6,zero,40057b0 <__truncdfsf2+0xe4>
 40057a0:	01800144 	movi	r6,5
 40057a4:	00803fc4 	movi	r2,255
 40057a8:	300cd0fa 	srli	r6,r6,3
 40057ac:	18800a26 	beq	r3,r2,40057d8 <__truncdfsf2+0x10c>
 40057b0:	00802034 	movhi	r2,128
 40057b4:	10bfffc4 	addi	r2,r2,-1
 40057b8:	308c703a 	and	r6,r6,r2
 40057bc:	003feb06 	br	400576c <__alt_data_end+0xfc00576c>
 40057c0:	3888b03a 	or	r4,r7,r2
 40057c4:	203fe726 	beq	r4,zero,4005764 <__alt_data_end+0xfc005764>
 40057c8:	380c90fa 	slli	r6,r7,3
 40057cc:	00c03fc4 	movi	r3,255
 40057d0:	31808034 	orhi	r6,r6,512
 40057d4:	003fd506 	br	400572c <__alt_data_end+0xfc00572c>
 40057d8:	303fe226 	beq	r6,zero,4005764 <__alt_data_end+0xfc005764>
 40057dc:	00802034 	movhi	r2,128
 40057e0:	31801034 	orhi	r6,r6,64
 40057e4:	10bfffc4 	addi	r2,r2,-1
 40057e8:	00ffffc4 	movi	r3,-1
 40057ec:	308c703a 	and	r6,r6,r2
 40057f0:	003fde06 	br	400576c <__alt_data_end+0xfc00576c>
 40057f4:	013ffa44 	movi	r4,-23
 40057f8:	19000e16 	blt	r3,r4,4005834 <__truncdfsf2+0x168>
 40057fc:	01000784 	movi	r4,30
 4005800:	20c9c83a 	sub	r4,r4,r3
 4005804:	018007c4 	movi	r6,31
 4005808:	39c02034 	orhi	r7,r7,128
 400580c:	31000b16 	blt	r6,r4,400583c <__truncdfsf2+0x170>
 4005810:	423f2084 	addi	r8,r8,-894
 4005814:	120c983a 	sll	r6,r2,r8
 4005818:	3a0e983a 	sll	r7,r7,r8
 400581c:	1104d83a 	srl	r2,r2,r4
 4005820:	300cc03a 	cmpne	r6,r6,zero
 4005824:	31ceb03a 	or	r7,r6,r7
 4005828:	388cb03a 	or	r6,r7,r2
 400582c:	0007883a 	mov	r3,zero
 4005830:	003fbe06 	br	400572c <__alt_data_end+0xfc00572c>
 4005834:	0007883a 	mov	r3,zero
 4005838:	003fd906 	br	40057a0 <__alt_data_end+0xfc0057a0>
 400583c:	01bfff84 	movi	r6,-2
 4005840:	30cdc83a 	sub	r6,r6,r3
 4005844:	00c00804 	movi	r3,32
 4005848:	398cd83a 	srl	r6,r7,r6
 400584c:	20c00726 	beq	r4,r3,400586c <__truncdfsf2+0x1a0>
 4005850:	423f2884 	addi	r8,r8,-862
 4005854:	3a0e983a 	sll	r7,r7,r8
 4005858:	3884b03a 	or	r2,r7,r2
 400585c:	1004c03a 	cmpne	r2,r2,zero
 4005860:	118cb03a 	or	r6,r2,r6
 4005864:	0007883a 	mov	r3,zero
 4005868:	003fb006 	br	400572c <__alt_data_end+0xfc00572c>
 400586c:	000f883a 	mov	r7,zero
 4005870:	003ff906 	br	4005858 <__alt_data_end+0xfc005858>

04005874 <__clzsi2>:
 4005874:	00bfffd4 	movui	r2,65535
 4005878:	11000536 	bltu	r2,r4,4005890 <__clzsi2+0x1c>
 400587c:	00803fc4 	movi	r2,255
 4005880:	11000f36 	bltu	r2,r4,40058c0 <__clzsi2+0x4c>
 4005884:	00800804 	movi	r2,32
 4005888:	0007883a 	mov	r3,zero
 400588c:	00000506 	br	40058a4 <__clzsi2+0x30>
 4005890:	00804034 	movhi	r2,256
 4005894:	10bfffc4 	addi	r2,r2,-1
 4005898:	11000c2e 	bgeu	r2,r4,40058cc <__clzsi2+0x58>
 400589c:	00800204 	movi	r2,8
 40058a0:	00c00604 	movi	r3,24
 40058a4:	20c8d83a 	srl	r4,r4,r3
 40058a8:	00c10074 	movhi	r3,1025
 40058ac:	18cb8a44 	addi	r3,r3,11817
 40058b0:	1909883a 	add	r4,r3,r4
 40058b4:	20c00003 	ldbu	r3,0(r4)
 40058b8:	10c5c83a 	sub	r2,r2,r3
 40058bc:	f800283a 	ret
 40058c0:	00800604 	movi	r2,24
 40058c4:	00c00204 	movi	r3,8
 40058c8:	003ff606 	br	40058a4 <__alt_data_end+0xfc0058a4>
 40058cc:	00800404 	movi	r2,16
 40058d0:	1007883a 	mov	r3,r2
 40058d4:	003ff306 	br	40058a4 <__alt_data_end+0xfc0058a4>

040058d8 <__divsi3>:
 40058d8:	20001b16 	blt	r4,zero,4005948 <__divsi3+0x70>
 40058dc:	000f883a 	mov	r7,zero
 40058e0:	28001616 	blt	r5,zero,400593c <__divsi3+0x64>
 40058e4:	200d883a 	mov	r6,r4
 40058e8:	29001a2e 	bgeu	r5,r4,4005954 <__divsi3+0x7c>
 40058ec:	00800804 	movi	r2,32
 40058f0:	00c00044 	movi	r3,1
 40058f4:	00000106 	br	40058fc <__divsi3+0x24>
 40058f8:	10000d26 	beq	r2,zero,4005930 <__divsi3+0x58>
 40058fc:	294b883a 	add	r5,r5,r5
 4005900:	10bfffc4 	addi	r2,r2,-1
 4005904:	18c7883a 	add	r3,r3,r3
 4005908:	293ffb36 	bltu	r5,r4,40058f8 <__alt_data_end+0xfc0058f8>
 400590c:	0005883a 	mov	r2,zero
 4005910:	18000726 	beq	r3,zero,4005930 <__divsi3+0x58>
 4005914:	0005883a 	mov	r2,zero
 4005918:	31400236 	bltu	r6,r5,4005924 <__divsi3+0x4c>
 400591c:	314dc83a 	sub	r6,r6,r5
 4005920:	10c4b03a 	or	r2,r2,r3
 4005924:	1806d07a 	srli	r3,r3,1
 4005928:	280ad07a 	srli	r5,r5,1
 400592c:	183ffa1e 	bne	r3,zero,4005918 <__alt_data_end+0xfc005918>
 4005930:	38000126 	beq	r7,zero,4005938 <__divsi3+0x60>
 4005934:	0085c83a 	sub	r2,zero,r2
 4005938:	f800283a 	ret
 400593c:	014bc83a 	sub	r5,zero,r5
 4005940:	39c0005c 	xori	r7,r7,1
 4005944:	003fe706 	br	40058e4 <__alt_data_end+0xfc0058e4>
 4005948:	0109c83a 	sub	r4,zero,r4
 400594c:	01c00044 	movi	r7,1
 4005950:	003fe306 	br	40058e0 <__alt_data_end+0xfc0058e0>
 4005954:	00c00044 	movi	r3,1
 4005958:	003fee06 	br	4005914 <__alt_data_end+0xfc005914>

0400595c <__modsi3>:
 400595c:	20001716 	blt	r4,zero,40059bc <__modsi3+0x60>
 4005960:	000f883a 	mov	r7,zero
 4005964:	2005883a 	mov	r2,r4
 4005968:	28001216 	blt	r5,zero,40059b4 <__modsi3+0x58>
 400596c:	2900162e 	bgeu	r5,r4,40059c8 <__modsi3+0x6c>
 4005970:	01800804 	movi	r6,32
 4005974:	00c00044 	movi	r3,1
 4005978:	00000106 	br	4005980 <__modsi3+0x24>
 400597c:	30000a26 	beq	r6,zero,40059a8 <__modsi3+0x4c>
 4005980:	294b883a 	add	r5,r5,r5
 4005984:	31bfffc4 	addi	r6,r6,-1
 4005988:	18c7883a 	add	r3,r3,r3
 400598c:	293ffb36 	bltu	r5,r4,400597c <__alt_data_end+0xfc00597c>
 4005990:	18000526 	beq	r3,zero,40059a8 <__modsi3+0x4c>
 4005994:	1806d07a 	srli	r3,r3,1
 4005998:	11400136 	bltu	r2,r5,40059a0 <__modsi3+0x44>
 400599c:	1145c83a 	sub	r2,r2,r5
 40059a0:	280ad07a 	srli	r5,r5,1
 40059a4:	183ffb1e 	bne	r3,zero,4005994 <__alt_data_end+0xfc005994>
 40059a8:	38000126 	beq	r7,zero,40059b0 <__modsi3+0x54>
 40059ac:	0085c83a 	sub	r2,zero,r2
 40059b0:	f800283a 	ret
 40059b4:	014bc83a 	sub	r5,zero,r5
 40059b8:	003fec06 	br	400596c <__alt_data_end+0xfc00596c>
 40059bc:	0109c83a 	sub	r4,zero,r4
 40059c0:	01c00044 	movi	r7,1
 40059c4:	003fe706 	br	4005964 <__alt_data_end+0xfc005964>
 40059c8:	00c00044 	movi	r3,1
 40059cc:	003ff106 	br	4005994 <__alt_data_end+0xfc005994>

040059d0 <__udivsi3>:
 40059d0:	200d883a 	mov	r6,r4
 40059d4:	2900152e 	bgeu	r5,r4,4005a2c <__udivsi3+0x5c>
 40059d8:	28001416 	blt	r5,zero,4005a2c <__udivsi3+0x5c>
 40059dc:	00800804 	movi	r2,32
 40059e0:	00c00044 	movi	r3,1
 40059e4:	00000206 	br	40059f0 <__udivsi3+0x20>
 40059e8:	10000e26 	beq	r2,zero,4005a24 <__udivsi3+0x54>
 40059ec:	28000516 	blt	r5,zero,4005a04 <__udivsi3+0x34>
 40059f0:	294b883a 	add	r5,r5,r5
 40059f4:	10bfffc4 	addi	r2,r2,-1
 40059f8:	18c7883a 	add	r3,r3,r3
 40059fc:	293ffa36 	bltu	r5,r4,40059e8 <__alt_data_end+0xfc0059e8>
 4005a00:	18000826 	beq	r3,zero,4005a24 <__udivsi3+0x54>
 4005a04:	0005883a 	mov	r2,zero
 4005a08:	31400236 	bltu	r6,r5,4005a14 <__udivsi3+0x44>
 4005a0c:	314dc83a 	sub	r6,r6,r5
 4005a10:	10c4b03a 	or	r2,r2,r3
 4005a14:	1806d07a 	srli	r3,r3,1
 4005a18:	280ad07a 	srli	r5,r5,1
 4005a1c:	183ffa1e 	bne	r3,zero,4005a08 <__alt_data_end+0xfc005a08>
 4005a20:	f800283a 	ret
 4005a24:	0005883a 	mov	r2,zero
 4005a28:	f800283a 	ret
 4005a2c:	00c00044 	movi	r3,1
 4005a30:	003ff406 	br	4005a04 <__alt_data_end+0xfc005a04>

04005a34 <__umodsi3>:
 4005a34:	2005883a 	mov	r2,r4
 4005a38:	2900122e 	bgeu	r5,r4,4005a84 <__umodsi3+0x50>
 4005a3c:	28001116 	blt	r5,zero,4005a84 <__umodsi3+0x50>
 4005a40:	01800804 	movi	r6,32
 4005a44:	00c00044 	movi	r3,1
 4005a48:	00000206 	br	4005a54 <__umodsi3+0x20>
 4005a4c:	30000c26 	beq	r6,zero,4005a80 <__umodsi3+0x4c>
 4005a50:	28000516 	blt	r5,zero,4005a68 <__umodsi3+0x34>
 4005a54:	294b883a 	add	r5,r5,r5
 4005a58:	31bfffc4 	addi	r6,r6,-1
 4005a5c:	18c7883a 	add	r3,r3,r3
 4005a60:	293ffa36 	bltu	r5,r4,4005a4c <__alt_data_end+0xfc005a4c>
 4005a64:	18000626 	beq	r3,zero,4005a80 <__umodsi3+0x4c>
 4005a68:	1806d07a 	srli	r3,r3,1
 4005a6c:	11400136 	bltu	r2,r5,4005a74 <__umodsi3+0x40>
 4005a70:	1145c83a 	sub	r2,r2,r5
 4005a74:	280ad07a 	srli	r5,r5,1
 4005a78:	183ffb1e 	bne	r3,zero,4005a68 <__alt_data_end+0xfc005a68>
 4005a7c:	f800283a 	ret
 4005a80:	f800283a 	ret
 4005a84:	00c00044 	movi	r3,1
 4005a88:	003ff706 	br	4005a68 <__alt_data_end+0xfc005a68>

04005a8c <__errno>:
 4005a8c:	00810074 	movhi	r2,1025
 4005a90:	10935c04 	addi	r2,r2,19824
 4005a94:	10800017 	ldw	r2,0(r2)
 4005a98:	f800283a 	ret

04005a9c <_printf_r>:
 4005a9c:	defffd04 	addi	sp,sp,-12
 4005aa0:	2805883a 	mov	r2,r5
 4005aa4:	dfc00015 	stw	ra,0(sp)
 4005aa8:	d9800115 	stw	r6,4(sp)
 4005aac:	d9c00215 	stw	r7,8(sp)
 4005ab0:	21400217 	ldw	r5,8(r4)
 4005ab4:	d9c00104 	addi	r7,sp,4
 4005ab8:	100d883a 	mov	r6,r2
 4005abc:	4005dc00 	call	4005dc0 <___vfprintf_internal_r>
 4005ac0:	dfc00017 	ldw	ra,0(sp)
 4005ac4:	dec00304 	addi	sp,sp,12
 4005ac8:	f800283a 	ret

04005acc <printf>:
 4005acc:	defffc04 	addi	sp,sp,-16
 4005ad0:	dfc00015 	stw	ra,0(sp)
 4005ad4:	d9400115 	stw	r5,4(sp)
 4005ad8:	d9800215 	stw	r6,8(sp)
 4005adc:	d9c00315 	stw	r7,12(sp)
 4005ae0:	00810074 	movhi	r2,1025
 4005ae4:	10935c04 	addi	r2,r2,19824
 4005ae8:	10800017 	ldw	r2,0(r2)
 4005aec:	200b883a 	mov	r5,r4
 4005af0:	d9800104 	addi	r6,sp,4
 4005af4:	11000217 	ldw	r4,8(r2)
 4005af8:	4007fb80 	call	4007fb8 <__vfprintf_internal>
 4005afc:	dfc00017 	ldw	ra,0(sp)
 4005b00:	dec00404 	addi	sp,sp,16
 4005b04:	f800283a 	ret

04005b08 <_putchar_r>:
 4005b08:	21800217 	ldw	r6,8(r4)
 4005b0c:	400cad81 	jmpi	400cad8 <_putc_r>

04005b10 <putchar>:
 4005b10:	00810074 	movhi	r2,1025
 4005b14:	10935c04 	addi	r2,r2,19824
 4005b18:	200b883a 	mov	r5,r4
 4005b1c:	11000017 	ldw	r4,0(r2)
 4005b20:	21800217 	ldw	r6,8(r4)
 4005b24:	400cad81 	jmpi	400cad8 <_putc_r>

04005b28 <_puts_r>:
 4005b28:	defff604 	addi	sp,sp,-40
 4005b2c:	dc000715 	stw	r16,28(sp)
 4005b30:	2021883a 	mov	r16,r4
 4005b34:	2809883a 	mov	r4,r5
 4005b38:	dc400815 	stw	r17,32(sp)
 4005b3c:	dfc00915 	stw	ra,36(sp)
 4005b40:	2823883a 	mov	r17,r5
 4005b44:	4005c780 	call	4005c78 <strlen>
 4005b48:	10c00044 	addi	r3,r2,1
 4005b4c:	d8800115 	stw	r2,4(sp)
 4005b50:	00810074 	movhi	r2,1025
 4005b54:	108bcc04 	addi	r2,r2,12080
 4005b58:	d8800215 	stw	r2,8(sp)
 4005b5c:	00800044 	movi	r2,1
 4005b60:	d8800315 	stw	r2,12(sp)
 4005b64:	00800084 	movi	r2,2
 4005b68:	dc400015 	stw	r17,0(sp)
 4005b6c:	d8c00615 	stw	r3,24(sp)
 4005b70:	dec00415 	stw	sp,16(sp)
 4005b74:	d8800515 	stw	r2,20(sp)
 4005b78:	80000226 	beq	r16,zero,4005b84 <_puts_r+0x5c>
 4005b7c:	80800e17 	ldw	r2,56(r16)
 4005b80:	10001426 	beq	r2,zero,4005bd4 <_puts_r+0xac>
 4005b84:	81400217 	ldw	r5,8(r16)
 4005b88:	2880030b 	ldhu	r2,12(r5)
 4005b8c:	10c8000c 	andi	r3,r2,8192
 4005b90:	1800061e 	bne	r3,zero,4005bac <_puts_r+0x84>
 4005b94:	29001917 	ldw	r4,100(r5)
 4005b98:	00f7ffc4 	movi	r3,-8193
 4005b9c:	10880014 	ori	r2,r2,8192
 4005ba0:	20c6703a 	and	r3,r4,r3
 4005ba4:	2880030d 	sth	r2,12(r5)
 4005ba8:	28c01915 	stw	r3,100(r5)
 4005bac:	d9800404 	addi	r6,sp,16
 4005bb0:	8009883a 	mov	r4,r16
 4005bb4:	400a4e80 	call	400a4e8 <__sfvwrite_r>
 4005bb8:	1000091e 	bne	r2,zero,4005be0 <_puts_r+0xb8>
 4005bbc:	00800284 	movi	r2,10
 4005bc0:	dfc00917 	ldw	ra,36(sp)
 4005bc4:	dc400817 	ldw	r17,32(sp)
 4005bc8:	dc000717 	ldw	r16,28(sp)
 4005bcc:	dec00a04 	addi	sp,sp,40
 4005bd0:	f800283a 	ret
 4005bd4:	8009883a 	mov	r4,r16
 4005bd8:	400a0640 	call	400a064 <__sinit>
 4005bdc:	003fe906 	br	4005b84 <__alt_data_end+0xfc005b84>
 4005be0:	00bfffc4 	movi	r2,-1
 4005be4:	003ff606 	br	4005bc0 <__alt_data_end+0xfc005bc0>

04005be8 <puts>:
 4005be8:	00810074 	movhi	r2,1025
 4005bec:	10935c04 	addi	r2,r2,19824
 4005bf0:	200b883a 	mov	r5,r4
 4005bf4:	11000017 	ldw	r4,0(r2)
 4005bf8:	4005b281 	jmpi	4005b28 <_puts_r>

04005bfc <srand>:
 4005bfc:	00810074 	movhi	r2,1025
 4005c00:	10935c04 	addi	r2,r2,19824
 4005c04:	10800017 	ldw	r2,0(r2)
 4005c08:	11002915 	stw	r4,164(r2)
 4005c0c:	10002a15 	stw	zero,168(r2)
 4005c10:	f800283a 	ret

04005c14 <rand>:
 4005c14:	00810074 	movhi	r2,1025
 4005c18:	defffe04 	addi	sp,sp,-8
 4005c1c:	10935c04 	addi	r2,r2,19824
 4005c20:	dc000015 	stw	r16,0(sp)
 4005c24:	14000017 	ldw	r16,0(r2)
 4005c28:	dfc00115 	stw	ra,4(sp)
 4005c2c:	01932574 	movhi	r6,19605
 4005c30:	81002917 	ldw	r4,164(r16)
 4005c34:	81402a17 	ldw	r5,168(r16)
 4005c38:	01d614b4 	movhi	r7,22610
 4005c3c:	319fcb44 	addi	r6,r6,32557
 4005c40:	39fd0b44 	addi	r7,r7,-3027
 4005c44:	400f38c0 	call	400f38c <__muldi3>
 4005c48:	11000044 	addi	r4,r2,1
 4005c4c:	2085803a 	cmpltu	r2,r4,r2
 4005c50:	10c7883a 	add	r3,r2,r3
 4005c54:	00a00034 	movhi	r2,32768
 4005c58:	10bfffc4 	addi	r2,r2,-1
 4005c5c:	1884703a 	and	r2,r3,r2
 4005c60:	81002915 	stw	r4,164(r16)
 4005c64:	80c02a15 	stw	r3,168(r16)
 4005c68:	dfc00117 	ldw	ra,4(sp)
 4005c6c:	dc000017 	ldw	r16,0(sp)
 4005c70:	dec00204 	addi	sp,sp,8
 4005c74:	f800283a 	ret

04005c78 <strlen>:
 4005c78:	208000cc 	andi	r2,r4,3
 4005c7c:	10002026 	beq	r2,zero,4005d00 <strlen+0x88>
 4005c80:	20800007 	ldb	r2,0(r4)
 4005c84:	10002026 	beq	r2,zero,4005d08 <strlen+0x90>
 4005c88:	2005883a 	mov	r2,r4
 4005c8c:	00000206 	br	4005c98 <strlen+0x20>
 4005c90:	10c00007 	ldb	r3,0(r2)
 4005c94:	18001826 	beq	r3,zero,4005cf8 <strlen+0x80>
 4005c98:	10800044 	addi	r2,r2,1
 4005c9c:	10c000cc 	andi	r3,r2,3
 4005ca0:	183ffb1e 	bne	r3,zero,4005c90 <__alt_data_end+0xfc005c90>
 4005ca4:	10c00017 	ldw	r3,0(r2)
 4005ca8:	01ffbff4 	movhi	r7,65279
 4005cac:	39ffbfc4 	addi	r7,r7,-257
 4005cb0:	00ca303a 	nor	r5,zero,r3
 4005cb4:	01a02074 	movhi	r6,32897
 4005cb8:	19c7883a 	add	r3,r3,r7
 4005cbc:	31a02004 	addi	r6,r6,-32640
 4005cc0:	1946703a 	and	r3,r3,r5
 4005cc4:	1986703a 	and	r3,r3,r6
 4005cc8:	1800091e 	bne	r3,zero,4005cf0 <strlen+0x78>
 4005ccc:	10800104 	addi	r2,r2,4
 4005cd0:	10c00017 	ldw	r3,0(r2)
 4005cd4:	19cb883a 	add	r5,r3,r7
 4005cd8:	00c6303a 	nor	r3,zero,r3
 4005cdc:	28c6703a 	and	r3,r5,r3
 4005ce0:	1986703a 	and	r3,r3,r6
 4005ce4:	183ff926 	beq	r3,zero,4005ccc <__alt_data_end+0xfc005ccc>
 4005ce8:	00000106 	br	4005cf0 <strlen+0x78>
 4005cec:	10800044 	addi	r2,r2,1
 4005cf0:	10c00007 	ldb	r3,0(r2)
 4005cf4:	183ffd1e 	bne	r3,zero,4005cec <__alt_data_end+0xfc005cec>
 4005cf8:	1105c83a 	sub	r2,r2,r4
 4005cfc:	f800283a 	ret
 4005d00:	2005883a 	mov	r2,r4
 4005d04:	003fe706 	br	4005ca4 <__alt_data_end+0xfc005ca4>
 4005d08:	0005883a 	mov	r2,zero
 4005d0c:	f800283a 	ret

04005d10 <_system_r>:
 4005d10:	2800021e 	bne	r5,zero,4005d1c <_system_r+0xc>
 4005d14:	0005883a 	mov	r2,zero
 4005d18:	f800283a 	ret
 4005d1c:	deffff04 	addi	sp,sp,-4
 4005d20:	dfc00015 	stw	ra,0(sp)
 4005d24:	4005a8c0 	call	4005a8c <__errno>
 4005d28:	00c01604 	movi	r3,88
 4005d2c:	10c00015 	stw	r3,0(r2)
 4005d30:	00bfffc4 	movi	r2,-1
 4005d34:	dfc00017 	ldw	ra,0(sp)
 4005d38:	dec00104 	addi	sp,sp,4
 4005d3c:	f800283a 	ret

04005d40 <system>:
 4005d40:	20000926 	beq	r4,zero,4005d68 <system+0x28>
 4005d44:	deffff04 	addi	sp,sp,-4
 4005d48:	dfc00015 	stw	ra,0(sp)
 4005d4c:	4005a8c0 	call	4005a8c <__errno>
 4005d50:	00c01604 	movi	r3,88
 4005d54:	10c00015 	stw	r3,0(r2)
 4005d58:	00bfffc4 	movi	r2,-1
 4005d5c:	dfc00017 	ldw	ra,0(sp)
 4005d60:	dec00104 	addi	sp,sp,4
 4005d64:	f800283a 	ret
 4005d68:	0005883a 	mov	r2,zero
 4005d6c:	f800283a 	ret

04005d70 <time>:
 4005d70:	00810074 	movhi	r2,1025
 4005d74:	defffc04 	addi	sp,sp,-16
 4005d78:	10935c04 	addi	r2,r2,19824
 4005d7c:	dc000215 	stw	r16,8(sp)
 4005d80:	2021883a 	mov	r16,r4
 4005d84:	11000017 	ldw	r4,0(r2)
 4005d88:	000d883a 	mov	r6,zero
 4005d8c:	d80b883a 	mov	r5,sp
 4005d90:	dfc00315 	stw	ra,12(sp)
 4005d94:	400ab2c0 	call	400ab2c <_gettimeofday_r>
 4005d98:	10000716 	blt	r2,zero,4005db8 <time+0x48>
 4005d9c:	d8800017 	ldw	r2,0(sp)
 4005da0:	80000126 	beq	r16,zero,4005da8 <time+0x38>
 4005da4:	80800015 	stw	r2,0(r16)
 4005da8:	dfc00317 	ldw	ra,12(sp)
 4005dac:	dc000217 	ldw	r16,8(sp)
 4005db0:	dec00404 	addi	sp,sp,16
 4005db4:	f800283a 	ret
 4005db8:	00bfffc4 	movi	r2,-1
 4005dbc:	003ffa06 	br	4005da8 <__alt_data_end+0xfc005da8>

04005dc0 <___vfprintf_internal_r>:
 4005dc0:	deffb804 	addi	sp,sp,-288
 4005dc4:	dfc04715 	stw	ra,284(sp)
 4005dc8:	ddc04515 	stw	r23,276(sp)
 4005dcc:	dd404315 	stw	r21,268(sp)
 4005dd0:	d9002c15 	stw	r4,176(sp)
 4005dd4:	282f883a 	mov	r23,r5
 4005dd8:	302b883a 	mov	r21,r6
 4005ddc:	d9c02d15 	stw	r7,180(sp)
 4005de0:	df004615 	stw	fp,280(sp)
 4005de4:	dd804415 	stw	r22,272(sp)
 4005de8:	dd004215 	stw	r20,264(sp)
 4005dec:	dcc04115 	stw	r19,260(sp)
 4005df0:	dc804015 	stw	r18,256(sp)
 4005df4:	dc403f15 	stw	r17,252(sp)
 4005df8:	dc003e15 	stw	r16,248(sp)
 4005dfc:	400ac340 	call	400ac34 <_localeconv_r>
 4005e00:	10800017 	ldw	r2,0(r2)
 4005e04:	1009883a 	mov	r4,r2
 4005e08:	d8803415 	stw	r2,208(sp)
 4005e0c:	4005c780 	call	4005c78 <strlen>
 4005e10:	d8803715 	stw	r2,220(sp)
 4005e14:	d8802c17 	ldw	r2,176(sp)
 4005e18:	10000226 	beq	r2,zero,4005e24 <___vfprintf_internal_r+0x64>
 4005e1c:	10800e17 	ldw	r2,56(r2)
 4005e20:	1000f926 	beq	r2,zero,4006208 <___vfprintf_internal_r+0x448>
 4005e24:	b880030b 	ldhu	r2,12(r23)
 4005e28:	10c8000c 	andi	r3,r2,8192
 4005e2c:	1800061e 	bne	r3,zero,4005e48 <___vfprintf_internal_r+0x88>
 4005e30:	b9001917 	ldw	r4,100(r23)
 4005e34:	00f7ffc4 	movi	r3,-8193
 4005e38:	10880014 	ori	r2,r2,8192
 4005e3c:	20c6703a 	and	r3,r4,r3
 4005e40:	b880030d 	sth	r2,12(r23)
 4005e44:	b8c01915 	stw	r3,100(r23)
 4005e48:	10c0020c 	andi	r3,r2,8
 4005e4c:	1800c126 	beq	r3,zero,4006154 <___vfprintf_internal_r+0x394>
 4005e50:	b8c00417 	ldw	r3,16(r23)
 4005e54:	1800bf26 	beq	r3,zero,4006154 <___vfprintf_internal_r+0x394>
 4005e58:	1080068c 	andi	r2,r2,26
 4005e5c:	00c00284 	movi	r3,10
 4005e60:	10c0c426 	beq	r2,r3,4006174 <___vfprintf_internal_r+0x3b4>
 4005e64:	d8c00404 	addi	r3,sp,16
 4005e68:	05010074 	movhi	r20,1025
 4005e6c:	d9001e04 	addi	r4,sp,120
 4005e70:	a50bdd84 	addi	r20,r20,12150
 4005e74:	d8c01e15 	stw	r3,120(sp)
 4005e78:	d8002015 	stw	zero,128(sp)
 4005e7c:	d8001f15 	stw	zero,124(sp)
 4005e80:	d8003315 	stw	zero,204(sp)
 4005e84:	d8003615 	stw	zero,216(sp)
 4005e88:	d8003815 	stw	zero,224(sp)
 4005e8c:	1811883a 	mov	r8,r3
 4005e90:	d8003915 	stw	zero,228(sp)
 4005e94:	d8003a15 	stw	zero,232(sp)
 4005e98:	d8002f15 	stw	zero,188(sp)
 4005e9c:	d9002815 	stw	r4,160(sp)
 4005ea0:	a8800007 	ldb	r2,0(r21)
 4005ea4:	10027b26 	beq	r2,zero,4006894 <___vfprintf_internal_r+0xad4>
 4005ea8:	00c00944 	movi	r3,37
 4005eac:	a821883a 	mov	r16,r21
 4005eb0:	10c0021e 	bne	r2,r3,4005ebc <___vfprintf_internal_r+0xfc>
 4005eb4:	00001406 	br	4005f08 <___vfprintf_internal_r+0x148>
 4005eb8:	10c00326 	beq	r2,r3,4005ec8 <___vfprintf_internal_r+0x108>
 4005ebc:	84000044 	addi	r16,r16,1
 4005ec0:	80800007 	ldb	r2,0(r16)
 4005ec4:	103ffc1e 	bne	r2,zero,4005eb8 <__alt_data_end+0xfc005eb8>
 4005ec8:	8563c83a 	sub	r17,r16,r21
 4005ecc:	88000e26 	beq	r17,zero,4005f08 <___vfprintf_internal_r+0x148>
 4005ed0:	d8c02017 	ldw	r3,128(sp)
 4005ed4:	d8801f17 	ldw	r2,124(sp)
 4005ed8:	45400015 	stw	r21,0(r8)
 4005edc:	1c47883a 	add	r3,r3,r17
 4005ee0:	10800044 	addi	r2,r2,1
 4005ee4:	d8c02015 	stw	r3,128(sp)
 4005ee8:	44400115 	stw	r17,4(r8)
 4005eec:	d8801f15 	stw	r2,124(sp)
 4005ef0:	00c001c4 	movi	r3,7
 4005ef4:	1880a716 	blt	r3,r2,4006194 <___vfprintf_internal_r+0x3d4>
 4005ef8:	42000204 	addi	r8,r8,8
 4005efc:	d9402f17 	ldw	r5,188(sp)
 4005f00:	2c4b883a 	add	r5,r5,r17
 4005f04:	d9402f15 	stw	r5,188(sp)
 4005f08:	80800007 	ldb	r2,0(r16)
 4005f0c:	1000a826 	beq	r2,zero,40061b0 <___vfprintf_internal_r+0x3f0>
 4005f10:	84400047 	ldb	r17,1(r16)
 4005f14:	00bfffc4 	movi	r2,-1
 4005f18:	85400044 	addi	r21,r16,1
 4005f1c:	d8002785 	stb	zero,158(sp)
 4005f20:	0007883a 	mov	r3,zero
 4005f24:	000f883a 	mov	r7,zero
 4005f28:	d8802915 	stw	r2,164(sp)
 4005f2c:	d8003115 	stw	zero,196(sp)
 4005f30:	0025883a 	mov	r18,zero
 4005f34:	01401604 	movi	r5,88
 4005f38:	01800244 	movi	r6,9
 4005f3c:	02800a84 	movi	r10,42
 4005f40:	02401b04 	movi	r9,108
 4005f44:	ad400044 	addi	r21,r21,1
 4005f48:	88bff804 	addi	r2,r17,-32
 4005f4c:	28830436 	bltu	r5,r2,4006b60 <___vfprintf_internal_r+0xda0>
 4005f50:	100490ba 	slli	r2,r2,2
 4005f54:	01010034 	movhi	r4,1024
 4005f58:	2117da04 	addi	r4,r4,24424
 4005f5c:	1105883a 	add	r2,r2,r4
 4005f60:	10800017 	ldw	r2,0(r2)
 4005f64:	1000683a 	jmp	r2
 4005f68:	04006a80 	call	4006a8 <__alt_mem_sdram-0x3bff958>
 4005f6c:	04006b60 	cmpeqi	r16,zero,429
 4005f70:	04006b60 	cmpeqi	r16,zero,429
 4005f74:	04006aa0 	cmpeqi	r16,zero,426
 4005f78:	04006b60 	cmpeqi	r16,zero,429
 4005f7c:	04006b60 	cmpeqi	r16,zero,429
 4005f80:	04006b60 	cmpeqi	r16,zero,429
 4005f84:	04006b60 	cmpeqi	r16,zero,429
 4005f88:	04006b60 	cmpeqi	r16,zero,429
 4005f8c:	04006b60 	cmpeqi	r16,zero,429
 4005f90:	04006214 	movui	r16,392
 4005f94:	040069bc 	xorhi	r16,zero,422
 4005f98:	04006b60 	cmpeqi	r16,zero,429
 4005f9c:	040060dc 	xori	r16,zero,387
 4005fa0:	0400623c 	xorhi	r16,zero,392
 4005fa4:	04006b60 	cmpeqi	r16,zero,429
 4005fa8:	0400627c 	xorhi	r16,zero,393
 4005fac:	04006288 	cmpgei	r16,zero,394
 4005fb0:	04006288 	cmpgei	r16,zero,394
 4005fb4:	04006288 	cmpgei	r16,zero,394
 4005fb8:	04006288 	cmpgei	r16,zero,394
 4005fbc:	04006288 	cmpgei	r16,zero,394
 4005fc0:	04006288 	cmpgei	r16,zero,394
 4005fc4:	04006288 	cmpgei	r16,zero,394
 4005fc8:	04006288 	cmpgei	r16,zero,394
 4005fcc:	04006288 	cmpgei	r16,zero,394
 4005fd0:	04006b60 	cmpeqi	r16,zero,429
 4005fd4:	04006b60 	cmpeqi	r16,zero,429
 4005fd8:	04006b60 	cmpeqi	r16,zero,429
 4005fdc:	04006b60 	cmpeqi	r16,zero,429
 4005fe0:	04006b60 	cmpeqi	r16,zero,429
 4005fe4:	04006b60 	cmpeqi	r16,zero,429
 4005fe8:	04006b60 	cmpeqi	r16,zero,429
 4005fec:	04006b60 	cmpeqi	r16,zero,429
 4005ff0:	04006b60 	cmpeqi	r16,zero,429
 4005ff4:	04006b60 	cmpeqi	r16,zero,429
 4005ff8:	040062bc 	xorhi	r16,zero,394
 4005ffc:	04006378 	rdprs	r16,zero,397
 4006000:	04006b60 	cmpeqi	r16,zero,429
 4006004:	04006378 	rdprs	r16,zero,397
 4006008:	04006b60 	cmpeqi	r16,zero,429
 400600c:	04006b60 	cmpeqi	r16,zero,429
 4006010:	04006b60 	cmpeqi	r16,zero,429
 4006014:	04006b60 	cmpeqi	r16,zero,429
 4006018:	04006418 	cmpnei	r16,zero,400
 400601c:	04006b60 	cmpeqi	r16,zero,429
 4006020:	04006b60 	cmpeqi	r16,zero,429
 4006024:	04006424 	muli	r16,zero,400
 4006028:	04006b60 	cmpeqi	r16,zero,429
 400602c:	04006b60 	cmpeqi	r16,zero,429
 4006030:	04006b60 	cmpeqi	r16,zero,429
 4006034:	04006b60 	cmpeqi	r16,zero,429
 4006038:	04006b60 	cmpeqi	r16,zero,429
 400603c:	0400689c 	xori	r16,zero,418
 4006040:	04006b60 	cmpeqi	r16,zero,429
 4006044:	04006b60 	cmpeqi	r16,zero,429
 4006048:	040068fc 	xorhi	r16,zero,419
 400604c:	04006b60 	cmpeqi	r16,zero,429
 4006050:	04006b60 	cmpeqi	r16,zero,429
 4006054:	04006b60 	cmpeqi	r16,zero,429
 4006058:	04006b60 	cmpeqi	r16,zero,429
 400605c:	04006b60 	cmpeqi	r16,zero,429
 4006060:	04006b60 	cmpeqi	r16,zero,429
 4006064:	04006b60 	cmpeqi	r16,zero,429
 4006068:	04006b60 	cmpeqi	r16,zero,429
 400606c:	04006b60 	cmpeqi	r16,zero,429
 4006070:	04006b60 	cmpeqi	r16,zero,429
 4006074:	04006b0c 	andi	r16,zero,428
 4006078:	04006aac 	andhi	r16,zero,426
 400607c:	04006378 	rdprs	r16,zero,397
 4006080:	04006378 	rdprs	r16,zero,397
 4006084:	04006378 	rdprs	r16,zero,397
 4006088:	04006abc 	xorhi	r16,zero,426
 400608c:	04006aac 	andhi	r16,zero,426
 4006090:	04006b60 	cmpeqi	r16,zero,429
 4006094:	04006b60 	cmpeqi	r16,zero,429
 4006098:	04006ac8 	cmpgei	r16,zero,427
 400609c:	04006b60 	cmpeqi	r16,zero,429
 40060a0:	04006ad8 	cmpnei	r16,zero,427
 40060a4:	040069ac 	andhi	r16,zero,422
 40060a8:	040060e8 	cmpgeui	r16,zero,387
 40060ac:	040069cc 	andi	r16,zero,423
 40060b0:	04006b60 	cmpeqi	r16,zero,429
 40060b4:	040069d8 	cmpnei	r16,zero,423
 40060b8:	04006b60 	cmpeqi	r16,zero,429
 40060bc:	04006a34 	movhi	r16,424
 40060c0:	04006b60 	cmpeqi	r16,zero,429
 40060c4:	04006b60 	cmpeqi	r16,zero,429
 40060c8:	04006a44 	movi	r16,425
 40060cc:	d9003117 	ldw	r4,196(sp)
 40060d0:	d8802d15 	stw	r2,180(sp)
 40060d4:	0109c83a 	sub	r4,zero,r4
 40060d8:	d9003115 	stw	r4,196(sp)
 40060dc:	94800114 	ori	r18,r18,4
 40060e0:	ac400007 	ldb	r17,0(r21)
 40060e4:	003f9706 	br	4005f44 <__alt_data_end+0xfc005f44>
 40060e8:	00800c04 	movi	r2,48
 40060ec:	d9002d17 	ldw	r4,180(sp)
 40060f0:	d9402917 	ldw	r5,164(sp)
 40060f4:	d8802705 	stb	r2,156(sp)
 40060f8:	00801e04 	movi	r2,120
 40060fc:	d8802745 	stb	r2,157(sp)
 4006100:	d8002785 	stb	zero,158(sp)
 4006104:	20c00104 	addi	r3,r4,4
 4006108:	24c00017 	ldw	r19,0(r4)
 400610c:	002d883a 	mov	r22,zero
 4006110:	90800094 	ori	r2,r18,2
 4006114:	28029a16 	blt	r5,zero,4006b80 <___vfprintf_internal_r+0xdc0>
 4006118:	00bfdfc4 	movi	r2,-129
 400611c:	90a4703a 	and	r18,r18,r2
 4006120:	d8c02d15 	stw	r3,180(sp)
 4006124:	94800094 	ori	r18,r18,2
 4006128:	9802871e 	bne	r19,zero,4006b48 <___vfprintf_internal_r+0xd88>
 400612c:	00810074 	movhi	r2,1025
 4006130:	108bd604 	addi	r2,r2,12120
 4006134:	d8803915 	stw	r2,228(sp)
 4006138:	04401e04 	movi	r17,120
 400613c:	d8802917 	ldw	r2,164(sp)
 4006140:	0039883a 	mov	fp,zero
 4006144:	1001e926 	beq	r2,zero,40068ec <___vfprintf_internal_r+0xb2c>
 4006148:	0027883a 	mov	r19,zero
 400614c:	002d883a 	mov	r22,zero
 4006150:	00020506 	br	4006968 <___vfprintf_internal_r+0xba8>
 4006154:	d9002c17 	ldw	r4,176(sp)
 4006158:	b80b883a 	mov	r5,r23
 400615c:	40080900 	call	4008090 <__swsetup_r>
 4006160:	1005ac1e 	bne	r2,zero,4007814 <___vfprintf_internal_r+0x1a54>
 4006164:	b880030b 	ldhu	r2,12(r23)
 4006168:	00c00284 	movi	r3,10
 400616c:	1080068c 	andi	r2,r2,26
 4006170:	10ff3c1e 	bne	r2,r3,4005e64 <__alt_data_end+0xfc005e64>
 4006174:	b880038f 	ldh	r2,14(r23)
 4006178:	103f3a16 	blt	r2,zero,4005e64 <__alt_data_end+0xfc005e64>
 400617c:	d9c02d17 	ldw	r7,180(sp)
 4006180:	d9002c17 	ldw	r4,176(sp)
 4006184:	a80d883a 	mov	r6,r21
 4006188:	b80b883a 	mov	r5,r23
 400618c:	4007fd40 	call	4007fd4 <__sbprintf>
 4006190:	00001106 	br	40061d8 <___vfprintf_internal_r+0x418>
 4006194:	d9002c17 	ldw	r4,176(sp)
 4006198:	d9801e04 	addi	r6,sp,120
 400619c:	b80b883a 	mov	r5,r23
 40061a0:	400d50c0 	call	400d50c <__sprint_r>
 40061a4:	1000081e 	bne	r2,zero,40061c8 <___vfprintf_internal_r+0x408>
 40061a8:	da000404 	addi	r8,sp,16
 40061ac:	003f5306 	br	4005efc <__alt_data_end+0xfc005efc>
 40061b0:	d8802017 	ldw	r2,128(sp)
 40061b4:	10000426 	beq	r2,zero,40061c8 <___vfprintf_internal_r+0x408>
 40061b8:	d9002c17 	ldw	r4,176(sp)
 40061bc:	d9801e04 	addi	r6,sp,120
 40061c0:	b80b883a 	mov	r5,r23
 40061c4:	400d50c0 	call	400d50c <__sprint_r>
 40061c8:	b880030b 	ldhu	r2,12(r23)
 40061cc:	1080100c 	andi	r2,r2,64
 40061d0:	1005901e 	bne	r2,zero,4007814 <___vfprintf_internal_r+0x1a54>
 40061d4:	d8802f17 	ldw	r2,188(sp)
 40061d8:	dfc04717 	ldw	ra,284(sp)
 40061dc:	df004617 	ldw	fp,280(sp)
 40061e0:	ddc04517 	ldw	r23,276(sp)
 40061e4:	dd804417 	ldw	r22,272(sp)
 40061e8:	dd404317 	ldw	r21,268(sp)
 40061ec:	dd004217 	ldw	r20,264(sp)
 40061f0:	dcc04117 	ldw	r19,260(sp)
 40061f4:	dc804017 	ldw	r18,256(sp)
 40061f8:	dc403f17 	ldw	r17,252(sp)
 40061fc:	dc003e17 	ldw	r16,248(sp)
 4006200:	dec04804 	addi	sp,sp,288
 4006204:	f800283a 	ret
 4006208:	d9002c17 	ldw	r4,176(sp)
 400620c:	400a0640 	call	400a064 <__sinit>
 4006210:	003f0406 	br	4005e24 <__alt_data_end+0xfc005e24>
 4006214:	d8802d17 	ldw	r2,180(sp)
 4006218:	d9002d17 	ldw	r4,180(sp)
 400621c:	10800017 	ldw	r2,0(r2)
 4006220:	d8803115 	stw	r2,196(sp)
 4006224:	20800104 	addi	r2,r4,4
 4006228:	d9003117 	ldw	r4,196(sp)
 400622c:	203fa716 	blt	r4,zero,40060cc <__alt_data_end+0xfc0060cc>
 4006230:	d8802d15 	stw	r2,180(sp)
 4006234:	ac400007 	ldb	r17,0(r21)
 4006238:	003f4206 	br	4005f44 <__alt_data_end+0xfc005f44>
 400623c:	ac400007 	ldb	r17,0(r21)
 4006240:	aac00044 	addi	r11,r21,1
 4006244:	8a872826 	beq	r17,r10,4007ee8 <___vfprintf_internal_r+0x2128>
 4006248:	88bff404 	addi	r2,r17,-48
 400624c:	0009883a 	mov	r4,zero
 4006250:	30867d36 	bltu	r6,r2,4007c48 <___vfprintf_internal_r+0x1e88>
 4006254:	5c400007 	ldb	r17,0(r11)
 4006258:	210002a4 	muli	r4,r4,10
 400625c:	5d400044 	addi	r21,r11,1
 4006260:	a817883a 	mov	r11,r21
 4006264:	2089883a 	add	r4,r4,r2
 4006268:	88bff404 	addi	r2,r17,-48
 400626c:	30bff92e 	bgeu	r6,r2,4006254 <__alt_data_end+0xfc006254>
 4006270:	2005c916 	blt	r4,zero,4007998 <___vfprintf_internal_r+0x1bd8>
 4006274:	d9002915 	stw	r4,164(sp)
 4006278:	003f3306 	br	4005f48 <__alt_data_end+0xfc005f48>
 400627c:	94802014 	ori	r18,r18,128
 4006280:	ac400007 	ldb	r17,0(r21)
 4006284:	003f2f06 	br	4005f44 <__alt_data_end+0xfc005f44>
 4006288:	a809883a 	mov	r4,r21
 400628c:	d8003115 	stw	zero,196(sp)
 4006290:	88bff404 	addi	r2,r17,-48
 4006294:	0017883a 	mov	r11,zero
 4006298:	24400007 	ldb	r17,0(r4)
 400629c:	5ac002a4 	muli	r11,r11,10
 40062a0:	ad400044 	addi	r21,r21,1
 40062a4:	a809883a 	mov	r4,r21
 40062a8:	12d7883a 	add	r11,r2,r11
 40062ac:	88bff404 	addi	r2,r17,-48
 40062b0:	30bff92e 	bgeu	r6,r2,4006298 <__alt_data_end+0xfc006298>
 40062b4:	dac03115 	stw	r11,196(sp)
 40062b8:	003f2306 	br	4005f48 <__alt_data_end+0xfc005f48>
 40062bc:	18c03fcc 	andi	r3,r3,255
 40062c0:	18072b1e 	bne	r3,zero,4007f70 <___vfprintf_internal_r+0x21b0>
 40062c4:	94800414 	ori	r18,r18,16
 40062c8:	9080080c 	andi	r2,r18,32
 40062cc:	10037b26 	beq	r2,zero,40070bc <___vfprintf_internal_r+0x12fc>
 40062d0:	d9402d17 	ldw	r5,180(sp)
 40062d4:	28800117 	ldw	r2,4(r5)
 40062d8:	2cc00017 	ldw	r19,0(r5)
 40062dc:	29400204 	addi	r5,r5,8
 40062e0:	d9402d15 	stw	r5,180(sp)
 40062e4:	102d883a 	mov	r22,r2
 40062e8:	10044b16 	blt	r2,zero,4007418 <___vfprintf_internal_r+0x1658>
 40062ec:	d9402917 	ldw	r5,164(sp)
 40062f0:	df002783 	ldbu	fp,158(sp)
 40062f4:	2803bc16 	blt	r5,zero,40071e8 <___vfprintf_internal_r+0x1428>
 40062f8:	00ffdfc4 	movi	r3,-129
 40062fc:	9d84b03a 	or	r2,r19,r22
 4006300:	90e4703a 	and	r18,r18,r3
 4006304:	10017726 	beq	r2,zero,40068e4 <___vfprintf_internal_r+0xb24>
 4006308:	b0038326 	beq	r22,zero,4007118 <___vfprintf_internal_r+0x1358>
 400630c:	dc402a15 	stw	r17,168(sp)
 4006310:	dc001e04 	addi	r16,sp,120
 4006314:	b023883a 	mov	r17,r22
 4006318:	402d883a 	mov	r22,r8
 400631c:	9809883a 	mov	r4,r19
 4006320:	880b883a 	mov	r5,r17
 4006324:	01800284 	movi	r6,10
 4006328:	000f883a 	mov	r7,zero
 400632c:	400f9640 	call	400f964 <__umoddi3>
 4006330:	10800c04 	addi	r2,r2,48
 4006334:	843fffc4 	addi	r16,r16,-1
 4006338:	9809883a 	mov	r4,r19
 400633c:	880b883a 	mov	r5,r17
 4006340:	80800005 	stb	r2,0(r16)
 4006344:	01800284 	movi	r6,10
 4006348:	000f883a 	mov	r7,zero
 400634c:	400f3ec0 	call	400f3ec <__udivdi3>
 4006350:	1027883a 	mov	r19,r2
 4006354:	10c4b03a 	or	r2,r2,r3
 4006358:	1823883a 	mov	r17,r3
 400635c:	103fef1e 	bne	r2,zero,400631c <__alt_data_end+0xfc00631c>
 4006360:	d8c02817 	ldw	r3,160(sp)
 4006364:	dc402a17 	ldw	r17,168(sp)
 4006368:	b011883a 	mov	r8,r22
 400636c:	1c07c83a 	sub	r3,r3,r16
 4006370:	d8c02e15 	stw	r3,184(sp)
 4006374:	00005906 	br	40064dc <___vfprintf_internal_r+0x71c>
 4006378:	18c03fcc 	andi	r3,r3,255
 400637c:	1806fa1e 	bne	r3,zero,4007f68 <___vfprintf_internal_r+0x21a8>
 4006380:	9080020c 	andi	r2,r18,8
 4006384:	10048a26 	beq	r2,zero,40075b0 <___vfprintf_internal_r+0x17f0>
 4006388:	d8c02d17 	ldw	r3,180(sp)
 400638c:	d9002d17 	ldw	r4,180(sp)
 4006390:	d9402d17 	ldw	r5,180(sp)
 4006394:	18c00017 	ldw	r3,0(r3)
 4006398:	21000117 	ldw	r4,4(r4)
 400639c:	29400204 	addi	r5,r5,8
 40063a0:	d8c03615 	stw	r3,216(sp)
 40063a4:	d9003815 	stw	r4,224(sp)
 40063a8:	d9402d15 	stw	r5,180(sp)
 40063ac:	d9003617 	ldw	r4,216(sp)
 40063b0:	d9403817 	ldw	r5,224(sp)
 40063b4:	da003d15 	stw	r8,244(sp)
 40063b8:	04000044 	movi	r16,1
 40063bc:	4002ef40 	call	4002ef4 <__fpclassifyd>
 40063c0:	da003d17 	ldw	r8,244(sp)
 40063c4:	14041f1e 	bne	r2,r16,4007444 <___vfprintf_internal_r+0x1684>
 40063c8:	d9003617 	ldw	r4,216(sp)
 40063cc:	d9403817 	ldw	r5,224(sp)
 40063d0:	000d883a 	mov	r6,zero
 40063d4:	000f883a 	mov	r7,zero
 40063d8:	40043580 	call	4004358 <__ledf2>
 40063dc:	da003d17 	ldw	r8,244(sp)
 40063e0:	1005be16 	blt	r2,zero,4007adc <___vfprintf_internal_r+0x1d1c>
 40063e4:	df002783 	ldbu	fp,158(sp)
 40063e8:	008011c4 	movi	r2,71
 40063ec:	1445330e 	bge	r2,r17,40078bc <___vfprintf_internal_r+0x1afc>
 40063f0:	04010074 	movhi	r16,1025
 40063f4:	840bce04 	addi	r16,r16,12088
 40063f8:	00c000c4 	movi	r3,3
 40063fc:	00bfdfc4 	movi	r2,-129
 4006400:	d8c02a15 	stw	r3,168(sp)
 4006404:	90a4703a 	and	r18,r18,r2
 4006408:	d8c02e15 	stw	r3,184(sp)
 400640c:	d8002915 	stw	zero,164(sp)
 4006410:	d8003215 	stw	zero,200(sp)
 4006414:	00003706 	br	40064f4 <___vfprintf_internal_r+0x734>
 4006418:	94800214 	ori	r18,r18,8
 400641c:	ac400007 	ldb	r17,0(r21)
 4006420:	003ec806 	br	4005f44 <__alt_data_end+0xfc005f44>
 4006424:	18c03fcc 	andi	r3,r3,255
 4006428:	1806db1e 	bne	r3,zero,4007f98 <___vfprintf_internal_r+0x21d8>
 400642c:	94800414 	ori	r18,r18,16
 4006430:	9080080c 	andi	r2,r18,32
 4006434:	1002d826 	beq	r2,zero,4006f98 <___vfprintf_internal_r+0x11d8>
 4006438:	d9402d17 	ldw	r5,180(sp)
 400643c:	d8c02917 	ldw	r3,164(sp)
 4006440:	d8002785 	stb	zero,158(sp)
 4006444:	28800204 	addi	r2,r5,8
 4006448:	2cc00017 	ldw	r19,0(r5)
 400644c:	2d800117 	ldw	r22,4(r5)
 4006450:	18048f16 	blt	r3,zero,4007690 <___vfprintf_internal_r+0x18d0>
 4006454:	013fdfc4 	movi	r4,-129
 4006458:	9d86b03a 	or	r3,r19,r22
 400645c:	d8802d15 	stw	r2,180(sp)
 4006460:	9124703a 	and	r18,r18,r4
 4006464:	1802d91e 	bne	r3,zero,4006fcc <___vfprintf_internal_r+0x120c>
 4006468:	d8c02917 	ldw	r3,164(sp)
 400646c:	0039883a 	mov	fp,zero
 4006470:	1805c326 	beq	r3,zero,4007b80 <___vfprintf_internal_r+0x1dc0>
 4006474:	0027883a 	mov	r19,zero
 4006478:	002d883a 	mov	r22,zero
 400647c:	dc001e04 	addi	r16,sp,120
 4006480:	9806d0fa 	srli	r3,r19,3
 4006484:	b008977a 	slli	r4,r22,29
 4006488:	b02cd0fa 	srli	r22,r22,3
 400648c:	9cc001cc 	andi	r19,r19,7
 4006490:	98800c04 	addi	r2,r19,48
 4006494:	843fffc4 	addi	r16,r16,-1
 4006498:	20e6b03a 	or	r19,r4,r3
 400649c:	80800005 	stb	r2,0(r16)
 40064a0:	9d86b03a 	or	r3,r19,r22
 40064a4:	183ff61e 	bne	r3,zero,4006480 <__alt_data_end+0xfc006480>
 40064a8:	90c0004c 	andi	r3,r18,1
 40064ac:	18013b26 	beq	r3,zero,400699c <___vfprintf_internal_r+0xbdc>
 40064b0:	10803fcc 	andi	r2,r2,255
 40064b4:	1080201c 	xori	r2,r2,128
 40064b8:	10bfe004 	addi	r2,r2,-128
 40064bc:	00c00c04 	movi	r3,48
 40064c0:	10c13626 	beq	r2,r3,400699c <___vfprintf_internal_r+0xbdc>
 40064c4:	80ffffc5 	stb	r3,-1(r16)
 40064c8:	d8c02817 	ldw	r3,160(sp)
 40064cc:	80bfffc4 	addi	r2,r16,-1
 40064d0:	1021883a 	mov	r16,r2
 40064d4:	1887c83a 	sub	r3,r3,r2
 40064d8:	d8c02e15 	stw	r3,184(sp)
 40064dc:	d8802e17 	ldw	r2,184(sp)
 40064e0:	d9002917 	ldw	r4,164(sp)
 40064e4:	1100010e 	bge	r2,r4,40064ec <___vfprintf_internal_r+0x72c>
 40064e8:	2005883a 	mov	r2,r4
 40064ec:	d8802a15 	stw	r2,168(sp)
 40064f0:	d8003215 	stw	zero,200(sp)
 40064f4:	e7003fcc 	andi	fp,fp,255
 40064f8:	e700201c 	xori	fp,fp,128
 40064fc:	e73fe004 	addi	fp,fp,-128
 4006500:	e0000326 	beq	fp,zero,4006510 <___vfprintf_internal_r+0x750>
 4006504:	d8c02a17 	ldw	r3,168(sp)
 4006508:	18c00044 	addi	r3,r3,1
 400650c:	d8c02a15 	stw	r3,168(sp)
 4006510:	90c0008c 	andi	r3,r18,2
 4006514:	d8c02b15 	stw	r3,172(sp)
 4006518:	18000326 	beq	r3,zero,4006528 <___vfprintf_internal_r+0x768>
 400651c:	d8c02a17 	ldw	r3,168(sp)
 4006520:	18c00084 	addi	r3,r3,2
 4006524:	d8c02a15 	stw	r3,168(sp)
 4006528:	90c0210c 	andi	r3,r18,132
 400652c:	d8c03015 	stw	r3,192(sp)
 4006530:	1801a31e 	bne	r3,zero,4006bc0 <___vfprintf_internal_r+0xe00>
 4006534:	d9003117 	ldw	r4,196(sp)
 4006538:	d8c02a17 	ldw	r3,168(sp)
 400653c:	20e7c83a 	sub	r19,r4,r3
 4006540:	04c19f0e 	bge	zero,r19,4006bc0 <___vfprintf_internal_r+0xe00>
 4006544:	02400404 	movi	r9,16
 4006548:	d8c02017 	ldw	r3,128(sp)
 400654c:	d8801f17 	ldw	r2,124(sp)
 4006550:	4cc50d0e 	bge	r9,r19,4007988 <___vfprintf_internal_r+0x1bc8>
 4006554:	01410074 	movhi	r5,1025
 4006558:	294be184 	addi	r5,r5,12166
 400655c:	dc403b15 	stw	r17,236(sp)
 4006560:	d9403515 	stw	r5,212(sp)
 4006564:	9823883a 	mov	r17,r19
 4006568:	482d883a 	mov	r22,r9
 400656c:	9027883a 	mov	r19,r18
 4006570:	070001c4 	movi	fp,7
 4006574:	8025883a 	mov	r18,r16
 4006578:	dc002c17 	ldw	r16,176(sp)
 400657c:	00000306 	br	400658c <___vfprintf_internal_r+0x7cc>
 4006580:	8c7ffc04 	addi	r17,r17,-16
 4006584:	42000204 	addi	r8,r8,8
 4006588:	b440130e 	bge	r22,r17,40065d8 <___vfprintf_internal_r+0x818>
 400658c:	01010074 	movhi	r4,1025
 4006590:	18c00404 	addi	r3,r3,16
 4006594:	10800044 	addi	r2,r2,1
 4006598:	210be184 	addi	r4,r4,12166
 400659c:	41000015 	stw	r4,0(r8)
 40065a0:	45800115 	stw	r22,4(r8)
 40065a4:	d8c02015 	stw	r3,128(sp)
 40065a8:	d8801f15 	stw	r2,124(sp)
 40065ac:	e0bff40e 	bge	fp,r2,4006580 <__alt_data_end+0xfc006580>
 40065b0:	d9801e04 	addi	r6,sp,120
 40065b4:	b80b883a 	mov	r5,r23
 40065b8:	8009883a 	mov	r4,r16
 40065bc:	400d50c0 	call	400d50c <__sprint_r>
 40065c0:	103f011e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 40065c4:	8c7ffc04 	addi	r17,r17,-16
 40065c8:	d8c02017 	ldw	r3,128(sp)
 40065cc:	d8801f17 	ldw	r2,124(sp)
 40065d0:	da000404 	addi	r8,sp,16
 40065d4:	b47fed16 	blt	r22,r17,400658c <__alt_data_end+0xfc00658c>
 40065d8:	9021883a 	mov	r16,r18
 40065dc:	9825883a 	mov	r18,r19
 40065e0:	8827883a 	mov	r19,r17
 40065e4:	dc403b17 	ldw	r17,236(sp)
 40065e8:	d9403517 	ldw	r5,212(sp)
 40065ec:	98c7883a 	add	r3,r19,r3
 40065f0:	10800044 	addi	r2,r2,1
 40065f4:	41400015 	stw	r5,0(r8)
 40065f8:	44c00115 	stw	r19,4(r8)
 40065fc:	d8c02015 	stw	r3,128(sp)
 4006600:	d8801f15 	stw	r2,124(sp)
 4006604:	010001c4 	movi	r4,7
 4006608:	2082a316 	blt	r4,r2,4007098 <___vfprintf_internal_r+0x12d8>
 400660c:	df002787 	ldb	fp,158(sp)
 4006610:	42000204 	addi	r8,r8,8
 4006614:	e0000c26 	beq	fp,zero,4006648 <___vfprintf_internal_r+0x888>
 4006618:	d8801f17 	ldw	r2,124(sp)
 400661c:	d9002784 	addi	r4,sp,158
 4006620:	18c00044 	addi	r3,r3,1
 4006624:	10800044 	addi	r2,r2,1
 4006628:	41000015 	stw	r4,0(r8)
 400662c:	01000044 	movi	r4,1
 4006630:	41000115 	stw	r4,4(r8)
 4006634:	d8c02015 	stw	r3,128(sp)
 4006638:	d8801f15 	stw	r2,124(sp)
 400663c:	010001c4 	movi	r4,7
 4006640:	20823c16 	blt	r4,r2,4006f34 <___vfprintf_internal_r+0x1174>
 4006644:	42000204 	addi	r8,r8,8
 4006648:	d8802b17 	ldw	r2,172(sp)
 400664c:	10000c26 	beq	r2,zero,4006680 <___vfprintf_internal_r+0x8c0>
 4006650:	d8801f17 	ldw	r2,124(sp)
 4006654:	d9002704 	addi	r4,sp,156
 4006658:	18c00084 	addi	r3,r3,2
 400665c:	10800044 	addi	r2,r2,1
 4006660:	41000015 	stw	r4,0(r8)
 4006664:	01000084 	movi	r4,2
 4006668:	41000115 	stw	r4,4(r8)
 400666c:	d8c02015 	stw	r3,128(sp)
 4006670:	d8801f15 	stw	r2,124(sp)
 4006674:	010001c4 	movi	r4,7
 4006678:	20823616 	blt	r4,r2,4006f54 <___vfprintf_internal_r+0x1194>
 400667c:	42000204 	addi	r8,r8,8
 4006680:	d9003017 	ldw	r4,192(sp)
 4006684:	00802004 	movi	r2,128
 4006688:	20819926 	beq	r4,r2,4006cf0 <___vfprintf_internal_r+0xf30>
 400668c:	d9402917 	ldw	r5,164(sp)
 4006690:	d8802e17 	ldw	r2,184(sp)
 4006694:	28adc83a 	sub	r22,r5,r2
 4006698:	0580310e 	bge	zero,r22,4006760 <___vfprintf_internal_r+0x9a0>
 400669c:	07000404 	movi	fp,16
 40066a0:	d8801f17 	ldw	r2,124(sp)
 40066a4:	e584140e 	bge	fp,r22,40076f8 <___vfprintf_internal_r+0x1938>
 40066a8:	01410074 	movhi	r5,1025
 40066ac:	294bdd84 	addi	r5,r5,12150
 40066b0:	dc402915 	stw	r17,164(sp)
 40066b4:	d9402b15 	stw	r5,172(sp)
 40066b8:	b023883a 	mov	r17,r22
 40066bc:	04c001c4 	movi	r19,7
 40066c0:	a82d883a 	mov	r22,r21
 40066c4:	902b883a 	mov	r21,r18
 40066c8:	8025883a 	mov	r18,r16
 40066cc:	dc002c17 	ldw	r16,176(sp)
 40066d0:	00000306 	br	40066e0 <___vfprintf_internal_r+0x920>
 40066d4:	8c7ffc04 	addi	r17,r17,-16
 40066d8:	42000204 	addi	r8,r8,8
 40066dc:	e440110e 	bge	fp,r17,4006724 <___vfprintf_internal_r+0x964>
 40066e0:	18c00404 	addi	r3,r3,16
 40066e4:	10800044 	addi	r2,r2,1
 40066e8:	45000015 	stw	r20,0(r8)
 40066ec:	47000115 	stw	fp,4(r8)
 40066f0:	d8c02015 	stw	r3,128(sp)
 40066f4:	d8801f15 	stw	r2,124(sp)
 40066f8:	98bff60e 	bge	r19,r2,40066d4 <__alt_data_end+0xfc0066d4>
 40066fc:	d9801e04 	addi	r6,sp,120
 4006700:	b80b883a 	mov	r5,r23
 4006704:	8009883a 	mov	r4,r16
 4006708:	400d50c0 	call	400d50c <__sprint_r>
 400670c:	103eae1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006710:	8c7ffc04 	addi	r17,r17,-16
 4006714:	d8c02017 	ldw	r3,128(sp)
 4006718:	d8801f17 	ldw	r2,124(sp)
 400671c:	da000404 	addi	r8,sp,16
 4006720:	e47fef16 	blt	fp,r17,40066e0 <__alt_data_end+0xfc0066e0>
 4006724:	9021883a 	mov	r16,r18
 4006728:	a825883a 	mov	r18,r21
 400672c:	b02b883a 	mov	r21,r22
 4006730:	882d883a 	mov	r22,r17
 4006734:	dc402917 	ldw	r17,164(sp)
 4006738:	d9002b17 	ldw	r4,172(sp)
 400673c:	1d87883a 	add	r3,r3,r22
 4006740:	10800044 	addi	r2,r2,1
 4006744:	41000015 	stw	r4,0(r8)
 4006748:	45800115 	stw	r22,4(r8)
 400674c:	d8c02015 	stw	r3,128(sp)
 4006750:	d8801f15 	stw	r2,124(sp)
 4006754:	010001c4 	movi	r4,7
 4006758:	2081ee16 	blt	r4,r2,4006f14 <___vfprintf_internal_r+0x1154>
 400675c:	42000204 	addi	r8,r8,8
 4006760:	9080400c 	andi	r2,r18,256
 4006764:	1001181e 	bne	r2,zero,4006bc8 <___vfprintf_internal_r+0xe08>
 4006768:	d9402e17 	ldw	r5,184(sp)
 400676c:	d8801f17 	ldw	r2,124(sp)
 4006770:	44000015 	stw	r16,0(r8)
 4006774:	1947883a 	add	r3,r3,r5
 4006778:	10800044 	addi	r2,r2,1
 400677c:	41400115 	stw	r5,4(r8)
 4006780:	d8c02015 	stw	r3,128(sp)
 4006784:	d8801f15 	stw	r2,124(sp)
 4006788:	010001c4 	movi	r4,7
 400678c:	2081d316 	blt	r4,r2,4006edc <___vfprintf_internal_r+0x111c>
 4006790:	42000204 	addi	r8,r8,8
 4006794:	9480010c 	andi	r18,r18,4
 4006798:	90003226 	beq	r18,zero,4006864 <___vfprintf_internal_r+0xaa4>
 400679c:	d9403117 	ldw	r5,196(sp)
 40067a0:	d8802a17 	ldw	r2,168(sp)
 40067a4:	28a1c83a 	sub	r16,r5,r2
 40067a8:	04002e0e 	bge	zero,r16,4006864 <___vfprintf_internal_r+0xaa4>
 40067ac:	04400404 	movi	r17,16
 40067b0:	d8801f17 	ldw	r2,124(sp)
 40067b4:	8c04a20e 	bge	r17,r16,4007a40 <___vfprintf_internal_r+0x1c80>
 40067b8:	01410074 	movhi	r5,1025
 40067bc:	294be184 	addi	r5,r5,12166
 40067c0:	d9403515 	stw	r5,212(sp)
 40067c4:	048001c4 	movi	r18,7
 40067c8:	dcc02c17 	ldw	r19,176(sp)
 40067cc:	00000306 	br	40067dc <___vfprintf_internal_r+0xa1c>
 40067d0:	843ffc04 	addi	r16,r16,-16
 40067d4:	42000204 	addi	r8,r8,8
 40067d8:	8c00130e 	bge	r17,r16,4006828 <___vfprintf_internal_r+0xa68>
 40067dc:	01010074 	movhi	r4,1025
 40067e0:	18c00404 	addi	r3,r3,16
 40067e4:	10800044 	addi	r2,r2,1
 40067e8:	210be184 	addi	r4,r4,12166
 40067ec:	41000015 	stw	r4,0(r8)
 40067f0:	44400115 	stw	r17,4(r8)
 40067f4:	d8c02015 	stw	r3,128(sp)
 40067f8:	d8801f15 	stw	r2,124(sp)
 40067fc:	90bff40e 	bge	r18,r2,40067d0 <__alt_data_end+0xfc0067d0>
 4006800:	d9801e04 	addi	r6,sp,120
 4006804:	b80b883a 	mov	r5,r23
 4006808:	9809883a 	mov	r4,r19
 400680c:	400d50c0 	call	400d50c <__sprint_r>
 4006810:	103e6d1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006814:	843ffc04 	addi	r16,r16,-16
 4006818:	d8c02017 	ldw	r3,128(sp)
 400681c:	d8801f17 	ldw	r2,124(sp)
 4006820:	da000404 	addi	r8,sp,16
 4006824:	8c3fed16 	blt	r17,r16,40067dc <__alt_data_end+0xfc0067dc>
 4006828:	d9403517 	ldw	r5,212(sp)
 400682c:	1c07883a 	add	r3,r3,r16
 4006830:	10800044 	addi	r2,r2,1
 4006834:	41400015 	stw	r5,0(r8)
 4006838:	44000115 	stw	r16,4(r8)
 400683c:	d8c02015 	stw	r3,128(sp)
 4006840:	d8801f15 	stw	r2,124(sp)
 4006844:	010001c4 	movi	r4,7
 4006848:	2080060e 	bge	r4,r2,4006864 <___vfprintf_internal_r+0xaa4>
 400684c:	d9002c17 	ldw	r4,176(sp)
 4006850:	d9801e04 	addi	r6,sp,120
 4006854:	b80b883a 	mov	r5,r23
 4006858:	400d50c0 	call	400d50c <__sprint_r>
 400685c:	103e5a1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006860:	d8c02017 	ldw	r3,128(sp)
 4006864:	d8803117 	ldw	r2,196(sp)
 4006868:	d9002a17 	ldw	r4,168(sp)
 400686c:	1100010e 	bge	r2,r4,4006874 <___vfprintf_internal_r+0xab4>
 4006870:	2005883a 	mov	r2,r4
 4006874:	d9402f17 	ldw	r5,188(sp)
 4006878:	288b883a 	add	r5,r5,r2
 400687c:	d9402f15 	stw	r5,188(sp)
 4006880:	18019e1e 	bne	r3,zero,4006efc <___vfprintf_internal_r+0x113c>
 4006884:	a8800007 	ldb	r2,0(r21)
 4006888:	d8001f15 	stw	zero,124(sp)
 400688c:	da000404 	addi	r8,sp,16
 4006890:	103d851e 	bne	r2,zero,4005ea8 <__alt_data_end+0xfc005ea8>
 4006894:	a821883a 	mov	r16,r21
 4006898:	003d9b06 	br	4005f08 <__alt_data_end+0xfc005f08>
 400689c:	18c03fcc 	andi	r3,r3,255
 40068a0:	1805c11e 	bne	r3,zero,4007fa8 <___vfprintf_internal_r+0x21e8>
 40068a4:	94800414 	ori	r18,r18,16
 40068a8:	9080080c 	andi	r2,r18,32
 40068ac:	10020c26 	beq	r2,zero,40070e0 <___vfprintf_internal_r+0x1320>
 40068b0:	d8802d17 	ldw	r2,180(sp)
 40068b4:	d9002917 	ldw	r4,164(sp)
 40068b8:	d8002785 	stb	zero,158(sp)
 40068bc:	10c00204 	addi	r3,r2,8
 40068c0:	14c00017 	ldw	r19,0(r2)
 40068c4:	15800117 	ldw	r22,4(r2)
 40068c8:	20040f16 	blt	r4,zero,4007908 <___vfprintf_internal_r+0x1b48>
 40068cc:	013fdfc4 	movi	r4,-129
 40068d0:	9d84b03a 	or	r2,r19,r22
 40068d4:	d8c02d15 	stw	r3,180(sp)
 40068d8:	9124703a 	and	r18,r18,r4
 40068dc:	0039883a 	mov	fp,zero
 40068e0:	103e891e 	bne	r2,zero,4006308 <__alt_data_end+0xfc006308>
 40068e4:	d9002917 	ldw	r4,164(sp)
 40068e8:	2002c11e 	bne	r4,zero,40073f0 <___vfprintf_internal_r+0x1630>
 40068ec:	d8002915 	stw	zero,164(sp)
 40068f0:	d8002e15 	stw	zero,184(sp)
 40068f4:	dc001e04 	addi	r16,sp,120
 40068f8:	003ef806 	br	40064dc <__alt_data_end+0xfc0064dc>
 40068fc:	18c03fcc 	andi	r3,r3,255
 4006900:	18059d1e 	bne	r3,zero,4007f78 <___vfprintf_internal_r+0x21b8>
 4006904:	01410074 	movhi	r5,1025
 4006908:	294bd104 	addi	r5,r5,12100
 400690c:	d9403915 	stw	r5,228(sp)
 4006910:	9080080c 	andi	r2,r18,32
 4006914:	10005226 	beq	r2,zero,4006a60 <___vfprintf_internal_r+0xca0>
 4006918:	d8802d17 	ldw	r2,180(sp)
 400691c:	14c00017 	ldw	r19,0(r2)
 4006920:	15800117 	ldw	r22,4(r2)
 4006924:	10800204 	addi	r2,r2,8
 4006928:	d8802d15 	stw	r2,180(sp)
 400692c:	9080004c 	andi	r2,r18,1
 4006930:	10019026 	beq	r2,zero,4006f74 <___vfprintf_internal_r+0x11b4>
 4006934:	9d84b03a 	or	r2,r19,r22
 4006938:	10036926 	beq	r2,zero,40076e0 <___vfprintf_internal_r+0x1920>
 400693c:	d8c02917 	ldw	r3,164(sp)
 4006940:	00800c04 	movi	r2,48
 4006944:	d8802705 	stb	r2,156(sp)
 4006948:	dc402745 	stb	r17,157(sp)
 400694c:	d8002785 	stb	zero,158(sp)
 4006950:	90800094 	ori	r2,r18,2
 4006954:	18045d16 	blt	r3,zero,4007acc <___vfprintf_internal_r+0x1d0c>
 4006958:	00bfdfc4 	movi	r2,-129
 400695c:	90a4703a 	and	r18,r18,r2
 4006960:	94800094 	ori	r18,r18,2
 4006964:	0039883a 	mov	fp,zero
 4006968:	d9003917 	ldw	r4,228(sp)
 400696c:	dc001e04 	addi	r16,sp,120
 4006970:	988003cc 	andi	r2,r19,15
 4006974:	b006973a 	slli	r3,r22,28
 4006978:	2085883a 	add	r2,r4,r2
 400697c:	9826d13a 	srli	r19,r19,4
 4006980:	10800003 	ldbu	r2,0(r2)
 4006984:	b02cd13a 	srli	r22,r22,4
 4006988:	843fffc4 	addi	r16,r16,-1
 400698c:	1ce6b03a 	or	r19,r3,r19
 4006990:	80800005 	stb	r2,0(r16)
 4006994:	9d84b03a 	or	r2,r19,r22
 4006998:	103ff51e 	bne	r2,zero,4006970 <__alt_data_end+0xfc006970>
 400699c:	d8c02817 	ldw	r3,160(sp)
 40069a0:	1c07c83a 	sub	r3,r3,r16
 40069a4:	d8c02e15 	stw	r3,184(sp)
 40069a8:	003ecc06 	br	40064dc <__alt_data_end+0xfc0064dc>
 40069ac:	18c03fcc 	andi	r3,r3,255
 40069b0:	183e9f26 	beq	r3,zero,4006430 <__alt_data_end+0xfc006430>
 40069b4:	d9c02785 	stb	r7,158(sp)
 40069b8:	003e9d06 	br	4006430 <__alt_data_end+0xfc006430>
 40069bc:	00c00044 	movi	r3,1
 40069c0:	01c00ac4 	movi	r7,43
 40069c4:	ac400007 	ldb	r17,0(r21)
 40069c8:	003d5e06 	br	4005f44 <__alt_data_end+0xfc005f44>
 40069cc:	94800814 	ori	r18,r18,32
 40069d0:	ac400007 	ldb	r17,0(r21)
 40069d4:	003d5b06 	br	4005f44 <__alt_data_end+0xfc005f44>
 40069d8:	d8c02d17 	ldw	r3,180(sp)
 40069dc:	d8002785 	stb	zero,158(sp)
 40069e0:	1c000017 	ldw	r16,0(r3)
 40069e4:	1cc00104 	addi	r19,r3,4
 40069e8:	80041926 	beq	r16,zero,4007a50 <___vfprintf_internal_r+0x1c90>
 40069ec:	d9002917 	ldw	r4,164(sp)
 40069f0:	2003d016 	blt	r4,zero,4007934 <___vfprintf_internal_r+0x1b74>
 40069f4:	200d883a 	mov	r6,r4
 40069f8:	000b883a 	mov	r5,zero
 40069fc:	8009883a 	mov	r4,r16
 4006a00:	da003d15 	stw	r8,244(sp)
 4006a04:	400b62c0 	call	400b62c <memchr>
 4006a08:	da003d17 	ldw	r8,244(sp)
 4006a0c:	10045426 	beq	r2,zero,4007b60 <___vfprintf_internal_r+0x1da0>
 4006a10:	1405c83a 	sub	r2,r2,r16
 4006a14:	d8802e15 	stw	r2,184(sp)
 4006a18:	1003cc16 	blt	r2,zero,400794c <___vfprintf_internal_r+0x1b8c>
 4006a1c:	df002783 	ldbu	fp,158(sp)
 4006a20:	d8802a15 	stw	r2,168(sp)
 4006a24:	dcc02d15 	stw	r19,180(sp)
 4006a28:	d8002915 	stw	zero,164(sp)
 4006a2c:	d8003215 	stw	zero,200(sp)
 4006a30:	003eb006 	br	40064f4 <__alt_data_end+0xfc0064f4>
 4006a34:	18c03fcc 	andi	r3,r3,255
 4006a38:	183f9b26 	beq	r3,zero,40068a8 <__alt_data_end+0xfc0068a8>
 4006a3c:	d9c02785 	stb	r7,158(sp)
 4006a40:	003f9906 	br	40068a8 <__alt_data_end+0xfc0068a8>
 4006a44:	18c03fcc 	andi	r3,r3,255
 4006a48:	1805551e 	bne	r3,zero,4007fa0 <___vfprintf_internal_r+0x21e0>
 4006a4c:	01410074 	movhi	r5,1025
 4006a50:	294bd604 	addi	r5,r5,12120
 4006a54:	d9403915 	stw	r5,228(sp)
 4006a58:	9080080c 	andi	r2,r18,32
 4006a5c:	103fae1e 	bne	r2,zero,4006918 <__alt_data_end+0xfc006918>
 4006a60:	9080040c 	andi	r2,r18,16
 4006a64:	1002de26 	beq	r2,zero,40075e0 <___vfprintf_internal_r+0x1820>
 4006a68:	d8c02d17 	ldw	r3,180(sp)
 4006a6c:	002d883a 	mov	r22,zero
 4006a70:	1cc00017 	ldw	r19,0(r3)
 4006a74:	18c00104 	addi	r3,r3,4
 4006a78:	d8c02d15 	stw	r3,180(sp)
 4006a7c:	003fab06 	br	400692c <__alt_data_end+0xfc00692c>
 4006a80:	38803fcc 	andi	r2,r7,255
 4006a84:	1080201c 	xori	r2,r2,128
 4006a88:	10bfe004 	addi	r2,r2,-128
 4006a8c:	1002d21e 	bne	r2,zero,40075d8 <___vfprintf_internal_r+0x1818>
 4006a90:	00c00044 	movi	r3,1
 4006a94:	01c00804 	movi	r7,32
 4006a98:	ac400007 	ldb	r17,0(r21)
 4006a9c:	003d2906 	br	4005f44 <__alt_data_end+0xfc005f44>
 4006aa0:	94800054 	ori	r18,r18,1
 4006aa4:	ac400007 	ldb	r17,0(r21)
 4006aa8:	003d2606 	br	4005f44 <__alt_data_end+0xfc005f44>
 4006aac:	18c03fcc 	andi	r3,r3,255
 4006ab0:	183e0526 	beq	r3,zero,40062c8 <__alt_data_end+0xfc0062c8>
 4006ab4:	d9c02785 	stb	r7,158(sp)
 4006ab8:	003e0306 	br	40062c8 <__alt_data_end+0xfc0062c8>
 4006abc:	94801014 	ori	r18,r18,64
 4006ac0:	ac400007 	ldb	r17,0(r21)
 4006ac4:	003d1f06 	br	4005f44 <__alt_data_end+0xfc005f44>
 4006ac8:	ac400007 	ldb	r17,0(r21)
 4006acc:	8a438726 	beq	r17,r9,40078ec <___vfprintf_internal_r+0x1b2c>
 4006ad0:	94800414 	ori	r18,r18,16
 4006ad4:	003d1b06 	br	4005f44 <__alt_data_end+0xfc005f44>
 4006ad8:	18c03fcc 	andi	r3,r3,255
 4006adc:	1805341e 	bne	r3,zero,4007fb0 <___vfprintf_internal_r+0x21f0>
 4006ae0:	9080080c 	andi	r2,r18,32
 4006ae4:	1002cd26 	beq	r2,zero,400761c <___vfprintf_internal_r+0x185c>
 4006ae8:	d9402d17 	ldw	r5,180(sp)
 4006aec:	d9002f17 	ldw	r4,188(sp)
 4006af0:	28800017 	ldw	r2,0(r5)
 4006af4:	2007d7fa 	srai	r3,r4,31
 4006af8:	29400104 	addi	r5,r5,4
 4006afc:	d9402d15 	stw	r5,180(sp)
 4006b00:	11000015 	stw	r4,0(r2)
 4006b04:	10c00115 	stw	r3,4(r2)
 4006b08:	003ce506 	br	4005ea0 <__alt_data_end+0xfc005ea0>
 4006b0c:	d8c02d17 	ldw	r3,180(sp)
 4006b10:	d9002d17 	ldw	r4,180(sp)
 4006b14:	d8002785 	stb	zero,158(sp)
 4006b18:	18800017 	ldw	r2,0(r3)
 4006b1c:	21000104 	addi	r4,r4,4
 4006b20:	00c00044 	movi	r3,1
 4006b24:	d8c02a15 	stw	r3,168(sp)
 4006b28:	d8801405 	stb	r2,80(sp)
 4006b2c:	d9002d15 	stw	r4,180(sp)
 4006b30:	d8c02e15 	stw	r3,184(sp)
 4006b34:	d8002915 	stw	zero,164(sp)
 4006b38:	d8003215 	stw	zero,200(sp)
 4006b3c:	dc001404 	addi	r16,sp,80
 4006b40:	0039883a 	mov	fp,zero
 4006b44:	003e7206 	br	4006510 <__alt_data_end+0xfc006510>
 4006b48:	01010074 	movhi	r4,1025
 4006b4c:	210bd604 	addi	r4,r4,12120
 4006b50:	0039883a 	mov	fp,zero
 4006b54:	d9003915 	stw	r4,228(sp)
 4006b58:	04401e04 	movi	r17,120
 4006b5c:	003f8206 	br	4006968 <__alt_data_end+0xfc006968>
 4006b60:	18c03fcc 	andi	r3,r3,255
 4006b64:	1805061e 	bne	r3,zero,4007f80 <___vfprintf_internal_r+0x21c0>
 4006b68:	883d9126 	beq	r17,zero,40061b0 <__alt_data_end+0xfc0061b0>
 4006b6c:	00c00044 	movi	r3,1
 4006b70:	d8c02a15 	stw	r3,168(sp)
 4006b74:	dc401405 	stb	r17,80(sp)
 4006b78:	d8002785 	stb	zero,158(sp)
 4006b7c:	003fec06 	br	4006b30 <__alt_data_end+0xfc006b30>
 4006b80:	01410074 	movhi	r5,1025
 4006b84:	294bd604 	addi	r5,r5,12120
 4006b88:	d9403915 	stw	r5,228(sp)
 4006b8c:	d8c02d15 	stw	r3,180(sp)
 4006b90:	1025883a 	mov	r18,r2
 4006b94:	04401e04 	movi	r17,120
 4006b98:	9d84b03a 	or	r2,r19,r22
 4006b9c:	1000fc1e 	bne	r2,zero,4006f90 <___vfprintf_internal_r+0x11d0>
 4006ba0:	0039883a 	mov	fp,zero
 4006ba4:	00800084 	movi	r2,2
 4006ba8:	10803fcc 	andi	r2,r2,255
 4006bac:	00c00044 	movi	r3,1
 4006bb0:	10c20f26 	beq	r2,r3,40073f0 <___vfprintf_internal_r+0x1630>
 4006bb4:	00c00084 	movi	r3,2
 4006bb8:	10fd6326 	beq	r2,r3,4006148 <__alt_data_end+0xfc006148>
 4006bbc:	003e2d06 	br	4006474 <__alt_data_end+0xfc006474>
 4006bc0:	d8c02017 	ldw	r3,128(sp)
 4006bc4:	003e9306 	br	4006614 <__alt_data_end+0xfc006614>
 4006bc8:	00801944 	movi	r2,101
 4006bcc:	14407e0e 	bge	r2,r17,4006dc8 <___vfprintf_internal_r+0x1008>
 4006bd0:	d9003617 	ldw	r4,216(sp)
 4006bd4:	d9403817 	ldw	r5,224(sp)
 4006bd8:	000d883a 	mov	r6,zero
 4006bdc:	000f883a 	mov	r7,zero
 4006be0:	d8c03c15 	stw	r3,240(sp)
 4006be4:	da003d15 	stw	r8,244(sp)
 4006be8:	40041f40 	call	40041f4 <__eqdf2>
 4006bec:	d8c03c17 	ldw	r3,240(sp)
 4006bf0:	da003d17 	ldw	r8,244(sp)
 4006bf4:	1000f71e 	bne	r2,zero,4006fd4 <___vfprintf_internal_r+0x1214>
 4006bf8:	d8801f17 	ldw	r2,124(sp)
 4006bfc:	01010074 	movhi	r4,1025
 4006c00:	210bdd04 	addi	r4,r4,12148
 4006c04:	18c00044 	addi	r3,r3,1
 4006c08:	10800044 	addi	r2,r2,1
 4006c0c:	41000015 	stw	r4,0(r8)
 4006c10:	01000044 	movi	r4,1
 4006c14:	41000115 	stw	r4,4(r8)
 4006c18:	d8c02015 	stw	r3,128(sp)
 4006c1c:	d8801f15 	stw	r2,124(sp)
 4006c20:	010001c4 	movi	r4,7
 4006c24:	2082b816 	blt	r4,r2,4007708 <___vfprintf_internal_r+0x1948>
 4006c28:	42000204 	addi	r8,r8,8
 4006c2c:	d8802617 	ldw	r2,152(sp)
 4006c30:	d9403317 	ldw	r5,204(sp)
 4006c34:	11400216 	blt	r2,r5,4006c40 <___vfprintf_internal_r+0xe80>
 4006c38:	9080004c 	andi	r2,r18,1
 4006c3c:	103ed526 	beq	r2,zero,4006794 <__alt_data_end+0xfc006794>
 4006c40:	d8803717 	ldw	r2,220(sp)
 4006c44:	d9003417 	ldw	r4,208(sp)
 4006c48:	d9403717 	ldw	r5,220(sp)
 4006c4c:	1887883a 	add	r3,r3,r2
 4006c50:	d8801f17 	ldw	r2,124(sp)
 4006c54:	41000015 	stw	r4,0(r8)
 4006c58:	41400115 	stw	r5,4(r8)
 4006c5c:	10800044 	addi	r2,r2,1
 4006c60:	d8c02015 	stw	r3,128(sp)
 4006c64:	d8801f15 	stw	r2,124(sp)
 4006c68:	010001c4 	movi	r4,7
 4006c6c:	20832916 	blt	r4,r2,4007914 <___vfprintf_internal_r+0x1b54>
 4006c70:	42000204 	addi	r8,r8,8
 4006c74:	d8803317 	ldw	r2,204(sp)
 4006c78:	143fffc4 	addi	r16,r2,-1
 4006c7c:	043ec50e 	bge	zero,r16,4006794 <__alt_data_end+0xfc006794>
 4006c80:	04400404 	movi	r17,16
 4006c84:	d8801f17 	ldw	r2,124(sp)
 4006c88:	8c00880e 	bge	r17,r16,4006eac <___vfprintf_internal_r+0x10ec>
 4006c8c:	01410074 	movhi	r5,1025
 4006c90:	294bdd84 	addi	r5,r5,12150
 4006c94:	d9402b15 	stw	r5,172(sp)
 4006c98:	058001c4 	movi	r22,7
 4006c9c:	dcc02c17 	ldw	r19,176(sp)
 4006ca0:	00000306 	br	4006cb0 <___vfprintf_internal_r+0xef0>
 4006ca4:	42000204 	addi	r8,r8,8
 4006ca8:	843ffc04 	addi	r16,r16,-16
 4006cac:	8c00820e 	bge	r17,r16,4006eb8 <___vfprintf_internal_r+0x10f8>
 4006cb0:	18c00404 	addi	r3,r3,16
 4006cb4:	10800044 	addi	r2,r2,1
 4006cb8:	45000015 	stw	r20,0(r8)
 4006cbc:	44400115 	stw	r17,4(r8)
 4006cc0:	d8c02015 	stw	r3,128(sp)
 4006cc4:	d8801f15 	stw	r2,124(sp)
 4006cc8:	b0bff60e 	bge	r22,r2,4006ca4 <__alt_data_end+0xfc006ca4>
 4006ccc:	d9801e04 	addi	r6,sp,120
 4006cd0:	b80b883a 	mov	r5,r23
 4006cd4:	9809883a 	mov	r4,r19
 4006cd8:	400d50c0 	call	400d50c <__sprint_r>
 4006cdc:	103d3a1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006ce0:	d8c02017 	ldw	r3,128(sp)
 4006ce4:	d8801f17 	ldw	r2,124(sp)
 4006ce8:	da000404 	addi	r8,sp,16
 4006cec:	003fee06 	br	4006ca8 <__alt_data_end+0xfc006ca8>
 4006cf0:	d9403117 	ldw	r5,196(sp)
 4006cf4:	d8802a17 	ldw	r2,168(sp)
 4006cf8:	28adc83a 	sub	r22,r5,r2
 4006cfc:	05be630e 	bge	zero,r22,400668c <__alt_data_end+0xfc00668c>
 4006d00:	07000404 	movi	fp,16
 4006d04:	d8801f17 	ldw	r2,124(sp)
 4006d08:	e5838f0e 	bge	fp,r22,4007b48 <___vfprintf_internal_r+0x1d88>
 4006d0c:	01410074 	movhi	r5,1025
 4006d10:	294bdd84 	addi	r5,r5,12150
 4006d14:	dc403015 	stw	r17,192(sp)
 4006d18:	d9402b15 	stw	r5,172(sp)
 4006d1c:	b023883a 	mov	r17,r22
 4006d20:	04c001c4 	movi	r19,7
 4006d24:	a82d883a 	mov	r22,r21
 4006d28:	902b883a 	mov	r21,r18
 4006d2c:	8025883a 	mov	r18,r16
 4006d30:	dc002c17 	ldw	r16,176(sp)
 4006d34:	00000306 	br	4006d44 <___vfprintf_internal_r+0xf84>
 4006d38:	8c7ffc04 	addi	r17,r17,-16
 4006d3c:	42000204 	addi	r8,r8,8
 4006d40:	e440110e 	bge	fp,r17,4006d88 <___vfprintf_internal_r+0xfc8>
 4006d44:	18c00404 	addi	r3,r3,16
 4006d48:	10800044 	addi	r2,r2,1
 4006d4c:	45000015 	stw	r20,0(r8)
 4006d50:	47000115 	stw	fp,4(r8)
 4006d54:	d8c02015 	stw	r3,128(sp)
 4006d58:	d8801f15 	stw	r2,124(sp)
 4006d5c:	98bff60e 	bge	r19,r2,4006d38 <__alt_data_end+0xfc006d38>
 4006d60:	d9801e04 	addi	r6,sp,120
 4006d64:	b80b883a 	mov	r5,r23
 4006d68:	8009883a 	mov	r4,r16
 4006d6c:	400d50c0 	call	400d50c <__sprint_r>
 4006d70:	103d151e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006d74:	8c7ffc04 	addi	r17,r17,-16
 4006d78:	d8c02017 	ldw	r3,128(sp)
 4006d7c:	d8801f17 	ldw	r2,124(sp)
 4006d80:	da000404 	addi	r8,sp,16
 4006d84:	e47fef16 	blt	fp,r17,4006d44 <__alt_data_end+0xfc006d44>
 4006d88:	9021883a 	mov	r16,r18
 4006d8c:	a825883a 	mov	r18,r21
 4006d90:	b02b883a 	mov	r21,r22
 4006d94:	882d883a 	mov	r22,r17
 4006d98:	dc403017 	ldw	r17,192(sp)
 4006d9c:	d9002b17 	ldw	r4,172(sp)
 4006da0:	1d87883a 	add	r3,r3,r22
 4006da4:	10800044 	addi	r2,r2,1
 4006da8:	41000015 	stw	r4,0(r8)
 4006dac:	45800115 	stw	r22,4(r8)
 4006db0:	d8c02015 	stw	r3,128(sp)
 4006db4:	d8801f15 	stw	r2,124(sp)
 4006db8:	010001c4 	movi	r4,7
 4006dbc:	20818e16 	blt	r4,r2,40073f8 <___vfprintf_internal_r+0x1638>
 4006dc0:	42000204 	addi	r8,r8,8
 4006dc4:	003e3106 	br	400668c <__alt_data_end+0xfc00668c>
 4006dc8:	d9403317 	ldw	r5,204(sp)
 4006dcc:	00800044 	movi	r2,1
 4006dd0:	18c00044 	addi	r3,r3,1
 4006dd4:	1141530e 	bge	r2,r5,4007324 <___vfprintf_internal_r+0x1564>
 4006dd8:	dc401f17 	ldw	r17,124(sp)
 4006ddc:	00800044 	movi	r2,1
 4006de0:	40800115 	stw	r2,4(r8)
 4006de4:	8c400044 	addi	r17,r17,1
 4006de8:	44000015 	stw	r16,0(r8)
 4006dec:	d8c02015 	stw	r3,128(sp)
 4006df0:	dc401f15 	stw	r17,124(sp)
 4006df4:	008001c4 	movi	r2,7
 4006df8:	14416b16 	blt	r2,r17,40073a8 <___vfprintf_internal_r+0x15e8>
 4006dfc:	42000204 	addi	r8,r8,8
 4006e00:	d8803717 	ldw	r2,220(sp)
 4006e04:	d9003417 	ldw	r4,208(sp)
 4006e08:	8c400044 	addi	r17,r17,1
 4006e0c:	10c7883a 	add	r3,r2,r3
 4006e10:	40800115 	stw	r2,4(r8)
 4006e14:	41000015 	stw	r4,0(r8)
 4006e18:	d8c02015 	stw	r3,128(sp)
 4006e1c:	dc401f15 	stw	r17,124(sp)
 4006e20:	008001c4 	movi	r2,7
 4006e24:	14416916 	blt	r2,r17,40073cc <___vfprintf_internal_r+0x160c>
 4006e28:	45800204 	addi	r22,r8,8
 4006e2c:	d9003617 	ldw	r4,216(sp)
 4006e30:	d9403817 	ldw	r5,224(sp)
 4006e34:	000d883a 	mov	r6,zero
 4006e38:	000f883a 	mov	r7,zero
 4006e3c:	d8c03c15 	stw	r3,240(sp)
 4006e40:	40041f40 	call	40041f4 <__eqdf2>
 4006e44:	d8c03c17 	ldw	r3,240(sp)
 4006e48:	1000bc26 	beq	r2,zero,400713c <___vfprintf_internal_r+0x137c>
 4006e4c:	d9403317 	ldw	r5,204(sp)
 4006e50:	84000044 	addi	r16,r16,1
 4006e54:	8c400044 	addi	r17,r17,1
 4006e58:	28bfffc4 	addi	r2,r5,-1
 4006e5c:	1887883a 	add	r3,r3,r2
 4006e60:	b0800115 	stw	r2,4(r22)
 4006e64:	b4000015 	stw	r16,0(r22)
 4006e68:	d8c02015 	stw	r3,128(sp)
 4006e6c:	dc401f15 	stw	r17,124(sp)
 4006e70:	008001c4 	movi	r2,7
 4006e74:	14414316 	blt	r2,r17,4007384 <___vfprintf_internal_r+0x15c4>
 4006e78:	b5800204 	addi	r22,r22,8
 4006e7c:	d9003a17 	ldw	r4,232(sp)
 4006e80:	df0022c4 	addi	fp,sp,139
 4006e84:	8c400044 	addi	r17,r17,1
 4006e88:	20c7883a 	add	r3,r4,r3
 4006e8c:	b7000015 	stw	fp,0(r22)
 4006e90:	b1000115 	stw	r4,4(r22)
 4006e94:	d8c02015 	stw	r3,128(sp)
 4006e98:	dc401f15 	stw	r17,124(sp)
 4006e9c:	008001c4 	movi	r2,7
 4006ea0:	14400e16 	blt	r2,r17,4006edc <___vfprintf_internal_r+0x111c>
 4006ea4:	b2000204 	addi	r8,r22,8
 4006ea8:	003e3a06 	br	4006794 <__alt_data_end+0xfc006794>
 4006eac:	01010074 	movhi	r4,1025
 4006eb0:	210bdd84 	addi	r4,r4,12150
 4006eb4:	d9002b15 	stw	r4,172(sp)
 4006eb8:	d9002b17 	ldw	r4,172(sp)
 4006ebc:	1c07883a 	add	r3,r3,r16
 4006ec0:	44000115 	stw	r16,4(r8)
 4006ec4:	41000015 	stw	r4,0(r8)
 4006ec8:	10800044 	addi	r2,r2,1
 4006ecc:	d8c02015 	stw	r3,128(sp)
 4006ed0:	d8801f15 	stw	r2,124(sp)
 4006ed4:	010001c4 	movi	r4,7
 4006ed8:	20be2d0e 	bge	r4,r2,4006790 <__alt_data_end+0xfc006790>
 4006edc:	d9002c17 	ldw	r4,176(sp)
 4006ee0:	d9801e04 	addi	r6,sp,120
 4006ee4:	b80b883a 	mov	r5,r23
 4006ee8:	400d50c0 	call	400d50c <__sprint_r>
 4006eec:	103cb61e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006ef0:	d8c02017 	ldw	r3,128(sp)
 4006ef4:	da000404 	addi	r8,sp,16
 4006ef8:	003e2606 	br	4006794 <__alt_data_end+0xfc006794>
 4006efc:	d9002c17 	ldw	r4,176(sp)
 4006f00:	d9801e04 	addi	r6,sp,120
 4006f04:	b80b883a 	mov	r5,r23
 4006f08:	400d50c0 	call	400d50c <__sprint_r>
 4006f0c:	103e5d26 	beq	r2,zero,4006884 <__alt_data_end+0xfc006884>
 4006f10:	003cad06 	br	40061c8 <__alt_data_end+0xfc0061c8>
 4006f14:	d9002c17 	ldw	r4,176(sp)
 4006f18:	d9801e04 	addi	r6,sp,120
 4006f1c:	b80b883a 	mov	r5,r23
 4006f20:	400d50c0 	call	400d50c <__sprint_r>
 4006f24:	103ca81e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006f28:	d8c02017 	ldw	r3,128(sp)
 4006f2c:	da000404 	addi	r8,sp,16
 4006f30:	003e0b06 	br	4006760 <__alt_data_end+0xfc006760>
 4006f34:	d9002c17 	ldw	r4,176(sp)
 4006f38:	d9801e04 	addi	r6,sp,120
 4006f3c:	b80b883a 	mov	r5,r23
 4006f40:	400d50c0 	call	400d50c <__sprint_r>
 4006f44:	103ca01e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006f48:	d8c02017 	ldw	r3,128(sp)
 4006f4c:	da000404 	addi	r8,sp,16
 4006f50:	003dbd06 	br	4006648 <__alt_data_end+0xfc006648>
 4006f54:	d9002c17 	ldw	r4,176(sp)
 4006f58:	d9801e04 	addi	r6,sp,120
 4006f5c:	b80b883a 	mov	r5,r23
 4006f60:	400d50c0 	call	400d50c <__sprint_r>
 4006f64:	103c981e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4006f68:	d8c02017 	ldw	r3,128(sp)
 4006f6c:	da000404 	addi	r8,sp,16
 4006f70:	003dc306 	br	4006680 <__alt_data_end+0xfc006680>
 4006f74:	d8802917 	ldw	r2,164(sp)
 4006f78:	d8002785 	stb	zero,158(sp)
 4006f7c:	103f0616 	blt	r2,zero,4006b98 <__alt_data_end+0xfc006b98>
 4006f80:	00ffdfc4 	movi	r3,-129
 4006f84:	9d84b03a 	or	r2,r19,r22
 4006f88:	90e4703a 	and	r18,r18,r3
 4006f8c:	103c6b26 	beq	r2,zero,400613c <__alt_data_end+0xfc00613c>
 4006f90:	0039883a 	mov	fp,zero
 4006f94:	003e7406 	br	4006968 <__alt_data_end+0xfc006968>
 4006f98:	9080040c 	andi	r2,r18,16
 4006f9c:	1001b326 	beq	r2,zero,400766c <___vfprintf_internal_r+0x18ac>
 4006fa0:	d9002d17 	ldw	r4,180(sp)
 4006fa4:	d9402917 	ldw	r5,164(sp)
 4006fa8:	d8002785 	stb	zero,158(sp)
 4006fac:	20800104 	addi	r2,r4,4
 4006fb0:	24c00017 	ldw	r19,0(r4)
 4006fb4:	002d883a 	mov	r22,zero
 4006fb8:	2801b516 	blt	r5,zero,4007690 <___vfprintf_internal_r+0x18d0>
 4006fbc:	00ffdfc4 	movi	r3,-129
 4006fc0:	d8802d15 	stw	r2,180(sp)
 4006fc4:	90e4703a 	and	r18,r18,r3
 4006fc8:	983d2726 	beq	r19,zero,4006468 <__alt_data_end+0xfc006468>
 4006fcc:	0039883a 	mov	fp,zero
 4006fd0:	003d2a06 	br	400647c <__alt_data_end+0xfc00647c>
 4006fd4:	dc402617 	ldw	r17,152(sp)
 4006fd8:	0441d30e 	bge	zero,r17,4007728 <___vfprintf_internal_r+0x1968>
 4006fdc:	dc403217 	ldw	r17,200(sp)
 4006fe0:	d8803317 	ldw	r2,204(sp)
 4006fe4:	1440010e 	bge	r2,r17,4006fec <___vfprintf_internal_r+0x122c>
 4006fe8:	1023883a 	mov	r17,r2
 4006fec:	04400a0e 	bge	zero,r17,4007018 <___vfprintf_internal_r+0x1258>
 4006ff0:	d8801f17 	ldw	r2,124(sp)
 4006ff4:	1c47883a 	add	r3,r3,r17
 4006ff8:	44000015 	stw	r16,0(r8)
 4006ffc:	10800044 	addi	r2,r2,1
 4007000:	44400115 	stw	r17,4(r8)
 4007004:	d8c02015 	stw	r3,128(sp)
 4007008:	d8801f15 	stw	r2,124(sp)
 400700c:	010001c4 	movi	r4,7
 4007010:	20826516 	blt	r4,r2,40079a8 <___vfprintf_internal_r+0x1be8>
 4007014:	42000204 	addi	r8,r8,8
 4007018:	88026116 	blt	r17,zero,40079a0 <___vfprintf_internal_r+0x1be0>
 400701c:	d9003217 	ldw	r4,200(sp)
 4007020:	2463c83a 	sub	r17,r4,r17
 4007024:	04407b0e 	bge	zero,r17,4007214 <___vfprintf_internal_r+0x1454>
 4007028:	05800404 	movi	r22,16
 400702c:	d8801f17 	ldw	r2,124(sp)
 4007030:	b4419d0e 	bge	r22,r17,40076a8 <___vfprintf_internal_r+0x18e8>
 4007034:	01010074 	movhi	r4,1025
 4007038:	210bdd84 	addi	r4,r4,12150
 400703c:	d9002b15 	stw	r4,172(sp)
 4007040:	070001c4 	movi	fp,7
 4007044:	dcc02c17 	ldw	r19,176(sp)
 4007048:	00000306 	br	4007058 <___vfprintf_internal_r+0x1298>
 400704c:	42000204 	addi	r8,r8,8
 4007050:	8c7ffc04 	addi	r17,r17,-16
 4007054:	b441970e 	bge	r22,r17,40076b4 <___vfprintf_internal_r+0x18f4>
 4007058:	18c00404 	addi	r3,r3,16
 400705c:	10800044 	addi	r2,r2,1
 4007060:	45000015 	stw	r20,0(r8)
 4007064:	45800115 	stw	r22,4(r8)
 4007068:	d8c02015 	stw	r3,128(sp)
 400706c:	d8801f15 	stw	r2,124(sp)
 4007070:	e0bff60e 	bge	fp,r2,400704c <__alt_data_end+0xfc00704c>
 4007074:	d9801e04 	addi	r6,sp,120
 4007078:	b80b883a 	mov	r5,r23
 400707c:	9809883a 	mov	r4,r19
 4007080:	400d50c0 	call	400d50c <__sprint_r>
 4007084:	103c501e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007088:	d8c02017 	ldw	r3,128(sp)
 400708c:	d8801f17 	ldw	r2,124(sp)
 4007090:	da000404 	addi	r8,sp,16
 4007094:	003fee06 	br	4007050 <__alt_data_end+0xfc007050>
 4007098:	d9002c17 	ldw	r4,176(sp)
 400709c:	d9801e04 	addi	r6,sp,120
 40070a0:	b80b883a 	mov	r5,r23
 40070a4:	400d50c0 	call	400d50c <__sprint_r>
 40070a8:	103c471e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 40070ac:	d8c02017 	ldw	r3,128(sp)
 40070b0:	df002787 	ldb	fp,158(sp)
 40070b4:	da000404 	addi	r8,sp,16
 40070b8:	003d5606 	br	4006614 <__alt_data_end+0xfc006614>
 40070bc:	9080040c 	andi	r2,r18,16
 40070c0:	10016126 	beq	r2,zero,4007648 <___vfprintf_internal_r+0x1888>
 40070c4:	d8802d17 	ldw	r2,180(sp)
 40070c8:	14c00017 	ldw	r19,0(r2)
 40070cc:	10800104 	addi	r2,r2,4
 40070d0:	d8802d15 	stw	r2,180(sp)
 40070d4:	982dd7fa 	srai	r22,r19,31
 40070d8:	b005883a 	mov	r2,r22
 40070dc:	003c8206 	br	40062e8 <__alt_data_end+0xfc0062e8>
 40070e0:	9080040c 	andi	r2,r18,16
 40070e4:	10003526 	beq	r2,zero,40071bc <___vfprintf_internal_r+0x13fc>
 40070e8:	d9402d17 	ldw	r5,180(sp)
 40070ec:	d8c02917 	ldw	r3,164(sp)
 40070f0:	d8002785 	stb	zero,158(sp)
 40070f4:	28800104 	addi	r2,r5,4
 40070f8:	2cc00017 	ldw	r19,0(r5)
 40070fc:	002d883a 	mov	r22,zero
 4007100:	18003716 	blt	r3,zero,40071e0 <___vfprintf_internal_r+0x1420>
 4007104:	00ffdfc4 	movi	r3,-129
 4007108:	d8802d15 	stw	r2,180(sp)
 400710c:	90e4703a 	and	r18,r18,r3
 4007110:	0039883a 	mov	fp,zero
 4007114:	983df326 	beq	r19,zero,40068e4 <__alt_data_end+0xfc0068e4>
 4007118:	00800244 	movi	r2,9
 400711c:	14fc7b36 	bltu	r2,r19,400630c <__alt_data_end+0xfc00630c>
 4007120:	d8c02817 	ldw	r3,160(sp)
 4007124:	dc001dc4 	addi	r16,sp,119
 4007128:	9cc00c04 	addi	r19,r19,48
 400712c:	1c07c83a 	sub	r3,r3,r16
 4007130:	dcc01dc5 	stb	r19,119(sp)
 4007134:	d8c02e15 	stw	r3,184(sp)
 4007138:	003ce806 	br	40064dc <__alt_data_end+0xfc0064dc>
 400713c:	d8803317 	ldw	r2,204(sp)
 4007140:	143fffc4 	addi	r16,r2,-1
 4007144:	043f4d0e 	bge	zero,r16,4006e7c <__alt_data_end+0xfc006e7c>
 4007148:	07000404 	movi	fp,16
 400714c:	e400810e 	bge	fp,r16,4007354 <___vfprintf_internal_r+0x1594>
 4007150:	01410074 	movhi	r5,1025
 4007154:	294bdd84 	addi	r5,r5,12150
 4007158:	d9402b15 	stw	r5,172(sp)
 400715c:	01c001c4 	movi	r7,7
 4007160:	dcc02c17 	ldw	r19,176(sp)
 4007164:	00000306 	br	4007174 <___vfprintf_internal_r+0x13b4>
 4007168:	b5800204 	addi	r22,r22,8
 400716c:	843ffc04 	addi	r16,r16,-16
 4007170:	e4007b0e 	bge	fp,r16,4007360 <___vfprintf_internal_r+0x15a0>
 4007174:	18c00404 	addi	r3,r3,16
 4007178:	8c400044 	addi	r17,r17,1
 400717c:	b5000015 	stw	r20,0(r22)
 4007180:	b7000115 	stw	fp,4(r22)
 4007184:	d8c02015 	stw	r3,128(sp)
 4007188:	dc401f15 	stw	r17,124(sp)
 400718c:	3c7ff60e 	bge	r7,r17,4007168 <__alt_data_end+0xfc007168>
 4007190:	d9801e04 	addi	r6,sp,120
 4007194:	b80b883a 	mov	r5,r23
 4007198:	9809883a 	mov	r4,r19
 400719c:	d9c03c15 	stw	r7,240(sp)
 40071a0:	400d50c0 	call	400d50c <__sprint_r>
 40071a4:	d9c03c17 	ldw	r7,240(sp)
 40071a8:	103c071e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 40071ac:	d8c02017 	ldw	r3,128(sp)
 40071b0:	dc401f17 	ldw	r17,124(sp)
 40071b4:	dd800404 	addi	r22,sp,16
 40071b8:	003fec06 	br	400716c <__alt_data_end+0xfc00716c>
 40071bc:	9080100c 	andi	r2,r18,64
 40071c0:	d8002785 	stb	zero,158(sp)
 40071c4:	10010e26 	beq	r2,zero,4007600 <___vfprintf_internal_r+0x1840>
 40071c8:	d9002d17 	ldw	r4,180(sp)
 40071cc:	d9402917 	ldw	r5,164(sp)
 40071d0:	002d883a 	mov	r22,zero
 40071d4:	20800104 	addi	r2,r4,4
 40071d8:	24c0000b 	ldhu	r19,0(r4)
 40071dc:	283fc90e 	bge	r5,zero,4007104 <__alt_data_end+0xfc007104>
 40071e0:	d8802d15 	stw	r2,180(sp)
 40071e4:	0039883a 	mov	fp,zero
 40071e8:	9d84b03a 	or	r2,r19,r22
 40071ec:	103c461e 	bne	r2,zero,4006308 <__alt_data_end+0xfc006308>
 40071f0:	00800044 	movi	r2,1
 40071f4:	003e6c06 	br	4006ba8 <__alt_data_end+0xfc006ba8>
 40071f8:	d9002c17 	ldw	r4,176(sp)
 40071fc:	d9801e04 	addi	r6,sp,120
 4007200:	b80b883a 	mov	r5,r23
 4007204:	400d50c0 	call	400d50c <__sprint_r>
 4007208:	103bef1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 400720c:	d8c02017 	ldw	r3,128(sp)
 4007210:	da000404 	addi	r8,sp,16
 4007214:	d9003217 	ldw	r4,200(sp)
 4007218:	d8802617 	ldw	r2,152(sp)
 400721c:	d9403317 	ldw	r5,204(sp)
 4007220:	8123883a 	add	r17,r16,r4
 4007224:	11400216 	blt	r2,r5,4007230 <___vfprintf_internal_r+0x1470>
 4007228:	9100004c 	andi	r4,r18,1
 400722c:	20000d26 	beq	r4,zero,4007264 <___vfprintf_internal_r+0x14a4>
 4007230:	d9003717 	ldw	r4,220(sp)
 4007234:	d9403417 	ldw	r5,208(sp)
 4007238:	1907883a 	add	r3,r3,r4
 400723c:	d9001f17 	ldw	r4,124(sp)
 4007240:	41400015 	stw	r5,0(r8)
 4007244:	d9403717 	ldw	r5,220(sp)
 4007248:	21000044 	addi	r4,r4,1
 400724c:	d8c02015 	stw	r3,128(sp)
 4007250:	41400115 	stw	r5,4(r8)
 4007254:	d9001f15 	stw	r4,124(sp)
 4007258:	014001c4 	movi	r5,7
 400725c:	2901e816 	blt	r5,r4,4007a00 <___vfprintf_internal_r+0x1c40>
 4007260:	42000204 	addi	r8,r8,8
 4007264:	d9003317 	ldw	r4,204(sp)
 4007268:	8121883a 	add	r16,r16,r4
 400726c:	2085c83a 	sub	r2,r4,r2
 4007270:	8461c83a 	sub	r16,r16,r17
 4007274:	1400010e 	bge	r2,r16,400727c <___vfprintf_internal_r+0x14bc>
 4007278:	1021883a 	mov	r16,r2
 400727c:	04000a0e 	bge	zero,r16,40072a8 <___vfprintf_internal_r+0x14e8>
 4007280:	d9001f17 	ldw	r4,124(sp)
 4007284:	1c07883a 	add	r3,r3,r16
 4007288:	44400015 	stw	r17,0(r8)
 400728c:	21000044 	addi	r4,r4,1
 4007290:	44000115 	stw	r16,4(r8)
 4007294:	d8c02015 	stw	r3,128(sp)
 4007298:	d9001f15 	stw	r4,124(sp)
 400729c:	014001c4 	movi	r5,7
 40072a0:	2901fb16 	blt	r5,r4,4007a90 <___vfprintf_internal_r+0x1cd0>
 40072a4:	42000204 	addi	r8,r8,8
 40072a8:	8001f716 	blt	r16,zero,4007a88 <___vfprintf_internal_r+0x1cc8>
 40072ac:	1421c83a 	sub	r16,r2,r16
 40072b0:	043d380e 	bge	zero,r16,4006794 <__alt_data_end+0xfc006794>
 40072b4:	04400404 	movi	r17,16
 40072b8:	d8801f17 	ldw	r2,124(sp)
 40072bc:	8c3efb0e 	bge	r17,r16,4006eac <__alt_data_end+0xfc006eac>
 40072c0:	01410074 	movhi	r5,1025
 40072c4:	294bdd84 	addi	r5,r5,12150
 40072c8:	d9402b15 	stw	r5,172(sp)
 40072cc:	058001c4 	movi	r22,7
 40072d0:	dcc02c17 	ldw	r19,176(sp)
 40072d4:	00000306 	br	40072e4 <___vfprintf_internal_r+0x1524>
 40072d8:	42000204 	addi	r8,r8,8
 40072dc:	843ffc04 	addi	r16,r16,-16
 40072e0:	8c3ef50e 	bge	r17,r16,4006eb8 <__alt_data_end+0xfc006eb8>
 40072e4:	18c00404 	addi	r3,r3,16
 40072e8:	10800044 	addi	r2,r2,1
 40072ec:	45000015 	stw	r20,0(r8)
 40072f0:	44400115 	stw	r17,4(r8)
 40072f4:	d8c02015 	stw	r3,128(sp)
 40072f8:	d8801f15 	stw	r2,124(sp)
 40072fc:	b0bff60e 	bge	r22,r2,40072d8 <__alt_data_end+0xfc0072d8>
 4007300:	d9801e04 	addi	r6,sp,120
 4007304:	b80b883a 	mov	r5,r23
 4007308:	9809883a 	mov	r4,r19
 400730c:	400d50c0 	call	400d50c <__sprint_r>
 4007310:	103bad1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007314:	d8c02017 	ldw	r3,128(sp)
 4007318:	d8801f17 	ldw	r2,124(sp)
 400731c:	da000404 	addi	r8,sp,16
 4007320:	003fee06 	br	40072dc <__alt_data_end+0xfc0072dc>
 4007324:	9088703a 	and	r4,r18,r2
 4007328:	203eab1e 	bne	r4,zero,4006dd8 <__alt_data_end+0xfc006dd8>
 400732c:	dc401f17 	ldw	r17,124(sp)
 4007330:	40800115 	stw	r2,4(r8)
 4007334:	44000015 	stw	r16,0(r8)
 4007338:	8c400044 	addi	r17,r17,1
 400733c:	d8c02015 	stw	r3,128(sp)
 4007340:	dc401f15 	stw	r17,124(sp)
 4007344:	008001c4 	movi	r2,7
 4007348:	14400e16 	blt	r2,r17,4007384 <___vfprintf_internal_r+0x15c4>
 400734c:	45800204 	addi	r22,r8,8
 4007350:	003eca06 	br	4006e7c <__alt_data_end+0xfc006e7c>
 4007354:	01010074 	movhi	r4,1025
 4007358:	210bdd84 	addi	r4,r4,12150
 400735c:	d9002b15 	stw	r4,172(sp)
 4007360:	d8802b17 	ldw	r2,172(sp)
 4007364:	1c07883a 	add	r3,r3,r16
 4007368:	8c400044 	addi	r17,r17,1
 400736c:	b0800015 	stw	r2,0(r22)
 4007370:	b4000115 	stw	r16,4(r22)
 4007374:	d8c02015 	stw	r3,128(sp)
 4007378:	dc401f15 	stw	r17,124(sp)
 400737c:	008001c4 	movi	r2,7
 4007380:	147ebd0e 	bge	r2,r17,4006e78 <__alt_data_end+0xfc006e78>
 4007384:	d9002c17 	ldw	r4,176(sp)
 4007388:	d9801e04 	addi	r6,sp,120
 400738c:	b80b883a 	mov	r5,r23
 4007390:	400d50c0 	call	400d50c <__sprint_r>
 4007394:	103b8c1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007398:	d8c02017 	ldw	r3,128(sp)
 400739c:	dc401f17 	ldw	r17,124(sp)
 40073a0:	dd800404 	addi	r22,sp,16
 40073a4:	003eb506 	br	4006e7c <__alt_data_end+0xfc006e7c>
 40073a8:	d9002c17 	ldw	r4,176(sp)
 40073ac:	d9801e04 	addi	r6,sp,120
 40073b0:	b80b883a 	mov	r5,r23
 40073b4:	400d50c0 	call	400d50c <__sprint_r>
 40073b8:	103b831e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 40073bc:	d8c02017 	ldw	r3,128(sp)
 40073c0:	dc401f17 	ldw	r17,124(sp)
 40073c4:	da000404 	addi	r8,sp,16
 40073c8:	003e8d06 	br	4006e00 <__alt_data_end+0xfc006e00>
 40073cc:	d9002c17 	ldw	r4,176(sp)
 40073d0:	d9801e04 	addi	r6,sp,120
 40073d4:	b80b883a 	mov	r5,r23
 40073d8:	400d50c0 	call	400d50c <__sprint_r>
 40073dc:	103b7a1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 40073e0:	d8c02017 	ldw	r3,128(sp)
 40073e4:	dc401f17 	ldw	r17,124(sp)
 40073e8:	dd800404 	addi	r22,sp,16
 40073ec:	003e8f06 	br	4006e2c <__alt_data_end+0xfc006e2c>
 40073f0:	0027883a 	mov	r19,zero
 40073f4:	003f4a06 	br	4007120 <__alt_data_end+0xfc007120>
 40073f8:	d9002c17 	ldw	r4,176(sp)
 40073fc:	d9801e04 	addi	r6,sp,120
 4007400:	b80b883a 	mov	r5,r23
 4007404:	400d50c0 	call	400d50c <__sprint_r>
 4007408:	103b6f1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 400740c:	d8c02017 	ldw	r3,128(sp)
 4007410:	da000404 	addi	r8,sp,16
 4007414:	003c9d06 	br	400668c <__alt_data_end+0xfc00668c>
 4007418:	04e7c83a 	sub	r19,zero,r19
 400741c:	9804c03a 	cmpne	r2,r19,zero
 4007420:	05adc83a 	sub	r22,zero,r22
 4007424:	b0adc83a 	sub	r22,r22,r2
 4007428:	d8802917 	ldw	r2,164(sp)
 400742c:	07000b44 	movi	fp,45
 4007430:	df002785 	stb	fp,158(sp)
 4007434:	10017b16 	blt	r2,zero,4007a24 <___vfprintf_internal_r+0x1c64>
 4007438:	00bfdfc4 	movi	r2,-129
 400743c:	90a4703a 	and	r18,r18,r2
 4007440:	003bb106 	br	4006308 <__alt_data_end+0xfc006308>
 4007444:	d9003617 	ldw	r4,216(sp)
 4007448:	d9403817 	ldw	r5,224(sp)
 400744c:	da003d15 	stw	r8,244(sp)
 4007450:	4002ef40 	call	4002ef4 <__fpclassifyd>
 4007454:	da003d17 	ldw	r8,244(sp)
 4007458:	1000f026 	beq	r2,zero,400781c <___vfprintf_internal_r+0x1a5c>
 400745c:	d9002917 	ldw	r4,164(sp)
 4007460:	05bff7c4 	movi	r22,-33
 4007464:	00bfffc4 	movi	r2,-1
 4007468:	8dac703a 	and	r22,r17,r22
 400746c:	20820026 	beq	r4,r2,4007c70 <___vfprintf_internal_r+0x1eb0>
 4007470:	008011c4 	movi	r2,71
 4007474:	b081f726 	beq	r22,r2,4007c54 <___vfprintf_internal_r+0x1e94>
 4007478:	d9003817 	ldw	r4,224(sp)
 400747c:	90c04014 	ori	r3,r18,256
 4007480:	d8c02b15 	stw	r3,172(sp)
 4007484:	20021516 	blt	r4,zero,4007cdc <___vfprintf_internal_r+0x1f1c>
 4007488:	dcc03817 	ldw	r19,224(sp)
 400748c:	d8002a05 	stb	zero,168(sp)
 4007490:	00801984 	movi	r2,102
 4007494:	8881f926 	beq	r17,r2,4007c7c <___vfprintf_internal_r+0x1ebc>
 4007498:	00801184 	movi	r2,70
 400749c:	88821c26 	beq	r17,r2,4007d10 <___vfprintf_internal_r+0x1f50>
 40074a0:	00801144 	movi	r2,69
 40074a4:	b081ef26 	beq	r22,r2,4007c64 <___vfprintf_internal_r+0x1ea4>
 40074a8:	d8c02917 	ldw	r3,164(sp)
 40074ac:	d8802104 	addi	r2,sp,132
 40074b0:	d8800315 	stw	r2,12(sp)
 40074b4:	d9403617 	ldw	r5,216(sp)
 40074b8:	d8802504 	addi	r2,sp,148
 40074bc:	d9002c17 	ldw	r4,176(sp)
 40074c0:	d8800215 	stw	r2,8(sp)
 40074c4:	d8802604 	addi	r2,sp,152
 40074c8:	d8c00015 	stw	r3,0(sp)
 40074cc:	d8800115 	stw	r2,4(sp)
 40074d0:	01c00084 	movi	r7,2
 40074d4:	980d883a 	mov	r6,r19
 40074d8:	d8c03c15 	stw	r3,240(sp)
 40074dc:	da003d15 	stw	r8,244(sp)
 40074e0:	40083e40 	call	40083e4 <_dtoa_r>
 40074e4:	1021883a 	mov	r16,r2
 40074e8:	008019c4 	movi	r2,103
 40074ec:	d8c03c17 	ldw	r3,240(sp)
 40074f0:	da003d17 	ldw	r8,244(sp)
 40074f4:	88817126 	beq	r17,r2,4007abc <___vfprintf_internal_r+0x1cfc>
 40074f8:	008011c4 	movi	r2,71
 40074fc:	88829226 	beq	r17,r2,4007f48 <___vfprintf_internal_r+0x2188>
 4007500:	80f9883a 	add	fp,r16,r3
 4007504:	d9003617 	ldw	r4,216(sp)
 4007508:	000d883a 	mov	r6,zero
 400750c:	000f883a 	mov	r7,zero
 4007510:	980b883a 	mov	r5,r19
 4007514:	da003d15 	stw	r8,244(sp)
 4007518:	40041f40 	call	40041f4 <__eqdf2>
 400751c:	da003d17 	ldw	r8,244(sp)
 4007520:	10018d26 	beq	r2,zero,4007b58 <___vfprintf_internal_r+0x1d98>
 4007524:	d8802117 	ldw	r2,132(sp)
 4007528:	1700062e 	bgeu	r2,fp,4007544 <___vfprintf_internal_r+0x1784>
 400752c:	01000c04 	movi	r4,48
 4007530:	10c00044 	addi	r3,r2,1
 4007534:	d8c02115 	stw	r3,132(sp)
 4007538:	11000005 	stb	r4,0(r2)
 400753c:	d8802117 	ldw	r2,132(sp)
 4007540:	173ffb36 	bltu	r2,fp,4007530 <__alt_data_end+0xfc007530>
 4007544:	1405c83a 	sub	r2,r2,r16
 4007548:	d8803315 	stw	r2,204(sp)
 400754c:	008011c4 	movi	r2,71
 4007550:	b0817626 	beq	r22,r2,4007b2c <___vfprintf_internal_r+0x1d6c>
 4007554:	00801944 	movi	r2,101
 4007558:	1442810e 	bge	r2,r17,4007f60 <___vfprintf_internal_r+0x21a0>
 400755c:	d8c02617 	ldw	r3,152(sp)
 4007560:	00801984 	movi	r2,102
 4007564:	d8c03215 	stw	r3,200(sp)
 4007568:	8881fe26 	beq	r17,r2,4007d64 <___vfprintf_internal_r+0x1fa4>
 400756c:	d8c03217 	ldw	r3,200(sp)
 4007570:	d9003317 	ldw	r4,204(sp)
 4007574:	1901dd16 	blt	r3,r4,4007cec <___vfprintf_internal_r+0x1f2c>
 4007578:	9480004c 	andi	r18,r18,1
 400757c:	90022b1e 	bne	r18,zero,4007e2c <___vfprintf_internal_r+0x206c>
 4007580:	1805883a 	mov	r2,r3
 4007584:	18028016 	blt	r3,zero,4007f88 <___vfprintf_internal_r+0x21c8>
 4007588:	d8c03217 	ldw	r3,200(sp)
 400758c:	044019c4 	movi	r17,103
 4007590:	d8c02e15 	stw	r3,184(sp)
 4007594:	df002a07 	ldb	fp,168(sp)
 4007598:	e001531e 	bne	fp,zero,4007ae8 <___vfprintf_internal_r+0x1d28>
 400759c:	df002783 	ldbu	fp,158(sp)
 40075a0:	d8802a15 	stw	r2,168(sp)
 40075a4:	dc802b17 	ldw	r18,172(sp)
 40075a8:	d8002915 	stw	zero,164(sp)
 40075ac:	003bd106 	br	40064f4 <__alt_data_end+0xfc0064f4>
 40075b0:	d8802d17 	ldw	r2,180(sp)
 40075b4:	d8c02d17 	ldw	r3,180(sp)
 40075b8:	d9002d17 	ldw	r4,180(sp)
 40075bc:	10800017 	ldw	r2,0(r2)
 40075c0:	18c00117 	ldw	r3,4(r3)
 40075c4:	21000204 	addi	r4,r4,8
 40075c8:	d8803615 	stw	r2,216(sp)
 40075cc:	d8c03815 	stw	r3,224(sp)
 40075d0:	d9002d15 	stw	r4,180(sp)
 40075d4:	003b7506 	br	40063ac <__alt_data_end+0xfc0063ac>
 40075d8:	ac400007 	ldb	r17,0(r21)
 40075dc:	003a5906 	br	4005f44 <__alt_data_end+0xfc005f44>
 40075e0:	9080100c 	andi	r2,r18,64
 40075e4:	1000a826 	beq	r2,zero,4007888 <___vfprintf_internal_r+0x1ac8>
 40075e8:	d9002d17 	ldw	r4,180(sp)
 40075ec:	002d883a 	mov	r22,zero
 40075f0:	24c0000b 	ldhu	r19,0(r4)
 40075f4:	21000104 	addi	r4,r4,4
 40075f8:	d9002d15 	stw	r4,180(sp)
 40075fc:	003ccb06 	br	400692c <__alt_data_end+0xfc00692c>
 4007600:	d8c02d17 	ldw	r3,180(sp)
 4007604:	d9002917 	ldw	r4,164(sp)
 4007608:	002d883a 	mov	r22,zero
 400760c:	18800104 	addi	r2,r3,4
 4007610:	1cc00017 	ldw	r19,0(r3)
 4007614:	203ebb0e 	bge	r4,zero,4007104 <__alt_data_end+0xfc007104>
 4007618:	003ef106 	br	40071e0 <__alt_data_end+0xfc0071e0>
 400761c:	9080040c 	andi	r2,r18,16
 4007620:	1000921e 	bne	r2,zero,400786c <___vfprintf_internal_r+0x1aac>
 4007624:	9480100c 	andi	r18,r18,64
 4007628:	90013926 	beq	r18,zero,4007b10 <___vfprintf_internal_r+0x1d50>
 400762c:	d9002d17 	ldw	r4,180(sp)
 4007630:	d9402f17 	ldw	r5,188(sp)
 4007634:	20800017 	ldw	r2,0(r4)
 4007638:	21000104 	addi	r4,r4,4
 400763c:	d9002d15 	stw	r4,180(sp)
 4007640:	1140000d 	sth	r5,0(r2)
 4007644:	003a1606 	br	4005ea0 <__alt_data_end+0xfc005ea0>
 4007648:	9080100c 	andi	r2,r18,64
 400764c:	10008026 	beq	r2,zero,4007850 <___vfprintf_internal_r+0x1a90>
 4007650:	d8c02d17 	ldw	r3,180(sp)
 4007654:	1cc0000f 	ldh	r19,0(r3)
 4007658:	18c00104 	addi	r3,r3,4
 400765c:	d8c02d15 	stw	r3,180(sp)
 4007660:	982dd7fa 	srai	r22,r19,31
 4007664:	b005883a 	mov	r2,r22
 4007668:	003b1f06 	br	40062e8 <__alt_data_end+0xfc0062e8>
 400766c:	9080100c 	andi	r2,r18,64
 4007670:	d8002785 	stb	zero,158(sp)
 4007674:	10008a1e 	bne	r2,zero,40078a0 <___vfprintf_internal_r+0x1ae0>
 4007678:	d9402d17 	ldw	r5,180(sp)
 400767c:	d8c02917 	ldw	r3,164(sp)
 4007680:	002d883a 	mov	r22,zero
 4007684:	28800104 	addi	r2,r5,4
 4007688:	2cc00017 	ldw	r19,0(r5)
 400768c:	183e4b0e 	bge	r3,zero,4006fbc <__alt_data_end+0xfc006fbc>
 4007690:	9d86b03a 	or	r3,r19,r22
 4007694:	d8802d15 	stw	r2,180(sp)
 4007698:	183e4c1e 	bne	r3,zero,4006fcc <__alt_data_end+0xfc006fcc>
 400769c:	0039883a 	mov	fp,zero
 40076a0:	0005883a 	mov	r2,zero
 40076a4:	003d4006 	br	4006ba8 <__alt_data_end+0xfc006ba8>
 40076a8:	01410074 	movhi	r5,1025
 40076ac:	294bdd84 	addi	r5,r5,12150
 40076b0:	d9402b15 	stw	r5,172(sp)
 40076b4:	d9402b17 	ldw	r5,172(sp)
 40076b8:	1c47883a 	add	r3,r3,r17
 40076bc:	10800044 	addi	r2,r2,1
 40076c0:	41400015 	stw	r5,0(r8)
 40076c4:	44400115 	stw	r17,4(r8)
 40076c8:	d8c02015 	stw	r3,128(sp)
 40076cc:	d8801f15 	stw	r2,124(sp)
 40076d0:	010001c4 	movi	r4,7
 40076d4:	20bec816 	blt	r4,r2,40071f8 <__alt_data_end+0xfc0071f8>
 40076d8:	42000204 	addi	r8,r8,8
 40076dc:	003ecd06 	br	4007214 <__alt_data_end+0xfc007214>
 40076e0:	d9002917 	ldw	r4,164(sp)
 40076e4:	d8002785 	stb	zero,158(sp)
 40076e8:	203d2d16 	blt	r4,zero,4006ba0 <__alt_data_end+0xfc006ba0>
 40076ec:	00bfdfc4 	movi	r2,-129
 40076f0:	90a4703a 	and	r18,r18,r2
 40076f4:	003a9106 	br	400613c <__alt_data_end+0xfc00613c>
 40076f8:	01010074 	movhi	r4,1025
 40076fc:	210bdd84 	addi	r4,r4,12150
 4007700:	d9002b15 	stw	r4,172(sp)
 4007704:	003c0c06 	br	4006738 <__alt_data_end+0xfc006738>
 4007708:	d9002c17 	ldw	r4,176(sp)
 400770c:	d9801e04 	addi	r6,sp,120
 4007710:	b80b883a 	mov	r5,r23
 4007714:	400d50c0 	call	400d50c <__sprint_r>
 4007718:	103aab1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 400771c:	d8c02017 	ldw	r3,128(sp)
 4007720:	da000404 	addi	r8,sp,16
 4007724:	003d4106 	br	4006c2c <__alt_data_end+0xfc006c2c>
 4007728:	d8801f17 	ldw	r2,124(sp)
 400772c:	01410074 	movhi	r5,1025
 4007730:	01000044 	movi	r4,1
 4007734:	18c00044 	addi	r3,r3,1
 4007738:	10800044 	addi	r2,r2,1
 400773c:	294bdd04 	addi	r5,r5,12148
 4007740:	41000115 	stw	r4,4(r8)
 4007744:	41400015 	stw	r5,0(r8)
 4007748:	d8c02015 	stw	r3,128(sp)
 400774c:	d8801f15 	stw	r2,124(sp)
 4007750:	010001c4 	movi	r4,7
 4007754:	20805c16 	blt	r4,r2,40078c8 <___vfprintf_internal_r+0x1b08>
 4007758:	42000204 	addi	r8,r8,8
 400775c:	8800041e 	bne	r17,zero,4007770 <___vfprintf_internal_r+0x19b0>
 4007760:	d8803317 	ldw	r2,204(sp)
 4007764:	1000021e 	bne	r2,zero,4007770 <___vfprintf_internal_r+0x19b0>
 4007768:	9080004c 	andi	r2,r18,1
 400776c:	103c0926 	beq	r2,zero,4006794 <__alt_data_end+0xfc006794>
 4007770:	d9003717 	ldw	r4,220(sp)
 4007774:	d8801f17 	ldw	r2,124(sp)
 4007778:	d9403417 	ldw	r5,208(sp)
 400777c:	20c7883a 	add	r3,r4,r3
 4007780:	10800044 	addi	r2,r2,1
 4007784:	41000115 	stw	r4,4(r8)
 4007788:	41400015 	stw	r5,0(r8)
 400778c:	d8c02015 	stw	r3,128(sp)
 4007790:	d8801f15 	stw	r2,124(sp)
 4007794:	010001c4 	movi	r4,7
 4007798:	20812116 	blt	r4,r2,4007c20 <___vfprintf_internal_r+0x1e60>
 400779c:	42000204 	addi	r8,r8,8
 40077a0:	0463c83a 	sub	r17,zero,r17
 40077a4:	0440730e 	bge	zero,r17,4007974 <___vfprintf_internal_r+0x1bb4>
 40077a8:	05800404 	movi	r22,16
 40077ac:	b440860e 	bge	r22,r17,40079c8 <___vfprintf_internal_r+0x1c08>
 40077b0:	01410074 	movhi	r5,1025
 40077b4:	294bdd84 	addi	r5,r5,12150
 40077b8:	d9402b15 	stw	r5,172(sp)
 40077bc:	070001c4 	movi	fp,7
 40077c0:	dcc02c17 	ldw	r19,176(sp)
 40077c4:	00000306 	br	40077d4 <___vfprintf_internal_r+0x1a14>
 40077c8:	42000204 	addi	r8,r8,8
 40077cc:	8c7ffc04 	addi	r17,r17,-16
 40077d0:	b440800e 	bge	r22,r17,40079d4 <___vfprintf_internal_r+0x1c14>
 40077d4:	18c00404 	addi	r3,r3,16
 40077d8:	10800044 	addi	r2,r2,1
 40077dc:	45000015 	stw	r20,0(r8)
 40077e0:	45800115 	stw	r22,4(r8)
 40077e4:	d8c02015 	stw	r3,128(sp)
 40077e8:	d8801f15 	stw	r2,124(sp)
 40077ec:	e0bff60e 	bge	fp,r2,40077c8 <__alt_data_end+0xfc0077c8>
 40077f0:	d9801e04 	addi	r6,sp,120
 40077f4:	b80b883a 	mov	r5,r23
 40077f8:	9809883a 	mov	r4,r19
 40077fc:	400d50c0 	call	400d50c <__sprint_r>
 4007800:	103a711e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007804:	d8c02017 	ldw	r3,128(sp)
 4007808:	d8801f17 	ldw	r2,124(sp)
 400780c:	da000404 	addi	r8,sp,16
 4007810:	003fee06 	br	40077cc <__alt_data_end+0xfc0077cc>
 4007814:	00bfffc4 	movi	r2,-1
 4007818:	003a6f06 	br	40061d8 <__alt_data_end+0xfc0061d8>
 400781c:	008011c4 	movi	r2,71
 4007820:	1440b816 	blt	r2,r17,4007b04 <___vfprintf_internal_r+0x1d44>
 4007824:	04010074 	movhi	r16,1025
 4007828:	840bcf04 	addi	r16,r16,12092
 400782c:	00c000c4 	movi	r3,3
 4007830:	00bfdfc4 	movi	r2,-129
 4007834:	d8c02a15 	stw	r3,168(sp)
 4007838:	90a4703a 	and	r18,r18,r2
 400783c:	df002783 	ldbu	fp,158(sp)
 4007840:	d8c02e15 	stw	r3,184(sp)
 4007844:	d8002915 	stw	zero,164(sp)
 4007848:	d8003215 	stw	zero,200(sp)
 400784c:	003b2906 	br	40064f4 <__alt_data_end+0xfc0064f4>
 4007850:	d9002d17 	ldw	r4,180(sp)
 4007854:	24c00017 	ldw	r19,0(r4)
 4007858:	21000104 	addi	r4,r4,4
 400785c:	d9002d15 	stw	r4,180(sp)
 4007860:	982dd7fa 	srai	r22,r19,31
 4007864:	b005883a 	mov	r2,r22
 4007868:	003a9f06 	br	40062e8 <__alt_data_end+0xfc0062e8>
 400786c:	d9402d17 	ldw	r5,180(sp)
 4007870:	d8c02f17 	ldw	r3,188(sp)
 4007874:	28800017 	ldw	r2,0(r5)
 4007878:	29400104 	addi	r5,r5,4
 400787c:	d9402d15 	stw	r5,180(sp)
 4007880:	10c00015 	stw	r3,0(r2)
 4007884:	00398606 	br	4005ea0 <__alt_data_end+0xfc005ea0>
 4007888:	d9402d17 	ldw	r5,180(sp)
 400788c:	002d883a 	mov	r22,zero
 4007890:	2cc00017 	ldw	r19,0(r5)
 4007894:	29400104 	addi	r5,r5,4
 4007898:	d9402d15 	stw	r5,180(sp)
 400789c:	003c2306 	br	400692c <__alt_data_end+0xfc00692c>
 40078a0:	d8c02d17 	ldw	r3,180(sp)
 40078a4:	d9002917 	ldw	r4,164(sp)
 40078a8:	002d883a 	mov	r22,zero
 40078ac:	18800104 	addi	r2,r3,4
 40078b0:	1cc0000b 	ldhu	r19,0(r3)
 40078b4:	203dc10e 	bge	r4,zero,4006fbc <__alt_data_end+0xfc006fbc>
 40078b8:	003f7506 	br	4007690 <__alt_data_end+0xfc007690>
 40078bc:	04010074 	movhi	r16,1025
 40078c0:	840bcd04 	addi	r16,r16,12084
 40078c4:	003acc06 	br	40063f8 <__alt_data_end+0xfc0063f8>
 40078c8:	d9002c17 	ldw	r4,176(sp)
 40078cc:	d9801e04 	addi	r6,sp,120
 40078d0:	b80b883a 	mov	r5,r23
 40078d4:	400d50c0 	call	400d50c <__sprint_r>
 40078d8:	103a3b1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 40078dc:	dc402617 	ldw	r17,152(sp)
 40078e0:	d8c02017 	ldw	r3,128(sp)
 40078e4:	da000404 	addi	r8,sp,16
 40078e8:	003f9c06 	br	400775c <__alt_data_end+0xfc00775c>
 40078ec:	ac400043 	ldbu	r17,1(r21)
 40078f0:	94800814 	ori	r18,r18,32
 40078f4:	ad400044 	addi	r21,r21,1
 40078f8:	8c403fcc 	andi	r17,r17,255
 40078fc:	8c40201c 	xori	r17,r17,128
 4007900:	8c7fe004 	addi	r17,r17,-128
 4007904:	00398f06 	br	4005f44 <__alt_data_end+0xfc005f44>
 4007908:	d8c02d15 	stw	r3,180(sp)
 400790c:	0039883a 	mov	fp,zero
 4007910:	003e3506 	br	40071e8 <__alt_data_end+0xfc0071e8>
 4007914:	d9002c17 	ldw	r4,176(sp)
 4007918:	d9801e04 	addi	r6,sp,120
 400791c:	b80b883a 	mov	r5,r23
 4007920:	400d50c0 	call	400d50c <__sprint_r>
 4007924:	103a281e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007928:	d8c02017 	ldw	r3,128(sp)
 400792c:	da000404 	addi	r8,sp,16
 4007930:	003cd006 	br	4006c74 <__alt_data_end+0xfc006c74>
 4007934:	8009883a 	mov	r4,r16
 4007938:	da003d15 	stw	r8,244(sp)
 400793c:	4005c780 	call	4005c78 <strlen>
 4007940:	d8802e15 	stw	r2,184(sp)
 4007944:	da003d17 	ldw	r8,244(sp)
 4007948:	103c340e 	bge	r2,zero,4006a1c <__alt_data_end+0xfc006a1c>
 400794c:	0005883a 	mov	r2,zero
 4007950:	003c3206 	br	4006a1c <__alt_data_end+0xfc006a1c>
 4007954:	d9002c17 	ldw	r4,176(sp)
 4007958:	d9801e04 	addi	r6,sp,120
 400795c:	b80b883a 	mov	r5,r23
 4007960:	400d50c0 	call	400d50c <__sprint_r>
 4007964:	103a181e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007968:	d8c02017 	ldw	r3,128(sp)
 400796c:	d8801f17 	ldw	r2,124(sp)
 4007970:	da000404 	addi	r8,sp,16
 4007974:	d9403317 	ldw	r5,204(sp)
 4007978:	10800044 	addi	r2,r2,1
 400797c:	44000015 	stw	r16,0(r8)
 4007980:	28c7883a 	add	r3,r5,r3
 4007984:	003b7d06 	br	400677c <__alt_data_end+0xfc00677c>
 4007988:	01010074 	movhi	r4,1025
 400798c:	210be184 	addi	r4,r4,12166
 4007990:	d9003515 	stw	r4,212(sp)
 4007994:	003b1406 	br	40065e8 <__alt_data_end+0xfc0065e8>
 4007998:	013fffc4 	movi	r4,-1
 400799c:	003a3506 	br	4006274 <__alt_data_end+0xfc006274>
 40079a0:	0023883a 	mov	r17,zero
 40079a4:	003d9d06 	br	400701c <__alt_data_end+0xfc00701c>
 40079a8:	d9002c17 	ldw	r4,176(sp)
 40079ac:	d9801e04 	addi	r6,sp,120
 40079b0:	b80b883a 	mov	r5,r23
 40079b4:	400d50c0 	call	400d50c <__sprint_r>
 40079b8:	103a031e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 40079bc:	d8c02017 	ldw	r3,128(sp)
 40079c0:	da000404 	addi	r8,sp,16
 40079c4:	003d9406 	br	4007018 <__alt_data_end+0xfc007018>
 40079c8:	01010074 	movhi	r4,1025
 40079cc:	210bdd84 	addi	r4,r4,12150
 40079d0:	d9002b15 	stw	r4,172(sp)
 40079d4:	d9002b17 	ldw	r4,172(sp)
 40079d8:	1c47883a 	add	r3,r3,r17
 40079dc:	10800044 	addi	r2,r2,1
 40079e0:	41000015 	stw	r4,0(r8)
 40079e4:	44400115 	stw	r17,4(r8)
 40079e8:	d8c02015 	stw	r3,128(sp)
 40079ec:	d8801f15 	stw	r2,124(sp)
 40079f0:	010001c4 	movi	r4,7
 40079f4:	20bfd716 	blt	r4,r2,4007954 <__alt_data_end+0xfc007954>
 40079f8:	42000204 	addi	r8,r8,8
 40079fc:	003fdd06 	br	4007974 <__alt_data_end+0xfc007974>
 4007a00:	d9002c17 	ldw	r4,176(sp)
 4007a04:	d9801e04 	addi	r6,sp,120
 4007a08:	b80b883a 	mov	r5,r23
 4007a0c:	400d50c0 	call	400d50c <__sprint_r>
 4007a10:	1039ed1e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007a14:	d8802617 	ldw	r2,152(sp)
 4007a18:	d8c02017 	ldw	r3,128(sp)
 4007a1c:	da000404 	addi	r8,sp,16
 4007a20:	003e1006 	br	4007264 <__alt_data_end+0xfc007264>
 4007a24:	00800044 	movi	r2,1
 4007a28:	10803fcc 	andi	r2,r2,255
 4007a2c:	00c00044 	movi	r3,1
 4007a30:	10fa3526 	beq	r2,r3,4006308 <__alt_data_end+0xfc006308>
 4007a34:	00c00084 	movi	r3,2
 4007a38:	10fbcb26 	beq	r2,r3,4006968 <__alt_data_end+0xfc006968>
 4007a3c:	003a8f06 	br	400647c <__alt_data_end+0xfc00647c>
 4007a40:	01010074 	movhi	r4,1025
 4007a44:	210be184 	addi	r4,r4,12166
 4007a48:	d9003515 	stw	r4,212(sp)
 4007a4c:	003b7606 	br	4006828 <__alt_data_end+0xfc006828>
 4007a50:	d8802917 	ldw	r2,164(sp)
 4007a54:	00c00184 	movi	r3,6
 4007a58:	1880012e 	bgeu	r3,r2,4007a60 <___vfprintf_internal_r+0x1ca0>
 4007a5c:	1805883a 	mov	r2,r3
 4007a60:	d8802e15 	stw	r2,184(sp)
 4007a64:	1000ef16 	blt	r2,zero,4007e24 <___vfprintf_internal_r+0x2064>
 4007a68:	04010074 	movhi	r16,1025
 4007a6c:	d8802a15 	stw	r2,168(sp)
 4007a70:	dcc02d15 	stw	r19,180(sp)
 4007a74:	d8002915 	stw	zero,164(sp)
 4007a78:	d8003215 	stw	zero,200(sp)
 4007a7c:	840bdb04 	addi	r16,r16,12140
 4007a80:	0039883a 	mov	fp,zero
 4007a84:	003aa206 	br	4006510 <__alt_data_end+0xfc006510>
 4007a88:	0021883a 	mov	r16,zero
 4007a8c:	003e0706 	br	40072ac <__alt_data_end+0xfc0072ac>
 4007a90:	d9002c17 	ldw	r4,176(sp)
 4007a94:	d9801e04 	addi	r6,sp,120
 4007a98:	b80b883a 	mov	r5,r23
 4007a9c:	400d50c0 	call	400d50c <__sprint_r>
 4007aa0:	1039c91e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007aa4:	d8802617 	ldw	r2,152(sp)
 4007aa8:	d9403317 	ldw	r5,204(sp)
 4007aac:	d8c02017 	ldw	r3,128(sp)
 4007ab0:	da000404 	addi	r8,sp,16
 4007ab4:	2885c83a 	sub	r2,r5,r2
 4007ab8:	003dfb06 	br	40072a8 <__alt_data_end+0xfc0072a8>
 4007abc:	9080004c 	andi	r2,r18,1
 4007ac0:	103e8f1e 	bne	r2,zero,4007500 <__alt_data_end+0xfc007500>
 4007ac4:	d8802117 	ldw	r2,132(sp)
 4007ac8:	003e9e06 	br	4007544 <__alt_data_end+0xfc007544>
 4007acc:	1025883a 	mov	r18,r2
 4007ad0:	0039883a 	mov	fp,zero
 4007ad4:	00800084 	movi	r2,2
 4007ad8:	003fd306 	br	4007a28 <__alt_data_end+0xfc007a28>
 4007adc:	07000b44 	movi	fp,45
 4007ae0:	df002785 	stb	fp,158(sp)
 4007ae4:	003a4006 	br	40063e8 <__alt_data_end+0xfc0063e8>
 4007ae8:	00c00b44 	movi	r3,45
 4007aec:	d8c02785 	stb	r3,158(sp)
 4007af0:	d8802a15 	stw	r2,168(sp)
 4007af4:	dc802b17 	ldw	r18,172(sp)
 4007af8:	d8002915 	stw	zero,164(sp)
 4007afc:	07000b44 	movi	fp,45
 4007b00:	003a8006 	br	4006504 <__alt_data_end+0xfc006504>
 4007b04:	04010074 	movhi	r16,1025
 4007b08:	840bd004 	addi	r16,r16,12096
 4007b0c:	003f4706 	br	400782c <__alt_data_end+0xfc00782c>
 4007b10:	d8c02d17 	ldw	r3,180(sp)
 4007b14:	d9002f17 	ldw	r4,188(sp)
 4007b18:	18800017 	ldw	r2,0(r3)
 4007b1c:	18c00104 	addi	r3,r3,4
 4007b20:	d8c02d15 	stw	r3,180(sp)
 4007b24:	11000015 	stw	r4,0(r2)
 4007b28:	0038dd06 	br	4005ea0 <__alt_data_end+0xfc005ea0>
 4007b2c:	dd802617 	ldw	r22,152(sp)
 4007b30:	00bfff44 	movi	r2,-3
 4007b34:	b0801c16 	blt	r22,r2,4007ba8 <___vfprintf_internal_r+0x1de8>
 4007b38:	d9402917 	ldw	r5,164(sp)
 4007b3c:	2d801a16 	blt	r5,r22,4007ba8 <___vfprintf_internal_r+0x1de8>
 4007b40:	dd803215 	stw	r22,200(sp)
 4007b44:	003e8906 	br	400756c <__alt_data_end+0xfc00756c>
 4007b48:	01010074 	movhi	r4,1025
 4007b4c:	210bdd84 	addi	r4,r4,12150
 4007b50:	d9002b15 	stw	r4,172(sp)
 4007b54:	003c9106 	br	4006d9c <__alt_data_end+0xfc006d9c>
 4007b58:	e005883a 	mov	r2,fp
 4007b5c:	003e7906 	br	4007544 <__alt_data_end+0xfc007544>
 4007b60:	d9402917 	ldw	r5,164(sp)
 4007b64:	df002783 	ldbu	fp,158(sp)
 4007b68:	dcc02d15 	stw	r19,180(sp)
 4007b6c:	d9402a15 	stw	r5,168(sp)
 4007b70:	d9402e15 	stw	r5,184(sp)
 4007b74:	d8002915 	stw	zero,164(sp)
 4007b78:	d8003215 	stw	zero,200(sp)
 4007b7c:	003a5d06 	br	40064f4 <__alt_data_end+0xfc0064f4>
 4007b80:	9080004c 	andi	r2,r18,1
 4007b84:	0039883a 	mov	fp,zero
 4007b88:	10000426 	beq	r2,zero,4007b9c <___vfprintf_internal_r+0x1ddc>
 4007b8c:	00800c04 	movi	r2,48
 4007b90:	dc001dc4 	addi	r16,sp,119
 4007b94:	d8801dc5 	stb	r2,119(sp)
 4007b98:	003b8006 	br	400699c <__alt_data_end+0xfc00699c>
 4007b9c:	d8002e15 	stw	zero,184(sp)
 4007ba0:	dc001e04 	addi	r16,sp,120
 4007ba4:	003a4d06 	br	40064dc <__alt_data_end+0xfc0064dc>
 4007ba8:	8c7fff84 	addi	r17,r17,-2
 4007bac:	b5bfffc4 	addi	r22,r22,-1
 4007bb0:	dd802615 	stw	r22,152(sp)
 4007bb4:	dc4022c5 	stb	r17,139(sp)
 4007bb8:	b000bf16 	blt	r22,zero,4007eb8 <___vfprintf_internal_r+0x20f8>
 4007bbc:	00800ac4 	movi	r2,43
 4007bc0:	d8802305 	stb	r2,140(sp)
 4007bc4:	00800244 	movi	r2,9
 4007bc8:	15807016 	blt	r2,r22,4007d8c <___vfprintf_internal_r+0x1fcc>
 4007bcc:	00800c04 	movi	r2,48
 4007bd0:	b5800c04 	addi	r22,r22,48
 4007bd4:	d8802345 	stb	r2,141(sp)
 4007bd8:	dd802385 	stb	r22,142(sp)
 4007bdc:	d88023c4 	addi	r2,sp,143
 4007be0:	df0022c4 	addi	fp,sp,139
 4007be4:	d8c03317 	ldw	r3,204(sp)
 4007be8:	1739c83a 	sub	fp,r2,fp
 4007bec:	d9003317 	ldw	r4,204(sp)
 4007bf0:	e0c7883a 	add	r3,fp,r3
 4007bf4:	df003a15 	stw	fp,232(sp)
 4007bf8:	d8c02e15 	stw	r3,184(sp)
 4007bfc:	00800044 	movi	r2,1
 4007c00:	1100b30e 	bge	r2,r4,4007ed0 <___vfprintf_internal_r+0x2110>
 4007c04:	d8c02e17 	ldw	r3,184(sp)
 4007c08:	18c00044 	addi	r3,r3,1
 4007c0c:	d8c02e15 	stw	r3,184(sp)
 4007c10:	1805883a 	mov	r2,r3
 4007c14:	1800ac16 	blt	r3,zero,4007ec8 <___vfprintf_internal_r+0x2108>
 4007c18:	d8003215 	stw	zero,200(sp)
 4007c1c:	003e5d06 	br	4007594 <__alt_data_end+0xfc007594>
 4007c20:	d9002c17 	ldw	r4,176(sp)
 4007c24:	d9801e04 	addi	r6,sp,120
 4007c28:	b80b883a 	mov	r5,r23
 4007c2c:	400d50c0 	call	400d50c <__sprint_r>
 4007c30:	1039651e 	bne	r2,zero,40061c8 <__alt_data_end+0xfc0061c8>
 4007c34:	dc402617 	ldw	r17,152(sp)
 4007c38:	d8c02017 	ldw	r3,128(sp)
 4007c3c:	d8801f17 	ldw	r2,124(sp)
 4007c40:	da000404 	addi	r8,sp,16
 4007c44:	003ed606 	br	40077a0 <__alt_data_end+0xfc0077a0>
 4007c48:	582b883a 	mov	r21,r11
 4007c4c:	d8002915 	stw	zero,164(sp)
 4007c50:	0038bd06 	br	4005f48 <__alt_data_end+0xfc005f48>
 4007c54:	d8802917 	ldw	r2,164(sp)
 4007c58:	103e071e 	bne	r2,zero,4007478 <__alt_data_end+0xfc007478>
 4007c5c:	dc002915 	stw	r16,164(sp)
 4007c60:	003e0506 	br	4007478 <__alt_data_end+0xfc007478>
 4007c64:	d9002917 	ldw	r4,164(sp)
 4007c68:	20c00044 	addi	r3,r4,1
 4007c6c:	003e0f06 	br	40074ac <__alt_data_end+0xfc0074ac>
 4007c70:	01400184 	movi	r5,6
 4007c74:	d9402915 	stw	r5,164(sp)
 4007c78:	003dff06 	br	4007478 <__alt_data_end+0xfc007478>
 4007c7c:	d8802104 	addi	r2,sp,132
 4007c80:	d8800315 	stw	r2,12(sp)
 4007c84:	d8802504 	addi	r2,sp,148
 4007c88:	d8800215 	stw	r2,8(sp)
 4007c8c:	d8802604 	addi	r2,sp,152
 4007c90:	d8800115 	stw	r2,4(sp)
 4007c94:	d8802917 	ldw	r2,164(sp)
 4007c98:	d9403617 	ldw	r5,216(sp)
 4007c9c:	d9002c17 	ldw	r4,176(sp)
 4007ca0:	d8800015 	stw	r2,0(sp)
 4007ca4:	01c000c4 	movi	r7,3
 4007ca8:	980d883a 	mov	r6,r19
 4007cac:	da003d15 	stw	r8,244(sp)
 4007cb0:	40083e40 	call	40083e4 <_dtoa_r>
 4007cb4:	d8c02917 	ldw	r3,164(sp)
 4007cb8:	da003d17 	ldw	r8,244(sp)
 4007cbc:	1021883a 	mov	r16,r2
 4007cc0:	10f9883a 	add	fp,r2,r3
 4007cc4:	81000007 	ldb	r4,0(r16)
 4007cc8:	00800c04 	movi	r2,48
 4007ccc:	20805e26 	beq	r4,r2,4007e48 <___vfprintf_internal_r+0x2088>
 4007cd0:	d8c02617 	ldw	r3,152(sp)
 4007cd4:	e0f9883a 	add	fp,fp,r3
 4007cd8:	003e0a06 	br	4007504 <__alt_data_end+0xfc007504>
 4007cdc:	00c00b44 	movi	r3,45
 4007ce0:	24e0003c 	xorhi	r19,r4,32768
 4007ce4:	d8c02a05 	stb	r3,168(sp)
 4007ce8:	003de906 	br	4007490 <__alt_data_end+0xfc007490>
 4007cec:	d8c03217 	ldw	r3,200(sp)
 4007cf0:	00c07a0e 	bge	zero,r3,4007edc <___vfprintf_internal_r+0x211c>
 4007cf4:	00800044 	movi	r2,1
 4007cf8:	d9003317 	ldw	r4,204(sp)
 4007cfc:	1105883a 	add	r2,r2,r4
 4007d00:	d8802e15 	stw	r2,184(sp)
 4007d04:	10004e16 	blt	r2,zero,4007e40 <___vfprintf_internal_r+0x2080>
 4007d08:	044019c4 	movi	r17,103
 4007d0c:	003e2106 	br	4007594 <__alt_data_end+0xfc007594>
 4007d10:	d9002917 	ldw	r4,164(sp)
 4007d14:	d8802104 	addi	r2,sp,132
 4007d18:	d8800315 	stw	r2,12(sp)
 4007d1c:	d9000015 	stw	r4,0(sp)
 4007d20:	d8802504 	addi	r2,sp,148
 4007d24:	d9403617 	ldw	r5,216(sp)
 4007d28:	d9002c17 	ldw	r4,176(sp)
 4007d2c:	d8800215 	stw	r2,8(sp)
 4007d30:	d8802604 	addi	r2,sp,152
 4007d34:	d8800115 	stw	r2,4(sp)
 4007d38:	01c000c4 	movi	r7,3
 4007d3c:	980d883a 	mov	r6,r19
 4007d40:	da003d15 	stw	r8,244(sp)
 4007d44:	40083e40 	call	40083e4 <_dtoa_r>
 4007d48:	d8c02917 	ldw	r3,164(sp)
 4007d4c:	da003d17 	ldw	r8,244(sp)
 4007d50:	1021883a 	mov	r16,r2
 4007d54:	00801184 	movi	r2,70
 4007d58:	80f9883a 	add	fp,r16,r3
 4007d5c:	88bfd926 	beq	r17,r2,4007cc4 <__alt_data_end+0xfc007cc4>
 4007d60:	003de806 	br	4007504 <__alt_data_end+0xfc007504>
 4007d64:	d9002917 	ldw	r4,164(sp)
 4007d68:	00c04d0e 	bge	zero,r3,4007ea0 <___vfprintf_internal_r+0x20e0>
 4007d6c:	2000441e 	bne	r4,zero,4007e80 <___vfprintf_internal_r+0x20c0>
 4007d70:	9480004c 	andi	r18,r18,1
 4007d74:	9000421e 	bne	r18,zero,4007e80 <___vfprintf_internal_r+0x20c0>
 4007d78:	1805883a 	mov	r2,r3
 4007d7c:	18007016 	blt	r3,zero,4007f40 <___vfprintf_internal_r+0x2180>
 4007d80:	d8c03217 	ldw	r3,200(sp)
 4007d84:	d8c02e15 	stw	r3,184(sp)
 4007d88:	003e0206 	br	4007594 <__alt_data_end+0xfc007594>
 4007d8c:	df0022c4 	addi	fp,sp,139
 4007d90:	dc002915 	stw	r16,164(sp)
 4007d94:	4027883a 	mov	r19,r8
 4007d98:	e021883a 	mov	r16,fp
 4007d9c:	b009883a 	mov	r4,r22
 4007da0:	01400284 	movi	r5,10
 4007da4:	400595c0 	call	400595c <__modsi3>
 4007da8:	10800c04 	addi	r2,r2,48
 4007dac:	843fffc4 	addi	r16,r16,-1
 4007db0:	b009883a 	mov	r4,r22
 4007db4:	01400284 	movi	r5,10
 4007db8:	80800005 	stb	r2,0(r16)
 4007dbc:	40058d80 	call	40058d8 <__divsi3>
 4007dc0:	102d883a 	mov	r22,r2
 4007dc4:	00800244 	movi	r2,9
 4007dc8:	15bff416 	blt	r2,r22,4007d9c <__alt_data_end+0xfc007d9c>
 4007dcc:	9811883a 	mov	r8,r19
 4007dd0:	b0800c04 	addi	r2,r22,48
 4007dd4:	8027883a 	mov	r19,r16
 4007dd8:	997fffc4 	addi	r5,r19,-1
 4007ddc:	98bfffc5 	stb	r2,-1(r19)
 4007de0:	dc002917 	ldw	r16,164(sp)
 4007de4:	2f006a2e 	bgeu	r5,fp,4007f90 <___vfprintf_internal_r+0x21d0>
 4007de8:	d9c02384 	addi	r7,sp,142
 4007dec:	3ccfc83a 	sub	r7,r7,r19
 4007df0:	d9002344 	addi	r4,sp,141
 4007df4:	e1cf883a 	add	r7,fp,r7
 4007df8:	00000106 	br	4007e00 <___vfprintf_internal_r+0x2040>
 4007dfc:	28800003 	ldbu	r2,0(r5)
 4007e00:	20800005 	stb	r2,0(r4)
 4007e04:	21000044 	addi	r4,r4,1
 4007e08:	29400044 	addi	r5,r5,1
 4007e0c:	393ffb1e 	bne	r7,r4,4007dfc <__alt_data_end+0xfc007dfc>
 4007e10:	d8802304 	addi	r2,sp,140
 4007e14:	14c5c83a 	sub	r2,r2,r19
 4007e18:	d8c02344 	addi	r3,sp,141
 4007e1c:	1885883a 	add	r2,r3,r2
 4007e20:	003f7006 	br	4007be4 <__alt_data_end+0xfc007be4>
 4007e24:	0005883a 	mov	r2,zero
 4007e28:	003f0f06 	br	4007a68 <__alt_data_end+0xfc007a68>
 4007e2c:	d8c03217 	ldw	r3,200(sp)
 4007e30:	18c00044 	addi	r3,r3,1
 4007e34:	d8c02e15 	stw	r3,184(sp)
 4007e38:	1805883a 	mov	r2,r3
 4007e3c:	183fb20e 	bge	r3,zero,4007d08 <__alt_data_end+0xfc007d08>
 4007e40:	0005883a 	mov	r2,zero
 4007e44:	003fb006 	br	4007d08 <__alt_data_end+0xfc007d08>
 4007e48:	d9003617 	ldw	r4,216(sp)
 4007e4c:	000d883a 	mov	r6,zero
 4007e50:	000f883a 	mov	r7,zero
 4007e54:	980b883a 	mov	r5,r19
 4007e58:	d8c03c15 	stw	r3,240(sp)
 4007e5c:	da003d15 	stw	r8,244(sp)
 4007e60:	40041f40 	call	40041f4 <__eqdf2>
 4007e64:	d8c03c17 	ldw	r3,240(sp)
 4007e68:	da003d17 	ldw	r8,244(sp)
 4007e6c:	103f9826 	beq	r2,zero,4007cd0 <__alt_data_end+0xfc007cd0>
 4007e70:	00800044 	movi	r2,1
 4007e74:	10c7c83a 	sub	r3,r2,r3
 4007e78:	d8c02615 	stw	r3,152(sp)
 4007e7c:	003f9506 	br	4007cd4 <__alt_data_end+0xfc007cd4>
 4007e80:	d9002917 	ldw	r4,164(sp)
 4007e84:	d8c03217 	ldw	r3,200(sp)
 4007e88:	20800044 	addi	r2,r4,1
 4007e8c:	1885883a 	add	r2,r3,r2
 4007e90:	d8802e15 	stw	r2,184(sp)
 4007e94:	103dbf0e 	bge	r2,zero,4007594 <__alt_data_end+0xfc007594>
 4007e98:	0005883a 	mov	r2,zero
 4007e9c:	003dbd06 	br	4007594 <__alt_data_end+0xfc007594>
 4007ea0:	2000211e 	bne	r4,zero,4007f28 <___vfprintf_internal_r+0x2168>
 4007ea4:	9480004c 	andi	r18,r18,1
 4007ea8:	90001f1e 	bne	r18,zero,4007f28 <___vfprintf_internal_r+0x2168>
 4007eac:	00800044 	movi	r2,1
 4007eb0:	d8802e15 	stw	r2,184(sp)
 4007eb4:	003db706 	br	4007594 <__alt_data_end+0xfc007594>
 4007eb8:	00800b44 	movi	r2,45
 4007ebc:	05adc83a 	sub	r22,zero,r22
 4007ec0:	d8802305 	stb	r2,140(sp)
 4007ec4:	003f3f06 	br	4007bc4 <__alt_data_end+0xfc007bc4>
 4007ec8:	0005883a 	mov	r2,zero
 4007ecc:	003f5206 	br	4007c18 <__alt_data_end+0xfc007c18>
 4007ed0:	90a4703a 	and	r18,r18,r2
 4007ed4:	903f4e26 	beq	r18,zero,4007c10 <__alt_data_end+0xfc007c10>
 4007ed8:	003f4a06 	br	4007c04 <__alt_data_end+0xfc007c04>
 4007edc:	00800084 	movi	r2,2
 4007ee0:	10c5c83a 	sub	r2,r2,r3
 4007ee4:	003f8406 	br	4007cf8 <__alt_data_end+0xfc007cf8>
 4007ee8:	d8802d17 	ldw	r2,180(sp)
 4007eec:	d9002d17 	ldw	r4,180(sp)
 4007ef0:	ac400043 	ldbu	r17,1(r21)
 4007ef4:	10800017 	ldw	r2,0(r2)
 4007ef8:	582b883a 	mov	r21,r11
 4007efc:	d8802915 	stw	r2,164(sp)
 4007f00:	20800104 	addi	r2,r4,4
 4007f04:	d9002917 	ldw	r4,164(sp)
 4007f08:	d8802d15 	stw	r2,180(sp)
 4007f0c:	203e7a0e 	bge	r4,zero,40078f8 <__alt_data_end+0xfc0078f8>
 4007f10:	8c403fcc 	andi	r17,r17,255
 4007f14:	00bfffc4 	movi	r2,-1
 4007f18:	8c40201c 	xori	r17,r17,128
 4007f1c:	d8802915 	stw	r2,164(sp)
 4007f20:	8c7fe004 	addi	r17,r17,-128
 4007f24:	00380706 	br	4005f44 <__alt_data_end+0xfc005f44>
 4007f28:	d8c02917 	ldw	r3,164(sp)
 4007f2c:	18c00084 	addi	r3,r3,2
 4007f30:	d8c02e15 	stw	r3,184(sp)
 4007f34:	1805883a 	mov	r2,r3
 4007f38:	183d960e 	bge	r3,zero,4007594 <__alt_data_end+0xfc007594>
 4007f3c:	003fd606 	br	4007e98 <__alt_data_end+0xfc007e98>
 4007f40:	0005883a 	mov	r2,zero
 4007f44:	003f8e06 	br	4007d80 <__alt_data_end+0xfc007d80>
 4007f48:	9080004c 	andi	r2,r18,1
 4007f4c:	103f811e 	bne	r2,zero,4007d54 <__alt_data_end+0xfc007d54>
 4007f50:	d8802117 	ldw	r2,132(sp)
 4007f54:	1405c83a 	sub	r2,r2,r16
 4007f58:	d8803315 	stw	r2,204(sp)
 4007f5c:	b47ef326 	beq	r22,r17,4007b2c <__alt_data_end+0xfc007b2c>
 4007f60:	dd802617 	ldw	r22,152(sp)
 4007f64:	003f1106 	br	4007bac <__alt_data_end+0xfc007bac>
 4007f68:	d9c02785 	stb	r7,158(sp)
 4007f6c:	00390406 	br	4006380 <__alt_data_end+0xfc006380>
 4007f70:	d9c02785 	stb	r7,158(sp)
 4007f74:	0038d306 	br	40062c4 <__alt_data_end+0xfc0062c4>
 4007f78:	d9c02785 	stb	r7,158(sp)
 4007f7c:	003a6106 	br	4006904 <__alt_data_end+0xfc006904>
 4007f80:	d9c02785 	stb	r7,158(sp)
 4007f84:	003af806 	br	4006b68 <__alt_data_end+0xfc006b68>
 4007f88:	0005883a 	mov	r2,zero
 4007f8c:	003d7e06 	br	4007588 <__alt_data_end+0xfc007588>
 4007f90:	d8802344 	addi	r2,sp,141
 4007f94:	003f1306 	br	4007be4 <__alt_data_end+0xfc007be4>
 4007f98:	d9c02785 	stb	r7,158(sp)
 4007f9c:	00392306 	br	400642c <__alt_data_end+0xfc00642c>
 4007fa0:	d9c02785 	stb	r7,158(sp)
 4007fa4:	003aa906 	br	4006a4c <__alt_data_end+0xfc006a4c>
 4007fa8:	d9c02785 	stb	r7,158(sp)
 4007fac:	003a3d06 	br	40068a4 <__alt_data_end+0xfc0068a4>
 4007fb0:	d9c02785 	stb	r7,158(sp)
 4007fb4:	003aca06 	br	4006ae0 <__alt_data_end+0xfc006ae0>

04007fb8 <__vfprintf_internal>:
 4007fb8:	00810074 	movhi	r2,1025
 4007fbc:	10935c04 	addi	r2,r2,19824
 4007fc0:	300f883a 	mov	r7,r6
 4007fc4:	280d883a 	mov	r6,r5
 4007fc8:	200b883a 	mov	r5,r4
 4007fcc:	11000017 	ldw	r4,0(r2)
 4007fd0:	4005dc01 	jmpi	4005dc0 <___vfprintf_internal_r>

04007fd4 <__sbprintf>:
 4007fd4:	2880030b 	ldhu	r2,12(r5)
 4007fd8:	2ac01917 	ldw	r11,100(r5)
 4007fdc:	2a80038b 	ldhu	r10,14(r5)
 4007fe0:	2a400717 	ldw	r9,28(r5)
 4007fe4:	2a000917 	ldw	r8,36(r5)
 4007fe8:	defee204 	addi	sp,sp,-1144
 4007fec:	00c10004 	movi	r3,1024
 4007ff0:	dc011a15 	stw	r16,1128(sp)
 4007ff4:	10bfff4c 	andi	r2,r2,65533
 4007ff8:	2821883a 	mov	r16,r5
 4007ffc:	d8cb883a 	add	r5,sp,r3
 4008000:	dc811c15 	stw	r18,1136(sp)
 4008004:	dc411b15 	stw	r17,1132(sp)
 4008008:	dfc11d15 	stw	ra,1140(sp)
 400800c:	2025883a 	mov	r18,r4
 4008010:	d881030d 	sth	r2,1036(sp)
 4008014:	dac11915 	stw	r11,1124(sp)
 4008018:	da81038d 	sth	r10,1038(sp)
 400801c:	da410715 	stw	r9,1052(sp)
 4008020:	da010915 	stw	r8,1060(sp)
 4008024:	dec10015 	stw	sp,1024(sp)
 4008028:	dec10415 	stw	sp,1040(sp)
 400802c:	d8c10215 	stw	r3,1032(sp)
 4008030:	d8c10515 	stw	r3,1044(sp)
 4008034:	d8010615 	stw	zero,1048(sp)
 4008038:	4005dc00 	call	4005dc0 <___vfprintf_internal_r>
 400803c:	1023883a 	mov	r17,r2
 4008040:	10000416 	blt	r2,zero,4008054 <__sbprintf+0x80>
 4008044:	d9410004 	addi	r5,sp,1024
 4008048:	9009883a 	mov	r4,r18
 400804c:	4009c880 	call	4009c88 <_fflush_r>
 4008050:	10000d1e 	bne	r2,zero,4008088 <__sbprintf+0xb4>
 4008054:	d881030b 	ldhu	r2,1036(sp)
 4008058:	1080100c 	andi	r2,r2,64
 400805c:	10000326 	beq	r2,zero,400806c <__sbprintf+0x98>
 4008060:	8080030b 	ldhu	r2,12(r16)
 4008064:	10801014 	ori	r2,r2,64
 4008068:	8080030d 	sth	r2,12(r16)
 400806c:	8805883a 	mov	r2,r17
 4008070:	dfc11d17 	ldw	ra,1140(sp)
 4008074:	dc811c17 	ldw	r18,1136(sp)
 4008078:	dc411b17 	ldw	r17,1132(sp)
 400807c:	dc011a17 	ldw	r16,1128(sp)
 4008080:	dec11e04 	addi	sp,sp,1144
 4008084:	f800283a 	ret
 4008088:	047fffc4 	movi	r17,-1
 400808c:	003ff106 	br	4008054 <__alt_data_end+0xfc008054>

04008090 <__swsetup_r>:
 4008090:	00810074 	movhi	r2,1025
 4008094:	defffd04 	addi	sp,sp,-12
 4008098:	10935c04 	addi	r2,r2,19824
 400809c:	dc400115 	stw	r17,4(sp)
 40080a0:	2023883a 	mov	r17,r4
 40080a4:	11000017 	ldw	r4,0(r2)
 40080a8:	dc000015 	stw	r16,0(sp)
 40080ac:	dfc00215 	stw	ra,8(sp)
 40080b0:	2821883a 	mov	r16,r5
 40080b4:	20000226 	beq	r4,zero,40080c0 <__swsetup_r+0x30>
 40080b8:	20800e17 	ldw	r2,56(r4)
 40080bc:	10003126 	beq	r2,zero,4008184 <__swsetup_r+0xf4>
 40080c0:	8080030b 	ldhu	r2,12(r16)
 40080c4:	10c0020c 	andi	r3,r2,8
 40080c8:	1009883a 	mov	r4,r2
 40080cc:	18000f26 	beq	r3,zero,400810c <__swsetup_r+0x7c>
 40080d0:	80c00417 	ldw	r3,16(r16)
 40080d4:	18001526 	beq	r3,zero,400812c <__swsetup_r+0x9c>
 40080d8:	1100004c 	andi	r4,r2,1
 40080dc:	20001c1e 	bne	r4,zero,4008150 <__swsetup_r+0xc0>
 40080e0:	1080008c 	andi	r2,r2,2
 40080e4:	1000291e 	bne	r2,zero,400818c <__swsetup_r+0xfc>
 40080e8:	80800517 	ldw	r2,20(r16)
 40080ec:	80800215 	stw	r2,8(r16)
 40080f0:	18001c26 	beq	r3,zero,4008164 <__swsetup_r+0xd4>
 40080f4:	0005883a 	mov	r2,zero
 40080f8:	dfc00217 	ldw	ra,8(sp)
 40080fc:	dc400117 	ldw	r17,4(sp)
 4008100:	dc000017 	ldw	r16,0(sp)
 4008104:	dec00304 	addi	sp,sp,12
 4008108:	f800283a 	ret
 400810c:	2080040c 	andi	r2,r4,16
 4008110:	10002e26 	beq	r2,zero,40081cc <__swsetup_r+0x13c>
 4008114:	2080010c 	andi	r2,r4,4
 4008118:	10001e1e 	bne	r2,zero,4008194 <__swsetup_r+0x104>
 400811c:	80c00417 	ldw	r3,16(r16)
 4008120:	20800214 	ori	r2,r4,8
 4008124:	8080030d 	sth	r2,12(r16)
 4008128:	183feb1e 	bne	r3,zero,40080d8 <__alt_data_end+0xfc0080d8>
 400812c:	1100a00c 	andi	r4,r2,640
 4008130:	01408004 	movi	r5,512
 4008134:	217fe826 	beq	r4,r5,40080d8 <__alt_data_end+0xfc0080d8>
 4008138:	800b883a 	mov	r5,r16
 400813c:	8809883a 	mov	r4,r17
 4008140:	400ac640 	call	400ac64 <__smakebuf_r>
 4008144:	8080030b 	ldhu	r2,12(r16)
 4008148:	80c00417 	ldw	r3,16(r16)
 400814c:	003fe206 	br	40080d8 <__alt_data_end+0xfc0080d8>
 4008150:	80800517 	ldw	r2,20(r16)
 4008154:	80000215 	stw	zero,8(r16)
 4008158:	0085c83a 	sub	r2,zero,r2
 400815c:	80800615 	stw	r2,24(r16)
 4008160:	183fe41e 	bne	r3,zero,40080f4 <__alt_data_end+0xfc0080f4>
 4008164:	80c0030b 	ldhu	r3,12(r16)
 4008168:	0005883a 	mov	r2,zero
 400816c:	1900200c 	andi	r4,r3,128
 4008170:	203fe126 	beq	r4,zero,40080f8 <__alt_data_end+0xfc0080f8>
 4008174:	18c01014 	ori	r3,r3,64
 4008178:	80c0030d 	sth	r3,12(r16)
 400817c:	00bfffc4 	movi	r2,-1
 4008180:	003fdd06 	br	40080f8 <__alt_data_end+0xfc0080f8>
 4008184:	400a0640 	call	400a064 <__sinit>
 4008188:	003fcd06 	br	40080c0 <__alt_data_end+0xfc0080c0>
 400818c:	0005883a 	mov	r2,zero
 4008190:	003fd606 	br	40080ec <__alt_data_end+0xfc0080ec>
 4008194:	81400c17 	ldw	r5,48(r16)
 4008198:	28000626 	beq	r5,zero,40081b4 <__swsetup_r+0x124>
 400819c:	80801004 	addi	r2,r16,64
 40081a0:	28800326 	beq	r5,r2,40081b0 <__swsetup_r+0x120>
 40081a4:	8809883a 	mov	r4,r17
 40081a8:	400a1d80 	call	400a1d8 <_free_r>
 40081ac:	8100030b 	ldhu	r4,12(r16)
 40081b0:	80000c15 	stw	zero,48(r16)
 40081b4:	80c00417 	ldw	r3,16(r16)
 40081b8:	00bff6c4 	movi	r2,-37
 40081bc:	1108703a 	and	r4,r2,r4
 40081c0:	80000115 	stw	zero,4(r16)
 40081c4:	80c00015 	stw	r3,0(r16)
 40081c8:	003fd506 	br	4008120 <__alt_data_end+0xfc008120>
 40081cc:	00800244 	movi	r2,9
 40081d0:	88800015 	stw	r2,0(r17)
 40081d4:	20801014 	ori	r2,r4,64
 40081d8:	8080030d 	sth	r2,12(r16)
 40081dc:	00bfffc4 	movi	r2,-1
 40081e0:	003fc506 	br	40080f8 <__alt_data_end+0xfc0080f8>

040081e4 <quorem>:
 40081e4:	defff704 	addi	sp,sp,-36
 40081e8:	dc800215 	stw	r18,8(sp)
 40081ec:	20800417 	ldw	r2,16(r4)
 40081f0:	2c800417 	ldw	r18,16(r5)
 40081f4:	dfc00815 	stw	ra,32(sp)
 40081f8:	ddc00715 	stw	r23,28(sp)
 40081fc:	dd800615 	stw	r22,24(sp)
 4008200:	dd400515 	stw	r21,20(sp)
 4008204:	dd000415 	stw	r20,16(sp)
 4008208:	dcc00315 	stw	r19,12(sp)
 400820c:	dc400115 	stw	r17,4(sp)
 4008210:	dc000015 	stw	r16,0(sp)
 4008214:	14807116 	blt	r2,r18,40083dc <quorem+0x1f8>
 4008218:	94bfffc4 	addi	r18,r18,-1
 400821c:	94ad883a 	add	r22,r18,r18
 4008220:	b5ad883a 	add	r22,r22,r22
 4008224:	2c400504 	addi	r17,r5,20
 4008228:	8da9883a 	add	r20,r17,r22
 400822c:	25400504 	addi	r21,r4,20
 4008230:	282f883a 	mov	r23,r5
 4008234:	adad883a 	add	r22,r21,r22
 4008238:	a1400017 	ldw	r5,0(r20)
 400823c:	2021883a 	mov	r16,r4
 4008240:	b1000017 	ldw	r4,0(r22)
 4008244:	29400044 	addi	r5,r5,1
 4008248:	40059d00 	call	40059d0 <__udivsi3>
 400824c:	1027883a 	mov	r19,r2
 4008250:	10002c26 	beq	r2,zero,4008304 <quorem+0x120>
 4008254:	a813883a 	mov	r9,r21
 4008258:	880b883a 	mov	r5,r17
 400825c:	0009883a 	mov	r4,zero
 4008260:	000d883a 	mov	r6,zero
 4008264:	2a000017 	ldw	r8,0(r5)
 4008268:	49c00017 	ldw	r7,0(r9)
 400826c:	29400104 	addi	r5,r5,4
 4008270:	40bfffcc 	andi	r2,r8,65535
 4008274:	14c5383a 	mul	r2,r2,r19
 4008278:	4010d43a 	srli	r8,r8,16
 400827c:	38ffffcc 	andi	r3,r7,65535
 4008280:	1105883a 	add	r2,r2,r4
 4008284:	1008d43a 	srli	r4,r2,16
 4008288:	44d1383a 	mul	r8,r8,r19
 400828c:	198d883a 	add	r6,r3,r6
 4008290:	10ffffcc 	andi	r3,r2,65535
 4008294:	30c7c83a 	sub	r3,r6,r3
 4008298:	380ed43a 	srli	r7,r7,16
 400829c:	4105883a 	add	r2,r8,r4
 40082a0:	180dd43a 	srai	r6,r3,16
 40082a4:	113fffcc 	andi	r4,r2,65535
 40082a8:	390fc83a 	sub	r7,r7,r4
 40082ac:	398d883a 	add	r6,r7,r6
 40082b0:	300e943a 	slli	r7,r6,16
 40082b4:	18ffffcc 	andi	r3,r3,65535
 40082b8:	1008d43a 	srli	r4,r2,16
 40082bc:	38ceb03a 	or	r7,r7,r3
 40082c0:	49c00015 	stw	r7,0(r9)
 40082c4:	300dd43a 	srai	r6,r6,16
 40082c8:	4a400104 	addi	r9,r9,4
 40082cc:	a17fe52e 	bgeu	r20,r5,4008264 <__alt_data_end+0xfc008264>
 40082d0:	b0800017 	ldw	r2,0(r22)
 40082d4:	10000b1e 	bne	r2,zero,4008304 <quorem+0x120>
 40082d8:	b0bfff04 	addi	r2,r22,-4
 40082dc:	a880082e 	bgeu	r21,r2,4008300 <quorem+0x11c>
 40082e0:	b0ffff17 	ldw	r3,-4(r22)
 40082e4:	18000326 	beq	r3,zero,40082f4 <quorem+0x110>
 40082e8:	00000506 	br	4008300 <quorem+0x11c>
 40082ec:	10c00017 	ldw	r3,0(r2)
 40082f0:	1800031e 	bne	r3,zero,4008300 <quorem+0x11c>
 40082f4:	10bfff04 	addi	r2,r2,-4
 40082f8:	94bfffc4 	addi	r18,r18,-1
 40082fc:	a8bffb36 	bltu	r21,r2,40082ec <__alt_data_end+0xfc0082ec>
 4008300:	84800415 	stw	r18,16(r16)
 4008304:	b80b883a 	mov	r5,r23
 4008308:	8009883a 	mov	r4,r16
 400830c:	400c3a40 	call	400c3a4 <__mcmp>
 4008310:	10002616 	blt	r2,zero,40083ac <quorem+0x1c8>
 4008314:	9cc00044 	addi	r19,r19,1
 4008318:	a805883a 	mov	r2,r21
 400831c:	000b883a 	mov	r5,zero
 4008320:	11000017 	ldw	r4,0(r2)
 4008324:	89800017 	ldw	r6,0(r17)
 4008328:	10800104 	addi	r2,r2,4
 400832c:	20ffffcc 	andi	r3,r4,65535
 4008330:	194b883a 	add	r5,r3,r5
 4008334:	30ffffcc 	andi	r3,r6,65535
 4008338:	28c7c83a 	sub	r3,r5,r3
 400833c:	300cd43a 	srli	r6,r6,16
 4008340:	2008d43a 	srli	r4,r4,16
 4008344:	180bd43a 	srai	r5,r3,16
 4008348:	18ffffcc 	andi	r3,r3,65535
 400834c:	2189c83a 	sub	r4,r4,r6
 4008350:	2149883a 	add	r4,r4,r5
 4008354:	200c943a 	slli	r6,r4,16
 4008358:	8c400104 	addi	r17,r17,4
 400835c:	200bd43a 	srai	r5,r4,16
 4008360:	30c6b03a 	or	r3,r6,r3
 4008364:	10ffff15 	stw	r3,-4(r2)
 4008368:	a47fed2e 	bgeu	r20,r17,4008320 <__alt_data_end+0xfc008320>
 400836c:	9485883a 	add	r2,r18,r18
 4008370:	1085883a 	add	r2,r2,r2
 4008374:	a887883a 	add	r3,r21,r2
 4008378:	18800017 	ldw	r2,0(r3)
 400837c:	10000b1e 	bne	r2,zero,40083ac <quorem+0x1c8>
 4008380:	18bfff04 	addi	r2,r3,-4
 4008384:	a880082e 	bgeu	r21,r2,40083a8 <quorem+0x1c4>
 4008388:	18ffff17 	ldw	r3,-4(r3)
 400838c:	18000326 	beq	r3,zero,400839c <quorem+0x1b8>
 4008390:	00000506 	br	40083a8 <quorem+0x1c4>
 4008394:	10c00017 	ldw	r3,0(r2)
 4008398:	1800031e 	bne	r3,zero,40083a8 <quorem+0x1c4>
 400839c:	10bfff04 	addi	r2,r2,-4
 40083a0:	94bfffc4 	addi	r18,r18,-1
 40083a4:	a8bffb36 	bltu	r21,r2,4008394 <__alt_data_end+0xfc008394>
 40083a8:	84800415 	stw	r18,16(r16)
 40083ac:	9805883a 	mov	r2,r19
 40083b0:	dfc00817 	ldw	ra,32(sp)
 40083b4:	ddc00717 	ldw	r23,28(sp)
 40083b8:	dd800617 	ldw	r22,24(sp)
 40083bc:	dd400517 	ldw	r21,20(sp)
 40083c0:	dd000417 	ldw	r20,16(sp)
 40083c4:	dcc00317 	ldw	r19,12(sp)
 40083c8:	dc800217 	ldw	r18,8(sp)
 40083cc:	dc400117 	ldw	r17,4(sp)
 40083d0:	dc000017 	ldw	r16,0(sp)
 40083d4:	dec00904 	addi	sp,sp,36
 40083d8:	f800283a 	ret
 40083dc:	0005883a 	mov	r2,zero
 40083e0:	003ff306 	br	40083b0 <__alt_data_end+0xfc0083b0>

040083e4 <_dtoa_r>:
 40083e4:	20801017 	ldw	r2,64(r4)
 40083e8:	deffde04 	addi	sp,sp,-136
 40083ec:	df002015 	stw	fp,128(sp)
 40083f0:	dcc01b15 	stw	r19,108(sp)
 40083f4:	dc801a15 	stw	r18,104(sp)
 40083f8:	dc401915 	stw	r17,100(sp)
 40083fc:	dc001815 	stw	r16,96(sp)
 4008400:	dfc02115 	stw	ra,132(sp)
 4008404:	ddc01f15 	stw	r23,124(sp)
 4008408:	dd801e15 	stw	r22,120(sp)
 400840c:	dd401d15 	stw	r21,116(sp)
 4008410:	dd001c15 	stw	r20,112(sp)
 4008414:	d9c00315 	stw	r7,12(sp)
 4008418:	2039883a 	mov	fp,r4
 400841c:	3023883a 	mov	r17,r6
 4008420:	2825883a 	mov	r18,r5
 4008424:	dc002417 	ldw	r16,144(sp)
 4008428:	3027883a 	mov	r19,r6
 400842c:	10000826 	beq	r2,zero,4008450 <_dtoa_r+0x6c>
 4008430:	21801117 	ldw	r6,68(r4)
 4008434:	00c00044 	movi	r3,1
 4008438:	100b883a 	mov	r5,r2
 400843c:	1986983a 	sll	r3,r3,r6
 4008440:	11800115 	stw	r6,4(r2)
 4008444:	10c00215 	stw	r3,8(r2)
 4008448:	400bb840 	call	400bb84 <_Bfree>
 400844c:	e0001015 	stw	zero,64(fp)
 4008450:	88002e16 	blt	r17,zero,400850c <_dtoa_r+0x128>
 4008454:	80000015 	stw	zero,0(r16)
 4008458:	889ffc2c 	andhi	r2,r17,32752
 400845c:	00dffc34 	movhi	r3,32752
 4008460:	10c01c26 	beq	r2,r3,40084d4 <_dtoa_r+0xf0>
 4008464:	000d883a 	mov	r6,zero
 4008468:	000f883a 	mov	r7,zero
 400846c:	9009883a 	mov	r4,r18
 4008470:	980b883a 	mov	r5,r19
 4008474:	40041f40 	call	40041f4 <__eqdf2>
 4008478:	10002b1e 	bne	r2,zero,4008528 <_dtoa_r+0x144>
 400847c:	d9c02317 	ldw	r7,140(sp)
 4008480:	00800044 	movi	r2,1
 4008484:	38800015 	stw	r2,0(r7)
 4008488:	d8802517 	ldw	r2,148(sp)
 400848c:	10019e26 	beq	r2,zero,4008b08 <_dtoa_r+0x724>
 4008490:	d8c02517 	ldw	r3,148(sp)
 4008494:	00810074 	movhi	r2,1025
 4008498:	108bdd44 	addi	r2,r2,12149
 400849c:	18800015 	stw	r2,0(r3)
 40084a0:	10bfffc4 	addi	r2,r2,-1
 40084a4:	dfc02117 	ldw	ra,132(sp)
 40084a8:	df002017 	ldw	fp,128(sp)
 40084ac:	ddc01f17 	ldw	r23,124(sp)
 40084b0:	dd801e17 	ldw	r22,120(sp)
 40084b4:	dd401d17 	ldw	r21,116(sp)
 40084b8:	dd001c17 	ldw	r20,112(sp)
 40084bc:	dcc01b17 	ldw	r19,108(sp)
 40084c0:	dc801a17 	ldw	r18,104(sp)
 40084c4:	dc401917 	ldw	r17,100(sp)
 40084c8:	dc001817 	ldw	r16,96(sp)
 40084cc:	dec02204 	addi	sp,sp,136
 40084d0:	f800283a 	ret
 40084d4:	d8c02317 	ldw	r3,140(sp)
 40084d8:	0089c3c4 	movi	r2,9999
 40084dc:	18800015 	stw	r2,0(r3)
 40084e0:	90017726 	beq	r18,zero,4008ac0 <_dtoa_r+0x6dc>
 40084e4:	00810074 	movhi	r2,1025
 40084e8:	108be904 	addi	r2,r2,12196
 40084ec:	d9002517 	ldw	r4,148(sp)
 40084f0:	203fec26 	beq	r4,zero,40084a4 <__alt_data_end+0xfc0084a4>
 40084f4:	10c000c7 	ldb	r3,3(r2)
 40084f8:	1801781e 	bne	r3,zero,4008adc <_dtoa_r+0x6f8>
 40084fc:	10c000c4 	addi	r3,r2,3
 4008500:	d9802517 	ldw	r6,148(sp)
 4008504:	30c00015 	stw	r3,0(r6)
 4008508:	003fe606 	br	40084a4 <__alt_data_end+0xfc0084a4>
 400850c:	04e00034 	movhi	r19,32768
 4008510:	9cffffc4 	addi	r19,r19,-1
 4008514:	00800044 	movi	r2,1
 4008518:	8ce6703a 	and	r19,r17,r19
 400851c:	80800015 	stw	r2,0(r16)
 4008520:	9823883a 	mov	r17,r19
 4008524:	003fcc06 	br	4008458 <__alt_data_end+0xfc008458>
 4008528:	d8800204 	addi	r2,sp,8
 400852c:	d8800015 	stw	r2,0(sp)
 4008530:	d9c00104 	addi	r7,sp,4
 4008534:	900b883a 	mov	r5,r18
 4008538:	980d883a 	mov	r6,r19
 400853c:	e009883a 	mov	r4,fp
 4008540:	8820d53a 	srli	r16,r17,20
 4008544:	400c7700 	call	400c770 <__d2b>
 4008548:	d8800915 	stw	r2,36(sp)
 400854c:	8001651e 	bne	r16,zero,4008ae4 <_dtoa_r+0x700>
 4008550:	dd800217 	ldw	r22,8(sp)
 4008554:	dc000117 	ldw	r16,4(sp)
 4008558:	00800804 	movi	r2,32
 400855c:	b421883a 	add	r16,r22,r16
 4008560:	80c10c84 	addi	r3,r16,1074
 4008564:	10c2d10e 	bge	r2,r3,40090ac <_dtoa_r+0xcc8>
 4008568:	00801004 	movi	r2,64
 400856c:	81010484 	addi	r4,r16,1042
 4008570:	10c7c83a 	sub	r3,r2,r3
 4008574:	9108d83a 	srl	r4,r18,r4
 4008578:	88e2983a 	sll	r17,r17,r3
 400857c:	2448b03a 	or	r4,r4,r17
 4008580:	400fe9c0 	call	400fe9c <__floatunsidf>
 4008584:	017f8434 	movhi	r5,65040
 4008588:	01800044 	movi	r6,1
 400858c:	1009883a 	mov	r4,r2
 4008590:	194b883a 	add	r5,r3,r5
 4008594:	843fffc4 	addi	r16,r16,-1
 4008598:	d9801115 	stw	r6,68(sp)
 400859c:	000d883a 	mov	r6,zero
 40085a0:	01cffe34 	movhi	r7,16376
 40085a4:	4004b640 	call	4004b64 <__subdf3>
 40085a8:	0198dbf4 	movhi	r6,25455
 40085ac:	01cff4f4 	movhi	r7,16339
 40085b0:	3190d844 	addi	r6,r6,17249
 40085b4:	39e1e9c4 	addi	r7,r7,-30809
 40085b8:	1009883a 	mov	r4,r2
 40085bc:	180b883a 	mov	r5,r3
 40085c0:	400444c0 	call	400444c <__muldf3>
 40085c4:	01a2d874 	movhi	r6,35681
 40085c8:	01cff1f4 	movhi	r7,16327
 40085cc:	31b22cc4 	addi	r6,r6,-14157
 40085d0:	39e28a04 	addi	r7,r7,-30168
 40085d4:	180b883a 	mov	r5,r3
 40085d8:	1009883a 	mov	r4,r2
 40085dc:	40030600 	call	4003060 <__adddf3>
 40085e0:	8009883a 	mov	r4,r16
 40085e4:	1029883a 	mov	r20,r2
 40085e8:	1823883a 	mov	r17,r3
 40085ec:	40054e00 	call	40054e0 <__floatsidf>
 40085f0:	019427f4 	movhi	r6,20639
 40085f4:	01cff4f4 	movhi	r7,16339
 40085f8:	319e7ec4 	addi	r6,r6,31227
 40085fc:	39d104c4 	addi	r7,r7,17427
 4008600:	1009883a 	mov	r4,r2
 4008604:	180b883a 	mov	r5,r3
 4008608:	400444c0 	call	400444c <__muldf3>
 400860c:	100d883a 	mov	r6,r2
 4008610:	180f883a 	mov	r7,r3
 4008614:	a009883a 	mov	r4,r20
 4008618:	880b883a 	mov	r5,r17
 400861c:	40030600 	call	4003060 <__adddf3>
 4008620:	1009883a 	mov	r4,r2
 4008624:	180b883a 	mov	r5,r3
 4008628:	1029883a 	mov	r20,r2
 400862c:	1823883a 	mov	r17,r3
 4008630:	40054600 	call	4005460 <__fixdfsi>
 4008634:	000d883a 	mov	r6,zero
 4008638:	000f883a 	mov	r7,zero
 400863c:	a009883a 	mov	r4,r20
 4008640:	880b883a 	mov	r5,r17
 4008644:	d8800515 	stw	r2,20(sp)
 4008648:	40043580 	call	4004358 <__ledf2>
 400864c:	10028716 	blt	r2,zero,400906c <_dtoa_r+0xc88>
 4008650:	d8c00517 	ldw	r3,20(sp)
 4008654:	00800584 	movi	r2,22
 4008658:	10c27536 	bltu	r2,r3,4009030 <_dtoa_r+0xc4c>
 400865c:	180490fa 	slli	r2,r3,3
 4008660:	00c10074 	movhi	r3,1025
 4008664:	18cc0404 	addi	r3,r3,12304
 4008668:	1885883a 	add	r2,r3,r2
 400866c:	11000017 	ldw	r4,0(r2)
 4008670:	11400117 	ldw	r5,4(r2)
 4008674:	900d883a 	mov	r6,r18
 4008678:	980f883a 	mov	r7,r19
 400867c:	400427c0 	call	400427c <__gedf2>
 4008680:	00828d0e 	bge	zero,r2,40090b8 <_dtoa_r+0xcd4>
 4008684:	d9000517 	ldw	r4,20(sp)
 4008688:	d8000e15 	stw	zero,56(sp)
 400868c:	213fffc4 	addi	r4,r4,-1
 4008690:	d9000515 	stw	r4,20(sp)
 4008694:	b42dc83a 	sub	r22,r22,r16
 4008698:	b5bfffc4 	addi	r22,r22,-1
 400869c:	b0026f16 	blt	r22,zero,400905c <_dtoa_r+0xc78>
 40086a0:	d8000815 	stw	zero,32(sp)
 40086a4:	d9c00517 	ldw	r7,20(sp)
 40086a8:	38026416 	blt	r7,zero,400903c <_dtoa_r+0xc58>
 40086ac:	b1ed883a 	add	r22,r22,r7
 40086b0:	d9c00d15 	stw	r7,52(sp)
 40086b4:	d8000a15 	stw	zero,40(sp)
 40086b8:	d9800317 	ldw	r6,12(sp)
 40086bc:	00800244 	movi	r2,9
 40086c0:	11811436 	bltu	r2,r6,4008b14 <_dtoa_r+0x730>
 40086c4:	00800144 	movi	r2,5
 40086c8:	1184e10e 	bge	r2,r6,4009a50 <_dtoa_r+0x166c>
 40086cc:	31bfff04 	addi	r6,r6,-4
 40086d0:	d9800315 	stw	r6,12(sp)
 40086d4:	0023883a 	mov	r17,zero
 40086d8:	d9800317 	ldw	r6,12(sp)
 40086dc:	008000c4 	movi	r2,3
 40086e0:	30836726 	beq	r6,r2,4009480 <_dtoa_r+0x109c>
 40086e4:	1183410e 	bge	r2,r6,40093ec <_dtoa_r+0x1008>
 40086e8:	d9c00317 	ldw	r7,12(sp)
 40086ec:	00800104 	movi	r2,4
 40086f0:	38827c26 	beq	r7,r2,40090e4 <_dtoa_r+0xd00>
 40086f4:	00800144 	movi	r2,5
 40086f8:	3884c41e 	bne	r7,r2,4009a0c <_dtoa_r+0x1628>
 40086fc:	00800044 	movi	r2,1
 4008700:	d8800b15 	stw	r2,44(sp)
 4008704:	d8c00517 	ldw	r3,20(sp)
 4008708:	d9002217 	ldw	r4,136(sp)
 400870c:	1907883a 	add	r3,r3,r4
 4008710:	19800044 	addi	r6,r3,1
 4008714:	d8c00c15 	stw	r3,48(sp)
 4008718:	d9800615 	stw	r6,24(sp)
 400871c:	0183a40e 	bge	zero,r6,40095b0 <_dtoa_r+0x11cc>
 4008720:	d9800617 	ldw	r6,24(sp)
 4008724:	3021883a 	mov	r16,r6
 4008728:	e0001115 	stw	zero,68(fp)
 400872c:	008005c4 	movi	r2,23
 4008730:	1184c92e 	bgeu	r2,r6,4009a58 <_dtoa_r+0x1674>
 4008734:	00c00044 	movi	r3,1
 4008738:	00800104 	movi	r2,4
 400873c:	1085883a 	add	r2,r2,r2
 4008740:	11000504 	addi	r4,r2,20
 4008744:	180b883a 	mov	r5,r3
 4008748:	18c00044 	addi	r3,r3,1
 400874c:	313ffb2e 	bgeu	r6,r4,400873c <__alt_data_end+0xfc00873c>
 4008750:	e1401115 	stw	r5,68(fp)
 4008754:	e009883a 	mov	r4,fp
 4008758:	400badc0 	call	400badc <_Balloc>
 400875c:	d8800715 	stw	r2,28(sp)
 4008760:	e0801015 	stw	r2,64(fp)
 4008764:	00800384 	movi	r2,14
 4008768:	1400f736 	bltu	r2,r16,4008b48 <_dtoa_r+0x764>
 400876c:	8800f626 	beq	r17,zero,4008b48 <_dtoa_r+0x764>
 4008770:	d9c00517 	ldw	r7,20(sp)
 4008774:	01c39a0e 	bge	zero,r7,40095e0 <_dtoa_r+0x11fc>
 4008778:	388003cc 	andi	r2,r7,15
 400877c:	100490fa 	slli	r2,r2,3
 4008780:	382bd13a 	srai	r21,r7,4
 4008784:	00c10074 	movhi	r3,1025
 4008788:	18cc0404 	addi	r3,r3,12304
 400878c:	1885883a 	add	r2,r3,r2
 4008790:	a8c0040c 	andi	r3,r21,16
 4008794:	12400017 	ldw	r9,0(r2)
 4008798:	12000117 	ldw	r8,4(r2)
 400879c:	18037926 	beq	r3,zero,4009584 <_dtoa_r+0x11a0>
 40087a0:	00810074 	movhi	r2,1025
 40087a4:	108bfa04 	addi	r2,r2,12264
 40087a8:	11800817 	ldw	r6,32(r2)
 40087ac:	11c00917 	ldw	r7,36(r2)
 40087b0:	9009883a 	mov	r4,r18
 40087b4:	980b883a 	mov	r5,r19
 40087b8:	da001715 	stw	r8,92(sp)
 40087bc:	da401615 	stw	r9,88(sp)
 40087c0:	400390c0 	call	400390c <__divdf3>
 40087c4:	da001717 	ldw	r8,92(sp)
 40087c8:	da401617 	ldw	r9,88(sp)
 40087cc:	ad4003cc 	andi	r21,r21,15
 40087d0:	040000c4 	movi	r16,3
 40087d4:	1023883a 	mov	r17,r2
 40087d8:	1829883a 	mov	r20,r3
 40087dc:	a8001126 	beq	r21,zero,4008824 <_dtoa_r+0x440>
 40087e0:	05c10074 	movhi	r23,1025
 40087e4:	bdcbfa04 	addi	r23,r23,12264
 40087e8:	4805883a 	mov	r2,r9
 40087ec:	4007883a 	mov	r3,r8
 40087f0:	a980004c 	andi	r6,r21,1
 40087f4:	1009883a 	mov	r4,r2
 40087f8:	a82bd07a 	srai	r21,r21,1
 40087fc:	180b883a 	mov	r5,r3
 4008800:	30000426 	beq	r6,zero,4008814 <_dtoa_r+0x430>
 4008804:	b9800017 	ldw	r6,0(r23)
 4008808:	b9c00117 	ldw	r7,4(r23)
 400880c:	84000044 	addi	r16,r16,1
 4008810:	400444c0 	call	400444c <__muldf3>
 4008814:	bdc00204 	addi	r23,r23,8
 4008818:	a83ff51e 	bne	r21,zero,40087f0 <__alt_data_end+0xfc0087f0>
 400881c:	1013883a 	mov	r9,r2
 4008820:	1811883a 	mov	r8,r3
 4008824:	480d883a 	mov	r6,r9
 4008828:	400f883a 	mov	r7,r8
 400882c:	8809883a 	mov	r4,r17
 4008830:	a00b883a 	mov	r5,r20
 4008834:	400390c0 	call	400390c <__divdf3>
 4008838:	d8800f15 	stw	r2,60(sp)
 400883c:	d8c01015 	stw	r3,64(sp)
 4008840:	d8c00e17 	ldw	r3,56(sp)
 4008844:	18000626 	beq	r3,zero,4008860 <_dtoa_r+0x47c>
 4008848:	d9000f17 	ldw	r4,60(sp)
 400884c:	d9401017 	ldw	r5,64(sp)
 4008850:	000d883a 	mov	r6,zero
 4008854:	01cffc34 	movhi	r7,16368
 4008858:	40043580 	call	4004358 <__ledf2>
 400885c:	10040b16 	blt	r2,zero,400988c <_dtoa_r+0x14a8>
 4008860:	8009883a 	mov	r4,r16
 4008864:	40054e00 	call	40054e0 <__floatsidf>
 4008868:	d9800f17 	ldw	r6,60(sp)
 400886c:	d9c01017 	ldw	r7,64(sp)
 4008870:	1009883a 	mov	r4,r2
 4008874:	180b883a 	mov	r5,r3
 4008878:	400444c0 	call	400444c <__muldf3>
 400887c:	000d883a 	mov	r6,zero
 4008880:	01d00734 	movhi	r7,16412
 4008884:	1009883a 	mov	r4,r2
 4008888:	180b883a 	mov	r5,r3
 400888c:	40030600 	call	4003060 <__adddf3>
 4008890:	1021883a 	mov	r16,r2
 4008894:	d8800617 	ldw	r2,24(sp)
 4008898:	047f3034 	movhi	r17,64704
 400889c:	1c63883a 	add	r17,r3,r17
 40088a0:	10031826 	beq	r2,zero,4009504 <_dtoa_r+0x1120>
 40088a4:	d8c00517 	ldw	r3,20(sp)
 40088a8:	db000617 	ldw	r12,24(sp)
 40088ac:	d8c01315 	stw	r3,76(sp)
 40088b0:	d9000b17 	ldw	r4,44(sp)
 40088b4:	20038f26 	beq	r4,zero,40096f4 <_dtoa_r+0x1310>
 40088b8:	60bfffc4 	addi	r2,r12,-1
 40088bc:	100490fa 	slli	r2,r2,3
 40088c0:	00c10074 	movhi	r3,1025
 40088c4:	18cc0404 	addi	r3,r3,12304
 40088c8:	1885883a 	add	r2,r3,r2
 40088cc:	11800017 	ldw	r6,0(r2)
 40088d0:	11c00117 	ldw	r7,4(r2)
 40088d4:	d8800717 	ldw	r2,28(sp)
 40088d8:	0009883a 	mov	r4,zero
 40088dc:	014ff834 	movhi	r5,16352
 40088e0:	db001615 	stw	r12,88(sp)
 40088e4:	15c00044 	addi	r23,r2,1
 40088e8:	400390c0 	call	400390c <__divdf3>
 40088ec:	800d883a 	mov	r6,r16
 40088f0:	880f883a 	mov	r7,r17
 40088f4:	1009883a 	mov	r4,r2
 40088f8:	180b883a 	mov	r5,r3
 40088fc:	4004b640 	call	4004b64 <__subdf3>
 4008900:	d9401017 	ldw	r5,64(sp)
 4008904:	d9000f17 	ldw	r4,60(sp)
 4008908:	102b883a 	mov	r21,r2
 400890c:	d8c01215 	stw	r3,72(sp)
 4008910:	40054600 	call	4005460 <__fixdfsi>
 4008914:	1009883a 	mov	r4,r2
 4008918:	1029883a 	mov	r20,r2
 400891c:	40054e00 	call	40054e0 <__floatsidf>
 4008920:	d9000f17 	ldw	r4,60(sp)
 4008924:	d9401017 	ldw	r5,64(sp)
 4008928:	100d883a 	mov	r6,r2
 400892c:	180f883a 	mov	r7,r3
 4008930:	4004b640 	call	4004b64 <__subdf3>
 4008934:	1823883a 	mov	r17,r3
 4008938:	d8c00717 	ldw	r3,28(sp)
 400893c:	d9401217 	ldw	r5,72(sp)
 4008940:	a2000c04 	addi	r8,r20,48
 4008944:	1021883a 	mov	r16,r2
 4008948:	1a000005 	stb	r8,0(r3)
 400894c:	800d883a 	mov	r6,r16
 4008950:	880f883a 	mov	r7,r17
 4008954:	a809883a 	mov	r4,r21
 4008958:	4029883a 	mov	r20,r8
 400895c:	400427c0 	call	400427c <__gedf2>
 4008960:	00841d16 	blt	zero,r2,40099d8 <_dtoa_r+0x15f4>
 4008964:	800d883a 	mov	r6,r16
 4008968:	880f883a 	mov	r7,r17
 400896c:	0009883a 	mov	r4,zero
 4008970:	014ffc34 	movhi	r5,16368
 4008974:	4004b640 	call	4004b64 <__subdf3>
 4008978:	d9401217 	ldw	r5,72(sp)
 400897c:	100d883a 	mov	r6,r2
 4008980:	180f883a 	mov	r7,r3
 4008984:	a809883a 	mov	r4,r21
 4008988:	400427c0 	call	400427c <__gedf2>
 400898c:	db001617 	ldw	r12,88(sp)
 4008990:	00840e16 	blt	zero,r2,40099cc <_dtoa_r+0x15e8>
 4008994:	00800044 	movi	r2,1
 4008998:	13006b0e 	bge	r2,r12,4008b48 <_dtoa_r+0x764>
 400899c:	d9000717 	ldw	r4,28(sp)
 40089a0:	dd800f15 	stw	r22,60(sp)
 40089a4:	dcc01015 	stw	r19,64(sp)
 40089a8:	2319883a 	add	r12,r4,r12
 40089ac:	dcc01217 	ldw	r19,72(sp)
 40089b0:	602d883a 	mov	r22,r12
 40089b4:	dc801215 	stw	r18,72(sp)
 40089b8:	b825883a 	mov	r18,r23
 40089bc:	00000906 	br	40089e4 <_dtoa_r+0x600>
 40089c0:	4004b640 	call	4004b64 <__subdf3>
 40089c4:	a80d883a 	mov	r6,r21
 40089c8:	980f883a 	mov	r7,r19
 40089cc:	1009883a 	mov	r4,r2
 40089d0:	180b883a 	mov	r5,r3
 40089d4:	40043580 	call	4004358 <__ledf2>
 40089d8:	1003e816 	blt	r2,zero,400997c <_dtoa_r+0x1598>
 40089dc:	b825883a 	mov	r18,r23
 40089e0:	bd83e926 	beq	r23,r22,4009988 <_dtoa_r+0x15a4>
 40089e4:	a809883a 	mov	r4,r21
 40089e8:	980b883a 	mov	r5,r19
 40089ec:	000d883a 	mov	r6,zero
 40089f0:	01d00934 	movhi	r7,16420
 40089f4:	400444c0 	call	400444c <__muldf3>
 40089f8:	000d883a 	mov	r6,zero
 40089fc:	01d00934 	movhi	r7,16420
 4008a00:	8009883a 	mov	r4,r16
 4008a04:	880b883a 	mov	r5,r17
 4008a08:	102b883a 	mov	r21,r2
 4008a0c:	1827883a 	mov	r19,r3
 4008a10:	400444c0 	call	400444c <__muldf3>
 4008a14:	180b883a 	mov	r5,r3
 4008a18:	1009883a 	mov	r4,r2
 4008a1c:	1821883a 	mov	r16,r3
 4008a20:	1023883a 	mov	r17,r2
 4008a24:	40054600 	call	4005460 <__fixdfsi>
 4008a28:	1009883a 	mov	r4,r2
 4008a2c:	1029883a 	mov	r20,r2
 4008a30:	40054e00 	call	40054e0 <__floatsidf>
 4008a34:	8809883a 	mov	r4,r17
 4008a38:	800b883a 	mov	r5,r16
 4008a3c:	100d883a 	mov	r6,r2
 4008a40:	180f883a 	mov	r7,r3
 4008a44:	4004b640 	call	4004b64 <__subdf3>
 4008a48:	a5000c04 	addi	r20,r20,48
 4008a4c:	a80d883a 	mov	r6,r21
 4008a50:	980f883a 	mov	r7,r19
 4008a54:	1009883a 	mov	r4,r2
 4008a58:	180b883a 	mov	r5,r3
 4008a5c:	95000005 	stb	r20,0(r18)
 4008a60:	1021883a 	mov	r16,r2
 4008a64:	1823883a 	mov	r17,r3
 4008a68:	40043580 	call	4004358 <__ledf2>
 4008a6c:	bdc00044 	addi	r23,r23,1
 4008a70:	800d883a 	mov	r6,r16
 4008a74:	880f883a 	mov	r7,r17
 4008a78:	0009883a 	mov	r4,zero
 4008a7c:	014ffc34 	movhi	r5,16368
 4008a80:	103fcf0e 	bge	r2,zero,40089c0 <__alt_data_end+0xfc0089c0>
 4008a84:	d8c01317 	ldw	r3,76(sp)
 4008a88:	d8c00515 	stw	r3,20(sp)
 4008a8c:	d9400917 	ldw	r5,36(sp)
 4008a90:	e009883a 	mov	r4,fp
 4008a94:	400bb840 	call	400bb84 <_Bfree>
 4008a98:	d9000517 	ldw	r4,20(sp)
 4008a9c:	d9802317 	ldw	r6,140(sp)
 4008aa0:	d9c02517 	ldw	r7,148(sp)
 4008aa4:	b8000005 	stb	zero,0(r23)
 4008aa8:	20800044 	addi	r2,r4,1
 4008aac:	30800015 	stw	r2,0(r6)
 4008ab0:	3802aa26 	beq	r7,zero,400955c <_dtoa_r+0x1178>
 4008ab4:	3dc00015 	stw	r23,0(r7)
 4008ab8:	d8800717 	ldw	r2,28(sp)
 4008abc:	003e7906 	br	40084a4 <__alt_data_end+0xfc0084a4>
 4008ac0:	00800434 	movhi	r2,16
 4008ac4:	10bfffc4 	addi	r2,r2,-1
 4008ac8:	88a2703a 	and	r17,r17,r2
 4008acc:	883e851e 	bne	r17,zero,40084e4 <__alt_data_end+0xfc0084e4>
 4008ad0:	00810074 	movhi	r2,1025
 4008ad4:	108be604 	addi	r2,r2,12184
 4008ad8:	003e8406 	br	40084ec <__alt_data_end+0xfc0084ec>
 4008adc:	10c00204 	addi	r3,r2,8
 4008ae0:	003e8706 	br	4008500 <__alt_data_end+0xfc008500>
 4008ae4:	01400434 	movhi	r5,16
 4008ae8:	297fffc4 	addi	r5,r5,-1
 4008aec:	994a703a 	and	r5,r19,r5
 4008af0:	9009883a 	mov	r4,r18
 4008af4:	843f0044 	addi	r16,r16,-1023
 4008af8:	294ffc34 	orhi	r5,r5,16368
 4008afc:	dd800217 	ldw	r22,8(sp)
 4008b00:	d8001115 	stw	zero,68(sp)
 4008b04:	003ea506 	br	400859c <__alt_data_end+0xfc00859c>
 4008b08:	00810074 	movhi	r2,1025
 4008b0c:	108bdd04 	addi	r2,r2,12148
 4008b10:	003e6406 	br	40084a4 <__alt_data_end+0xfc0084a4>
 4008b14:	e0001115 	stw	zero,68(fp)
 4008b18:	000b883a 	mov	r5,zero
 4008b1c:	e009883a 	mov	r4,fp
 4008b20:	400badc0 	call	400badc <_Balloc>
 4008b24:	01bfffc4 	movi	r6,-1
 4008b28:	01c00044 	movi	r7,1
 4008b2c:	d8800715 	stw	r2,28(sp)
 4008b30:	d9800c15 	stw	r6,48(sp)
 4008b34:	e0801015 	stw	r2,64(fp)
 4008b38:	d8000315 	stw	zero,12(sp)
 4008b3c:	d9c00b15 	stw	r7,44(sp)
 4008b40:	d9800615 	stw	r6,24(sp)
 4008b44:	d8002215 	stw	zero,136(sp)
 4008b48:	d8800117 	ldw	r2,4(sp)
 4008b4c:	10008916 	blt	r2,zero,4008d74 <_dtoa_r+0x990>
 4008b50:	d9000517 	ldw	r4,20(sp)
 4008b54:	00c00384 	movi	r3,14
 4008b58:	19008616 	blt	r3,r4,4008d74 <_dtoa_r+0x990>
 4008b5c:	200490fa 	slli	r2,r4,3
 4008b60:	00c10074 	movhi	r3,1025
 4008b64:	d9802217 	ldw	r6,136(sp)
 4008b68:	18cc0404 	addi	r3,r3,12304
 4008b6c:	1885883a 	add	r2,r3,r2
 4008b70:	14000017 	ldw	r16,0(r2)
 4008b74:	14400117 	ldw	r17,4(r2)
 4008b78:	30016316 	blt	r6,zero,4009108 <_dtoa_r+0xd24>
 4008b7c:	800d883a 	mov	r6,r16
 4008b80:	880f883a 	mov	r7,r17
 4008b84:	9009883a 	mov	r4,r18
 4008b88:	980b883a 	mov	r5,r19
 4008b8c:	400390c0 	call	400390c <__divdf3>
 4008b90:	180b883a 	mov	r5,r3
 4008b94:	1009883a 	mov	r4,r2
 4008b98:	40054600 	call	4005460 <__fixdfsi>
 4008b9c:	1009883a 	mov	r4,r2
 4008ba0:	102b883a 	mov	r21,r2
 4008ba4:	40054e00 	call	40054e0 <__floatsidf>
 4008ba8:	800d883a 	mov	r6,r16
 4008bac:	880f883a 	mov	r7,r17
 4008bb0:	1009883a 	mov	r4,r2
 4008bb4:	180b883a 	mov	r5,r3
 4008bb8:	400444c0 	call	400444c <__muldf3>
 4008bbc:	100d883a 	mov	r6,r2
 4008bc0:	180f883a 	mov	r7,r3
 4008bc4:	9009883a 	mov	r4,r18
 4008bc8:	980b883a 	mov	r5,r19
 4008bcc:	4004b640 	call	4004b64 <__subdf3>
 4008bd0:	d9c00717 	ldw	r7,28(sp)
 4008bd4:	1009883a 	mov	r4,r2
 4008bd8:	a8800c04 	addi	r2,r21,48
 4008bdc:	38800005 	stb	r2,0(r7)
 4008be0:	3dc00044 	addi	r23,r7,1
 4008be4:	d9c00617 	ldw	r7,24(sp)
 4008be8:	01800044 	movi	r6,1
 4008bec:	180b883a 	mov	r5,r3
 4008bf0:	2005883a 	mov	r2,r4
 4008bf4:	39803826 	beq	r7,r6,4008cd8 <_dtoa_r+0x8f4>
 4008bf8:	000d883a 	mov	r6,zero
 4008bfc:	01d00934 	movhi	r7,16420
 4008c00:	400444c0 	call	400444c <__muldf3>
 4008c04:	000d883a 	mov	r6,zero
 4008c08:	000f883a 	mov	r7,zero
 4008c0c:	1009883a 	mov	r4,r2
 4008c10:	180b883a 	mov	r5,r3
 4008c14:	1025883a 	mov	r18,r2
 4008c18:	1827883a 	mov	r19,r3
 4008c1c:	40041f40 	call	40041f4 <__eqdf2>
 4008c20:	103f9a26 	beq	r2,zero,4008a8c <__alt_data_end+0xfc008a8c>
 4008c24:	d9c00617 	ldw	r7,24(sp)
 4008c28:	d8c00717 	ldw	r3,28(sp)
 4008c2c:	b829883a 	mov	r20,r23
 4008c30:	38bfffc4 	addi	r2,r7,-1
 4008c34:	18ad883a 	add	r22,r3,r2
 4008c38:	00000a06 	br	4008c64 <_dtoa_r+0x880>
 4008c3c:	400444c0 	call	400444c <__muldf3>
 4008c40:	000d883a 	mov	r6,zero
 4008c44:	000f883a 	mov	r7,zero
 4008c48:	1009883a 	mov	r4,r2
 4008c4c:	180b883a 	mov	r5,r3
 4008c50:	1025883a 	mov	r18,r2
 4008c54:	1827883a 	mov	r19,r3
 4008c58:	b829883a 	mov	r20,r23
 4008c5c:	40041f40 	call	40041f4 <__eqdf2>
 4008c60:	103f8a26 	beq	r2,zero,4008a8c <__alt_data_end+0xfc008a8c>
 4008c64:	800d883a 	mov	r6,r16
 4008c68:	880f883a 	mov	r7,r17
 4008c6c:	9009883a 	mov	r4,r18
 4008c70:	980b883a 	mov	r5,r19
 4008c74:	400390c0 	call	400390c <__divdf3>
 4008c78:	180b883a 	mov	r5,r3
 4008c7c:	1009883a 	mov	r4,r2
 4008c80:	40054600 	call	4005460 <__fixdfsi>
 4008c84:	1009883a 	mov	r4,r2
 4008c88:	102b883a 	mov	r21,r2
 4008c8c:	40054e00 	call	40054e0 <__floatsidf>
 4008c90:	800d883a 	mov	r6,r16
 4008c94:	880f883a 	mov	r7,r17
 4008c98:	1009883a 	mov	r4,r2
 4008c9c:	180b883a 	mov	r5,r3
 4008ca0:	400444c0 	call	400444c <__muldf3>
 4008ca4:	100d883a 	mov	r6,r2
 4008ca8:	180f883a 	mov	r7,r3
 4008cac:	9009883a 	mov	r4,r18
 4008cb0:	980b883a 	mov	r5,r19
 4008cb4:	4004b640 	call	4004b64 <__subdf3>
 4008cb8:	aa000c04 	addi	r8,r21,48
 4008cbc:	a2000005 	stb	r8,0(r20)
 4008cc0:	000d883a 	mov	r6,zero
 4008cc4:	01d00934 	movhi	r7,16420
 4008cc8:	1009883a 	mov	r4,r2
 4008ccc:	180b883a 	mov	r5,r3
 4008cd0:	a5c00044 	addi	r23,r20,1
 4008cd4:	b53fd91e 	bne	r22,r20,4008c3c <__alt_data_end+0xfc008c3c>
 4008cd8:	100d883a 	mov	r6,r2
 4008cdc:	180f883a 	mov	r7,r3
 4008ce0:	1009883a 	mov	r4,r2
 4008ce4:	180b883a 	mov	r5,r3
 4008ce8:	40030600 	call	4003060 <__adddf3>
 4008cec:	100d883a 	mov	r6,r2
 4008cf0:	180f883a 	mov	r7,r3
 4008cf4:	8009883a 	mov	r4,r16
 4008cf8:	880b883a 	mov	r5,r17
 4008cfc:	1027883a 	mov	r19,r2
 4008d00:	1825883a 	mov	r18,r3
 4008d04:	40043580 	call	4004358 <__ledf2>
 4008d08:	10000816 	blt	r2,zero,4008d2c <_dtoa_r+0x948>
 4008d0c:	980d883a 	mov	r6,r19
 4008d10:	900f883a 	mov	r7,r18
 4008d14:	8009883a 	mov	r4,r16
 4008d18:	880b883a 	mov	r5,r17
 4008d1c:	40041f40 	call	40041f4 <__eqdf2>
 4008d20:	103f5a1e 	bne	r2,zero,4008a8c <__alt_data_end+0xfc008a8c>
 4008d24:	ad40004c 	andi	r21,r21,1
 4008d28:	a83f5826 	beq	r21,zero,4008a8c <__alt_data_end+0xfc008a8c>
 4008d2c:	bd3fffc3 	ldbu	r20,-1(r23)
 4008d30:	b8bfffc4 	addi	r2,r23,-1
 4008d34:	1007883a 	mov	r3,r2
 4008d38:	01400e44 	movi	r5,57
 4008d3c:	d9800717 	ldw	r6,28(sp)
 4008d40:	00000506 	br	4008d58 <_dtoa_r+0x974>
 4008d44:	18ffffc4 	addi	r3,r3,-1
 4008d48:	11824726 	beq	r2,r6,4009668 <_dtoa_r+0x1284>
 4008d4c:	1d000003 	ldbu	r20,0(r3)
 4008d50:	102f883a 	mov	r23,r2
 4008d54:	10bfffc4 	addi	r2,r2,-1
 4008d58:	a1003fcc 	andi	r4,r20,255
 4008d5c:	2100201c 	xori	r4,r4,128
 4008d60:	213fe004 	addi	r4,r4,-128
 4008d64:	217ff726 	beq	r4,r5,4008d44 <__alt_data_end+0xfc008d44>
 4008d68:	a2000044 	addi	r8,r20,1
 4008d6c:	12000005 	stb	r8,0(r2)
 4008d70:	003f4606 	br	4008a8c <__alt_data_end+0xfc008a8c>
 4008d74:	d9000b17 	ldw	r4,44(sp)
 4008d78:	2000c826 	beq	r4,zero,400909c <_dtoa_r+0xcb8>
 4008d7c:	d9800317 	ldw	r6,12(sp)
 4008d80:	00c00044 	movi	r3,1
 4008d84:	1980f90e 	bge	r3,r6,400916c <_dtoa_r+0xd88>
 4008d88:	d8800617 	ldw	r2,24(sp)
 4008d8c:	d8c00a17 	ldw	r3,40(sp)
 4008d90:	157fffc4 	addi	r21,r2,-1
 4008d94:	1d41f316 	blt	r3,r21,4009564 <_dtoa_r+0x1180>
 4008d98:	1d6bc83a 	sub	r21,r3,r21
 4008d9c:	d9c00617 	ldw	r7,24(sp)
 4008da0:	3802aa16 	blt	r7,zero,400984c <_dtoa_r+0x1468>
 4008da4:	dd000817 	ldw	r20,32(sp)
 4008da8:	d8800617 	ldw	r2,24(sp)
 4008dac:	d8c00817 	ldw	r3,32(sp)
 4008db0:	01400044 	movi	r5,1
 4008db4:	e009883a 	mov	r4,fp
 4008db8:	1887883a 	add	r3,r3,r2
 4008dbc:	d8c00815 	stw	r3,32(sp)
 4008dc0:	b0ad883a 	add	r22,r22,r2
 4008dc4:	400bee80 	call	400bee8 <__i2b>
 4008dc8:	1023883a 	mov	r17,r2
 4008dcc:	a0000826 	beq	r20,zero,4008df0 <_dtoa_r+0xa0c>
 4008dd0:	0580070e 	bge	zero,r22,4008df0 <_dtoa_r+0xa0c>
 4008dd4:	a005883a 	mov	r2,r20
 4008dd8:	b500b916 	blt	r22,r20,40090c0 <_dtoa_r+0xcdc>
 4008ddc:	d9000817 	ldw	r4,32(sp)
 4008de0:	a0a9c83a 	sub	r20,r20,r2
 4008de4:	b0adc83a 	sub	r22,r22,r2
 4008de8:	2089c83a 	sub	r4,r4,r2
 4008dec:	d9000815 	stw	r4,32(sp)
 4008df0:	d9800a17 	ldw	r6,40(sp)
 4008df4:	0181810e 	bge	zero,r6,40093fc <_dtoa_r+0x1018>
 4008df8:	d9c00b17 	ldw	r7,44(sp)
 4008dfc:	3800b326 	beq	r7,zero,40090cc <_dtoa_r+0xce8>
 4008e00:	a800b226 	beq	r21,zero,40090cc <_dtoa_r+0xce8>
 4008e04:	880b883a 	mov	r5,r17
 4008e08:	a80d883a 	mov	r6,r21
 4008e0c:	e009883a 	mov	r4,fp
 4008e10:	400c11c0 	call	400c11c <__pow5mult>
 4008e14:	d9800917 	ldw	r6,36(sp)
 4008e18:	100b883a 	mov	r5,r2
 4008e1c:	e009883a 	mov	r4,fp
 4008e20:	1023883a 	mov	r17,r2
 4008e24:	400bf240 	call	400bf24 <__multiply>
 4008e28:	1021883a 	mov	r16,r2
 4008e2c:	d8800a17 	ldw	r2,40(sp)
 4008e30:	d9400917 	ldw	r5,36(sp)
 4008e34:	e009883a 	mov	r4,fp
 4008e38:	1545c83a 	sub	r2,r2,r21
 4008e3c:	d8800a15 	stw	r2,40(sp)
 4008e40:	400bb840 	call	400bb84 <_Bfree>
 4008e44:	d8c00a17 	ldw	r3,40(sp)
 4008e48:	18009f1e 	bne	r3,zero,40090c8 <_dtoa_r+0xce4>
 4008e4c:	05c00044 	movi	r23,1
 4008e50:	e009883a 	mov	r4,fp
 4008e54:	b80b883a 	mov	r5,r23
 4008e58:	400bee80 	call	400bee8 <__i2b>
 4008e5c:	d9000d17 	ldw	r4,52(sp)
 4008e60:	102b883a 	mov	r21,r2
 4008e64:	2000ce26 	beq	r4,zero,40091a0 <_dtoa_r+0xdbc>
 4008e68:	200d883a 	mov	r6,r4
 4008e6c:	100b883a 	mov	r5,r2
 4008e70:	e009883a 	mov	r4,fp
 4008e74:	400c11c0 	call	400c11c <__pow5mult>
 4008e78:	d9800317 	ldw	r6,12(sp)
 4008e7c:	102b883a 	mov	r21,r2
 4008e80:	b981810e 	bge	r23,r6,4009488 <_dtoa_r+0x10a4>
 4008e84:	0027883a 	mov	r19,zero
 4008e88:	a8800417 	ldw	r2,16(r21)
 4008e8c:	05c00804 	movi	r23,32
 4008e90:	10800104 	addi	r2,r2,4
 4008e94:	1085883a 	add	r2,r2,r2
 4008e98:	1085883a 	add	r2,r2,r2
 4008e9c:	a885883a 	add	r2,r21,r2
 4008ea0:	11000017 	ldw	r4,0(r2)
 4008ea4:	400bdd00 	call	400bdd0 <__hi0bits>
 4008ea8:	b885c83a 	sub	r2,r23,r2
 4008eac:	1585883a 	add	r2,r2,r22
 4008eb0:	108007cc 	andi	r2,r2,31
 4008eb4:	1000b326 	beq	r2,zero,4009184 <_dtoa_r+0xda0>
 4008eb8:	00c00804 	movi	r3,32
 4008ebc:	1887c83a 	sub	r3,r3,r2
 4008ec0:	01000104 	movi	r4,4
 4008ec4:	20c2cd0e 	bge	r4,r3,40099fc <_dtoa_r+0x1618>
 4008ec8:	00c00704 	movi	r3,28
 4008ecc:	1885c83a 	sub	r2,r3,r2
 4008ed0:	d8c00817 	ldw	r3,32(sp)
 4008ed4:	a0a9883a 	add	r20,r20,r2
 4008ed8:	b0ad883a 	add	r22,r22,r2
 4008edc:	1887883a 	add	r3,r3,r2
 4008ee0:	d8c00815 	stw	r3,32(sp)
 4008ee4:	d9800817 	ldw	r6,32(sp)
 4008ee8:	0180040e 	bge	zero,r6,4008efc <_dtoa_r+0xb18>
 4008eec:	800b883a 	mov	r5,r16
 4008ef0:	e009883a 	mov	r4,fp
 4008ef4:	400c25c0 	call	400c25c <__lshift>
 4008ef8:	1021883a 	mov	r16,r2
 4008efc:	0580050e 	bge	zero,r22,4008f14 <_dtoa_r+0xb30>
 4008f00:	a80b883a 	mov	r5,r21
 4008f04:	b00d883a 	mov	r6,r22
 4008f08:	e009883a 	mov	r4,fp
 4008f0c:	400c25c0 	call	400c25c <__lshift>
 4008f10:	102b883a 	mov	r21,r2
 4008f14:	d9c00e17 	ldw	r7,56(sp)
 4008f18:	3801211e 	bne	r7,zero,40093a0 <_dtoa_r+0xfbc>
 4008f1c:	d9800617 	ldw	r6,24(sp)
 4008f20:	0181380e 	bge	zero,r6,4009404 <_dtoa_r+0x1020>
 4008f24:	d8c00b17 	ldw	r3,44(sp)
 4008f28:	1800ab1e 	bne	r3,zero,40091d8 <_dtoa_r+0xdf4>
 4008f2c:	dc800717 	ldw	r18,28(sp)
 4008f30:	dcc00617 	ldw	r19,24(sp)
 4008f34:	9029883a 	mov	r20,r18
 4008f38:	00000206 	br	4008f44 <_dtoa_r+0xb60>
 4008f3c:	400bbac0 	call	400bbac <__multadd>
 4008f40:	1021883a 	mov	r16,r2
 4008f44:	a80b883a 	mov	r5,r21
 4008f48:	8009883a 	mov	r4,r16
 4008f4c:	40081e40 	call	40081e4 <quorem>
 4008f50:	10800c04 	addi	r2,r2,48
 4008f54:	90800005 	stb	r2,0(r18)
 4008f58:	94800044 	addi	r18,r18,1
 4008f5c:	9507c83a 	sub	r3,r18,r20
 4008f60:	000f883a 	mov	r7,zero
 4008f64:	01800284 	movi	r6,10
 4008f68:	800b883a 	mov	r5,r16
 4008f6c:	e009883a 	mov	r4,fp
 4008f70:	1cfff216 	blt	r3,r19,4008f3c <__alt_data_end+0xfc008f3c>
 4008f74:	1011883a 	mov	r8,r2
 4008f78:	d8800617 	ldw	r2,24(sp)
 4008f7c:	0082370e 	bge	zero,r2,400985c <_dtoa_r+0x1478>
 4008f80:	d9000717 	ldw	r4,28(sp)
 4008f84:	0025883a 	mov	r18,zero
 4008f88:	20af883a 	add	r23,r4,r2
 4008f8c:	01800044 	movi	r6,1
 4008f90:	800b883a 	mov	r5,r16
 4008f94:	e009883a 	mov	r4,fp
 4008f98:	da001715 	stw	r8,92(sp)
 4008f9c:	400c25c0 	call	400c25c <__lshift>
 4008fa0:	a80b883a 	mov	r5,r21
 4008fa4:	1009883a 	mov	r4,r2
 4008fa8:	d8800915 	stw	r2,36(sp)
 4008fac:	400c3a40 	call	400c3a4 <__mcmp>
 4008fb0:	da001717 	ldw	r8,92(sp)
 4008fb4:	0081800e 	bge	zero,r2,40095b8 <_dtoa_r+0x11d4>
 4008fb8:	b93fffc3 	ldbu	r4,-1(r23)
 4008fbc:	b8bfffc4 	addi	r2,r23,-1
 4008fc0:	1007883a 	mov	r3,r2
 4008fc4:	01800e44 	movi	r6,57
 4008fc8:	d9c00717 	ldw	r7,28(sp)
 4008fcc:	00000506 	br	4008fe4 <_dtoa_r+0xc00>
 4008fd0:	18ffffc4 	addi	r3,r3,-1
 4008fd4:	11c12326 	beq	r2,r7,4009464 <_dtoa_r+0x1080>
 4008fd8:	19000003 	ldbu	r4,0(r3)
 4008fdc:	102f883a 	mov	r23,r2
 4008fe0:	10bfffc4 	addi	r2,r2,-1
 4008fe4:	21403fcc 	andi	r5,r4,255
 4008fe8:	2940201c 	xori	r5,r5,128
 4008fec:	297fe004 	addi	r5,r5,-128
 4008ff0:	29bff726 	beq	r5,r6,4008fd0 <__alt_data_end+0xfc008fd0>
 4008ff4:	21000044 	addi	r4,r4,1
 4008ff8:	11000005 	stb	r4,0(r2)
 4008ffc:	a80b883a 	mov	r5,r21
 4009000:	e009883a 	mov	r4,fp
 4009004:	400bb840 	call	400bb84 <_Bfree>
 4009008:	883ea026 	beq	r17,zero,4008a8c <__alt_data_end+0xfc008a8c>
 400900c:	90000426 	beq	r18,zero,4009020 <_dtoa_r+0xc3c>
 4009010:	94400326 	beq	r18,r17,4009020 <_dtoa_r+0xc3c>
 4009014:	900b883a 	mov	r5,r18
 4009018:	e009883a 	mov	r4,fp
 400901c:	400bb840 	call	400bb84 <_Bfree>
 4009020:	880b883a 	mov	r5,r17
 4009024:	e009883a 	mov	r4,fp
 4009028:	400bb840 	call	400bb84 <_Bfree>
 400902c:	003e9706 	br	4008a8c <__alt_data_end+0xfc008a8c>
 4009030:	01800044 	movi	r6,1
 4009034:	d9800e15 	stw	r6,56(sp)
 4009038:	003d9606 	br	4008694 <__alt_data_end+0xfc008694>
 400903c:	d8800817 	ldw	r2,32(sp)
 4009040:	d8c00517 	ldw	r3,20(sp)
 4009044:	d8000d15 	stw	zero,52(sp)
 4009048:	10c5c83a 	sub	r2,r2,r3
 400904c:	00c9c83a 	sub	r4,zero,r3
 4009050:	d8800815 	stw	r2,32(sp)
 4009054:	d9000a15 	stw	r4,40(sp)
 4009058:	003d9706 	br	40086b8 <__alt_data_end+0xfc0086b8>
 400905c:	05adc83a 	sub	r22,zero,r22
 4009060:	dd800815 	stw	r22,32(sp)
 4009064:	002d883a 	mov	r22,zero
 4009068:	003d8e06 	br	40086a4 <__alt_data_end+0xfc0086a4>
 400906c:	d9000517 	ldw	r4,20(sp)
 4009070:	40054e00 	call	40054e0 <__floatsidf>
 4009074:	100d883a 	mov	r6,r2
 4009078:	180f883a 	mov	r7,r3
 400907c:	a009883a 	mov	r4,r20
 4009080:	880b883a 	mov	r5,r17
 4009084:	40041f40 	call	40041f4 <__eqdf2>
 4009088:	103d7126 	beq	r2,zero,4008650 <__alt_data_end+0xfc008650>
 400908c:	d9c00517 	ldw	r7,20(sp)
 4009090:	39ffffc4 	addi	r7,r7,-1
 4009094:	d9c00515 	stw	r7,20(sp)
 4009098:	003d6d06 	br	4008650 <__alt_data_end+0xfc008650>
 400909c:	dd400a17 	ldw	r21,40(sp)
 40090a0:	dd000817 	ldw	r20,32(sp)
 40090a4:	0023883a 	mov	r17,zero
 40090a8:	003f4806 	br	4008dcc <__alt_data_end+0xfc008dcc>
 40090ac:	10e3c83a 	sub	r17,r2,r3
 40090b0:	9448983a 	sll	r4,r18,r17
 40090b4:	003d3206 	br	4008580 <__alt_data_end+0xfc008580>
 40090b8:	d8000e15 	stw	zero,56(sp)
 40090bc:	003d7506 	br	4008694 <__alt_data_end+0xfc008694>
 40090c0:	b005883a 	mov	r2,r22
 40090c4:	003f4506 	br	4008ddc <__alt_data_end+0xfc008ddc>
 40090c8:	dc000915 	stw	r16,36(sp)
 40090cc:	d9800a17 	ldw	r6,40(sp)
 40090d0:	d9400917 	ldw	r5,36(sp)
 40090d4:	e009883a 	mov	r4,fp
 40090d8:	400c11c0 	call	400c11c <__pow5mult>
 40090dc:	1021883a 	mov	r16,r2
 40090e0:	003f5a06 	br	4008e4c <__alt_data_end+0xfc008e4c>
 40090e4:	01c00044 	movi	r7,1
 40090e8:	d9c00b15 	stw	r7,44(sp)
 40090ec:	d8802217 	ldw	r2,136(sp)
 40090f0:	0081280e 	bge	zero,r2,4009594 <_dtoa_r+0x11b0>
 40090f4:	100d883a 	mov	r6,r2
 40090f8:	1021883a 	mov	r16,r2
 40090fc:	d8800c15 	stw	r2,48(sp)
 4009100:	d8800615 	stw	r2,24(sp)
 4009104:	003d8806 	br	4008728 <__alt_data_end+0xfc008728>
 4009108:	d8800617 	ldw	r2,24(sp)
 400910c:	00be9b16 	blt	zero,r2,4008b7c <__alt_data_end+0xfc008b7c>
 4009110:	10010f1e 	bne	r2,zero,4009550 <_dtoa_r+0x116c>
 4009114:	880b883a 	mov	r5,r17
 4009118:	000d883a 	mov	r6,zero
 400911c:	01d00534 	movhi	r7,16404
 4009120:	8009883a 	mov	r4,r16
 4009124:	400444c0 	call	400444c <__muldf3>
 4009128:	900d883a 	mov	r6,r18
 400912c:	980f883a 	mov	r7,r19
 4009130:	1009883a 	mov	r4,r2
 4009134:	180b883a 	mov	r5,r3
 4009138:	400427c0 	call	400427c <__gedf2>
 400913c:	002b883a 	mov	r21,zero
 4009140:	0023883a 	mov	r17,zero
 4009144:	1000bf16 	blt	r2,zero,4009444 <_dtoa_r+0x1060>
 4009148:	d9802217 	ldw	r6,136(sp)
 400914c:	ddc00717 	ldw	r23,28(sp)
 4009150:	018c303a 	nor	r6,zero,r6
 4009154:	d9800515 	stw	r6,20(sp)
 4009158:	a80b883a 	mov	r5,r21
 400915c:	e009883a 	mov	r4,fp
 4009160:	400bb840 	call	400bb84 <_Bfree>
 4009164:	883e4926 	beq	r17,zero,4008a8c <__alt_data_end+0xfc008a8c>
 4009168:	003fad06 	br	4009020 <__alt_data_end+0xfc009020>
 400916c:	d9c01117 	ldw	r7,68(sp)
 4009170:	3801bc26 	beq	r7,zero,4009864 <_dtoa_r+0x1480>
 4009174:	10810cc4 	addi	r2,r2,1075
 4009178:	dd400a17 	ldw	r21,40(sp)
 400917c:	dd000817 	ldw	r20,32(sp)
 4009180:	003f0a06 	br	4008dac <__alt_data_end+0xfc008dac>
 4009184:	00800704 	movi	r2,28
 4009188:	d9000817 	ldw	r4,32(sp)
 400918c:	a0a9883a 	add	r20,r20,r2
 4009190:	b0ad883a 	add	r22,r22,r2
 4009194:	2089883a 	add	r4,r4,r2
 4009198:	d9000815 	stw	r4,32(sp)
 400919c:	003f5106 	br	4008ee4 <__alt_data_end+0xfc008ee4>
 40091a0:	d8c00317 	ldw	r3,12(sp)
 40091a4:	b8c1fc0e 	bge	r23,r3,4009998 <_dtoa_r+0x15b4>
 40091a8:	0027883a 	mov	r19,zero
 40091ac:	b805883a 	mov	r2,r23
 40091b0:	003f3e06 	br	4008eac <__alt_data_end+0xfc008eac>
 40091b4:	880b883a 	mov	r5,r17
 40091b8:	e009883a 	mov	r4,fp
 40091bc:	000f883a 	mov	r7,zero
 40091c0:	01800284 	movi	r6,10
 40091c4:	400bbac0 	call	400bbac <__multadd>
 40091c8:	d9000c17 	ldw	r4,48(sp)
 40091cc:	1023883a 	mov	r17,r2
 40091d0:	0102040e 	bge	zero,r4,40099e4 <_dtoa_r+0x1600>
 40091d4:	d9000615 	stw	r4,24(sp)
 40091d8:	0500050e 	bge	zero,r20,40091f0 <_dtoa_r+0xe0c>
 40091dc:	880b883a 	mov	r5,r17
 40091e0:	a00d883a 	mov	r6,r20
 40091e4:	e009883a 	mov	r4,fp
 40091e8:	400c25c0 	call	400c25c <__lshift>
 40091ec:	1023883a 	mov	r17,r2
 40091f0:	9801241e 	bne	r19,zero,4009684 <_dtoa_r+0x12a0>
 40091f4:	8829883a 	mov	r20,r17
 40091f8:	d9000617 	ldw	r4,24(sp)
 40091fc:	dcc00717 	ldw	r19,28(sp)
 4009200:	9480004c 	andi	r18,r18,1
 4009204:	20bfffc4 	addi	r2,r4,-1
 4009208:	9885883a 	add	r2,r19,r2
 400920c:	d8800415 	stw	r2,16(sp)
 4009210:	dc800615 	stw	r18,24(sp)
 4009214:	a80b883a 	mov	r5,r21
 4009218:	8009883a 	mov	r4,r16
 400921c:	40081e40 	call	40081e4 <quorem>
 4009220:	880b883a 	mov	r5,r17
 4009224:	8009883a 	mov	r4,r16
 4009228:	102f883a 	mov	r23,r2
 400922c:	400c3a40 	call	400c3a4 <__mcmp>
 4009230:	a80b883a 	mov	r5,r21
 4009234:	a00d883a 	mov	r6,r20
 4009238:	e009883a 	mov	r4,fp
 400923c:	102d883a 	mov	r22,r2
 4009240:	400c4040 	call	400c404 <__mdiff>
 4009244:	1007883a 	mov	r3,r2
 4009248:	10800317 	ldw	r2,12(r2)
 400924c:	bc800c04 	addi	r18,r23,48
 4009250:	180b883a 	mov	r5,r3
 4009254:	10004e1e 	bne	r2,zero,4009390 <_dtoa_r+0xfac>
 4009258:	8009883a 	mov	r4,r16
 400925c:	d8c01615 	stw	r3,88(sp)
 4009260:	400c3a40 	call	400c3a4 <__mcmp>
 4009264:	d8c01617 	ldw	r3,88(sp)
 4009268:	e009883a 	mov	r4,fp
 400926c:	d8801615 	stw	r2,88(sp)
 4009270:	180b883a 	mov	r5,r3
 4009274:	400bb840 	call	400bb84 <_Bfree>
 4009278:	d8801617 	ldw	r2,88(sp)
 400927c:	1000041e 	bne	r2,zero,4009290 <_dtoa_r+0xeac>
 4009280:	d9800317 	ldw	r6,12(sp)
 4009284:	3000021e 	bne	r6,zero,4009290 <_dtoa_r+0xeac>
 4009288:	d8c00617 	ldw	r3,24(sp)
 400928c:	18003726 	beq	r3,zero,400936c <_dtoa_r+0xf88>
 4009290:	b0002016 	blt	r22,zero,4009314 <_dtoa_r+0xf30>
 4009294:	b000041e 	bne	r22,zero,40092a8 <_dtoa_r+0xec4>
 4009298:	d9000317 	ldw	r4,12(sp)
 400929c:	2000021e 	bne	r4,zero,40092a8 <_dtoa_r+0xec4>
 40092a0:	d8c00617 	ldw	r3,24(sp)
 40092a4:	18001b26 	beq	r3,zero,4009314 <_dtoa_r+0xf30>
 40092a8:	00810716 	blt	zero,r2,40096c8 <_dtoa_r+0x12e4>
 40092ac:	d8c00417 	ldw	r3,16(sp)
 40092b0:	9d800044 	addi	r22,r19,1
 40092b4:	9c800005 	stb	r18,0(r19)
 40092b8:	b02f883a 	mov	r23,r22
 40092bc:	98c10626 	beq	r19,r3,40096d8 <_dtoa_r+0x12f4>
 40092c0:	800b883a 	mov	r5,r16
 40092c4:	000f883a 	mov	r7,zero
 40092c8:	01800284 	movi	r6,10
 40092cc:	e009883a 	mov	r4,fp
 40092d0:	400bbac0 	call	400bbac <__multadd>
 40092d4:	1021883a 	mov	r16,r2
 40092d8:	000f883a 	mov	r7,zero
 40092dc:	01800284 	movi	r6,10
 40092e0:	880b883a 	mov	r5,r17
 40092e4:	e009883a 	mov	r4,fp
 40092e8:	8d002526 	beq	r17,r20,4009380 <_dtoa_r+0xf9c>
 40092ec:	400bbac0 	call	400bbac <__multadd>
 40092f0:	a00b883a 	mov	r5,r20
 40092f4:	000f883a 	mov	r7,zero
 40092f8:	01800284 	movi	r6,10
 40092fc:	e009883a 	mov	r4,fp
 4009300:	1023883a 	mov	r17,r2
 4009304:	400bbac0 	call	400bbac <__multadd>
 4009308:	1029883a 	mov	r20,r2
 400930c:	b027883a 	mov	r19,r22
 4009310:	003fc006 	br	4009214 <__alt_data_end+0xfc009214>
 4009314:	9011883a 	mov	r8,r18
 4009318:	00800e0e 	bge	zero,r2,4009354 <_dtoa_r+0xf70>
 400931c:	800b883a 	mov	r5,r16
 4009320:	01800044 	movi	r6,1
 4009324:	e009883a 	mov	r4,fp
 4009328:	da001715 	stw	r8,92(sp)
 400932c:	400c25c0 	call	400c25c <__lshift>
 4009330:	a80b883a 	mov	r5,r21
 4009334:	1009883a 	mov	r4,r2
 4009338:	1021883a 	mov	r16,r2
 400933c:	400c3a40 	call	400c3a4 <__mcmp>
 4009340:	da001717 	ldw	r8,92(sp)
 4009344:	0081960e 	bge	zero,r2,40099a0 <_dtoa_r+0x15bc>
 4009348:	00800e44 	movi	r2,57
 400934c:	40817026 	beq	r8,r2,4009910 <_dtoa_r+0x152c>
 4009350:	ba000c44 	addi	r8,r23,49
 4009354:	8825883a 	mov	r18,r17
 4009358:	9dc00044 	addi	r23,r19,1
 400935c:	9a000005 	stb	r8,0(r19)
 4009360:	a023883a 	mov	r17,r20
 4009364:	dc000915 	stw	r16,36(sp)
 4009368:	003f2406 	br	4008ffc <__alt_data_end+0xfc008ffc>
 400936c:	00800e44 	movi	r2,57
 4009370:	9011883a 	mov	r8,r18
 4009374:	90816626 	beq	r18,r2,4009910 <_dtoa_r+0x152c>
 4009378:	05bff516 	blt	zero,r22,4009350 <__alt_data_end+0xfc009350>
 400937c:	003ff506 	br	4009354 <__alt_data_end+0xfc009354>
 4009380:	400bbac0 	call	400bbac <__multadd>
 4009384:	1023883a 	mov	r17,r2
 4009388:	1029883a 	mov	r20,r2
 400938c:	003fdf06 	br	400930c <__alt_data_end+0xfc00930c>
 4009390:	e009883a 	mov	r4,fp
 4009394:	400bb840 	call	400bb84 <_Bfree>
 4009398:	00800044 	movi	r2,1
 400939c:	003fbc06 	br	4009290 <__alt_data_end+0xfc009290>
 40093a0:	a80b883a 	mov	r5,r21
 40093a4:	8009883a 	mov	r4,r16
 40093a8:	400c3a40 	call	400c3a4 <__mcmp>
 40093ac:	103edb0e 	bge	r2,zero,4008f1c <__alt_data_end+0xfc008f1c>
 40093b0:	800b883a 	mov	r5,r16
 40093b4:	000f883a 	mov	r7,zero
 40093b8:	01800284 	movi	r6,10
 40093bc:	e009883a 	mov	r4,fp
 40093c0:	400bbac0 	call	400bbac <__multadd>
 40093c4:	1021883a 	mov	r16,r2
 40093c8:	d8800517 	ldw	r2,20(sp)
 40093cc:	d8c00b17 	ldw	r3,44(sp)
 40093d0:	10bfffc4 	addi	r2,r2,-1
 40093d4:	d8800515 	stw	r2,20(sp)
 40093d8:	183f761e 	bne	r3,zero,40091b4 <__alt_data_end+0xfc0091b4>
 40093dc:	d9000c17 	ldw	r4,48(sp)
 40093e0:	0101730e 	bge	zero,r4,40099b0 <_dtoa_r+0x15cc>
 40093e4:	d9000615 	stw	r4,24(sp)
 40093e8:	003ed006 	br	4008f2c <__alt_data_end+0xfc008f2c>
 40093ec:	00800084 	movi	r2,2
 40093f0:	3081861e 	bne	r6,r2,4009a0c <_dtoa_r+0x1628>
 40093f4:	d8000b15 	stw	zero,44(sp)
 40093f8:	003f3c06 	br	40090ec <__alt_data_end+0xfc0090ec>
 40093fc:	dc000917 	ldw	r16,36(sp)
 4009400:	003e9206 	br	4008e4c <__alt_data_end+0xfc008e4c>
 4009404:	d9c00317 	ldw	r7,12(sp)
 4009408:	00800084 	movi	r2,2
 400940c:	11fec50e 	bge	r2,r7,4008f24 <__alt_data_end+0xfc008f24>
 4009410:	d9000617 	ldw	r4,24(sp)
 4009414:	20013c1e 	bne	r4,zero,4009908 <_dtoa_r+0x1524>
 4009418:	a80b883a 	mov	r5,r21
 400941c:	000f883a 	mov	r7,zero
 4009420:	01800144 	movi	r6,5
 4009424:	e009883a 	mov	r4,fp
 4009428:	400bbac0 	call	400bbac <__multadd>
 400942c:	100b883a 	mov	r5,r2
 4009430:	8009883a 	mov	r4,r16
 4009434:	102b883a 	mov	r21,r2
 4009438:	400c3a40 	call	400c3a4 <__mcmp>
 400943c:	dc000915 	stw	r16,36(sp)
 4009440:	00bf410e 	bge	zero,r2,4009148 <__alt_data_end+0xfc009148>
 4009444:	d9c00717 	ldw	r7,28(sp)
 4009448:	00800c44 	movi	r2,49
 400944c:	38800005 	stb	r2,0(r7)
 4009450:	d8800517 	ldw	r2,20(sp)
 4009454:	3dc00044 	addi	r23,r7,1
 4009458:	10800044 	addi	r2,r2,1
 400945c:	d8800515 	stw	r2,20(sp)
 4009460:	003f3d06 	br	4009158 <__alt_data_end+0xfc009158>
 4009464:	d9800517 	ldw	r6,20(sp)
 4009468:	d9c00717 	ldw	r7,28(sp)
 400946c:	00800c44 	movi	r2,49
 4009470:	31800044 	addi	r6,r6,1
 4009474:	d9800515 	stw	r6,20(sp)
 4009478:	38800005 	stb	r2,0(r7)
 400947c:	003edf06 	br	4008ffc <__alt_data_end+0xfc008ffc>
 4009480:	d8000b15 	stw	zero,44(sp)
 4009484:	003c9f06 	br	4008704 <__alt_data_end+0xfc008704>
 4009488:	903e7e1e 	bne	r18,zero,4008e84 <__alt_data_end+0xfc008e84>
 400948c:	00800434 	movhi	r2,16
 4009490:	10bfffc4 	addi	r2,r2,-1
 4009494:	9884703a 	and	r2,r19,r2
 4009498:	1000ea1e 	bne	r2,zero,4009844 <_dtoa_r+0x1460>
 400949c:	9cdffc2c 	andhi	r19,r19,32752
 40094a0:	9800e826 	beq	r19,zero,4009844 <_dtoa_r+0x1460>
 40094a4:	d9c00817 	ldw	r7,32(sp)
 40094a8:	b5800044 	addi	r22,r22,1
 40094ac:	04c00044 	movi	r19,1
 40094b0:	39c00044 	addi	r7,r7,1
 40094b4:	d9c00815 	stw	r7,32(sp)
 40094b8:	d8800d17 	ldw	r2,52(sp)
 40094bc:	103e721e 	bne	r2,zero,4008e88 <__alt_data_end+0xfc008e88>
 40094c0:	00800044 	movi	r2,1
 40094c4:	003e7906 	br	4008eac <__alt_data_end+0xfc008eac>
 40094c8:	8009883a 	mov	r4,r16
 40094cc:	40054e00 	call	40054e0 <__floatsidf>
 40094d0:	d9800f17 	ldw	r6,60(sp)
 40094d4:	d9c01017 	ldw	r7,64(sp)
 40094d8:	1009883a 	mov	r4,r2
 40094dc:	180b883a 	mov	r5,r3
 40094e0:	400444c0 	call	400444c <__muldf3>
 40094e4:	000d883a 	mov	r6,zero
 40094e8:	01d00734 	movhi	r7,16412
 40094ec:	1009883a 	mov	r4,r2
 40094f0:	180b883a 	mov	r5,r3
 40094f4:	40030600 	call	4003060 <__adddf3>
 40094f8:	047f3034 	movhi	r17,64704
 40094fc:	1021883a 	mov	r16,r2
 4009500:	1c63883a 	add	r17,r3,r17
 4009504:	d9000f17 	ldw	r4,60(sp)
 4009508:	d9401017 	ldw	r5,64(sp)
 400950c:	000d883a 	mov	r6,zero
 4009510:	01d00534 	movhi	r7,16404
 4009514:	4004b640 	call	4004b64 <__subdf3>
 4009518:	800d883a 	mov	r6,r16
 400951c:	880f883a 	mov	r7,r17
 4009520:	1009883a 	mov	r4,r2
 4009524:	180b883a 	mov	r5,r3
 4009528:	102b883a 	mov	r21,r2
 400952c:	1829883a 	mov	r20,r3
 4009530:	400427c0 	call	400427c <__gedf2>
 4009534:	00806c16 	blt	zero,r2,40096e8 <_dtoa_r+0x1304>
 4009538:	89e0003c 	xorhi	r7,r17,32768
 400953c:	800d883a 	mov	r6,r16
 4009540:	a809883a 	mov	r4,r21
 4009544:	a00b883a 	mov	r5,r20
 4009548:	40043580 	call	4004358 <__ledf2>
 400954c:	103d7e0e 	bge	r2,zero,4008b48 <__alt_data_end+0xfc008b48>
 4009550:	002b883a 	mov	r21,zero
 4009554:	0023883a 	mov	r17,zero
 4009558:	003efb06 	br	4009148 <__alt_data_end+0xfc009148>
 400955c:	d8800717 	ldw	r2,28(sp)
 4009560:	003bd006 	br	40084a4 <__alt_data_end+0xfc0084a4>
 4009564:	d9000a17 	ldw	r4,40(sp)
 4009568:	d9800d17 	ldw	r6,52(sp)
 400956c:	dd400a15 	stw	r21,40(sp)
 4009570:	a905c83a 	sub	r2,r21,r4
 4009574:	308d883a 	add	r6,r6,r2
 4009578:	d9800d15 	stw	r6,52(sp)
 400957c:	002b883a 	mov	r21,zero
 4009580:	003e0606 	br	4008d9c <__alt_data_end+0xfc008d9c>
 4009584:	9023883a 	mov	r17,r18
 4009588:	9829883a 	mov	r20,r19
 400958c:	04000084 	movi	r16,2
 4009590:	003c9206 	br	40087dc <__alt_data_end+0xfc0087dc>
 4009594:	04000044 	movi	r16,1
 4009598:	dc000c15 	stw	r16,48(sp)
 400959c:	dc000615 	stw	r16,24(sp)
 40095a0:	dc002215 	stw	r16,136(sp)
 40095a4:	e0001115 	stw	zero,68(fp)
 40095a8:	000b883a 	mov	r5,zero
 40095ac:	003c6906 	br	4008754 <__alt_data_end+0xfc008754>
 40095b0:	3021883a 	mov	r16,r6
 40095b4:	003ffb06 	br	40095a4 <__alt_data_end+0xfc0095a4>
 40095b8:	1000021e 	bne	r2,zero,40095c4 <_dtoa_r+0x11e0>
 40095bc:	4200004c 	andi	r8,r8,1
 40095c0:	403e7d1e 	bne	r8,zero,4008fb8 <__alt_data_end+0xfc008fb8>
 40095c4:	01000c04 	movi	r4,48
 40095c8:	00000106 	br	40095d0 <_dtoa_r+0x11ec>
 40095cc:	102f883a 	mov	r23,r2
 40095d0:	b8bfffc4 	addi	r2,r23,-1
 40095d4:	10c00007 	ldb	r3,0(r2)
 40095d8:	193ffc26 	beq	r3,r4,40095cc <__alt_data_end+0xfc0095cc>
 40095dc:	003e8706 	br	4008ffc <__alt_data_end+0xfc008ffc>
 40095e0:	d8800517 	ldw	r2,20(sp)
 40095e4:	00a3c83a 	sub	r17,zero,r2
 40095e8:	8800a426 	beq	r17,zero,400987c <_dtoa_r+0x1498>
 40095ec:	888003cc 	andi	r2,r17,15
 40095f0:	100490fa 	slli	r2,r2,3
 40095f4:	00c10074 	movhi	r3,1025
 40095f8:	18cc0404 	addi	r3,r3,12304
 40095fc:	1885883a 	add	r2,r3,r2
 4009600:	11800017 	ldw	r6,0(r2)
 4009604:	11c00117 	ldw	r7,4(r2)
 4009608:	9009883a 	mov	r4,r18
 400960c:	980b883a 	mov	r5,r19
 4009610:	8823d13a 	srai	r17,r17,4
 4009614:	400444c0 	call	400444c <__muldf3>
 4009618:	d8800f15 	stw	r2,60(sp)
 400961c:	d8c01015 	stw	r3,64(sp)
 4009620:	8800e826 	beq	r17,zero,40099c4 <_dtoa_r+0x15e0>
 4009624:	05010074 	movhi	r20,1025
 4009628:	a50bfa04 	addi	r20,r20,12264
 400962c:	04000084 	movi	r16,2
 4009630:	8980004c 	andi	r6,r17,1
 4009634:	1009883a 	mov	r4,r2
 4009638:	8823d07a 	srai	r17,r17,1
 400963c:	180b883a 	mov	r5,r3
 4009640:	30000426 	beq	r6,zero,4009654 <_dtoa_r+0x1270>
 4009644:	a1800017 	ldw	r6,0(r20)
 4009648:	a1c00117 	ldw	r7,4(r20)
 400964c:	84000044 	addi	r16,r16,1
 4009650:	400444c0 	call	400444c <__muldf3>
 4009654:	a5000204 	addi	r20,r20,8
 4009658:	883ff51e 	bne	r17,zero,4009630 <__alt_data_end+0xfc009630>
 400965c:	d8800f15 	stw	r2,60(sp)
 4009660:	d8c01015 	stw	r3,64(sp)
 4009664:	003c7606 	br	4008840 <__alt_data_end+0xfc008840>
 4009668:	00c00c04 	movi	r3,48
 400966c:	10c00005 	stb	r3,0(r2)
 4009670:	d8c00517 	ldw	r3,20(sp)
 4009674:	bd3fffc3 	ldbu	r20,-1(r23)
 4009678:	18c00044 	addi	r3,r3,1
 400967c:	d8c00515 	stw	r3,20(sp)
 4009680:	003db906 	br	4008d68 <__alt_data_end+0xfc008d68>
 4009684:	89400117 	ldw	r5,4(r17)
 4009688:	e009883a 	mov	r4,fp
 400968c:	400badc0 	call	400badc <_Balloc>
 4009690:	89800417 	ldw	r6,16(r17)
 4009694:	89400304 	addi	r5,r17,12
 4009698:	11000304 	addi	r4,r2,12
 400969c:	31800084 	addi	r6,r6,2
 40096a0:	318d883a 	add	r6,r6,r6
 40096a4:	318d883a 	add	r6,r6,r6
 40096a8:	1027883a 	mov	r19,r2
 40096ac:	400b7100 	call	400b710 <memcpy>
 40096b0:	01800044 	movi	r6,1
 40096b4:	980b883a 	mov	r5,r19
 40096b8:	e009883a 	mov	r4,fp
 40096bc:	400c25c0 	call	400c25c <__lshift>
 40096c0:	1029883a 	mov	r20,r2
 40096c4:	003ecc06 	br	40091f8 <__alt_data_end+0xfc0091f8>
 40096c8:	00800e44 	movi	r2,57
 40096cc:	90809026 	beq	r18,r2,4009910 <_dtoa_r+0x152c>
 40096d0:	92000044 	addi	r8,r18,1
 40096d4:	003f1f06 	br	4009354 <__alt_data_end+0xfc009354>
 40096d8:	9011883a 	mov	r8,r18
 40096dc:	8825883a 	mov	r18,r17
 40096e0:	a023883a 	mov	r17,r20
 40096e4:	003e2906 	br	4008f8c <__alt_data_end+0xfc008f8c>
 40096e8:	002b883a 	mov	r21,zero
 40096ec:	0023883a 	mov	r17,zero
 40096f0:	003f5406 	br	4009444 <__alt_data_end+0xfc009444>
 40096f4:	61bfffc4 	addi	r6,r12,-1
 40096f8:	300490fa 	slli	r2,r6,3
 40096fc:	00c10074 	movhi	r3,1025
 4009700:	18cc0404 	addi	r3,r3,12304
 4009704:	1885883a 	add	r2,r3,r2
 4009708:	11000017 	ldw	r4,0(r2)
 400970c:	11400117 	ldw	r5,4(r2)
 4009710:	d8800717 	ldw	r2,28(sp)
 4009714:	880f883a 	mov	r7,r17
 4009718:	d9801215 	stw	r6,72(sp)
 400971c:	800d883a 	mov	r6,r16
 4009720:	db001615 	stw	r12,88(sp)
 4009724:	15c00044 	addi	r23,r2,1
 4009728:	400444c0 	call	400444c <__muldf3>
 400972c:	d9401017 	ldw	r5,64(sp)
 4009730:	d9000f17 	ldw	r4,60(sp)
 4009734:	d8c01515 	stw	r3,84(sp)
 4009738:	d8801415 	stw	r2,80(sp)
 400973c:	40054600 	call	4005460 <__fixdfsi>
 4009740:	1009883a 	mov	r4,r2
 4009744:	1021883a 	mov	r16,r2
 4009748:	40054e00 	call	40054e0 <__floatsidf>
 400974c:	d9000f17 	ldw	r4,60(sp)
 4009750:	d9401017 	ldw	r5,64(sp)
 4009754:	100d883a 	mov	r6,r2
 4009758:	180f883a 	mov	r7,r3
 400975c:	4004b640 	call	4004b64 <__subdf3>
 4009760:	1829883a 	mov	r20,r3
 4009764:	d8c00717 	ldw	r3,28(sp)
 4009768:	84000c04 	addi	r16,r16,48
 400976c:	1023883a 	mov	r17,r2
 4009770:	1c000005 	stb	r16,0(r3)
 4009774:	db001617 	ldw	r12,88(sp)
 4009778:	00800044 	movi	r2,1
 400977c:	60802226 	beq	r12,r2,4009808 <_dtoa_r+0x1424>
 4009780:	d9c00717 	ldw	r7,28(sp)
 4009784:	8805883a 	mov	r2,r17
 4009788:	b82b883a 	mov	r21,r23
 400978c:	3b19883a 	add	r12,r7,r12
 4009790:	6023883a 	mov	r17,r12
 4009794:	a007883a 	mov	r3,r20
 4009798:	dc800f15 	stw	r18,60(sp)
 400979c:	000d883a 	mov	r6,zero
 40097a0:	01d00934 	movhi	r7,16420
 40097a4:	1009883a 	mov	r4,r2
 40097a8:	180b883a 	mov	r5,r3
 40097ac:	400444c0 	call	400444c <__muldf3>
 40097b0:	180b883a 	mov	r5,r3
 40097b4:	1009883a 	mov	r4,r2
 40097b8:	1829883a 	mov	r20,r3
 40097bc:	1025883a 	mov	r18,r2
 40097c0:	40054600 	call	4005460 <__fixdfsi>
 40097c4:	1009883a 	mov	r4,r2
 40097c8:	1021883a 	mov	r16,r2
 40097cc:	40054e00 	call	40054e0 <__floatsidf>
 40097d0:	100d883a 	mov	r6,r2
 40097d4:	180f883a 	mov	r7,r3
 40097d8:	9009883a 	mov	r4,r18
 40097dc:	a00b883a 	mov	r5,r20
 40097e0:	84000c04 	addi	r16,r16,48
 40097e4:	4004b640 	call	4004b64 <__subdf3>
 40097e8:	ad400044 	addi	r21,r21,1
 40097ec:	ac3fffc5 	stb	r16,-1(r21)
 40097f0:	ac7fea1e 	bne	r21,r17,400979c <__alt_data_end+0xfc00979c>
 40097f4:	1023883a 	mov	r17,r2
 40097f8:	d8801217 	ldw	r2,72(sp)
 40097fc:	dc800f17 	ldw	r18,60(sp)
 4009800:	1829883a 	mov	r20,r3
 4009804:	b8af883a 	add	r23,r23,r2
 4009808:	d9001417 	ldw	r4,80(sp)
 400980c:	d9401517 	ldw	r5,84(sp)
 4009810:	000d883a 	mov	r6,zero
 4009814:	01cff834 	movhi	r7,16352
 4009818:	40030600 	call	4003060 <__adddf3>
 400981c:	880d883a 	mov	r6,r17
 4009820:	a00f883a 	mov	r7,r20
 4009824:	1009883a 	mov	r4,r2
 4009828:	180b883a 	mov	r5,r3
 400982c:	40043580 	call	4004358 <__ledf2>
 4009830:	10003e0e 	bge	r2,zero,400992c <_dtoa_r+0x1548>
 4009834:	d9001317 	ldw	r4,76(sp)
 4009838:	bd3fffc3 	ldbu	r20,-1(r23)
 400983c:	d9000515 	stw	r4,20(sp)
 4009840:	003d3b06 	br	4008d30 <__alt_data_end+0xfc008d30>
 4009844:	0027883a 	mov	r19,zero
 4009848:	003f1b06 	br	40094b8 <__alt_data_end+0xfc0094b8>
 400984c:	d8800817 	ldw	r2,32(sp)
 4009850:	11e9c83a 	sub	r20,r2,r7
 4009854:	0005883a 	mov	r2,zero
 4009858:	003d5406 	br	4008dac <__alt_data_end+0xfc008dac>
 400985c:	00800044 	movi	r2,1
 4009860:	003dc706 	br	4008f80 <__alt_data_end+0xfc008f80>
 4009864:	d8c00217 	ldw	r3,8(sp)
 4009868:	00800d84 	movi	r2,54
 400986c:	dd400a17 	ldw	r21,40(sp)
 4009870:	10c5c83a 	sub	r2,r2,r3
 4009874:	dd000817 	ldw	r20,32(sp)
 4009878:	003d4c06 	br	4008dac <__alt_data_end+0xfc008dac>
 400987c:	dc800f15 	stw	r18,60(sp)
 4009880:	dcc01015 	stw	r19,64(sp)
 4009884:	04000084 	movi	r16,2
 4009888:	003bed06 	br	4008840 <__alt_data_end+0xfc008840>
 400988c:	d9000617 	ldw	r4,24(sp)
 4009890:	203f0d26 	beq	r4,zero,40094c8 <__alt_data_end+0xfc0094c8>
 4009894:	d9800c17 	ldw	r6,48(sp)
 4009898:	01bcab0e 	bge	zero,r6,4008b48 <__alt_data_end+0xfc008b48>
 400989c:	d9401017 	ldw	r5,64(sp)
 40098a0:	d9000f17 	ldw	r4,60(sp)
 40098a4:	000d883a 	mov	r6,zero
 40098a8:	01d00934 	movhi	r7,16420
 40098ac:	400444c0 	call	400444c <__muldf3>
 40098b0:	81000044 	addi	r4,r16,1
 40098b4:	d8800f15 	stw	r2,60(sp)
 40098b8:	d8c01015 	stw	r3,64(sp)
 40098bc:	40054e00 	call	40054e0 <__floatsidf>
 40098c0:	d9800f17 	ldw	r6,60(sp)
 40098c4:	d9c01017 	ldw	r7,64(sp)
 40098c8:	1009883a 	mov	r4,r2
 40098cc:	180b883a 	mov	r5,r3
 40098d0:	400444c0 	call	400444c <__muldf3>
 40098d4:	01d00734 	movhi	r7,16412
 40098d8:	000d883a 	mov	r6,zero
 40098dc:	1009883a 	mov	r4,r2
 40098e0:	180b883a 	mov	r5,r3
 40098e4:	40030600 	call	4003060 <__adddf3>
 40098e8:	d9c00517 	ldw	r7,20(sp)
 40098ec:	047f3034 	movhi	r17,64704
 40098f0:	1021883a 	mov	r16,r2
 40098f4:	39ffffc4 	addi	r7,r7,-1
 40098f8:	d9c01315 	stw	r7,76(sp)
 40098fc:	1c63883a 	add	r17,r3,r17
 4009900:	db000c17 	ldw	r12,48(sp)
 4009904:	003bea06 	br	40088b0 <__alt_data_end+0xfc0088b0>
 4009908:	dc000915 	stw	r16,36(sp)
 400990c:	003e0e06 	br	4009148 <__alt_data_end+0xfc009148>
 4009910:	01000e44 	movi	r4,57
 4009914:	8825883a 	mov	r18,r17
 4009918:	9dc00044 	addi	r23,r19,1
 400991c:	99000005 	stb	r4,0(r19)
 4009920:	a023883a 	mov	r17,r20
 4009924:	dc000915 	stw	r16,36(sp)
 4009928:	003da406 	br	4008fbc <__alt_data_end+0xfc008fbc>
 400992c:	d9801417 	ldw	r6,80(sp)
 4009930:	d9c01517 	ldw	r7,84(sp)
 4009934:	0009883a 	mov	r4,zero
 4009938:	014ff834 	movhi	r5,16352
 400993c:	4004b640 	call	4004b64 <__subdf3>
 4009940:	880d883a 	mov	r6,r17
 4009944:	a00f883a 	mov	r7,r20
 4009948:	1009883a 	mov	r4,r2
 400994c:	180b883a 	mov	r5,r3
 4009950:	400427c0 	call	400427c <__gedf2>
 4009954:	00bc7c0e 	bge	zero,r2,4008b48 <__alt_data_end+0xfc008b48>
 4009958:	01000c04 	movi	r4,48
 400995c:	00000106 	br	4009964 <_dtoa_r+0x1580>
 4009960:	102f883a 	mov	r23,r2
 4009964:	b8bfffc4 	addi	r2,r23,-1
 4009968:	10c00007 	ldb	r3,0(r2)
 400996c:	193ffc26 	beq	r3,r4,4009960 <__alt_data_end+0xfc009960>
 4009970:	d9801317 	ldw	r6,76(sp)
 4009974:	d9800515 	stw	r6,20(sp)
 4009978:	003c4406 	br	4008a8c <__alt_data_end+0xfc008a8c>
 400997c:	d9801317 	ldw	r6,76(sp)
 4009980:	d9800515 	stw	r6,20(sp)
 4009984:	003cea06 	br	4008d30 <__alt_data_end+0xfc008d30>
 4009988:	dd800f17 	ldw	r22,60(sp)
 400998c:	dcc01017 	ldw	r19,64(sp)
 4009990:	dc801217 	ldw	r18,72(sp)
 4009994:	003c6c06 	br	4008b48 <__alt_data_end+0xfc008b48>
 4009998:	903e031e 	bne	r18,zero,40091a8 <__alt_data_end+0xfc0091a8>
 400999c:	003ebb06 	br	400948c <__alt_data_end+0xfc00948c>
 40099a0:	103e6c1e 	bne	r2,zero,4009354 <__alt_data_end+0xfc009354>
 40099a4:	4080004c 	andi	r2,r8,1
 40099a8:	103e6a26 	beq	r2,zero,4009354 <__alt_data_end+0xfc009354>
 40099ac:	003e6606 	br	4009348 <__alt_data_end+0xfc009348>
 40099b0:	d8c00317 	ldw	r3,12(sp)
 40099b4:	00800084 	movi	r2,2
 40099b8:	10c02916 	blt	r2,r3,4009a60 <_dtoa_r+0x167c>
 40099bc:	d9000c17 	ldw	r4,48(sp)
 40099c0:	003e8806 	br	40093e4 <__alt_data_end+0xfc0093e4>
 40099c4:	04000084 	movi	r16,2
 40099c8:	003b9d06 	br	4008840 <__alt_data_end+0xfc008840>
 40099cc:	d9001317 	ldw	r4,76(sp)
 40099d0:	d9000515 	stw	r4,20(sp)
 40099d4:	003cd606 	br	4008d30 <__alt_data_end+0xfc008d30>
 40099d8:	d8801317 	ldw	r2,76(sp)
 40099dc:	d8800515 	stw	r2,20(sp)
 40099e0:	003c2a06 	br	4008a8c <__alt_data_end+0xfc008a8c>
 40099e4:	d9800317 	ldw	r6,12(sp)
 40099e8:	00800084 	movi	r2,2
 40099ec:	11801516 	blt	r2,r6,4009a44 <_dtoa_r+0x1660>
 40099f0:	d9c00c17 	ldw	r7,48(sp)
 40099f4:	d9c00615 	stw	r7,24(sp)
 40099f8:	003df706 	br	40091d8 <__alt_data_end+0xfc0091d8>
 40099fc:	193d3926 	beq	r3,r4,4008ee4 <__alt_data_end+0xfc008ee4>
 4009a00:	00c00f04 	movi	r3,60
 4009a04:	1885c83a 	sub	r2,r3,r2
 4009a08:	003ddf06 	br	4009188 <__alt_data_end+0xfc009188>
 4009a0c:	e009883a 	mov	r4,fp
 4009a10:	e0001115 	stw	zero,68(fp)
 4009a14:	000b883a 	mov	r5,zero
 4009a18:	400badc0 	call	400badc <_Balloc>
 4009a1c:	d8800715 	stw	r2,28(sp)
 4009a20:	d8c00717 	ldw	r3,28(sp)
 4009a24:	00bfffc4 	movi	r2,-1
 4009a28:	01000044 	movi	r4,1
 4009a2c:	d8800c15 	stw	r2,48(sp)
 4009a30:	e0c01015 	stw	r3,64(fp)
 4009a34:	d9000b15 	stw	r4,44(sp)
 4009a38:	d8800615 	stw	r2,24(sp)
 4009a3c:	d8002215 	stw	zero,136(sp)
 4009a40:	003c4106 	br	4008b48 <__alt_data_end+0xfc008b48>
 4009a44:	d8c00c17 	ldw	r3,48(sp)
 4009a48:	d8c00615 	stw	r3,24(sp)
 4009a4c:	003e7006 	br	4009410 <__alt_data_end+0xfc009410>
 4009a50:	04400044 	movi	r17,1
 4009a54:	003b2006 	br	40086d8 <__alt_data_end+0xfc0086d8>
 4009a58:	000b883a 	mov	r5,zero
 4009a5c:	003b3d06 	br	4008754 <__alt_data_end+0xfc008754>
 4009a60:	d8800c17 	ldw	r2,48(sp)
 4009a64:	d8800615 	stw	r2,24(sp)
 4009a68:	003e6906 	br	4009410 <__alt_data_end+0xfc009410>

04009a6c <__sflush_r>:
 4009a6c:	2880030b 	ldhu	r2,12(r5)
 4009a70:	defffb04 	addi	sp,sp,-20
 4009a74:	dcc00315 	stw	r19,12(sp)
 4009a78:	dc400115 	stw	r17,4(sp)
 4009a7c:	dfc00415 	stw	ra,16(sp)
 4009a80:	dc800215 	stw	r18,8(sp)
 4009a84:	dc000015 	stw	r16,0(sp)
 4009a88:	10c0020c 	andi	r3,r2,8
 4009a8c:	2823883a 	mov	r17,r5
 4009a90:	2027883a 	mov	r19,r4
 4009a94:	1800311e 	bne	r3,zero,4009b5c <__sflush_r+0xf0>
 4009a98:	28c00117 	ldw	r3,4(r5)
 4009a9c:	10820014 	ori	r2,r2,2048
 4009aa0:	2880030d 	sth	r2,12(r5)
 4009aa4:	00c04b0e 	bge	zero,r3,4009bd4 <__sflush_r+0x168>
 4009aa8:	8a000a17 	ldw	r8,40(r17)
 4009aac:	40002326 	beq	r8,zero,4009b3c <__sflush_r+0xd0>
 4009ab0:	9c000017 	ldw	r16,0(r19)
 4009ab4:	10c4000c 	andi	r3,r2,4096
 4009ab8:	98000015 	stw	zero,0(r19)
 4009abc:	18004826 	beq	r3,zero,4009be0 <__sflush_r+0x174>
 4009ac0:	89801417 	ldw	r6,80(r17)
 4009ac4:	10c0010c 	andi	r3,r2,4
 4009ac8:	18000626 	beq	r3,zero,4009ae4 <__sflush_r+0x78>
 4009acc:	88c00117 	ldw	r3,4(r17)
 4009ad0:	88800c17 	ldw	r2,48(r17)
 4009ad4:	30cdc83a 	sub	r6,r6,r3
 4009ad8:	10000226 	beq	r2,zero,4009ae4 <__sflush_r+0x78>
 4009adc:	88800f17 	ldw	r2,60(r17)
 4009ae0:	308dc83a 	sub	r6,r6,r2
 4009ae4:	89400717 	ldw	r5,28(r17)
 4009ae8:	000f883a 	mov	r7,zero
 4009aec:	9809883a 	mov	r4,r19
 4009af0:	403ee83a 	callr	r8
 4009af4:	00ffffc4 	movi	r3,-1
 4009af8:	10c04426 	beq	r2,r3,4009c0c <__sflush_r+0x1a0>
 4009afc:	88c0030b 	ldhu	r3,12(r17)
 4009b00:	89000417 	ldw	r4,16(r17)
 4009b04:	88000115 	stw	zero,4(r17)
 4009b08:	197dffcc 	andi	r5,r3,63487
 4009b0c:	8940030d 	sth	r5,12(r17)
 4009b10:	89000015 	stw	r4,0(r17)
 4009b14:	18c4000c 	andi	r3,r3,4096
 4009b18:	18002c1e 	bne	r3,zero,4009bcc <__sflush_r+0x160>
 4009b1c:	89400c17 	ldw	r5,48(r17)
 4009b20:	9c000015 	stw	r16,0(r19)
 4009b24:	28000526 	beq	r5,zero,4009b3c <__sflush_r+0xd0>
 4009b28:	88801004 	addi	r2,r17,64
 4009b2c:	28800226 	beq	r5,r2,4009b38 <__sflush_r+0xcc>
 4009b30:	9809883a 	mov	r4,r19
 4009b34:	400a1d80 	call	400a1d8 <_free_r>
 4009b38:	88000c15 	stw	zero,48(r17)
 4009b3c:	0005883a 	mov	r2,zero
 4009b40:	dfc00417 	ldw	ra,16(sp)
 4009b44:	dcc00317 	ldw	r19,12(sp)
 4009b48:	dc800217 	ldw	r18,8(sp)
 4009b4c:	dc400117 	ldw	r17,4(sp)
 4009b50:	dc000017 	ldw	r16,0(sp)
 4009b54:	dec00504 	addi	sp,sp,20
 4009b58:	f800283a 	ret
 4009b5c:	2c800417 	ldw	r18,16(r5)
 4009b60:	903ff626 	beq	r18,zero,4009b3c <__alt_data_end+0xfc009b3c>
 4009b64:	2c000017 	ldw	r16,0(r5)
 4009b68:	108000cc 	andi	r2,r2,3
 4009b6c:	2c800015 	stw	r18,0(r5)
 4009b70:	84a1c83a 	sub	r16,r16,r18
 4009b74:	1000131e 	bne	r2,zero,4009bc4 <__sflush_r+0x158>
 4009b78:	28800517 	ldw	r2,20(r5)
 4009b7c:	88800215 	stw	r2,8(r17)
 4009b80:	04000316 	blt	zero,r16,4009b90 <__sflush_r+0x124>
 4009b84:	003fed06 	br	4009b3c <__alt_data_end+0xfc009b3c>
 4009b88:	90a5883a 	add	r18,r18,r2
 4009b8c:	043feb0e 	bge	zero,r16,4009b3c <__alt_data_end+0xfc009b3c>
 4009b90:	88800917 	ldw	r2,36(r17)
 4009b94:	89400717 	ldw	r5,28(r17)
 4009b98:	800f883a 	mov	r7,r16
 4009b9c:	900d883a 	mov	r6,r18
 4009ba0:	9809883a 	mov	r4,r19
 4009ba4:	103ee83a 	callr	r2
 4009ba8:	80a1c83a 	sub	r16,r16,r2
 4009bac:	00bff616 	blt	zero,r2,4009b88 <__alt_data_end+0xfc009b88>
 4009bb0:	88c0030b 	ldhu	r3,12(r17)
 4009bb4:	00bfffc4 	movi	r2,-1
 4009bb8:	18c01014 	ori	r3,r3,64
 4009bbc:	88c0030d 	sth	r3,12(r17)
 4009bc0:	003fdf06 	br	4009b40 <__alt_data_end+0xfc009b40>
 4009bc4:	0005883a 	mov	r2,zero
 4009bc8:	003fec06 	br	4009b7c <__alt_data_end+0xfc009b7c>
 4009bcc:	88801415 	stw	r2,80(r17)
 4009bd0:	003fd206 	br	4009b1c <__alt_data_end+0xfc009b1c>
 4009bd4:	28c00f17 	ldw	r3,60(r5)
 4009bd8:	00ffb316 	blt	zero,r3,4009aa8 <__alt_data_end+0xfc009aa8>
 4009bdc:	003fd706 	br	4009b3c <__alt_data_end+0xfc009b3c>
 4009be0:	89400717 	ldw	r5,28(r17)
 4009be4:	000d883a 	mov	r6,zero
 4009be8:	01c00044 	movi	r7,1
 4009bec:	9809883a 	mov	r4,r19
 4009bf0:	403ee83a 	callr	r8
 4009bf4:	100d883a 	mov	r6,r2
 4009bf8:	00bfffc4 	movi	r2,-1
 4009bfc:	30801426 	beq	r6,r2,4009c50 <__sflush_r+0x1e4>
 4009c00:	8880030b 	ldhu	r2,12(r17)
 4009c04:	8a000a17 	ldw	r8,40(r17)
 4009c08:	003fae06 	br	4009ac4 <__alt_data_end+0xfc009ac4>
 4009c0c:	98c00017 	ldw	r3,0(r19)
 4009c10:	183fba26 	beq	r3,zero,4009afc <__alt_data_end+0xfc009afc>
 4009c14:	01000744 	movi	r4,29
 4009c18:	19000626 	beq	r3,r4,4009c34 <__sflush_r+0x1c8>
 4009c1c:	01000584 	movi	r4,22
 4009c20:	19000426 	beq	r3,r4,4009c34 <__sflush_r+0x1c8>
 4009c24:	88c0030b 	ldhu	r3,12(r17)
 4009c28:	18c01014 	ori	r3,r3,64
 4009c2c:	88c0030d 	sth	r3,12(r17)
 4009c30:	003fc306 	br	4009b40 <__alt_data_end+0xfc009b40>
 4009c34:	8880030b 	ldhu	r2,12(r17)
 4009c38:	88c00417 	ldw	r3,16(r17)
 4009c3c:	88000115 	stw	zero,4(r17)
 4009c40:	10bdffcc 	andi	r2,r2,63487
 4009c44:	8880030d 	sth	r2,12(r17)
 4009c48:	88c00015 	stw	r3,0(r17)
 4009c4c:	003fb306 	br	4009b1c <__alt_data_end+0xfc009b1c>
 4009c50:	98800017 	ldw	r2,0(r19)
 4009c54:	103fea26 	beq	r2,zero,4009c00 <__alt_data_end+0xfc009c00>
 4009c58:	00c00744 	movi	r3,29
 4009c5c:	10c00226 	beq	r2,r3,4009c68 <__sflush_r+0x1fc>
 4009c60:	00c00584 	movi	r3,22
 4009c64:	10c0031e 	bne	r2,r3,4009c74 <__sflush_r+0x208>
 4009c68:	9c000015 	stw	r16,0(r19)
 4009c6c:	0005883a 	mov	r2,zero
 4009c70:	003fb306 	br	4009b40 <__alt_data_end+0xfc009b40>
 4009c74:	88c0030b 	ldhu	r3,12(r17)
 4009c78:	3005883a 	mov	r2,r6
 4009c7c:	18c01014 	ori	r3,r3,64
 4009c80:	88c0030d 	sth	r3,12(r17)
 4009c84:	003fae06 	br	4009b40 <__alt_data_end+0xfc009b40>

04009c88 <_fflush_r>:
 4009c88:	defffd04 	addi	sp,sp,-12
 4009c8c:	dc000115 	stw	r16,4(sp)
 4009c90:	dfc00215 	stw	ra,8(sp)
 4009c94:	2021883a 	mov	r16,r4
 4009c98:	20000226 	beq	r4,zero,4009ca4 <_fflush_r+0x1c>
 4009c9c:	20800e17 	ldw	r2,56(r4)
 4009ca0:	10000c26 	beq	r2,zero,4009cd4 <_fflush_r+0x4c>
 4009ca4:	2880030f 	ldh	r2,12(r5)
 4009ca8:	1000051e 	bne	r2,zero,4009cc0 <_fflush_r+0x38>
 4009cac:	0005883a 	mov	r2,zero
 4009cb0:	dfc00217 	ldw	ra,8(sp)
 4009cb4:	dc000117 	ldw	r16,4(sp)
 4009cb8:	dec00304 	addi	sp,sp,12
 4009cbc:	f800283a 	ret
 4009cc0:	8009883a 	mov	r4,r16
 4009cc4:	dfc00217 	ldw	ra,8(sp)
 4009cc8:	dc000117 	ldw	r16,4(sp)
 4009ccc:	dec00304 	addi	sp,sp,12
 4009cd0:	4009a6c1 	jmpi	4009a6c <__sflush_r>
 4009cd4:	d9400015 	stw	r5,0(sp)
 4009cd8:	400a0640 	call	400a064 <__sinit>
 4009cdc:	d9400017 	ldw	r5,0(sp)
 4009ce0:	003ff006 	br	4009ca4 <__alt_data_end+0xfc009ca4>

04009ce4 <fflush>:
 4009ce4:	20000526 	beq	r4,zero,4009cfc <fflush+0x18>
 4009ce8:	00810074 	movhi	r2,1025
 4009cec:	10935c04 	addi	r2,r2,19824
 4009cf0:	200b883a 	mov	r5,r4
 4009cf4:	11000017 	ldw	r4,0(r2)
 4009cf8:	4009c881 	jmpi	4009c88 <_fflush_r>
 4009cfc:	00810074 	movhi	r2,1025
 4009d00:	10935b04 	addi	r2,r2,19820
 4009d04:	11000017 	ldw	r4,0(r2)
 4009d08:	01410074 	movhi	r5,1025
 4009d0c:	29672204 	addi	r5,r5,-25464
 4009d10:	400aa681 	jmpi	400aa68 <_fwalk_reent>

04009d14 <__fp_unlock>:
 4009d14:	0005883a 	mov	r2,zero
 4009d18:	f800283a 	ret

04009d1c <_cleanup_r>:
 4009d1c:	01410074 	movhi	r5,1025
 4009d20:	297b4a04 	addi	r5,r5,-4824
 4009d24:	400aa681 	jmpi	400aa68 <_fwalk_reent>

04009d28 <__sinit.part.1>:
 4009d28:	defff704 	addi	sp,sp,-36
 4009d2c:	00c10074 	movhi	r3,1025
 4009d30:	dfc00815 	stw	ra,32(sp)
 4009d34:	ddc00715 	stw	r23,28(sp)
 4009d38:	dd800615 	stw	r22,24(sp)
 4009d3c:	dd400515 	stw	r21,20(sp)
 4009d40:	dd000415 	stw	r20,16(sp)
 4009d44:	dcc00315 	stw	r19,12(sp)
 4009d48:	dc800215 	stw	r18,8(sp)
 4009d4c:	dc400115 	stw	r17,4(sp)
 4009d50:	dc000015 	stw	r16,0(sp)
 4009d54:	18e74704 	addi	r3,r3,-25316
 4009d58:	24000117 	ldw	r16,4(r4)
 4009d5c:	20c00f15 	stw	r3,60(r4)
 4009d60:	2080bb04 	addi	r2,r4,748
 4009d64:	00c000c4 	movi	r3,3
 4009d68:	20c0b915 	stw	r3,740(r4)
 4009d6c:	2080ba15 	stw	r2,744(r4)
 4009d70:	2000b815 	stw	zero,736(r4)
 4009d74:	05c00204 	movi	r23,8
 4009d78:	00800104 	movi	r2,4
 4009d7c:	2025883a 	mov	r18,r4
 4009d80:	b80d883a 	mov	r6,r23
 4009d84:	81001704 	addi	r4,r16,92
 4009d88:	000b883a 	mov	r5,zero
 4009d8c:	80000015 	stw	zero,0(r16)
 4009d90:	80000115 	stw	zero,4(r16)
 4009d94:	80000215 	stw	zero,8(r16)
 4009d98:	8080030d 	sth	r2,12(r16)
 4009d9c:	80001915 	stw	zero,100(r16)
 4009da0:	8000038d 	sth	zero,14(r16)
 4009da4:	80000415 	stw	zero,16(r16)
 4009da8:	80000515 	stw	zero,20(r16)
 4009dac:	80000615 	stw	zero,24(r16)
 4009db0:	400b9b40 	call	400b9b4 <memset>
 4009db4:	05810074 	movhi	r22,1025
 4009db8:	94400217 	ldw	r17,8(r18)
 4009dbc:	05410074 	movhi	r21,1025
 4009dc0:	05010074 	movhi	r20,1025
 4009dc4:	04c10074 	movhi	r19,1025
 4009dc8:	b5b47e04 	addi	r22,r22,-11784
 4009dcc:	ad749504 	addi	r21,r21,-11692
 4009dd0:	a534b404 	addi	r20,r20,-11568
 4009dd4:	9cf4cb04 	addi	r19,r19,-11476
 4009dd8:	85800815 	stw	r22,32(r16)
 4009ddc:	85400915 	stw	r21,36(r16)
 4009de0:	85000a15 	stw	r20,40(r16)
 4009de4:	84c00b15 	stw	r19,44(r16)
 4009de8:	84000715 	stw	r16,28(r16)
 4009dec:	00800284 	movi	r2,10
 4009df0:	8880030d 	sth	r2,12(r17)
 4009df4:	00800044 	movi	r2,1
 4009df8:	b80d883a 	mov	r6,r23
 4009dfc:	89001704 	addi	r4,r17,92
 4009e00:	000b883a 	mov	r5,zero
 4009e04:	88000015 	stw	zero,0(r17)
 4009e08:	88000115 	stw	zero,4(r17)
 4009e0c:	88000215 	stw	zero,8(r17)
 4009e10:	88001915 	stw	zero,100(r17)
 4009e14:	8880038d 	sth	r2,14(r17)
 4009e18:	88000415 	stw	zero,16(r17)
 4009e1c:	88000515 	stw	zero,20(r17)
 4009e20:	88000615 	stw	zero,24(r17)
 4009e24:	400b9b40 	call	400b9b4 <memset>
 4009e28:	94000317 	ldw	r16,12(r18)
 4009e2c:	00800484 	movi	r2,18
 4009e30:	8c400715 	stw	r17,28(r17)
 4009e34:	8d800815 	stw	r22,32(r17)
 4009e38:	8d400915 	stw	r21,36(r17)
 4009e3c:	8d000a15 	stw	r20,40(r17)
 4009e40:	8cc00b15 	stw	r19,44(r17)
 4009e44:	8080030d 	sth	r2,12(r16)
 4009e48:	00800084 	movi	r2,2
 4009e4c:	80000015 	stw	zero,0(r16)
 4009e50:	80000115 	stw	zero,4(r16)
 4009e54:	80000215 	stw	zero,8(r16)
 4009e58:	80001915 	stw	zero,100(r16)
 4009e5c:	8080038d 	sth	r2,14(r16)
 4009e60:	80000415 	stw	zero,16(r16)
 4009e64:	80000515 	stw	zero,20(r16)
 4009e68:	80000615 	stw	zero,24(r16)
 4009e6c:	b80d883a 	mov	r6,r23
 4009e70:	000b883a 	mov	r5,zero
 4009e74:	81001704 	addi	r4,r16,92
 4009e78:	400b9b40 	call	400b9b4 <memset>
 4009e7c:	00800044 	movi	r2,1
 4009e80:	84000715 	stw	r16,28(r16)
 4009e84:	85800815 	stw	r22,32(r16)
 4009e88:	85400915 	stw	r21,36(r16)
 4009e8c:	85000a15 	stw	r20,40(r16)
 4009e90:	84c00b15 	stw	r19,44(r16)
 4009e94:	90800e15 	stw	r2,56(r18)
 4009e98:	dfc00817 	ldw	ra,32(sp)
 4009e9c:	ddc00717 	ldw	r23,28(sp)
 4009ea0:	dd800617 	ldw	r22,24(sp)
 4009ea4:	dd400517 	ldw	r21,20(sp)
 4009ea8:	dd000417 	ldw	r20,16(sp)
 4009eac:	dcc00317 	ldw	r19,12(sp)
 4009eb0:	dc800217 	ldw	r18,8(sp)
 4009eb4:	dc400117 	ldw	r17,4(sp)
 4009eb8:	dc000017 	ldw	r16,0(sp)
 4009ebc:	dec00904 	addi	sp,sp,36
 4009ec0:	f800283a 	ret

04009ec4 <__fp_lock>:
 4009ec4:	0005883a 	mov	r2,zero
 4009ec8:	f800283a 	ret

04009ecc <__sfmoreglue>:
 4009ecc:	defffc04 	addi	sp,sp,-16
 4009ed0:	dc400115 	stw	r17,4(sp)
 4009ed4:	2c7fffc4 	addi	r17,r5,-1
 4009ed8:	8c401a24 	muli	r17,r17,104
 4009edc:	dc800215 	stw	r18,8(sp)
 4009ee0:	2825883a 	mov	r18,r5
 4009ee4:	89401d04 	addi	r5,r17,116
 4009ee8:	dc000015 	stw	r16,0(sp)
 4009eec:	dfc00315 	stw	ra,12(sp)
 4009ef0:	400ae200 	call	400ae20 <_malloc_r>
 4009ef4:	1021883a 	mov	r16,r2
 4009ef8:	10000726 	beq	r2,zero,4009f18 <__sfmoreglue+0x4c>
 4009efc:	11000304 	addi	r4,r2,12
 4009f00:	10000015 	stw	zero,0(r2)
 4009f04:	14800115 	stw	r18,4(r2)
 4009f08:	11000215 	stw	r4,8(r2)
 4009f0c:	89801a04 	addi	r6,r17,104
 4009f10:	000b883a 	mov	r5,zero
 4009f14:	400b9b40 	call	400b9b4 <memset>
 4009f18:	8005883a 	mov	r2,r16
 4009f1c:	dfc00317 	ldw	ra,12(sp)
 4009f20:	dc800217 	ldw	r18,8(sp)
 4009f24:	dc400117 	ldw	r17,4(sp)
 4009f28:	dc000017 	ldw	r16,0(sp)
 4009f2c:	dec00404 	addi	sp,sp,16
 4009f30:	f800283a 	ret

04009f34 <__sfp>:
 4009f34:	defffb04 	addi	sp,sp,-20
 4009f38:	dc000015 	stw	r16,0(sp)
 4009f3c:	04010074 	movhi	r16,1025
 4009f40:	84135b04 	addi	r16,r16,19820
 4009f44:	dcc00315 	stw	r19,12(sp)
 4009f48:	2027883a 	mov	r19,r4
 4009f4c:	81000017 	ldw	r4,0(r16)
 4009f50:	dfc00415 	stw	ra,16(sp)
 4009f54:	dc800215 	stw	r18,8(sp)
 4009f58:	20800e17 	ldw	r2,56(r4)
 4009f5c:	dc400115 	stw	r17,4(sp)
 4009f60:	1000021e 	bne	r2,zero,4009f6c <__sfp+0x38>
 4009f64:	4009d280 	call	4009d28 <__sinit.part.1>
 4009f68:	81000017 	ldw	r4,0(r16)
 4009f6c:	2480b804 	addi	r18,r4,736
 4009f70:	047fffc4 	movi	r17,-1
 4009f74:	91000117 	ldw	r4,4(r18)
 4009f78:	94000217 	ldw	r16,8(r18)
 4009f7c:	213fffc4 	addi	r4,r4,-1
 4009f80:	20000a16 	blt	r4,zero,4009fac <__sfp+0x78>
 4009f84:	8080030f 	ldh	r2,12(r16)
 4009f88:	10000c26 	beq	r2,zero,4009fbc <__sfp+0x88>
 4009f8c:	80c01d04 	addi	r3,r16,116
 4009f90:	00000206 	br	4009f9c <__sfp+0x68>
 4009f94:	18bfe60f 	ldh	r2,-104(r3)
 4009f98:	10000826 	beq	r2,zero,4009fbc <__sfp+0x88>
 4009f9c:	213fffc4 	addi	r4,r4,-1
 4009fa0:	1c3ffd04 	addi	r16,r3,-12
 4009fa4:	18c01a04 	addi	r3,r3,104
 4009fa8:	247ffa1e 	bne	r4,r17,4009f94 <__alt_data_end+0xfc009f94>
 4009fac:	90800017 	ldw	r2,0(r18)
 4009fb0:	10001d26 	beq	r2,zero,400a028 <__sfp+0xf4>
 4009fb4:	1025883a 	mov	r18,r2
 4009fb8:	003fee06 	br	4009f74 <__alt_data_end+0xfc009f74>
 4009fbc:	00bfffc4 	movi	r2,-1
 4009fc0:	8080038d 	sth	r2,14(r16)
 4009fc4:	00800044 	movi	r2,1
 4009fc8:	8080030d 	sth	r2,12(r16)
 4009fcc:	80001915 	stw	zero,100(r16)
 4009fd0:	80000015 	stw	zero,0(r16)
 4009fd4:	80000215 	stw	zero,8(r16)
 4009fd8:	80000115 	stw	zero,4(r16)
 4009fdc:	80000415 	stw	zero,16(r16)
 4009fe0:	80000515 	stw	zero,20(r16)
 4009fe4:	80000615 	stw	zero,24(r16)
 4009fe8:	01800204 	movi	r6,8
 4009fec:	000b883a 	mov	r5,zero
 4009ff0:	81001704 	addi	r4,r16,92
 4009ff4:	400b9b40 	call	400b9b4 <memset>
 4009ff8:	8005883a 	mov	r2,r16
 4009ffc:	80000c15 	stw	zero,48(r16)
 400a000:	80000d15 	stw	zero,52(r16)
 400a004:	80001115 	stw	zero,68(r16)
 400a008:	80001215 	stw	zero,72(r16)
 400a00c:	dfc00417 	ldw	ra,16(sp)
 400a010:	dcc00317 	ldw	r19,12(sp)
 400a014:	dc800217 	ldw	r18,8(sp)
 400a018:	dc400117 	ldw	r17,4(sp)
 400a01c:	dc000017 	ldw	r16,0(sp)
 400a020:	dec00504 	addi	sp,sp,20
 400a024:	f800283a 	ret
 400a028:	01400104 	movi	r5,4
 400a02c:	9809883a 	mov	r4,r19
 400a030:	4009ecc0 	call	4009ecc <__sfmoreglue>
 400a034:	90800015 	stw	r2,0(r18)
 400a038:	103fde1e 	bne	r2,zero,4009fb4 <__alt_data_end+0xfc009fb4>
 400a03c:	00800304 	movi	r2,12
 400a040:	98800015 	stw	r2,0(r19)
 400a044:	0005883a 	mov	r2,zero
 400a048:	003ff006 	br	400a00c <__alt_data_end+0xfc00a00c>

0400a04c <_cleanup>:
 400a04c:	00810074 	movhi	r2,1025
 400a050:	10935b04 	addi	r2,r2,19820
 400a054:	11000017 	ldw	r4,0(r2)
 400a058:	01410074 	movhi	r5,1025
 400a05c:	297b4a04 	addi	r5,r5,-4824
 400a060:	400aa681 	jmpi	400aa68 <_fwalk_reent>

0400a064 <__sinit>:
 400a064:	20800e17 	ldw	r2,56(r4)
 400a068:	10000126 	beq	r2,zero,400a070 <__sinit+0xc>
 400a06c:	f800283a 	ret
 400a070:	4009d281 	jmpi	4009d28 <__sinit.part.1>

0400a074 <__sfp_lock_acquire>:
 400a074:	f800283a 	ret

0400a078 <__sfp_lock_release>:
 400a078:	f800283a 	ret

0400a07c <__sinit_lock_acquire>:
 400a07c:	f800283a 	ret

0400a080 <__sinit_lock_release>:
 400a080:	f800283a 	ret

0400a084 <__fp_lock_all>:
 400a084:	00810074 	movhi	r2,1025
 400a088:	10935c04 	addi	r2,r2,19824
 400a08c:	11000017 	ldw	r4,0(r2)
 400a090:	01410074 	movhi	r5,1025
 400a094:	2967b104 	addi	r5,r5,-24892
 400a098:	400a9a41 	jmpi	400a9a4 <_fwalk>

0400a09c <__fp_unlock_all>:
 400a09c:	00810074 	movhi	r2,1025
 400a0a0:	10935c04 	addi	r2,r2,19824
 400a0a4:	11000017 	ldw	r4,0(r2)
 400a0a8:	01410074 	movhi	r5,1025
 400a0ac:	29674504 	addi	r5,r5,-25324
 400a0b0:	400a9a41 	jmpi	400a9a4 <_fwalk>

0400a0b4 <_malloc_trim_r>:
 400a0b4:	defffb04 	addi	sp,sp,-20
 400a0b8:	dcc00315 	stw	r19,12(sp)
 400a0bc:	04c10074 	movhi	r19,1025
 400a0c0:	dc800215 	stw	r18,8(sp)
 400a0c4:	dc400115 	stw	r17,4(sp)
 400a0c8:	dc000015 	stw	r16,0(sp)
 400a0cc:	dfc00415 	stw	ra,16(sp)
 400a0d0:	2821883a 	mov	r16,r5
 400a0d4:	9ccdb004 	addi	r19,r19,14016
 400a0d8:	2025883a 	mov	r18,r4
 400a0dc:	40106b40 	call	40106b4 <__malloc_lock>
 400a0e0:	98800217 	ldw	r2,8(r19)
 400a0e4:	14400117 	ldw	r17,4(r2)
 400a0e8:	00bfff04 	movi	r2,-4
 400a0ec:	88a2703a 	and	r17,r17,r2
 400a0f0:	8c21c83a 	sub	r16,r17,r16
 400a0f4:	8403fbc4 	addi	r16,r16,4079
 400a0f8:	8020d33a 	srli	r16,r16,12
 400a0fc:	0083ffc4 	movi	r2,4095
 400a100:	843fffc4 	addi	r16,r16,-1
 400a104:	8020933a 	slli	r16,r16,12
 400a108:	1400060e 	bge	r2,r16,400a124 <_malloc_trim_r+0x70>
 400a10c:	000b883a 	mov	r5,zero
 400a110:	9009883a 	mov	r4,r18
 400a114:	400d1a40 	call	400d1a4 <_sbrk_r>
 400a118:	98c00217 	ldw	r3,8(r19)
 400a11c:	1c47883a 	add	r3,r3,r17
 400a120:	10c00a26 	beq	r2,r3,400a14c <_malloc_trim_r+0x98>
 400a124:	9009883a 	mov	r4,r18
 400a128:	40106d80 	call	40106d8 <__malloc_unlock>
 400a12c:	0005883a 	mov	r2,zero
 400a130:	dfc00417 	ldw	ra,16(sp)
 400a134:	dcc00317 	ldw	r19,12(sp)
 400a138:	dc800217 	ldw	r18,8(sp)
 400a13c:	dc400117 	ldw	r17,4(sp)
 400a140:	dc000017 	ldw	r16,0(sp)
 400a144:	dec00504 	addi	sp,sp,20
 400a148:	f800283a 	ret
 400a14c:	040bc83a 	sub	r5,zero,r16
 400a150:	9009883a 	mov	r4,r18
 400a154:	400d1a40 	call	400d1a4 <_sbrk_r>
 400a158:	00ffffc4 	movi	r3,-1
 400a15c:	10c00d26 	beq	r2,r3,400a194 <_malloc_trim_r+0xe0>
 400a160:	00c10074 	movhi	r3,1025
 400a164:	18da6604 	addi	r3,r3,27032
 400a168:	18800017 	ldw	r2,0(r3)
 400a16c:	99000217 	ldw	r4,8(r19)
 400a170:	8c23c83a 	sub	r17,r17,r16
 400a174:	8c400054 	ori	r17,r17,1
 400a178:	1421c83a 	sub	r16,r2,r16
 400a17c:	24400115 	stw	r17,4(r4)
 400a180:	9009883a 	mov	r4,r18
 400a184:	1c000015 	stw	r16,0(r3)
 400a188:	40106d80 	call	40106d8 <__malloc_unlock>
 400a18c:	00800044 	movi	r2,1
 400a190:	003fe706 	br	400a130 <__alt_data_end+0xfc00a130>
 400a194:	000b883a 	mov	r5,zero
 400a198:	9009883a 	mov	r4,r18
 400a19c:	400d1a40 	call	400d1a4 <_sbrk_r>
 400a1a0:	99000217 	ldw	r4,8(r19)
 400a1a4:	014003c4 	movi	r5,15
 400a1a8:	1107c83a 	sub	r3,r2,r4
 400a1ac:	28ffdd0e 	bge	r5,r3,400a124 <__alt_data_end+0xfc00a124>
 400a1b0:	01410074 	movhi	r5,1025
 400a1b4:	29535e04 	addi	r5,r5,19832
 400a1b8:	29400017 	ldw	r5,0(r5)
 400a1bc:	18c00054 	ori	r3,r3,1
 400a1c0:	20c00115 	stw	r3,4(r4)
 400a1c4:	00c10074 	movhi	r3,1025
 400a1c8:	1145c83a 	sub	r2,r2,r5
 400a1cc:	18da6604 	addi	r3,r3,27032
 400a1d0:	18800015 	stw	r2,0(r3)
 400a1d4:	003fd306 	br	400a124 <__alt_data_end+0xfc00a124>

0400a1d8 <_free_r>:
 400a1d8:	28004126 	beq	r5,zero,400a2e0 <_free_r+0x108>
 400a1dc:	defffd04 	addi	sp,sp,-12
 400a1e0:	dc400115 	stw	r17,4(sp)
 400a1e4:	dc000015 	stw	r16,0(sp)
 400a1e8:	2023883a 	mov	r17,r4
 400a1ec:	2821883a 	mov	r16,r5
 400a1f0:	dfc00215 	stw	ra,8(sp)
 400a1f4:	40106b40 	call	40106b4 <__malloc_lock>
 400a1f8:	81ffff17 	ldw	r7,-4(r16)
 400a1fc:	00bfff84 	movi	r2,-2
 400a200:	01010074 	movhi	r4,1025
 400a204:	81bffe04 	addi	r6,r16,-8
 400a208:	3884703a 	and	r2,r7,r2
 400a20c:	210db004 	addi	r4,r4,14016
 400a210:	308b883a 	add	r5,r6,r2
 400a214:	2a400117 	ldw	r9,4(r5)
 400a218:	22000217 	ldw	r8,8(r4)
 400a21c:	00ffff04 	movi	r3,-4
 400a220:	48c6703a 	and	r3,r9,r3
 400a224:	2a005726 	beq	r5,r8,400a384 <_free_r+0x1ac>
 400a228:	28c00115 	stw	r3,4(r5)
 400a22c:	39c0004c 	andi	r7,r7,1
 400a230:	3800091e 	bne	r7,zero,400a258 <_free_r+0x80>
 400a234:	823ffe17 	ldw	r8,-8(r16)
 400a238:	22400204 	addi	r9,r4,8
 400a23c:	320dc83a 	sub	r6,r6,r8
 400a240:	31c00217 	ldw	r7,8(r6)
 400a244:	1205883a 	add	r2,r2,r8
 400a248:	3a406526 	beq	r7,r9,400a3e0 <_free_r+0x208>
 400a24c:	32000317 	ldw	r8,12(r6)
 400a250:	3a000315 	stw	r8,12(r7)
 400a254:	41c00215 	stw	r7,8(r8)
 400a258:	28cf883a 	add	r7,r5,r3
 400a25c:	39c00117 	ldw	r7,4(r7)
 400a260:	39c0004c 	andi	r7,r7,1
 400a264:	38003a26 	beq	r7,zero,400a350 <_free_r+0x178>
 400a268:	10c00054 	ori	r3,r2,1
 400a26c:	30c00115 	stw	r3,4(r6)
 400a270:	3087883a 	add	r3,r6,r2
 400a274:	18800015 	stw	r2,0(r3)
 400a278:	00c07fc4 	movi	r3,511
 400a27c:	18801936 	bltu	r3,r2,400a2e4 <_free_r+0x10c>
 400a280:	1004d0fa 	srli	r2,r2,3
 400a284:	01c00044 	movi	r7,1
 400a288:	21400117 	ldw	r5,4(r4)
 400a28c:	10c00044 	addi	r3,r2,1
 400a290:	18c7883a 	add	r3,r3,r3
 400a294:	1005d0ba 	srai	r2,r2,2
 400a298:	18c7883a 	add	r3,r3,r3
 400a29c:	18c7883a 	add	r3,r3,r3
 400a2a0:	1907883a 	add	r3,r3,r4
 400a2a4:	3884983a 	sll	r2,r7,r2
 400a2a8:	19c00017 	ldw	r7,0(r3)
 400a2ac:	1a3ffe04 	addi	r8,r3,-8
 400a2b0:	1144b03a 	or	r2,r2,r5
 400a2b4:	32000315 	stw	r8,12(r6)
 400a2b8:	31c00215 	stw	r7,8(r6)
 400a2bc:	20800115 	stw	r2,4(r4)
 400a2c0:	19800015 	stw	r6,0(r3)
 400a2c4:	39800315 	stw	r6,12(r7)
 400a2c8:	8809883a 	mov	r4,r17
 400a2cc:	dfc00217 	ldw	ra,8(sp)
 400a2d0:	dc400117 	ldw	r17,4(sp)
 400a2d4:	dc000017 	ldw	r16,0(sp)
 400a2d8:	dec00304 	addi	sp,sp,12
 400a2dc:	40106d81 	jmpi	40106d8 <__malloc_unlock>
 400a2e0:	f800283a 	ret
 400a2e4:	100ad27a 	srli	r5,r2,9
 400a2e8:	00c00104 	movi	r3,4
 400a2ec:	19404a36 	bltu	r3,r5,400a418 <_free_r+0x240>
 400a2f0:	100ad1ba 	srli	r5,r2,6
 400a2f4:	28c00e44 	addi	r3,r5,57
 400a2f8:	18c7883a 	add	r3,r3,r3
 400a2fc:	29400e04 	addi	r5,r5,56
 400a300:	18c7883a 	add	r3,r3,r3
 400a304:	18c7883a 	add	r3,r3,r3
 400a308:	1909883a 	add	r4,r3,r4
 400a30c:	20c00017 	ldw	r3,0(r4)
 400a310:	01c10074 	movhi	r7,1025
 400a314:	213ffe04 	addi	r4,r4,-8
 400a318:	39cdb004 	addi	r7,r7,14016
 400a31c:	20c04426 	beq	r4,r3,400a430 <_free_r+0x258>
 400a320:	01ffff04 	movi	r7,-4
 400a324:	19400117 	ldw	r5,4(r3)
 400a328:	29ca703a 	and	r5,r5,r7
 400a32c:	1140022e 	bgeu	r2,r5,400a338 <_free_r+0x160>
 400a330:	18c00217 	ldw	r3,8(r3)
 400a334:	20fffb1e 	bne	r4,r3,400a324 <__alt_data_end+0xfc00a324>
 400a338:	19000317 	ldw	r4,12(r3)
 400a33c:	31000315 	stw	r4,12(r6)
 400a340:	30c00215 	stw	r3,8(r6)
 400a344:	21800215 	stw	r6,8(r4)
 400a348:	19800315 	stw	r6,12(r3)
 400a34c:	003fde06 	br	400a2c8 <__alt_data_end+0xfc00a2c8>
 400a350:	29c00217 	ldw	r7,8(r5)
 400a354:	10c5883a 	add	r2,r2,r3
 400a358:	00c10074 	movhi	r3,1025
 400a35c:	18cdb204 	addi	r3,r3,14024
 400a360:	38c03b26 	beq	r7,r3,400a450 <_free_r+0x278>
 400a364:	2a000317 	ldw	r8,12(r5)
 400a368:	11400054 	ori	r5,r2,1
 400a36c:	3087883a 	add	r3,r6,r2
 400a370:	3a000315 	stw	r8,12(r7)
 400a374:	41c00215 	stw	r7,8(r8)
 400a378:	31400115 	stw	r5,4(r6)
 400a37c:	18800015 	stw	r2,0(r3)
 400a380:	003fbd06 	br	400a278 <__alt_data_end+0xfc00a278>
 400a384:	39c0004c 	andi	r7,r7,1
 400a388:	10c5883a 	add	r2,r2,r3
 400a38c:	3800071e 	bne	r7,zero,400a3ac <_free_r+0x1d4>
 400a390:	81fffe17 	ldw	r7,-8(r16)
 400a394:	31cdc83a 	sub	r6,r6,r7
 400a398:	30c00317 	ldw	r3,12(r6)
 400a39c:	31400217 	ldw	r5,8(r6)
 400a3a0:	11c5883a 	add	r2,r2,r7
 400a3a4:	28c00315 	stw	r3,12(r5)
 400a3a8:	19400215 	stw	r5,8(r3)
 400a3ac:	10c00054 	ori	r3,r2,1
 400a3b0:	30c00115 	stw	r3,4(r6)
 400a3b4:	00c10074 	movhi	r3,1025
 400a3b8:	18d35f04 	addi	r3,r3,19836
 400a3bc:	18c00017 	ldw	r3,0(r3)
 400a3c0:	21800215 	stw	r6,8(r4)
 400a3c4:	10ffc036 	bltu	r2,r3,400a2c8 <__alt_data_end+0xfc00a2c8>
 400a3c8:	00810074 	movhi	r2,1025
 400a3cc:	109a5a04 	addi	r2,r2,26984
 400a3d0:	11400017 	ldw	r5,0(r2)
 400a3d4:	8809883a 	mov	r4,r17
 400a3d8:	400a0b40 	call	400a0b4 <_malloc_trim_r>
 400a3dc:	003fba06 	br	400a2c8 <__alt_data_end+0xfc00a2c8>
 400a3e0:	28c9883a 	add	r4,r5,r3
 400a3e4:	21000117 	ldw	r4,4(r4)
 400a3e8:	2100004c 	andi	r4,r4,1
 400a3ec:	2000391e 	bne	r4,zero,400a4d4 <_free_r+0x2fc>
 400a3f0:	29c00217 	ldw	r7,8(r5)
 400a3f4:	29000317 	ldw	r4,12(r5)
 400a3f8:	1885883a 	add	r2,r3,r2
 400a3fc:	10c00054 	ori	r3,r2,1
 400a400:	39000315 	stw	r4,12(r7)
 400a404:	21c00215 	stw	r7,8(r4)
 400a408:	30c00115 	stw	r3,4(r6)
 400a40c:	308d883a 	add	r6,r6,r2
 400a410:	30800015 	stw	r2,0(r6)
 400a414:	003fac06 	br	400a2c8 <__alt_data_end+0xfc00a2c8>
 400a418:	00c00504 	movi	r3,20
 400a41c:	19401536 	bltu	r3,r5,400a474 <_free_r+0x29c>
 400a420:	28c01704 	addi	r3,r5,92
 400a424:	18c7883a 	add	r3,r3,r3
 400a428:	294016c4 	addi	r5,r5,91
 400a42c:	003fb406 	br	400a300 <__alt_data_end+0xfc00a300>
 400a430:	280bd0ba 	srai	r5,r5,2
 400a434:	00c00044 	movi	r3,1
 400a438:	38800117 	ldw	r2,4(r7)
 400a43c:	194a983a 	sll	r5,r3,r5
 400a440:	2007883a 	mov	r3,r4
 400a444:	2884b03a 	or	r2,r5,r2
 400a448:	38800115 	stw	r2,4(r7)
 400a44c:	003fbb06 	br	400a33c <__alt_data_end+0xfc00a33c>
 400a450:	21800515 	stw	r6,20(r4)
 400a454:	21800415 	stw	r6,16(r4)
 400a458:	10c00054 	ori	r3,r2,1
 400a45c:	31c00315 	stw	r7,12(r6)
 400a460:	31c00215 	stw	r7,8(r6)
 400a464:	30c00115 	stw	r3,4(r6)
 400a468:	308d883a 	add	r6,r6,r2
 400a46c:	30800015 	stw	r2,0(r6)
 400a470:	003f9506 	br	400a2c8 <__alt_data_end+0xfc00a2c8>
 400a474:	00c01504 	movi	r3,84
 400a478:	19400536 	bltu	r3,r5,400a490 <_free_r+0x2b8>
 400a47c:	100ad33a 	srli	r5,r2,12
 400a480:	28c01bc4 	addi	r3,r5,111
 400a484:	18c7883a 	add	r3,r3,r3
 400a488:	29401b84 	addi	r5,r5,110
 400a48c:	003f9c06 	br	400a300 <__alt_data_end+0xfc00a300>
 400a490:	00c05504 	movi	r3,340
 400a494:	19400536 	bltu	r3,r5,400a4ac <_free_r+0x2d4>
 400a498:	100ad3fa 	srli	r5,r2,15
 400a49c:	28c01e04 	addi	r3,r5,120
 400a4a0:	18c7883a 	add	r3,r3,r3
 400a4a4:	29401dc4 	addi	r5,r5,119
 400a4a8:	003f9506 	br	400a300 <__alt_data_end+0xfc00a300>
 400a4ac:	00c15504 	movi	r3,1364
 400a4b0:	19400536 	bltu	r3,r5,400a4c8 <_free_r+0x2f0>
 400a4b4:	100ad4ba 	srli	r5,r2,18
 400a4b8:	28c01f44 	addi	r3,r5,125
 400a4bc:	18c7883a 	add	r3,r3,r3
 400a4c0:	29401f04 	addi	r5,r5,124
 400a4c4:	003f8e06 	br	400a300 <__alt_data_end+0xfc00a300>
 400a4c8:	00c03f84 	movi	r3,254
 400a4cc:	01401f84 	movi	r5,126
 400a4d0:	003f8b06 	br	400a300 <__alt_data_end+0xfc00a300>
 400a4d4:	10c00054 	ori	r3,r2,1
 400a4d8:	30c00115 	stw	r3,4(r6)
 400a4dc:	308d883a 	add	r6,r6,r2
 400a4e0:	30800015 	stw	r2,0(r6)
 400a4e4:	003f7806 	br	400a2c8 <__alt_data_end+0xfc00a2c8>

0400a4e8 <__sfvwrite_r>:
 400a4e8:	30800217 	ldw	r2,8(r6)
 400a4ec:	10006726 	beq	r2,zero,400a68c <__sfvwrite_r+0x1a4>
 400a4f0:	28c0030b 	ldhu	r3,12(r5)
 400a4f4:	defff404 	addi	sp,sp,-48
 400a4f8:	dd400715 	stw	r21,28(sp)
 400a4fc:	dd000615 	stw	r20,24(sp)
 400a500:	dc000215 	stw	r16,8(sp)
 400a504:	dfc00b15 	stw	ra,44(sp)
 400a508:	df000a15 	stw	fp,40(sp)
 400a50c:	ddc00915 	stw	r23,36(sp)
 400a510:	dd800815 	stw	r22,32(sp)
 400a514:	dcc00515 	stw	r19,20(sp)
 400a518:	dc800415 	stw	r18,16(sp)
 400a51c:	dc400315 	stw	r17,12(sp)
 400a520:	1880020c 	andi	r2,r3,8
 400a524:	2821883a 	mov	r16,r5
 400a528:	202b883a 	mov	r21,r4
 400a52c:	3029883a 	mov	r20,r6
 400a530:	10002726 	beq	r2,zero,400a5d0 <__sfvwrite_r+0xe8>
 400a534:	28800417 	ldw	r2,16(r5)
 400a538:	10002526 	beq	r2,zero,400a5d0 <__sfvwrite_r+0xe8>
 400a53c:	1880008c 	andi	r2,r3,2
 400a540:	a4400017 	ldw	r17,0(r20)
 400a544:	10002a26 	beq	r2,zero,400a5f0 <__sfvwrite_r+0x108>
 400a548:	05a00034 	movhi	r22,32768
 400a54c:	0027883a 	mov	r19,zero
 400a550:	0025883a 	mov	r18,zero
 400a554:	b5bf0004 	addi	r22,r22,-1024
 400a558:	980d883a 	mov	r6,r19
 400a55c:	a809883a 	mov	r4,r21
 400a560:	90004626 	beq	r18,zero,400a67c <__sfvwrite_r+0x194>
 400a564:	900f883a 	mov	r7,r18
 400a568:	b480022e 	bgeu	r22,r18,400a574 <__sfvwrite_r+0x8c>
 400a56c:	01e00034 	movhi	r7,32768
 400a570:	39ff0004 	addi	r7,r7,-1024
 400a574:	80800917 	ldw	r2,36(r16)
 400a578:	81400717 	ldw	r5,28(r16)
 400a57c:	103ee83a 	callr	r2
 400a580:	0080570e 	bge	zero,r2,400a6e0 <__sfvwrite_r+0x1f8>
 400a584:	a0c00217 	ldw	r3,8(r20)
 400a588:	98a7883a 	add	r19,r19,r2
 400a58c:	90a5c83a 	sub	r18,r18,r2
 400a590:	1885c83a 	sub	r2,r3,r2
 400a594:	a0800215 	stw	r2,8(r20)
 400a598:	103fef1e 	bne	r2,zero,400a558 <__alt_data_end+0xfc00a558>
 400a59c:	0005883a 	mov	r2,zero
 400a5a0:	dfc00b17 	ldw	ra,44(sp)
 400a5a4:	df000a17 	ldw	fp,40(sp)
 400a5a8:	ddc00917 	ldw	r23,36(sp)
 400a5ac:	dd800817 	ldw	r22,32(sp)
 400a5b0:	dd400717 	ldw	r21,28(sp)
 400a5b4:	dd000617 	ldw	r20,24(sp)
 400a5b8:	dcc00517 	ldw	r19,20(sp)
 400a5bc:	dc800417 	ldw	r18,16(sp)
 400a5c0:	dc400317 	ldw	r17,12(sp)
 400a5c4:	dc000217 	ldw	r16,8(sp)
 400a5c8:	dec00c04 	addi	sp,sp,48
 400a5cc:	f800283a 	ret
 400a5d0:	800b883a 	mov	r5,r16
 400a5d4:	a809883a 	mov	r4,r21
 400a5d8:	40080900 	call	4008090 <__swsetup_r>
 400a5dc:	1000eb1e 	bne	r2,zero,400a98c <__sfvwrite_r+0x4a4>
 400a5e0:	80c0030b 	ldhu	r3,12(r16)
 400a5e4:	a4400017 	ldw	r17,0(r20)
 400a5e8:	1880008c 	andi	r2,r3,2
 400a5ec:	103fd61e 	bne	r2,zero,400a548 <__alt_data_end+0xfc00a548>
 400a5f0:	1880004c 	andi	r2,r3,1
 400a5f4:	10003f1e 	bne	r2,zero,400a6f4 <__sfvwrite_r+0x20c>
 400a5f8:	0039883a 	mov	fp,zero
 400a5fc:	0025883a 	mov	r18,zero
 400a600:	90001a26 	beq	r18,zero,400a66c <__sfvwrite_r+0x184>
 400a604:	1880800c 	andi	r2,r3,512
 400a608:	84c00217 	ldw	r19,8(r16)
 400a60c:	10002126 	beq	r2,zero,400a694 <__sfvwrite_r+0x1ac>
 400a610:	982f883a 	mov	r23,r19
 400a614:	94c09336 	bltu	r18,r19,400a864 <__sfvwrite_r+0x37c>
 400a618:	1881200c 	andi	r2,r3,1152
 400a61c:	10009e1e 	bne	r2,zero,400a898 <__sfvwrite_r+0x3b0>
 400a620:	81000017 	ldw	r4,0(r16)
 400a624:	b80d883a 	mov	r6,r23
 400a628:	e00b883a 	mov	r5,fp
 400a62c:	400b8580 	call	400b858 <memmove>
 400a630:	80c00217 	ldw	r3,8(r16)
 400a634:	81000017 	ldw	r4,0(r16)
 400a638:	9005883a 	mov	r2,r18
 400a63c:	1ce7c83a 	sub	r19,r3,r19
 400a640:	25cf883a 	add	r7,r4,r23
 400a644:	84c00215 	stw	r19,8(r16)
 400a648:	81c00015 	stw	r7,0(r16)
 400a64c:	a0c00217 	ldw	r3,8(r20)
 400a650:	e0b9883a 	add	fp,fp,r2
 400a654:	90a5c83a 	sub	r18,r18,r2
 400a658:	18a7c83a 	sub	r19,r3,r2
 400a65c:	a4c00215 	stw	r19,8(r20)
 400a660:	983fce26 	beq	r19,zero,400a59c <__alt_data_end+0xfc00a59c>
 400a664:	80c0030b 	ldhu	r3,12(r16)
 400a668:	903fe61e 	bne	r18,zero,400a604 <__alt_data_end+0xfc00a604>
 400a66c:	8f000017 	ldw	fp,0(r17)
 400a670:	8c800117 	ldw	r18,4(r17)
 400a674:	8c400204 	addi	r17,r17,8
 400a678:	003fe106 	br	400a600 <__alt_data_end+0xfc00a600>
 400a67c:	8cc00017 	ldw	r19,0(r17)
 400a680:	8c800117 	ldw	r18,4(r17)
 400a684:	8c400204 	addi	r17,r17,8
 400a688:	003fb306 	br	400a558 <__alt_data_end+0xfc00a558>
 400a68c:	0005883a 	mov	r2,zero
 400a690:	f800283a 	ret
 400a694:	81000017 	ldw	r4,0(r16)
 400a698:	80800417 	ldw	r2,16(r16)
 400a69c:	11005736 	bltu	r2,r4,400a7fc <__sfvwrite_r+0x314>
 400a6a0:	85c00517 	ldw	r23,20(r16)
 400a6a4:	95c05536 	bltu	r18,r23,400a7fc <__sfvwrite_r+0x314>
 400a6a8:	00a00034 	movhi	r2,32768
 400a6ac:	10bfffc4 	addi	r2,r2,-1
 400a6b0:	9009883a 	mov	r4,r18
 400a6b4:	1480012e 	bgeu	r2,r18,400a6bc <__sfvwrite_r+0x1d4>
 400a6b8:	1009883a 	mov	r4,r2
 400a6bc:	b80b883a 	mov	r5,r23
 400a6c0:	40058d80 	call	40058d8 <__divsi3>
 400a6c4:	15cf383a 	mul	r7,r2,r23
 400a6c8:	81400717 	ldw	r5,28(r16)
 400a6cc:	80800917 	ldw	r2,36(r16)
 400a6d0:	e00d883a 	mov	r6,fp
 400a6d4:	a809883a 	mov	r4,r21
 400a6d8:	103ee83a 	callr	r2
 400a6dc:	00bfdb16 	blt	zero,r2,400a64c <__alt_data_end+0xfc00a64c>
 400a6e0:	8080030b 	ldhu	r2,12(r16)
 400a6e4:	10801014 	ori	r2,r2,64
 400a6e8:	8080030d 	sth	r2,12(r16)
 400a6ec:	00bfffc4 	movi	r2,-1
 400a6f0:	003fab06 	br	400a5a0 <__alt_data_end+0xfc00a5a0>
 400a6f4:	0027883a 	mov	r19,zero
 400a6f8:	0011883a 	mov	r8,zero
 400a6fc:	0039883a 	mov	fp,zero
 400a700:	0025883a 	mov	r18,zero
 400a704:	90001f26 	beq	r18,zero,400a784 <__sfvwrite_r+0x29c>
 400a708:	40005a26 	beq	r8,zero,400a874 <__sfvwrite_r+0x38c>
 400a70c:	982d883a 	mov	r22,r19
 400a710:	94c0012e 	bgeu	r18,r19,400a718 <__sfvwrite_r+0x230>
 400a714:	902d883a 	mov	r22,r18
 400a718:	81000017 	ldw	r4,0(r16)
 400a71c:	80800417 	ldw	r2,16(r16)
 400a720:	b02f883a 	mov	r23,r22
 400a724:	81c00517 	ldw	r7,20(r16)
 400a728:	1100032e 	bgeu	r2,r4,400a738 <__sfvwrite_r+0x250>
 400a72c:	80c00217 	ldw	r3,8(r16)
 400a730:	38c7883a 	add	r3,r7,r3
 400a734:	1d801816 	blt	r3,r22,400a798 <__sfvwrite_r+0x2b0>
 400a738:	b1c03e16 	blt	r22,r7,400a834 <__sfvwrite_r+0x34c>
 400a73c:	80800917 	ldw	r2,36(r16)
 400a740:	81400717 	ldw	r5,28(r16)
 400a744:	e00d883a 	mov	r6,fp
 400a748:	da000115 	stw	r8,4(sp)
 400a74c:	a809883a 	mov	r4,r21
 400a750:	103ee83a 	callr	r2
 400a754:	102f883a 	mov	r23,r2
 400a758:	da000117 	ldw	r8,4(sp)
 400a75c:	00bfe00e 	bge	zero,r2,400a6e0 <__alt_data_end+0xfc00a6e0>
 400a760:	9de7c83a 	sub	r19,r19,r23
 400a764:	98001f26 	beq	r19,zero,400a7e4 <__sfvwrite_r+0x2fc>
 400a768:	a0800217 	ldw	r2,8(r20)
 400a76c:	e5f9883a 	add	fp,fp,r23
 400a770:	95e5c83a 	sub	r18,r18,r23
 400a774:	15efc83a 	sub	r23,r2,r23
 400a778:	a5c00215 	stw	r23,8(r20)
 400a77c:	b83f8726 	beq	r23,zero,400a59c <__alt_data_end+0xfc00a59c>
 400a780:	903fe11e 	bne	r18,zero,400a708 <__alt_data_end+0xfc00a708>
 400a784:	8f000017 	ldw	fp,0(r17)
 400a788:	8c800117 	ldw	r18,4(r17)
 400a78c:	0011883a 	mov	r8,zero
 400a790:	8c400204 	addi	r17,r17,8
 400a794:	003fdb06 	br	400a704 <__alt_data_end+0xfc00a704>
 400a798:	180d883a 	mov	r6,r3
 400a79c:	e00b883a 	mov	r5,fp
 400a7a0:	da000115 	stw	r8,4(sp)
 400a7a4:	d8c00015 	stw	r3,0(sp)
 400a7a8:	400b8580 	call	400b858 <memmove>
 400a7ac:	d8c00017 	ldw	r3,0(sp)
 400a7b0:	80800017 	ldw	r2,0(r16)
 400a7b4:	800b883a 	mov	r5,r16
 400a7b8:	a809883a 	mov	r4,r21
 400a7bc:	10c5883a 	add	r2,r2,r3
 400a7c0:	80800015 	stw	r2,0(r16)
 400a7c4:	d8c00015 	stw	r3,0(sp)
 400a7c8:	4009c880 	call	4009c88 <_fflush_r>
 400a7cc:	d8c00017 	ldw	r3,0(sp)
 400a7d0:	da000117 	ldw	r8,4(sp)
 400a7d4:	103fc21e 	bne	r2,zero,400a6e0 <__alt_data_end+0xfc00a6e0>
 400a7d8:	182f883a 	mov	r23,r3
 400a7dc:	9de7c83a 	sub	r19,r19,r23
 400a7e0:	983fe11e 	bne	r19,zero,400a768 <__alt_data_end+0xfc00a768>
 400a7e4:	800b883a 	mov	r5,r16
 400a7e8:	a809883a 	mov	r4,r21
 400a7ec:	4009c880 	call	4009c88 <_fflush_r>
 400a7f0:	103fbb1e 	bne	r2,zero,400a6e0 <__alt_data_end+0xfc00a6e0>
 400a7f4:	0011883a 	mov	r8,zero
 400a7f8:	003fdb06 	br	400a768 <__alt_data_end+0xfc00a768>
 400a7fc:	94c0012e 	bgeu	r18,r19,400a804 <__sfvwrite_r+0x31c>
 400a800:	9027883a 	mov	r19,r18
 400a804:	980d883a 	mov	r6,r19
 400a808:	e00b883a 	mov	r5,fp
 400a80c:	400b8580 	call	400b858 <memmove>
 400a810:	80800217 	ldw	r2,8(r16)
 400a814:	80c00017 	ldw	r3,0(r16)
 400a818:	14c5c83a 	sub	r2,r2,r19
 400a81c:	1cc7883a 	add	r3,r3,r19
 400a820:	80800215 	stw	r2,8(r16)
 400a824:	80c00015 	stw	r3,0(r16)
 400a828:	10004326 	beq	r2,zero,400a938 <__sfvwrite_r+0x450>
 400a82c:	9805883a 	mov	r2,r19
 400a830:	003f8606 	br	400a64c <__alt_data_end+0xfc00a64c>
 400a834:	b00d883a 	mov	r6,r22
 400a838:	e00b883a 	mov	r5,fp
 400a83c:	da000115 	stw	r8,4(sp)
 400a840:	400b8580 	call	400b858 <memmove>
 400a844:	80800217 	ldw	r2,8(r16)
 400a848:	80c00017 	ldw	r3,0(r16)
 400a84c:	da000117 	ldw	r8,4(sp)
 400a850:	1585c83a 	sub	r2,r2,r22
 400a854:	1dad883a 	add	r22,r3,r22
 400a858:	80800215 	stw	r2,8(r16)
 400a85c:	85800015 	stw	r22,0(r16)
 400a860:	003fbf06 	br	400a760 <__alt_data_end+0xfc00a760>
 400a864:	81000017 	ldw	r4,0(r16)
 400a868:	9027883a 	mov	r19,r18
 400a86c:	902f883a 	mov	r23,r18
 400a870:	003f6c06 	br	400a624 <__alt_data_end+0xfc00a624>
 400a874:	900d883a 	mov	r6,r18
 400a878:	01400284 	movi	r5,10
 400a87c:	e009883a 	mov	r4,fp
 400a880:	400b62c0 	call	400b62c <memchr>
 400a884:	10003e26 	beq	r2,zero,400a980 <__sfvwrite_r+0x498>
 400a888:	10800044 	addi	r2,r2,1
 400a88c:	1727c83a 	sub	r19,r2,fp
 400a890:	02000044 	movi	r8,1
 400a894:	003f9d06 	br	400a70c <__alt_data_end+0xfc00a70c>
 400a898:	80800517 	ldw	r2,20(r16)
 400a89c:	81400417 	ldw	r5,16(r16)
 400a8a0:	81c00017 	ldw	r7,0(r16)
 400a8a4:	10a7883a 	add	r19,r2,r2
 400a8a8:	9885883a 	add	r2,r19,r2
 400a8ac:	1026d7fa 	srli	r19,r2,31
 400a8b0:	396dc83a 	sub	r22,r7,r5
 400a8b4:	b1000044 	addi	r4,r22,1
 400a8b8:	9885883a 	add	r2,r19,r2
 400a8bc:	1027d07a 	srai	r19,r2,1
 400a8c0:	2485883a 	add	r2,r4,r18
 400a8c4:	980d883a 	mov	r6,r19
 400a8c8:	9880022e 	bgeu	r19,r2,400a8d4 <__sfvwrite_r+0x3ec>
 400a8cc:	1027883a 	mov	r19,r2
 400a8d0:	100d883a 	mov	r6,r2
 400a8d4:	18c1000c 	andi	r3,r3,1024
 400a8d8:	18001c26 	beq	r3,zero,400a94c <__sfvwrite_r+0x464>
 400a8dc:	300b883a 	mov	r5,r6
 400a8e0:	a809883a 	mov	r4,r21
 400a8e4:	400ae200 	call	400ae20 <_malloc_r>
 400a8e8:	102f883a 	mov	r23,r2
 400a8ec:	10002926 	beq	r2,zero,400a994 <__sfvwrite_r+0x4ac>
 400a8f0:	81400417 	ldw	r5,16(r16)
 400a8f4:	b00d883a 	mov	r6,r22
 400a8f8:	1009883a 	mov	r4,r2
 400a8fc:	400b7100 	call	400b710 <memcpy>
 400a900:	8080030b 	ldhu	r2,12(r16)
 400a904:	00fedfc4 	movi	r3,-1153
 400a908:	10c4703a 	and	r2,r2,r3
 400a90c:	10802014 	ori	r2,r2,128
 400a910:	8080030d 	sth	r2,12(r16)
 400a914:	bd89883a 	add	r4,r23,r22
 400a918:	9d8fc83a 	sub	r7,r19,r22
 400a91c:	85c00415 	stw	r23,16(r16)
 400a920:	84c00515 	stw	r19,20(r16)
 400a924:	81000015 	stw	r4,0(r16)
 400a928:	9027883a 	mov	r19,r18
 400a92c:	81c00215 	stw	r7,8(r16)
 400a930:	902f883a 	mov	r23,r18
 400a934:	003f3b06 	br	400a624 <__alt_data_end+0xfc00a624>
 400a938:	800b883a 	mov	r5,r16
 400a93c:	a809883a 	mov	r4,r21
 400a940:	4009c880 	call	4009c88 <_fflush_r>
 400a944:	103fb926 	beq	r2,zero,400a82c <__alt_data_end+0xfc00a82c>
 400a948:	003f6506 	br	400a6e0 <__alt_data_end+0xfc00a6e0>
 400a94c:	a809883a 	mov	r4,r21
 400a950:	400cc400 	call	400cc40 <_realloc_r>
 400a954:	102f883a 	mov	r23,r2
 400a958:	103fee1e 	bne	r2,zero,400a914 <__alt_data_end+0xfc00a914>
 400a95c:	81400417 	ldw	r5,16(r16)
 400a960:	a809883a 	mov	r4,r21
 400a964:	400a1d80 	call	400a1d8 <_free_r>
 400a968:	8080030b 	ldhu	r2,12(r16)
 400a96c:	00ffdfc4 	movi	r3,-129
 400a970:	1884703a 	and	r2,r3,r2
 400a974:	00c00304 	movi	r3,12
 400a978:	a8c00015 	stw	r3,0(r21)
 400a97c:	003f5906 	br	400a6e4 <__alt_data_end+0xfc00a6e4>
 400a980:	94c00044 	addi	r19,r18,1
 400a984:	02000044 	movi	r8,1
 400a988:	003f6006 	br	400a70c <__alt_data_end+0xfc00a70c>
 400a98c:	00bfffc4 	movi	r2,-1
 400a990:	003f0306 	br	400a5a0 <__alt_data_end+0xfc00a5a0>
 400a994:	00800304 	movi	r2,12
 400a998:	a8800015 	stw	r2,0(r21)
 400a99c:	8080030b 	ldhu	r2,12(r16)
 400a9a0:	003f5006 	br	400a6e4 <__alt_data_end+0xfc00a6e4>

0400a9a4 <_fwalk>:
 400a9a4:	defff704 	addi	sp,sp,-36
 400a9a8:	dd000415 	stw	r20,16(sp)
 400a9ac:	dfc00815 	stw	ra,32(sp)
 400a9b0:	ddc00715 	stw	r23,28(sp)
 400a9b4:	dd800615 	stw	r22,24(sp)
 400a9b8:	dd400515 	stw	r21,20(sp)
 400a9bc:	dcc00315 	stw	r19,12(sp)
 400a9c0:	dc800215 	stw	r18,8(sp)
 400a9c4:	dc400115 	stw	r17,4(sp)
 400a9c8:	dc000015 	stw	r16,0(sp)
 400a9cc:	2500b804 	addi	r20,r4,736
 400a9d0:	a0002326 	beq	r20,zero,400aa60 <_fwalk+0xbc>
 400a9d4:	282b883a 	mov	r21,r5
 400a9d8:	002f883a 	mov	r23,zero
 400a9dc:	05800044 	movi	r22,1
 400a9e0:	04ffffc4 	movi	r19,-1
 400a9e4:	a4400117 	ldw	r17,4(r20)
 400a9e8:	a4800217 	ldw	r18,8(r20)
 400a9ec:	8c7fffc4 	addi	r17,r17,-1
 400a9f0:	88000d16 	blt	r17,zero,400aa28 <_fwalk+0x84>
 400a9f4:	94000304 	addi	r16,r18,12
 400a9f8:	94800384 	addi	r18,r18,14
 400a9fc:	8080000b 	ldhu	r2,0(r16)
 400aa00:	8c7fffc4 	addi	r17,r17,-1
 400aa04:	813ffd04 	addi	r4,r16,-12
 400aa08:	b080042e 	bgeu	r22,r2,400aa1c <_fwalk+0x78>
 400aa0c:	9080000f 	ldh	r2,0(r18)
 400aa10:	14c00226 	beq	r2,r19,400aa1c <_fwalk+0x78>
 400aa14:	a83ee83a 	callr	r21
 400aa18:	b8aeb03a 	or	r23,r23,r2
 400aa1c:	84001a04 	addi	r16,r16,104
 400aa20:	94801a04 	addi	r18,r18,104
 400aa24:	8cfff51e 	bne	r17,r19,400a9fc <__alt_data_end+0xfc00a9fc>
 400aa28:	a5000017 	ldw	r20,0(r20)
 400aa2c:	a03fed1e 	bne	r20,zero,400a9e4 <__alt_data_end+0xfc00a9e4>
 400aa30:	b805883a 	mov	r2,r23
 400aa34:	dfc00817 	ldw	ra,32(sp)
 400aa38:	ddc00717 	ldw	r23,28(sp)
 400aa3c:	dd800617 	ldw	r22,24(sp)
 400aa40:	dd400517 	ldw	r21,20(sp)
 400aa44:	dd000417 	ldw	r20,16(sp)
 400aa48:	dcc00317 	ldw	r19,12(sp)
 400aa4c:	dc800217 	ldw	r18,8(sp)
 400aa50:	dc400117 	ldw	r17,4(sp)
 400aa54:	dc000017 	ldw	r16,0(sp)
 400aa58:	dec00904 	addi	sp,sp,36
 400aa5c:	f800283a 	ret
 400aa60:	002f883a 	mov	r23,zero
 400aa64:	003ff206 	br	400aa30 <__alt_data_end+0xfc00aa30>

0400aa68 <_fwalk_reent>:
 400aa68:	defff704 	addi	sp,sp,-36
 400aa6c:	dd000415 	stw	r20,16(sp)
 400aa70:	dfc00815 	stw	ra,32(sp)
 400aa74:	ddc00715 	stw	r23,28(sp)
 400aa78:	dd800615 	stw	r22,24(sp)
 400aa7c:	dd400515 	stw	r21,20(sp)
 400aa80:	dcc00315 	stw	r19,12(sp)
 400aa84:	dc800215 	stw	r18,8(sp)
 400aa88:	dc400115 	stw	r17,4(sp)
 400aa8c:	dc000015 	stw	r16,0(sp)
 400aa90:	2500b804 	addi	r20,r4,736
 400aa94:	a0002326 	beq	r20,zero,400ab24 <_fwalk_reent+0xbc>
 400aa98:	282b883a 	mov	r21,r5
 400aa9c:	2027883a 	mov	r19,r4
 400aaa0:	002f883a 	mov	r23,zero
 400aaa4:	05800044 	movi	r22,1
 400aaa8:	04bfffc4 	movi	r18,-1
 400aaac:	a4400117 	ldw	r17,4(r20)
 400aab0:	a4000217 	ldw	r16,8(r20)
 400aab4:	8c7fffc4 	addi	r17,r17,-1
 400aab8:	88000c16 	blt	r17,zero,400aaec <_fwalk_reent+0x84>
 400aabc:	84000304 	addi	r16,r16,12
 400aac0:	8080000b 	ldhu	r2,0(r16)
 400aac4:	8c7fffc4 	addi	r17,r17,-1
 400aac8:	817ffd04 	addi	r5,r16,-12
 400aacc:	b080052e 	bgeu	r22,r2,400aae4 <_fwalk_reent+0x7c>
 400aad0:	8080008f 	ldh	r2,2(r16)
 400aad4:	9809883a 	mov	r4,r19
 400aad8:	14800226 	beq	r2,r18,400aae4 <_fwalk_reent+0x7c>
 400aadc:	a83ee83a 	callr	r21
 400aae0:	b8aeb03a 	or	r23,r23,r2
 400aae4:	84001a04 	addi	r16,r16,104
 400aae8:	8cbff51e 	bne	r17,r18,400aac0 <__alt_data_end+0xfc00aac0>
 400aaec:	a5000017 	ldw	r20,0(r20)
 400aaf0:	a03fee1e 	bne	r20,zero,400aaac <__alt_data_end+0xfc00aaac>
 400aaf4:	b805883a 	mov	r2,r23
 400aaf8:	dfc00817 	ldw	ra,32(sp)
 400aafc:	ddc00717 	ldw	r23,28(sp)
 400ab00:	dd800617 	ldw	r22,24(sp)
 400ab04:	dd400517 	ldw	r21,20(sp)
 400ab08:	dd000417 	ldw	r20,16(sp)
 400ab0c:	dcc00317 	ldw	r19,12(sp)
 400ab10:	dc800217 	ldw	r18,8(sp)
 400ab14:	dc400117 	ldw	r17,4(sp)
 400ab18:	dc000017 	ldw	r16,0(sp)
 400ab1c:	dec00904 	addi	sp,sp,36
 400ab20:	f800283a 	ret
 400ab24:	002f883a 	mov	r23,zero
 400ab28:	003ff206 	br	400aaf4 <__alt_data_end+0xfc00aaf4>

0400ab2c <_gettimeofday_r>:
 400ab2c:	defffd04 	addi	sp,sp,-12
 400ab30:	2805883a 	mov	r2,r5
 400ab34:	dc000015 	stw	r16,0(sp)
 400ab38:	04010074 	movhi	r16,1025
 400ab3c:	dc400115 	stw	r17,4(sp)
 400ab40:	841a5404 	addi	r16,r16,26960
 400ab44:	2023883a 	mov	r17,r4
 400ab48:	300b883a 	mov	r5,r6
 400ab4c:	1009883a 	mov	r4,r2
 400ab50:	dfc00215 	stw	ra,8(sp)
 400ab54:	80000015 	stw	zero,0(r16)
 400ab58:	40101680 	call	4010168 <gettimeofday>
 400ab5c:	00ffffc4 	movi	r3,-1
 400ab60:	10c00526 	beq	r2,r3,400ab78 <_gettimeofday_r+0x4c>
 400ab64:	dfc00217 	ldw	ra,8(sp)
 400ab68:	dc400117 	ldw	r17,4(sp)
 400ab6c:	dc000017 	ldw	r16,0(sp)
 400ab70:	dec00304 	addi	sp,sp,12
 400ab74:	f800283a 	ret
 400ab78:	80c00017 	ldw	r3,0(r16)
 400ab7c:	183ff926 	beq	r3,zero,400ab64 <__alt_data_end+0xfc00ab64>
 400ab80:	88c00015 	stw	r3,0(r17)
 400ab84:	003ff706 	br	400ab64 <__alt_data_end+0xfc00ab64>

0400ab88 <_setlocale_r>:
 400ab88:	30001b26 	beq	r6,zero,400abf8 <_setlocale_r+0x70>
 400ab8c:	01410074 	movhi	r5,1025
 400ab90:	defffe04 	addi	sp,sp,-8
 400ab94:	294bea04 	addi	r5,r5,12200
 400ab98:	3009883a 	mov	r4,r6
 400ab9c:	dc000015 	stw	r16,0(sp)
 400aba0:	dfc00115 	stw	ra,4(sp)
 400aba4:	3021883a 	mov	r16,r6
 400aba8:	400d3340 	call	400d334 <strcmp>
 400abac:	1000061e 	bne	r2,zero,400abc8 <_setlocale_r+0x40>
 400abb0:	00810074 	movhi	r2,1025
 400abb4:	108bcb04 	addi	r2,r2,12076
 400abb8:	dfc00117 	ldw	ra,4(sp)
 400abbc:	dc000017 	ldw	r16,0(sp)
 400abc0:	dec00204 	addi	sp,sp,8
 400abc4:	f800283a 	ret
 400abc8:	01410074 	movhi	r5,1025
 400abcc:	294bcb04 	addi	r5,r5,12076
 400abd0:	8009883a 	mov	r4,r16
 400abd4:	400d3340 	call	400d334 <strcmp>
 400abd8:	103ff526 	beq	r2,zero,400abb0 <__alt_data_end+0xfc00abb0>
 400abdc:	01410074 	movhi	r5,1025
 400abe0:	294bd504 	addi	r5,r5,12116
 400abe4:	8009883a 	mov	r4,r16
 400abe8:	400d3340 	call	400d334 <strcmp>
 400abec:	103ff026 	beq	r2,zero,400abb0 <__alt_data_end+0xfc00abb0>
 400abf0:	0005883a 	mov	r2,zero
 400abf4:	003ff006 	br	400abb8 <__alt_data_end+0xfc00abb8>
 400abf8:	00810074 	movhi	r2,1025
 400abfc:	108bcb04 	addi	r2,r2,12076
 400ac00:	f800283a 	ret

0400ac04 <__locale_charset>:
 400ac04:	00810074 	movhi	r2,1025
 400ac08:	108d9a04 	addi	r2,r2,13928
 400ac0c:	f800283a 	ret

0400ac10 <__locale_mb_cur_max>:
 400ac10:	00810074 	movhi	r2,1025
 400ac14:	10935d04 	addi	r2,r2,19828
 400ac18:	10800017 	ldw	r2,0(r2)
 400ac1c:	f800283a 	ret

0400ac20 <__locale_msgcharset>:
 400ac20:	00810074 	movhi	r2,1025
 400ac24:	108d9204 	addi	r2,r2,13896
 400ac28:	f800283a 	ret

0400ac2c <__locale_cjk_lang>:
 400ac2c:	0005883a 	mov	r2,zero
 400ac30:	f800283a 	ret

0400ac34 <_localeconv_r>:
 400ac34:	00810074 	movhi	r2,1025
 400ac38:	108da204 	addi	r2,r2,13960
 400ac3c:	f800283a 	ret

0400ac40 <setlocale>:
 400ac40:	00810074 	movhi	r2,1025
 400ac44:	10935c04 	addi	r2,r2,19824
 400ac48:	280d883a 	mov	r6,r5
 400ac4c:	200b883a 	mov	r5,r4
 400ac50:	11000017 	ldw	r4,0(r2)
 400ac54:	400ab881 	jmpi	400ab88 <_setlocale_r>

0400ac58 <localeconv>:
 400ac58:	00810074 	movhi	r2,1025
 400ac5c:	108da204 	addi	r2,r2,13960
 400ac60:	f800283a 	ret

0400ac64 <__smakebuf_r>:
 400ac64:	2880030b 	ldhu	r2,12(r5)
 400ac68:	10c0008c 	andi	r3,r2,2
 400ac6c:	1800411e 	bne	r3,zero,400ad74 <__smakebuf_r+0x110>
 400ac70:	deffec04 	addi	sp,sp,-80
 400ac74:	dc000f15 	stw	r16,60(sp)
 400ac78:	2821883a 	mov	r16,r5
 400ac7c:	2940038f 	ldh	r5,14(r5)
 400ac80:	dc401015 	stw	r17,64(sp)
 400ac84:	dfc01315 	stw	ra,76(sp)
 400ac88:	dcc01215 	stw	r19,72(sp)
 400ac8c:	dc801115 	stw	r18,68(sp)
 400ac90:	2023883a 	mov	r17,r4
 400ac94:	28001c16 	blt	r5,zero,400ad08 <__smakebuf_r+0xa4>
 400ac98:	d80d883a 	mov	r6,sp
 400ac9c:	400f0340 	call	400f034 <_fstat_r>
 400aca0:	10001816 	blt	r2,zero,400ad04 <__smakebuf_r+0xa0>
 400aca4:	d8800117 	ldw	r2,4(sp)
 400aca8:	00e00014 	movui	r3,32768
 400acac:	10bc000c 	andi	r2,r2,61440
 400acb0:	14c80020 	cmpeqi	r19,r2,8192
 400acb4:	10c03726 	beq	r2,r3,400ad94 <__smakebuf_r+0x130>
 400acb8:	80c0030b 	ldhu	r3,12(r16)
 400acbc:	18c20014 	ori	r3,r3,2048
 400acc0:	80c0030d 	sth	r3,12(r16)
 400acc4:	00c80004 	movi	r3,8192
 400acc8:	10c0521e 	bne	r2,r3,400ae14 <__smakebuf_r+0x1b0>
 400accc:	8140038f 	ldh	r5,14(r16)
 400acd0:	8809883a 	mov	r4,r17
 400acd4:	400f0900 	call	400f090 <_isatty_r>
 400acd8:	10004c26 	beq	r2,zero,400ae0c <__smakebuf_r+0x1a8>
 400acdc:	8080030b 	ldhu	r2,12(r16)
 400ace0:	80c010c4 	addi	r3,r16,67
 400ace4:	80c00015 	stw	r3,0(r16)
 400ace8:	10800054 	ori	r2,r2,1
 400acec:	8080030d 	sth	r2,12(r16)
 400acf0:	00800044 	movi	r2,1
 400acf4:	80c00415 	stw	r3,16(r16)
 400acf8:	80800515 	stw	r2,20(r16)
 400acfc:	04810004 	movi	r18,1024
 400ad00:	00000706 	br	400ad20 <__smakebuf_r+0xbc>
 400ad04:	8080030b 	ldhu	r2,12(r16)
 400ad08:	10c0200c 	andi	r3,r2,128
 400ad0c:	18001f1e 	bne	r3,zero,400ad8c <__smakebuf_r+0x128>
 400ad10:	04810004 	movi	r18,1024
 400ad14:	10820014 	ori	r2,r2,2048
 400ad18:	8080030d 	sth	r2,12(r16)
 400ad1c:	0027883a 	mov	r19,zero
 400ad20:	900b883a 	mov	r5,r18
 400ad24:	8809883a 	mov	r4,r17
 400ad28:	400ae200 	call	400ae20 <_malloc_r>
 400ad2c:	10002c26 	beq	r2,zero,400ade0 <__smakebuf_r+0x17c>
 400ad30:	80c0030b 	ldhu	r3,12(r16)
 400ad34:	01010074 	movhi	r4,1025
 400ad38:	21274704 	addi	r4,r4,-25316
 400ad3c:	89000f15 	stw	r4,60(r17)
 400ad40:	18c02014 	ori	r3,r3,128
 400ad44:	80c0030d 	sth	r3,12(r16)
 400ad48:	80800015 	stw	r2,0(r16)
 400ad4c:	80800415 	stw	r2,16(r16)
 400ad50:	84800515 	stw	r18,20(r16)
 400ad54:	98001a1e 	bne	r19,zero,400adc0 <__smakebuf_r+0x15c>
 400ad58:	dfc01317 	ldw	ra,76(sp)
 400ad5c:	dcc01217 	ldw	r19,72(sp)
 400ad60:	dc801117 	ldw	r18,68(sp)
 400ad64:	dc401017 	ldw	r17,64(sp)
 400ad68:	dc000f17 	ldw	r16,60(sp)
 400ad6c:	dec01404 	addi	sp,sp,80
 400ad70:	f800283a 	ret
 400ad74:	288010c4 	addi	r2,r5,67
 400ad78:	28800015 	stw	r2,0(r5)
 400ad7c:	28800415 	stw	r2,16(r5)
 400ad80:	00800044 	movi	r2,1
 400ad84:	28800515 	stw	r2,20(r5)
 400ad88:	f800283a 	ret
 400ad8c:	04801004 	movi	r18,64
 400ad90:	003fe006 	br	400ad14 <__alt_data_end+0xfc00ad14>
 400ad94:	81000a17 	ldw	r4,40(r16)
 400ad98:	00c10074 	movhi	r3,1025
 400ad9c:	18f4b404 	addi	r3,r3,-11568
 400ada0:	20ffc51e 	bne	r4,r3,400acb8 <__alt_data_end+0xfc00acb8>
 400ada4:	8080030b 	ldhu	r2,12(r16)
 400ada8:	04810004 	movi	r18,1024
 400adac:	84801315 	stw	r18,76(r16)
 400adb0:	1484b03a 	or	r2,r2,r18
 400adb4:	8080030d 	sth	r2,12(r16)
 400adb8:	0027883a 	mov	r19,zero
 400adbc:	003fd806 	br	400ad20 <__alt_data_end+0xfc00ad20>
 400adc0:	8140038f 	ldh	r5,14(r16)
 400adc4:	8809883a 	mov	r4,r17
 400adc8:	400f0900 	call	400f090 <_isatty_r>
 400adcc:	103fe226 	beq	r2,zero,400ad58 <__alt_data_end+0xfc00ad58>
 400add0:	8080030b 	ldhu	r2,12(r16)
 400add4:	10800054 	ori	r2,r2,1
 400add8:	8080030d 	sth	r2,12(r16)
 400addc:	003fde06 	br	400ad58 <__alt_data_end+0xfc00ad58>
 400ade0:	8080030b 	ldhu	r2,12(r16)
 400ade4:	10c0800c 	andi	r3,r2,512
 400ade8:	183fdb1e 	bne	r3,zero,400ad58 <__alt_data_end+0xfc00ad58>
 400adec:	10800094 	ori	r2,r2,2
 400adf0:	80c010c4 	addi	r3,r16,67
 400adf4:	8080030d 	sth	r2,12(r16)
 400adf8:	00800044 	movi	r2,1
 400adfc:	80c00015 	stw	r3,0(r16)
 400ae00:	80c00415 	stw	r3,16(r16)
 400ae04:	80800515 	stw	r2,20(r16)
 400ae08:	003fd306 	br	400ad58 <__alt_data_end+0xfc00ad58>
 400ae0c:	04810004 	movi	r18,1024
 400ae10:	003fc306 	br	400ad20 <__alt_data_end+0xfc00ad20>
 400ae14:	0027883a 	mov	r19,zero
 400ae18:	04810004 	movi	r18,1024
 400ae1c:	003fc006 	br	400ad20 <__alt_data_end+0xfc00ad20>

0400ae20 <_malloc_r>:
 400ae20:	defff504 	addi	sp,sp,-44
 400ae24:	dc800315 	stw	r18,12(sp)
 400ae28:	dfc00a15 	stw	ra,40(sp)
 400ae2c:	df000915 	stw	fp,36(sp)
 400ae30:	ddc00815 	stw	r23,32(sp)
 400ae34:	dd800715 	stw	r22,28(sp)
 400ae38:	dd400615 	stw	r21,24(sp)
 400ae3c:	dd000515 	stw	r20,20(sp)
 400ae40:	dcc00415 	stw	r19,16(sp)
 400ae44:	dc400215 	stw	r17,8(sp)
 400ae48:	dc000115 	stw	r16,4(sp)
 400ae4c:	288002c4 	addi	r2,r5,11
 400ae50:	00c00584 	movi	r3,22
 400ae54:	2025883a 	mov	r18,r4
 400ae58:	18807f2e 	bgeu	r3,r2,400b058 <_malloc_r+0x238>
 400ae5c:	047ffe04 	movi	r17,-8
 400ae60:	1462703a 	and	r17,r2,r17
 400ae64:	8800a316 	blt	r17,zero,400b0f4 <_malloc_r+0x2d4>
 400ae68:	8940a236 	bltu	r17,r5,400b0f4 <_malloc_r+0x2d4>
 400ae6c:	40106b40 	call	40106b4 <__malloc_lock>
 400ae70:	00807dc4 	movi	r2,503
 400ae74:	1441e92e 	bgeu	r2,r17,400b61c <_malloc_r+0x7fc>
 400ae78:	8804d27a 	srli	r2,r17,9
 400ae7c:	1000a126 	beq	r2,zero,400b104 <_malloc_r+0x2e4>
 400ae80:	00c00104 	movi	r3,4
 400ae84:	18811e36 	bltu	r3,r2,400b300 <_malloc_r+0x4e0>
 400ae88:	8804d1ba 	srli	r2,r17,6
 400ae8c:	12000e44 	addi	r8,r2,57
 400ae90:	11c00e04 	addi	r7,r2,56
 400ae94:	4209883a 	add	r4,r8,r8
 400ae98:	04c10074 	movhi	r19,1025
 400ae9c:	2109883a 	add	r4,r4,r4
 400aea0:	9ccdb004 	addi	r19,r19,14016
 400aea4:	2109883a 	add	r4,r4,r4
 400aea8:	9909883a 	add	r4,r19,r4
 400aeac:	24000117 	ldw	r16,4(r4)
 400aeb0:	213ffe04 	addi	r4,r4,-8
 400aeb4:	24009726 	beq	r4,r16,400b114 <_malloc_r+0x2f4>
 400aeb8:	80800117 	ldw	r2,4(r16)
 400aebc:	01bfff04 	movi	r6,-4
 400aec0:	014003c4 	movi	r5,15
 400aec4:	1184703a 	and	r2,r2,r6
 400aec8:	1447c83a 	sub	r3,r2,r17
 400aecc:	28c00716 	blt	r5,r3,400aeec <_malloc_r+0xcc>
 400aed0:	1800920e 	bge	r3,zero,400b11c <_malloc_r+0x2fc>
 400aed4:	84000317 	ldw	r16,12(r16)
 400aed8:	24008e26 	beq	r4,r16,400b114 <_malloc_r+0x2f4>
 400aedc:	80800117 	ldw	r2,4(r16)
 400aee0:	1184703a 	and	r2,r2,r6
 400aee4:	1447c83a 	sub	r3,r2,r17
 400aee8:	28fff90e 	bge	r5,r3,400aed0 <__alt_data_end+0xfc00aed0>
 400aeec:	3809883a 	mov	r4,r7
 400aef0:	01810074 	movhi	r6,1025
 400aef4:	9c000417 	ldw	r16,16(r19)
 400aef8:	318db004 	addi	r6,r6,14016
 400aefc:	32000204 	addi	r8,r6,8
 400af00:	82013426 	beq	r16,r8,400b3d4 <_malloc_r+0x5b4>
 400af04:	80c00117 	ldw	r3,4(r16)
 400af08:	00bfff04 	movi	r2,-4
 400af0c:	188e703a 	and	r7,r3,r2
 400af10:	3c45c83a 	sub	r2,r7,r17
 400af14:	00c003c4 	movi	r3,15
 400af18:	18811f16 	blt	r3,r2,400b398 <_malloc_r+0x578>
 400af1c:	32000515 	stw	r8,20(r6)
 400af20:	32000415 	stw	r8,16(r6)
 400af24:	10007f0e 	bge	r2,zero,400b124 <_malloc_r+0x304>
 400af28:	00807fc4 	movi	r2,511
 400af2c:	11c0fd36 	bltu	r2,r7,400b324 <_malloc_r+0x504>
 400af30:	3806d0fa 	srli	r3,r7,3
 400af34:	01c00044 	movi	r7,1
 400af38:	30800117 	ldw	r2,4(r6)
 400af3c:	19400044 	addi	r5,r3,1
 400af40:	294b883a 	add	r5,r5,r5
 400af44:	1807d0ba 	srai	r3,r3,2
 400af48:	294b883a 	add	r5,r5,r5
 400af4c:	294b883a 	add	r5,r5,r5
 400af50:	298b883a 	add	r5,r5,r6
 400af54:	38c6983a 	sll	r3,r7,r3
 400af58:	29c00017 	ldw	r7,0(r5)
 400af5c:	2a7ffe04 	addi	r9,r5,-8
 400af60:	1886b03a 	or	r3,r3,r2
 400af64:	82400315 	stw	r9,12(r16)
 400af68:	81c00215 	stw	r7,8(r16)
 400af6c:	30c00115 	stw	r3,4(r6)
 400af70:	2c000015 	stw	r16,0(r5)
 400af74:	3c000315 	stw	r16,12(r7)
 400af78:	2005d0ba 	srai	r2,r4,2
 400af7c:	01400044 	movi	r5,1
 400af80:	288a983a 	sll	r5,r5,r2
 400af84:	19406f36 	bltu	r3,r5,400b144 <_malloc_r+0x324>
 400af88:	28c4703a 	and	r2,r5,r3
 400af8c:	10000a1e 	bne	r2,zero,400afb8 <_malloc_r+0x198>
 400af90:	00bfff04 	movi	r2,-4
 400af94:	294b883a 	add	r5,r5,r5
 400af98:	2088703a 	and	r4,r4,r2
 400af9c:	28c4703a 	and	r2,r5,r3
 400afa0:	21000104 	addi	r4,r4,4
 400afa4:	1000041e 	bne	r2,zero,400afb8 <_malloc_r+0x198>
 400afa8:	294b883a 	add	r5,r5,r5
 400afac:	28c4703a 	and	r2,r5,r3
 400afb0:	21000104 	addi	r4,r4,4
 400afb4:	103ffc26 	beq	r2,zero,400afa8 <__alt_data_end+0xfc00afa8>
 400afb8:	02bfff04 	movi	r10,-4
 400afbc:	024003c4 	movi	r9,15
 400afc0:	21800044 	addi	r6,r4,1
 400afc4:	318d883a 	add	r6,r6,r6
 400afc8:	318d883a 	add	r6,r6,r6
 400afcc:	318d883a 	add	r6,r6,r6
 400afd0:	998d883a 	add	r6,r19,r6
 400afd4:	333ffe04 	addi	r12,r6,-8
 400afd8:	2017883a 	mov	r11,r4
 400afdc:	31800104 	addi	r6,r6,4
 400afe0:	34000017 	ldw	r16,0(r6)
 400afe4:	31fffd04 	addi	r7,r6,-12
 400afe8:	81c0041e 	bne	r16,r7,400affc <_malloc_r+0x1dc>
 400afec:	0000fb06 	br	400b3dc <_malloc_r+0x5bc>
 400aff0:	1801030e 	bge	r3,zero,400b400 <_malloc_r+0x5e0>
 400aff4:	84000317 	ldw	r16,12(r16)
 400aff8:	81c0f826 	beq	r16,r7,400b3dc <_malloc_r+0x5bc>
 400affc:	80800117 	ldw	r2,4(r16)
 400b000:	1284703a 	and	r2,r2,r10
 400b004:	1447c83a 	sub	r3,r2,r17
 400b008:	48fff90e 	bge	r9,r3,400aff0 <__alt_data_end+0xfc00aff0>
 400b00c:	80800317 	ldw	r2,12(r16)
 400b010:	81000217 	ldw	r4,8(r16)
 400b014:	89400054 	ori	r5,r17,1
 400b018:	81400115 	stw	r5,4(r16)
 400b01c:	20800315 	stw	r2,12(r4)
 400b020:	11000215 	stw	r4,8(r2)
 400b024:	8463883a 	add	r17,r16,r17
 400b028:	9c400515 	stw	r17,20(r19)
 400b02c:	9c400415 	stw	r17,16(r19)
 400b030:	18800054 	ori	r2,r3,1
 400b034:	88800115 	stw	r2,4(r17)
 400b038:	8a000315 	stw	r8,12(r17)
 400b03c:	8a000215 	stw	r8,8(r17)
 400b040:	88e3883a 	add	r17,r17,r3
 400b044:	88c00015 	stw	r3,0(r17)
 400b048:	9009883a 	mov	r4,r18
 400b04c:	40106d80 	call	40106d8 <__malloc_unlock>
 400b050:	80800204 	addi	r2,r16,8
 400b054:	00001b06 	br	400b0c4 <_malloc_r+0x2a4>
 400b058:	04400404 	movi	r17,16
 400b05c:	89402536 	bltu	r17,r5,400b0f4 <_malloc_r+0x2d4>
 400b060:	40106b40 	call	40106b4 <__malloc_lock>
 400b064:	00800184 	movi	r2,6
 400b068:	01000084 	movi	r4,2
 400b06c:	04c10074 	movhi	r19,1025
 400b070:	1085883a 	add	r2,r2,r2
 400b074:	9ccdb004 	addi	r19,r19,14016
 400b078:	1085883a 	add	r2,r2,r2
 400b07c:	9885883a 	add	r2,r19,r2
 400b080:	14000117 	ldw	r16,4(r2)
 400b084:	10fffe04 	addi	r3,r2,-8
 400b088:	80c0d926 	beq	r16,r3,400b3f0 <_malloc_r+0x5d0>
 400b08c:	80c00117 	ldw	r3,4(r16)
 400b090:	81000317 	ldw	r4,12(r16)
 400b094:	00bfff04 	movi	r2,-4
 400b098:	1884703a 	and	r2,r3,r2
 400b09c:	81400217 	ldw	r5,8(r16)
 400b0a0:	8085883a 	add	r2,r16,r2
 400b0a4:	10c00117 	ldw	r3,4(r2)
 400b0a8:	29000315 	stw	r4,12(r5)
 400b0ac:	21400215 	stw	r5,8(r4)
 400b0b0:	18c00054 	ori	r3,r3,1
 400b0b4:	10c00115 	stw	r3,4(r2)
 400b0b8:	9009883a 	mov	r4,r18
 400b0bc:	40106d80 	call	40106d8 <__malloc_unlock>
 400b0c0:	80800204 	addi	r2,r16,8
 400b0c4:	dfc00a17 	ldw	ra,40(sp)
 400b0c8:	df000917 	ldw	fp,36(sp)
 400b0cc:	ddc00817 	ldw	r23,32(sp)
 400b0d0:	dd800717 	ldw	r22,28(sp)
 400b0d4:	dd400617 	ldw	r21,24(sp)
 400b0d8:	dd000517 	ldw	r20,20(sp)
 400b0dc:	dcc00417 	ldw	r19,16(sp)
 400b0e0:	dc800317 	ldw	r18,12(sp)
 400b0e4:	dc400217 	ldw	r17,8(sp)
 400b0e8:	dc000117 	ldw	r16,4(sp)
 400b0ec:	dec00b04 	addi	sp,sp,44
 400b0f0:	f800283a 	ret
 400b0f4:	00800304 	movi	r2,12
 400b0f8:	90800015 	stw	r2,0(r18)
 400b0fc:	0005883a 	mov	r2,zero
 400b100:	003ff006 	br	400b0c4 <__alt_data_end+0xfc00b0c4>
 400b104:	01002004 	movi	r4,128
 400b108:	02001004 	movi	r8,64
 400b10c:	01c00fc4 	movi	r7,63
 400b110:	003f6106 	br	400ae98 <__alt_data_end+0xfc00ae98>
 400b114:	4009883a 	mov	r4,r8
 400b118:	003f7506 	br	400aef0 <__alt_data_end+0xfc00aef0>
 400b11c:	81000317 	ldw	r4,12(r16)
 400b120:	003fde06 	br	400b09c <__alt_data_end+0xfc00b09c>
 400b124:	81c5883a 	add	r2,r16,r7
 400b128:	11400117 	ldw	r5,4(r2)
 400b12c:	9009883a 	mov	r4,r18
 400b130:	29400054 	ori	r5,r5,1
 400b134:	11400115 	stw	r5,4(r2)
 400b138:	40106d80 	call	40106d8 <__malloc_unlock>
 400b13c:	80800204 	addi	r2,r16,8
 400b140:	003fe006 	br	400b0c4 <__alt_data_end+0xfc00b0c4>
 400b144:	9c000217 	ldw	r16,8(r19)
 400b148:	00bfff04 	movi	r2,-4
 400b14c:	85800117 	ldw	r22,4(r16)
 400b150:	b0ac703a 	and	r22,r22,r2
 400b154:	b4400336 	bltu	r22,r17,400b164 <_malloc_r+0x344>
 400b158:	b445c83a 	sub	r2,r22,r17
 400b15c:	00c003c4 	movi	r3,15
 400b160:	18805d16 	blt	r3,r2,400b2d8 <_malloc_r+0x4b8>
 400b164:	05c10074 	movhi	r23,1025
 400b168:	00810074 	movhi	r2,1025
 400b16c:	109a5a04 	addi	r2,r2,26984
 400b170:	bdd35e04 	addi	r23,r23,19832
 400b174:	15400017 	ldw	r21,0(r2)
 400b178:	b8c00017 	ldw	r3,0(r23)
 400b17c:	00bfffc4 	movi	r2,-1
 400b180:	858d883a 	add	r6,r16,r22
 400b184:	8d6b883a 	add	r21,r17,r21
 400b188:	1880ea26 	beq	r3,r2,400b534 <_malloc_r+0x714>
 400b18c:	ad4403c4 	addi	r21,r21,4111
 400b190:	00bc0004 	movi	r2,-4096
 400b194:	a8aa703a 	and	r21,r21,r2
 400b198:	a80b883a 	mov	r5,r21
 400b19c:	9009883a 	mov	r4,r18
 400b1a0:	d9800015 	stw	r6,0(sp)
 400b1a4:	400d1a40 	call	400d1a4 <_sbrk_r>
 400b1a8:	1029883a 	mov	r20,r2
 400b1ac:	00bfffc4 	movi	r2,-1
 400b1b0:	d9800017 	ldw	r6,0(sp)
 400b1b4:	a080e826 	beq	r20,r2,400b558 <_malloc_r+0x738>
 400b1b8:	a180a636 	bltu	r20,r6,400b454 <_malloc_r+0x634>
 400b1bc:	07010074 	movhi	fp,1025
 400b1c0:	e71a6604 	addi	fp,fp,27032
 400b1c4:	e0800017 	ldw	r2,0(fp)
 400b1c8:	a887883a 	add	r3,r21,r2
 400b1cc:	e0c00015 	stw	r3,0(fp)
 400b1d0:	3500e626 	beq	r6,r20,400b56c <_malloc_r+0x74c>
 400b1d4:	b9000017 	ldw	r4,0(r23)
 400b1d8:	00bfffc4 	movi	r2,-1
 400b1dc:	2080ee26 	beq	r4,r2,400b598 <_malloc_r+0x778>
 400b1e0:	a185c83a 	sub	r2,r20,r6
 400b1e4:	10c5883a 	add	r2,r2,r3
 400b1e8:	e0800015 	stw	r2,0(fp)
 400b1ec:	a0c001cc 	andi	r3,r20,7
 400b1f0:	1800bc26 	beq	r3,zero,400b4e4 <_malloc_r+0x6c4>
 400b1f4:	a0e9c83a 	sub	r20,r20,r3
 400b1f8:	00840204 	movi	r2,4104
 400b1fc:	a5000204 	addi	r20,r20,8
 400b200:	10c7c83a 	sub	r3,r2,r3
 400b204:	a545883a 	add	r2,r20,r21
 400b208:	1083ffcc 	andi	r2,r2,4095
 400b20c:	18abc83a 	sub	r21,r3,r2
 400b210:	a80b883a 	mov	r5,r21
 400b214:	9009883a 	mov	r4,r18
 400b218:	400d1a40 	call	400d1a4 <_sbrk_r>
 400b21c:	00ffffc4 	movi	r3,-1
 400b220:	10c0e126 	beq	r2,r3,400b5a8 <_malloc_r+0x788>
 400b224:	1505c83a 	sub	r2,r2,r20
 400b228:	1545883a 	add	r2,r2,r21
 400b22c:	10800054 	ori	r2,r2,1
 400b230:	e0c00017 	ldw	r3,0(fp)
 400b234:	9d000215 	stw	r20,8(r19)
 400b238:	a0800115 	stw	r2,4(r20)
 400b23c:	a8c7883a 	add	r3,r21,r3
 400b240:	e0c00015 	stw	r3,0(fp)
 400b244:	84c00e26 	beq	r16,r19,400b280 <_malloc_r+0x460>
 400b248:	018003c4 	movi	r6,15
 400b24c:	3580a72e 	bgeu	r6,r22,400b4ec <_malloc_r+0x6cc>
 400b250:	81400117 	ldw	r5,4(r16)
 400b254:	013ffe04 	movi	r4,-8
 400b258:	b0bffd04 	addi	r2,r22,-12
 400b25c:	1104703a 	and	r2,r2,r4
 400b260:	2900004c 	andi	r4,r5,1
 400b264:	2088b03a 	or	r4,r4,r2
 400b268:	81000115 	stw	r4,4(r16)
 400b26c:	01400144 	movi	r5,5
 400b270:	8089883a 	add	r4,r16,r2
 400b274:	21400115 	stw	r5,4(r4)
 400b278:	21400215 	stw	r5,8(r4)
 400b27c:	3080cd36 	bltu	r6,r2,400b5b4 <_malloc_r+0x794>
 400b280:	00810074 	movhi	r2,1025
 400b284:	109a5904 	addi	r2,r2,26980
 400b288:	11000017 	ldw	r4,0(r2)
 400b28c:	20c0012e 	bgeu	r4,r3,400b294 <_malloc_r+0x474>
 400b290:	10c00015 	stw	r3,0(r2)
 400b294:	00810074 	movhi	r2,1025
 400b298:	109a5804 	addi	r2,r2,26976
 400b29c:	11000017 	ldw	r4,0(r2)
 400b2a0:	9c000217 	ldw	r16,8(r19)
 400b2a4:	20c0012e 	bgeu	r4,r3,400b2ac <_malloc_r+0x48c>
 400b2a8:	10c00015 	stw	r3,0(r2)
 400b2ac:	80c00117 	ldw	r3,4(r16)
 400b2b0:	00bfff04 	movi	r2,-4
 400b2b4:	1886703a 	and	r3,r3,r2
 400b2b8:	1c45c83a 	sub	r2,r3,r17
 400b2bc:	1c400236 	bltu	r3,r17,400b2c8 <_malloc_r+0x4a8>
 400b2c0:	00c003c4 	movi	r3,15
 400b2c4:	18800416 	blt	r3,r2,400b2d8 <_malloc_r+0x4b8>
 400b2c8:	9009883a 	mov	r4,r18
 400b2cc:	40106d80 	call	40106d8 <__malloc_unlock>
 400b2d0:	0005883a 	mov	r2,zero
 400b2d4:	003f7b06 	br	400b0c4 <__alt_data_end+0xfc00b0c4>
 400b2d8:	88c00054 	ori	r3,r17,1
 400b2dc:	80c00115 	stw	r3,4(r16)
 400b2e0:	8463883a 	add	r17,r16,r17
 400b2e4:	10800054 	ori	r2,r2,1
 400b2e8:	9c400215 	stw	r17,8(r19)
 400b2ec:	88800115 	stw	r2,4(r17)
 400b2f0:	9009883a 	mov	r4,r18
 400b2f4:	40106d80 	call	40106d8 <__malloc_unlock>
 400b2f8:	80800204 	addi	r2,r16,8
 400b2fc:	003f7106 	br	400b0c4 <__alt_data_end+0xfc00b0c4>
 400b300:	00c00504 	movi	r3,20
 400b304:	18804a2e 	bgeu	r3,r2,400b430 <_malloc_r+0x610>
 400b308:	00c01504 	movi	r3,84
 400b30c:	18806e36 	bltu	r3,r2,400b4c8 <_malloc_r+0x6a8>
 400b310:	8804d33a 	srli	r2,r17,12
 400b314:	12001bc4 	addi	r8,r2,111
 400b318:	11c01b84 	addi	r7,r2,110
 400b31c:	4209883a 	add	r4,r8,r8
 400b320:	003edd06 	br	400ae98 <__alt_data_end+0xfc00ae98>
 400b324:	3804d27a 	srli	r2,r7,9
 400b328:	00c00104 	movi	r3,4
 400b32c:	1880442e 	bgeu	r3,r2,400b440 <_malloc_r+0x620>
 400b330:	00c00504 	movi	r3,20
 400b334:	18808136 	bltu	r3,r2,400b53c <_malloc_r+0x71c>
 400b338:	11401704 	addi	r5,r2,92
 400b33c:	10c016c4 	addi	r3,r2,91
 400b340:	294b883a 	add	r5,r5,r5
 400b344:	294b883a 	add	r5,r5,r5
 400b348:	294b883a 	add	r5,r5,r5
 400b34c:	994b883a 	add	r5,r19,r5
 400b350:	28800017 	ldw	r2,0(r5)
 400b354:	01810074 	movhi	r6,1025
 400b358:	297ffe04 	addi	r5,r5,-8
 400b35c:	318db004 	addi	r6,r6,14016
 400b360:	28806526 	beq	r5,r2,400b4f8 <_malloc_r+0x6d8>
 400b364:	01bfff04 	movi	r6,-4
 400b368:	10c00117 	ldw	r3,4(r2)
 400b36c:	1986703a 	and	r3,r3,r6
 400b370:	38c0022e 	bgeu	r7,r3,400b37c <_malloc_r+0x55c>
 400b374:	10800217 	ldw	r2,8(r2)
 400b378:	28bffb1e 	bne	r5,r2,400b368 <__alt_data_end+0xfc00b368>
 400b37c:	11400317 	ldw	r5,12(r2)
 400b380:	98c00117 	ldw	r3,4(r19)
 400b384:	81400315 	stw	r5,12(r16)
 400b388:	80800215 	stw	r2,8(r16)
 400b38c:	2c000215 	stw	r16,8(r5)
 400b390:	14000315 	stw	r16,12(r2)
 400b394:	003ef806 	br	400af78 <__alt_data_end+0xfc00af78>
 400b398:	88c00054 	ori	r3,r17,1
 400b39c:	80c00115 	stw	r3,4(r16)
 400b3a0:	8463883a 	add	r17,r16,r17
 400b3a4:	34400515 	stw	r17,20(r6)
 400b3a8:	34400415 	stw	r17,16(r6)
 400b3ac:	10c00054 	ori	r3,r2,1
 400b3b0:	8a000315 	stw	r8,12(r17)
 400b3b4:	8a000215 	stw	r8,8(r17)
 400b3b8:	88c00115 	stw	r3,4(r17)
 400b3bc:	88a3883a 	add	r17,r17,r2
 400b3c0:	88800015 	stw	r2,0(r17)
 400b3c4:	9009883a 	mov	r4,r18
 400b3c8:	40106d80 	call	40106d8 <__malloc_unlock>
 400b3cc:	80800204 	addi	r2,r16,8
 400b3d0:	003f3c06 	br	400b0c4 <__alt_data_end+0xfc00b0c4>
 400b3d4:	30c00117 	ldw	r3,4(r6)
 400b3d8:	003ee706 	br	400af78 <__alt_data_end+0xfc00af78>
 400b3dc:	5ac00044 	addi	r11,r11,1
 400b3e0:	588000cc 	andi	r2,r11,3
 400b3e4:	31800204 	addi	r6,r6,8
 400b3e8:	103efd1e 	bne	r2,zero,400afe0 <__alt_data_end+0xfc00afe0>
 400b3ec:	00002406 	br	400b480 <_malloc_r+0x660>
 400b3f0:	14000317 	ldw	r16,12(r2)
 400b3f4:	143f251e 	bne	r2,r16,400b08c <__alt_data_end+0xfc00b08c>
 400b3f8:	21000084 	addi	r4,r4,2
 400b3fc:	003ebc06 	br	400aef0 <__alt_data_end+0xfc00aef0>
 400b400:	8085883a 	add	r2,r16,r2
 400b404:	10c00117 	ldw	r3,4(r2)
 400b408:	81000317 	ldw	r4,12(r16)
 400b40c:	81400217 	ldw	r5,8(r16)
 400b410:	18c00054 	ori	r3,r3,1
 400b414:	10c00115 	stw	r3,4(r2)
 400b418:	29000315 	stw	r4,12(r5)
 400b41c:	21400215 	stw	r5,8(r4)
 400b420:	9009883a 	mov	r4,r18
 400b424:	40106d80 	call	40106d8 <__malloc_unlock>
 400b428:	80800204 	addi	r2,r16,8
 400b42c:	003f2506 	br	400b0c4 <__alt_data_end+0xfc00b0c4>
 400b430:	12001704 	addi	r8,r2,92
 400b434:	11c016c4 	addi	r7,r2,91
 400b438:	4209883a 	add	r4,r8,r8
 400b43c:	003e9606 	br	400ae98 <__alt_data_end+0xfc00ae98>
 400b440:	3804d1ba 	srli	r2,r7,6
 400b444:	11400e44 	addi	r5,r2,57
 400b448:	10c00e04 	addi	r3,r2,56
 400b44c:	294b883a 	add	r5,r5,r5
 400b450:	003fbc06 	br	400b344 <__alt_data_end+0xfc00b344>
 400b454:	84ff5926 	beq	r16,r19,400b1bc <__alt_data_end+0xfc00b1bc>
 400b458:	00810074 	movhi	r2,1025
 400b45c:	108db004 	addi	r2,r2,14016
 400b460:	14000217 	ldw	r16,8(r2)
 400b464:	00bfff04 	movi	r2,-4
 400b468:	80c00117 	ldw	r3,4(r16)
 400b46c:	1886703a 	and	r3,r3,r2
 400b470:	003f9106 	br	400b2b8 <__alt_data_end+0xfc00b2b8>
 400b474:	60800217 	ldw	r2,8(r12)
 400b478:	213fffc4 	addi	r4,r4,-1
 400b47c:	1300651e 	bne	r2,r12,400b614 <_malloc_r+0x7f4>
 400b480:	208000cc 	andi	r2,r4,3
 400b484:	633ffe04 	addi	r12,r12,-8
 400b488:	103ffa1e 	bne	r2,zero,400b474 <__alt_data_end+0xfc00b474>
 400b48c:	98800117 	ldw	r2,4(r19)
 400b490:	0146303a 	nor	r3,zero,r5
 400b494:	1884703a 	and	r2,r3,r2
 400b498:	98800115 	stw	r2,4(r19)
 400b49c:	294b883a 	add	r5,r5,r5
 400b4a0:	117f2836 	bltu	r2,r5,400b144 <__alt_data_end+0xfc00b144>
 400b4a4:	283f2726 	beq	r5,zero,400b144 <__alt_data_end+0xfc00b144>
 400b4a8:	2886703a 	and	r3,r5,r2
 400b4ac:	5809883a 	mov	r4,r11
 400b4b0:	183ec31e 	bne	r3,zero,400afc0 <__alt_data_end+0xfc00afc0>
 400b4b4:	294b883a 	add	r5,r5,r5
 400b4b8:	2886703a 	and	r3,r5,r2
 400b4bc:	21000104 	addi	r4,r4,4
 400b4c0:	183ffc26 	beq	r3,zero,400b4b4 <__alt_data_end+0xfc00b4b4>
 400b4c4:	003ebe06 	br	400afc0 <__alt_data_end+0xfc00afc0>
 400b4c8:	00c05504 	movi	r3,340
 400b4cc:	18801236 	bltu	r3,r2,400b518 <_malloc_r+0x6f8>
 400b4d0:	8804d3fa 	srli	r2,r17,15
 400b4d4:	12001e04 	addi	r8,r2,120
 400b4d8:	11c01dc4 	addi	r7,r2,119
 400b4dc:	4209883a 	add	r4,r8,r8
 400b4e0:	003e6d06 	br	400ae98 <__alt_data_end+0xfc00ae98>
 400b4e4:	00c40004 	movi	r3,4096
 400b4e8:	003f4606 	br	400b204 <__alt_data_end+0xfc00b204>
 400b4ec:	00800044 	movi	r2,1
 400b4f0:	a0800115 	stw	r2,4(r20)
 400b4f4:	003f7406 	br	400b2c8 <__alt_data_end+0xfc00b2c8>
 400b4f8:	1805d0ba 	srai	r2,r3,2
 400b4fc:	01c00044 	movi	r7,1
 400b500:	30c00117 	ldw	r3,4(r6)
 400b504:	388e983a 	sll	r7,r7,r2
 400b508:	2805883a 	mov	r2,r5
 400b50c:	38c6b03a 	or	r3,r7,r3
 400b510:	30c00115 	stw	r3,4(r6)
 400b514:	003f9b06 	br	400b384 <__alt_data_end+0xfc00b384>
 400b518:	00c15504 	movi	r3,1364
 400b51c:	18801a36 	bltu	r3,r2,400b588 <_malloc_r+0x768>
 400b520:	8804d4ba 	srli	r2,r17,18
 400b524:	12001f44 	addi	r8,r2,125
 400b528:	11c01f04 	addi	r7,r2,124
 400b52c:	4209883a 	add	r4,r8,r8
 400b530:	003e5906 	br	400ae98 <__alt_data_end+0xfc00ae98>
 400b534:	ad400404 	addi	r21,r21,16
 400b538:	003f1706 	br	400b198 <__alt_data_end+0xfc00b198>
 400b53c:	00c01504 	movi	r3,84
 400b540:	18802336 	bltu	r3,r2,400b5d0 <_malloc_r+0x7b0>
 400b544:	3804d33a 	srli	r2,r7,12
 400b548:	11401bc4 	addi	r5,r2,111
 400b54c:	10c01b84 	addi	r3,r2,110
 400b550:	294b883a 	add	r5,r5,r5
 400b554:	003f7b06 	br	400b344 <__alt_data_end+0xfc00b344>
 400b558:	9c000217 	ldw	r16,8(r19)
 400b55c:	00bfff04 	movi	r2,-4
 400b560:	80c00117 	ldw	r3,4(r16)
 400b564:	1886703a 	and	r3,r3,r2
 400b568:	003f5306 	br	400b2b8 <__alt_data_end+0xfc00b2b8>
 400b56c:	3083ffcc 	andi	r2,r6,4095
 400b570:	103f181e 	bne	r2,zero,400b1d4 <__alt_data_end+0xfc00b1d4>
 400b574:	99000217 	ldw	r4,8(r19)
 400b578:	b545883a 	add	r2,r22,r21
 400b57c:	10800054 	ori	r2,r2,1
 400b580:	20800115 	stw	r2,4(r4)
 400b584:	003f3e06 	br	400b280 <__alt_data_end+0xfc00b280>
 400b588:	01003f84 	movi	r4,254
 400b58c:	02001fc4 	movi	r8,127
 400b590:	01c01f84 	movi	r7,126
 400b594:	003e4006 	br	400ae98 <__alt_data_end+0xfc00ae98>
 400b598:	00810074 	movhi	r2,1025
 400b59c:	10935e04 	addi	r2,r2,19832
 400b5a0:	15000015 	stw	r20,0(r2)
 400b5a4:	003f1106 	br	400b1ec <__alt_data_end+0xfc00b1ec>
 400b5a8:	00800044 	movi	r2,1
 400b5ac:	002b883a 	mov	r21,zero
 400b5b0:	003f1f06 	br	400b230 <__alt_data_end+0xfc00b230>
 400b5b4:	81400204 	addi	r5,r16,8
 400b5b8:	9009883a 	mov	r4,r18
 400b5bc:	400a1d80 	call	400a1d8 <_free_r>
 400b5c0:	00810074 	movhi	r2,1025
 400b5c4:	109a6604 	addi	r2,r2,27032
 400b5c8:	10c00017 	ldw	r3,0(r2)
 400b5cc:	003f2c06 	br	400b280 <__alt_data_end+0xfc00b280>
 400b5d0:	00c05504 	movi	r3,340
 400b5d4:	18800536 	bltu	r3,r2,400b5ec <_malloc_r+0x7cc>
 400b5d8:	3804d3fa 	srli	r2,r7,15
 400b5dc:	11401e04 	addi	r5,r2,120
 400b5e0:	10c01dc4 	addi	r3,r2,119
 400b5e4:	294b883a 	add	r5,r5,r5
 400b5e8:	003f5606 	br	400b344 <__alt_data_end+0xfc00b344>
 400b5ec:	00c15504 	movi	r3,1364
 400b5f0:	18800536 	bltu	r3,r2,400b608 <_malloc_r+0x7e8>
 400b5f4:	3804d4ba 	srli	r2,r7,18
 400b5f8:	11401f44 	addi	r5,r2,125
 400b5fc:	10c01f04 	addi	r3,r2,124
 400b600:	294b883a 	add	r5,r5,r5
 400b604:	003f4f06 	br	400b344 <__alt_data_end+0xfc00b344>
 400b608:	01403f84 	movi	r5,254
 400b60c:	00c01f84 	movi	r3,126
 400b610:	003f4c06 	br	400b344 <__alt_data_end+0xfc00b344>
 400b614:	98800117 	ldw	r2,4(r19)
 400b618:	003fa006 	br	400b49c <__alt_data_end+0xfc00b49c>
 400b61c:	8808d0fa 	srli	r4,r17,3
 400b620:	20800044 	addi	r2,r4,1
 400b624:	1085883a 	add	r2,r2,r2
 400b628:	003e9006 	br	400b06c <__alt_data_end+0xfc00b06c>

0400b62c <memchr>:
 400b62c:	208000cc 	andi	r2,r4,3
 400b630:	280f883a 	mov	r7,r5
 400b634:	10003426 	beq	r2,zero,400b708 <memchr+0xdc>
 400b638:	30bfffc4 	addi	r2,r6,-1
 400b63c:	30001a26 	beq	r6,zero,400b6a8 <memchr+0x7c>
 400b640:	20c00003 	ldbu	r3,0(r4)
 400b644:	29803fcc 	andi	r6,r5,255
 400b648:	30c0051e 	bne	r6,r3,400b660 <memchr+0x34>
 400b64c:	00001806 	br	400b6b0 <memchr+0x84>
 400b650:	10001526 	beq	r2,zero,400b6a8 <memchr+0x7c>
 400b654:	20c00003 	ldbu	r3,0(r4)
 400b658:	10bfffc4 	addi	r2,r2,-1
 400b65c:	30c01426 	beq	r6,r3,400b6b0 <memchr+0x84>
 400b660:	21000044 	addi	r4,r4,1
 400b664:	20c000cc 	andi	r3,r4,3
 400b668:	183ff91e 	bne	r3,zero,400b650 <__alt_data_end+0xfc00b650>
 400b66c:	020000c4 	movi	r8,3
 400b670:	40801136 	bltu	r8,r2,400b6b8 <memchr+0x8c>
 400b674:	10000c26 	beq	r2,zero,400b6a8 <memchr+0x7c>
 400b678:	20c00003 	ldbu	r3,0(r4)
 400b67c:	29403fcc 	andi	r5,r5,255
 400b680:	28c00b26 	beq	r5,r3,400b6b0 <memchr+0x84>
 400b684:	20c00044 	addi	r3,r4,1
 400b688:	39803fcc 	andi	r6,r7,255
 400b68c:	2089883a 	add	r4,r4,r2
 400b690:	00000306 	br	400b6a0 <memchr+0x74>
 400b694:	18c00044 	addi	r3,r3,1
 400b698:	197fffc3 	ldbu	r5,-1(r3)
 400b69c:	31400526 	beq	r6,r5,400b6b4 <memchr+0x88>
 400b6a0:	1805883a 	mov	r2,r3
 400b6a4:	20fffb1e 	bne	r4,r3,400b694 <__alt_data_end+0xfc00b694>
 400b6a8:	0005883a 	mov	r2,zero
 400b6ac:	f800283a 	ret
 400b6b0:	2005883a 	mov	r2,r4
 400b6b4:	f800283a 	ret
 400b6b8:	28c03fcc 	andi	r3,r5,255
 400b6bc:	1812923a 	slli	r9,r3,8
 400b6c0:	02ffbff4 	movhi	r11,65279
 400b6c4:	02a02074 	movhi	r10,32897
 400b6c8:	48d2b03a 	or	r9,r9,r3
 400b6cc:	4806943a 	slli	r3,r9,16
 400b6d0:	5affbfc4 	addi	r11,r11,-257
 400b6d4:	52a02004 	addi	r10,r10,-32640
 400b6d8:	48d2b03a 	or	r9,r9,r3
 400b6dc:	20c00017 	ldw	r3,0(r4)
 400b6e0:	48c6f03a 	xor	r3,r9,r3
 400b6e4:	1acd883a 	add	r6,r3,r11
 400b6e8:	00c6303a 	nor	r3,zero,r3
 400b6ec:	30c6703a 	and	r3,r6,r3
 400b6f0:	1a86703a 	and	r3,r3,r10
 400b6f4:	183fe01e 	bne	r3,zero,400b678 <__alt_data_end+0xfc00b678>
 400b6f8:	10bfff04 	addi	r2,r2,-4
 400b6fc:	21000104 	addi	r4,r4,4
 400b700:	40bff636 	bltu	r8,r2,400b6dc <__alt_data_end+0xfc00b6dc>
 400b704:	003fdb06 	br	400b674 <__alt_data_end+0xfc00b674>
 400b708:	3005883a 	mov	r2,r6
 400b70c:	003fd706 	br	400b66c <__alt_data_end+0xfc00b66c>

0400b710 <memcpy>:
 400b710:	defffd04 	addi	sp,sp,-12
 400b714:	dfc00215 	stw	ra,8(sp)
 400b718:	dc400115 	stw	r17,4(sp)
 400b71c:	dc000015 	stw	r16,0(sp)
 400b720:	00c003c4 	movi	r3,15
 400b724:	2005883a 	mov	r2,r4
 400b728:	1980452e 	bgeu	r3,r6,400b840 <memcpy+0x130>
 400b72c:	2906b03a 	or	r3,r5,r4
 400b730:	18c000cc 	andi	r3,r3,3
 400b734:	1800441e 	bne	r3,zero,400b848 <memcpy+0x138>
 400b738:	347ffc04 	addi	r17,r6,-16
 400b73c:	8822d13a 	srli	r17,r17,4
 400b740:	28c00104 	addi	r3,r5,4
 400b744:	23400104 	addi	r13,r4,4
 400b748:	8820913a 	slli	r16,r17,4
 400b74c:	2b000204 	addi	r12,r5,8
 400b750:	22c00204 	addi	r11,r4,8
 400b754:	84000504 	addi	r16,r16,20
 400b758:	2a800304 	addi	r10,r5,12
 400b75c:	22400304 	addi	r9,r4,12
 400b760:	2c21883a 	add	r16,r5,r16
 400b764:	2811883a 	mov	r8,r5
 400b768:	200f883a 	mov	r7,r4
 400b76c:	41000017 	ldw	r4,0(r8)
 400b770:	1fc00017 	ldw	ra,0(r3)
 400b774:	63c00017 	ldw	r15,0(r12)
 400b778:	39000015 	stw	r4,0(r7)
 400b77c:	53800017 	ldw	r14,0(r10)
 400b780:	6fc00015 	stw	ra,0(r13)
 400b784:	5bc00015 	stw	r15,0(r11)
 400b788:	4b800015 	stw	r14,0(r9)
 400b78c:	18c00404 	addi	r3,r3,16
 400b790:	39c00404 	addi	r7,r7,16
 400b794:	42000404 	addi	r8,r8,16
 400b798:	6b400404 	addi	r13,r13,16
 400b79c:	63000404 	addi	r12,r12,16
 400b7a0:	5ac00404 	addi	r11,r11,16
 400b7a4:	52800404 	addi	r10,r10,16
 400b7a8:	4a400404 	addi	r9,r9,16
 400b7ac:	1c3fef1e 	bne	r3,r16,400b76c <__alt_data_end+0xfc00b76c>
 400b7b0:	89c00044 	addi	r7,r17,1
 400b7b4:	380e913a 	slli	r7,r7,4
 400b7b8:	310003cc 	andi	r4,r6,15
 400b7bc:	02c000c4 	movi	r11,3
 400b7c0:	11c7883a 	add	r3,r2,r7
 400b7c4:	29cb883a 	add	r5,r5,r7
 400b7c8:	5900212e 	bgeu	r11,r4,400b850 <memcpy+0x140>
 400b7cc:	1813883a 	mov	r9,r3
 400b7d0:	2811883a 	mov	r8,r5
 400b7d4:	200f883a 	mov	r7,r4
 400b7d8:	42800017 	ldw	r10,0(r8)
 400b7dc:	4a400104 	addi	r9,r9,4
 400b7e0:	39ffff04 	addi	r7,r7,-4
 400b7e4:	4abfff15 	stw	r10,-4(r9)
 400b7e8:	42000104 	addi	r8,r8,4
 400b7ec:	59fffa36 	bltu	r11,r7,400b7d8 <__alt_data_end+0xfc00b7d8>
 400b7f0:	213fff04 	addi	r4,r4,-4
 400b7f4:	2008d0ba 	srli	r4,r4,2
 400b7f8:	318000cc 	andi	r6,r6,3
 400b7fc:	21000044 	addi	r4,r4,1
 400b800:	2109883a 	add	r4,r4,r4
 400b804:	2109883a 	add	r4,r4,r4
 400b808:	1907883a 	add	r3,r3,r4
 400b80c:	290b883a 	add	r5,r5,r4
 400b810:	30000626 	beq	r6,zero,400b82c <memcpy+0x11c>
 400b814:	198d883a 	add	r6,r3,r6
 400b818:	29c00003 	ldbu	r7,0(r5)
 400b81c:	18c00044 	addi	r3,r3,1
 400b820:	29400044 	addi	r5,r5,1
 400b824:	19ffffc5 	stb	r7,-1(r3)
 400b828:	19bffb1e 	bne	r3,r6,400b818 <__alt_data_end+0xfc00b818>
 400b82c:	dfc00217 	ldw	ra,8(sp)
 400b830:	dc400117 	ldw	r17,4(sp)
 400b834:	dc000017 	ldw	r16,0(sp)
 400b838:	dec00304 	addi	sp,sp,12
 400b83c:	f800283a 	ret
 400b840:	2007883a 	mov	r3,r4
 400b844:	003ff206 	br	400b810 <__alt_data_end+0xfc00b810>
 400b848:	2007883a 	mov	r3,r4
 400b84c:	003ff106 	br	400b814 <__alt_data_end+0xfc00b814>
 400b850:	200d883a 	mov	r6,r4
 400b854:	003fee06 	br	400b810 <__alt_data_end+0xfc00b810>

0400b858 <memmove>:
 400b858:	2005883a 	mov	r2,r4
 400b85c:	29000b2e 	bgeu	r5,r4,400b88c <memmove+0x34>
 400b860:	298f883a 	add	r7,r5,r6
 400b864:	21c0092e 	bgeu	r4,r7,400b88c <memmove+0x34>
 400b868:	2187883a 	add	r3,r4,r6
 400b86c:	198bc83a 	sub	r5,r3,r6
 400b870:	30004826 	beq	r6,zero,400b994 <memmove+0x13c>
 400b874:	39ffffc4 	addi	r7,r7,-1
 400b878:	39000003 	ldbu	r4,0(r7)
 400b87c:	18ffffc4 	addi	r3,r3,-1
 400b880:	19000005 	stb	r4,0(r3)
 400b884:	28fffb1e 	bne	r5,r3,400b874 <__alt_data_end+0xfc00b874>
 400b888:	f800283a 	ret
 400b88c:	00c003c4 	movi	r3,15
 400b890:	1980412e 	bgeu	r3,r6,400b998 <memmove+0x140>
 400b894:	2886b03a 	or	r3,r5,r2
 400b898:	18c000cc 	andi	r3,r3,3
 400b89c:	1800401e 	bne	r3,zero,400b9a0 <memmove+0x148>
 400b8a0:	33fffc04 	addi	r15,r6,-16
 400b8a4:	781ed13a 	srli	r15,r15,4
 400b8a8:	28c00104 	addi	r3,r5,4
 400b8ac:	13400104 	addi	r13,r2,4
 400b8b0:	781c913a 	slli	r14,r15,4
 400b8b4:	2b000204 	addi	r12,r5,8
 400b8b8:	12c00204 	addi	r11,r2,8
 400b8bc:	73800504 	addi	r14,r14,20
 400b8c0:	2a800304 	addi	r10,r5,12
 400b8c4:	12400304 	addi	r9,r2,12
 400b8c8:	2b9d883a 	add	r14,r5,r14
 400b8cc:	2811883a 	mov	r8,r5
 400b8d0:	100f883a 	mov	r7,r2
 400b8d4:	41000017 	ldw	r4,0(r8)
 400b8d8:	39c00404 	addi	r7,r7,16
 400b8dc:	18c00404 	addi	r3,r3,16
 400b8e0:	393ffc15 	stw	r4,-16(r7)
 400b8e4:	193ffc17 	ldw	r4,-16(r3)
 400b8e8:	6b400404 	addi	r13,r13,16
 400b8ec:	5ac00404 	addi	r11,r11,16
 400b8f0:	693ffc15 	stw	r4,-16(r13)
 400b8f4:	61000017 	ldw	r4,0(r12)
 400b8f8:	4a400404 	addi	r9,r9,16
 400b8fc:	42000404 	addi	r8,r8,16
 400b900:	593ffc15 	stw	r4,-16(r11)
 400b904:	51000017 	ldw	r4,0(r10)
 400b908:	63000404 	addi	r12,r12,16
 400b90c:	52800404 	addi	r10,r10,16
 400b910:	493ffc15 	stw	r4,-16(r9)
 400b914:	1bbfef1e 	bne	r3,r14,400b8d4 <__alt_data_end+0xfc00b8d4>
 400b918:	79000044 	addi	r4,r15,1
 400b91c:	2008913a 	slli	r4,r4,4
 400b920:	328003cc 	andi	r10,r6,15
 400b924:	02c000c4 	movi	r11,3
 400b928:	1107883a 	add	r3,r2,r4
 400b92c:	290b883a 	add	r5,r5,r4
 400b930:	5a801e2e 	bgeu	r11,r10,400b9ac <memmove+0x154>
 400b934:	1813883a 	mov	r9,r3
 400b938:	2811883a 	mov	r8,r5
 400b93c:	500f883a 	mov	r7,r10
 400b940:	41000017 	ldw	r4,0(r8)
 400b944:	4a400104 	addi	r9,r9,4
 400b948:	39ffff04 	addi	r7,r7,-4
 400b94c:	493fff15 	stw	r4,-4(r9)
 400b950:	42000104 	addi	r8,r8,4
 400b954:	59fffa36 	bltu	r11,r7,400b940 <__alt_data_end+0xfc00b940>
 400b958:	513fff04 	addi	r4,r10,-4
 400b95c:	2008d0ba 	srli	r4,r4,2
 400b960:	318000cc 	andi	r6,r6,3
 400b964:	21000044 	addi	r4,r4,1
 400b968:	2109883a 	add	r4,r4,r4
 400b96c:	2109883a 	add	r4,r4,r4
 400b970:	1907883a 	add	r3,r3,r4
 400b974:	290b883a 	add	r5,r5,r4
 400b978:	30000b26 	beq	r6,zero,400b9a8 <memmove+0x150>
 400b97c:	198d883a 	add	r6,r3,r6
 400b980:	29c00003 	ldbu	r7,0(r5)
 400b984:	18c00044 	addi	r3,r3,1
 400b988:	29400044 	addi	r5,r5,1
 400b98c:	19ffffc5 	stb	r7,-1(r3)
 400b990:	19bffb1e 	bne	r3,r6,400b980 <__alt_data_end+0xfc00b980>
 400b994:	f800283a 	ret
 400b998:	1007883a 	mov	r3,r2
 400b99c:	003ff606 	br	400b978 <__alt_data_end+0xfc00b978>
 400b9a0:	1007883a 	mov	r3,r2
 400b9a4:	003ff506 	br	400b97c <__alt_data_end+0xfc00b97c>
 400b9a8:	f800283a 	ret
 400b9ac:	500d883a 	mov	r6,r10
 400b9b0:	003ff106 	br	400b978 <__alt_data_end+0xfc00b978>

0400b9b4 <memset>:
 400b9b4:	20c000cc 	andi	r3,r4,3
 400b9b8:	2005883a 	mov	r2,r4
 400b9bc:	18004426 	beq	r3,zero,400bad0 <memset+0x11c>
 400b9c0:	31ffffc4 	addi	r7,r6,-1
 400b9c4:	30004026 	beq	r6,zero,400bac8 <memset+0x114>
 400b9c8:	2813883a 	mov	r9,r5
 400b9cc:	200d883a 	mov	r6,r4
 400b9d0:	2007883a 	mov	r3,r4
 400b9d4:	00000406 	br	400b9e8 <memset+0x34>
 400b9d8:	3a3fffc4 	addi	r8,r7,-1
 400b9dc:	31800044 	addi	r6,r6,1
 400b9e0:	38003926 	beq	r7,zero,400bac8 <memset+0x114>
 400b9e4:	400f883a 	mov	r7,r8
 400b9e8:	18c00044 	addi	r3,r3,1
 400b9ec:	32400005 	stb	r9,0(r6)
 400b9f0:	1a0000cc 	andi	r8,r3,3
 400b9f4:	403ff81e 	bne	r8,zero,400b9d8 <__alt_data_end+0xfc00b9d8>
 400b9f8:	010000c4 	movi	r4,3
 400b9fc:	21c02d2e 	bgeu	r4,r7,400bab4 <memset+0x100>
 400ba00:	29003fcc 	andi	r4,r5,255
 400ba04:	200c923a 	slli	r6,r4,8
 400ba08:	3108b03a 	or	r4,r6,r4
 400ba0c:	200c943a 	slli	r6,r4,16
 400ba10:	218cb03a 	or	r6,r4,r6
 400ba14:	010003c4 	movi	r4,15
 400ba18:	21c0182e 	bgeu	r4,r7,400ba7c <memset+0xc8>
 400ba1c:	3b3ffc04 	addi	r12,r7,-16
 400ba20:	6018d13a 	srli	r12,r12,4
 400ba24:	1a000104 	addi	r8,r3,4
 400ba28:	1ac00204 	addi	r11,r3,8
 400ba2c:	6008913a 	slli	r4,r12,4
 400ba30:	1a800304 	addi	r10,r3,12
 400ba34:	1813883a 	mov	r9,r3
 400ba38:	21000504 	addi	r4,r4,20
 400ba3c:	1909883a 	add	r4,r3,r4
 400ba40:	49800015 	stw	r6,0(r9)
 400ba44:	41800015 	stw	r6,0(r8)
 400ba48:	59800015 	stw	r6,0(r11)
 400ba4c:	51800015 	stw	r6,0(r10)
 400ba50:	42000404 	addi	r8,r8,16
 400ba54:	4a400404 	addi	r9,r9,16
 400ba58:	5ac00404 	addi	r11,r11,16
 400ba5c:	52800404 	addi	r10,r10,16
 400ba60:	413ff71e 	bne	r8,r4,400ba40 <__alt_data_end+0xfc00ba40>
 400ba64:	63000044 	addi	r12,r12,1
 400ba68:	6018913a 	slli	r12,r12,4
 400ba6c:	39c003cc 	andi	r7,r7,15
 400ba70:	010000c4 	movi	r4,3
 400ba74:	1b07883a 	add	r3,r3,r12
 400ba78:	21c00e2e 	bgeu	r4,r7,400bab4 <memset+0x100>
 400ba7c:	1813883a 	mov	r9,r3
 400ba80:	3811883a 	mov	r8,r7
 400ba84:	010000c4 	movi	r4,3
 400ba88:	49800015 	stw	r6,0(r9)
 400ba8c:	423fff04 	addi	r8,r8,-4
 400ba90:	4a400104 	addi	r9,r9,4
 400ba94:	223ffc36 	bltu	r4,r8,400ba88 <__alt_data_end+0xfc00ba88>
 400ba98:	393fff04 	addi	r4,r7,-4
 400ba9c:	2008d0ba 	srli	r4,r4,2
 400baa0:	39c000cc 	andi	r7,r7,3
 400baa4:	21000044 	addi	r4,r4,1
 400baa8:	2109883a 	add	r4,r4,r4
 400baac:	2109883a 	add	r4,r4,r4
 400bab0:	1907883a 	add	r3,r3,r4
 400bab4:	38000526 	beq	r7,zero,400bacc <memset+0x118>
 400bab8:	19cf883a 	add	r7,r3,r7
 400babc:	19400005 	stb	r5,0(r3)
 400bac0:	18c00044 	addi	r3,r3,1
 400bac4:	38fffd1e 	bne	r7,r3,400babc <__alt_data_end+0xfc00babc>
 400bac8:	f800283a 	ret
 400bacc:	f800283a 	ret
 400bad0:	2007883a 	mov	r3,r4
 400bad4:	300f883a 	mov	r7,r6
 400bad8:	003fc706 	br	400b9f8 <__alt_data_end+0xfc00b9f8>

0400badc <_Balloc>:
 400badc:	20801317 	ldw	r2,76(r4)
 400bae0:	defffc04 	addi	sp,sp,-16
 400bae4:	dc400115 	stw	r17,4(sp)
 400bae8:	dc000015 	stw	r16,0(sp)
 400baec:	dfc00315 	stw	ra,12(sp)
 400baf0:	dc800215 	stw	r18,8(sp)
 400baf4:	2023883a 	mov	r17,r4
 400baf8:	2821883a 	mov	r16,r5
 400bafc:	10000f26 	beq	r2,zero,400bb3c <_Balloc+0x60>
 400bb00:	8407883a 	add	r3,r16,r16
 400bb04:	18c7883a 	add	r3,r3,r3
 400bb08:	10c7883a 	add	r3,r2,r3
 400bb0c:	18800017 	ldw	r2,0(r3)
 400bb10:	10001126 	beq	r2,zero,400bb58 <_Balloc+0x7c>
 400bb14:	11000017 	ldw	r4,0(r2)
 400bb18:	19000015 	stw	r4,0(r3)
 400bb1c:	10000415 	stw	zero,16(r2)
 400bb20:	10000315 	stw	zero,12(r2)
 400bb24:	dfc00317 	ldw	ra,12(sp)
 400bb28:	dc800217 	ldw	r18,8(sp)
 400bb2c:	dc400117 	ldw	r17,4(sp)
 400bb30:	dc000017 	ldw	r16,0(sp)
 400bb34:	dec00404 	addi	sp,sp,16
 400bb38:	f800283a 	ret
 400bb3c:	01800844 	movi	r6,33
 400bb40:	01400104 	movi	r5,4
 400bb44:	400ec640 	call	400ec64 <_calloc_r>
 400bb48:	88801315 	stw	r2,76(r17)
 400bb4c:	103fec1e 	bne	r2,zero,400bb00 <__alt_data_end+0xfc00bb00>
 400bb50:	0005883a 	mov	r2,zero
 400bb54:	003ff306 	br	400bb24 <__alt_data_end+0xfc00bb24>
 400bb58:	01400044 	movi	r5,1
 400bb5c:	2c24983a 	sll	r18,r5,r16
 400bb60:	8809883a 	mov	r4,r17
 400bb64:	91800144 	addi	r6,r18,5
 400bb68:	318d883a 	add	r6,r6,r6
 400bb6c:	318d883a 	add	r6,r6,r6
 400bb70:	400ec640 	call	400ec64 <_calloc_r>
 400bb74:	103ff626 	beq	r2,zero,400bb50 <__alt_data_end+0xfc00bb50>
 400bb78:	14000115 	stw	r16,4(r2)
 400bb7c:	14800215 	stw	r18,8(r2)
 400bb80:	003fe606 	br	400bb1c <__alt_data_end+0xfc00bb1c>

0400bb84 <_Bfree>:
 400bb84:	28000826 	beq	r5,zero,400bba8 <_Bfree+0x24>
 400bb88:	28c00117 	ldw	r3,4(r5)
 400bb8c:	20801317 	ldw	r2,76(r4)
 400bb90:	18c7883a 	add	r3,r3,r3
 400bb94:	18c7883a 	add	r3,r3,r3
 400bb98:	10c5883a 	add	r2,r2,r3
 400bb9c:	10c00017 	ldw	r3,0(r2)
 400bba0:	28c00015 	stw	r3,0(r5)
 400bba4:	11400015 	stw	r5,0(r2)
 400bba8:	f800283a 	ret

0400bbac <__multadd>:
 400bbac:	defffa04 	addi	sp,sp,-24
 400bbb0:	dc800315 	stw	r18,12(sp)
 400bbb4:	dc400215 	stw	r17,8(sp)
 400bbb8:	dc000115 	stw	r16,4(sp)
 400bbbc:	2823883a 	mov	r17,r5
 400bbc0:	2c000417 	ldw	r16,16(r5)
 400bbc4:	dfc00515 	stw	ra,20(sp)
 400bbc8:	dcc00415 	stw	r19,16(sp)
 400bbcc:	2025883a 	mov	r18,r4
 400bbd0:	29400504 	addi	r5,r5,20
 400bbd4:	0011883a 	mov	r8,zero
 400bbd8:	28c00017 	ldw	r3,0(r5)
 400bbdc:	29400104 	addi	r5,r5,4
 400bbe0:	42000044 	addi	r8,r8,1
 400bbe4:	18bfffcc 	andi	r2,r3,65535
 400bbe8:	1185383a 	mul	r2,r2,r6
 400bbec:	1806d43a 	srli	r3,r3,16
 400bbf0:	11cf883a 	add	r7,r2,r7
 400bbf4:	3808d43a 	srli	r4,r7,16
 400bbf8:	1987383a 	mul	r3,r3,r6
 400bbfc:	38bfffcc 	andi	r2,r7,65535
 400bc00:	1907883a 	add	r3,r3,r4
 400bc04:	1808943a 	slli	r4,r3,16
 400bc08:	180ed43a 	srli	r7,r3,16
 400bc0c:	2085883a 	add	r2,r4,r2
 400bc10:	28bfff15 	stw	r2,-4(r5)
 400bc14:	443ff016 	blt	r8,r16,400bbd8 <__alt_data_end+0xfc00bbd8>
 400bc18:	38000926 	beq	r7,zero,400bc40 <__multadd+0x94>
 400bc1c:	88800217 	ldw	r2,8(r17)
 400bc20:	80800f0e 	bge	r16,r2,400bc60 <__multadd+0xb4>
 400bc24:	80800144 	addi	r2,r16,5
 400bc28:	1085883a 	add	r2,r2,r2
 400bc2c:	1085883a 	add	r2,r2,r2
 400bc30:	8885883a 	add	r2,r17,r2
 400bc34:	11c00015 	stw	r7,0(r2)
 400bc38:	84000044 	addi	r16,r16,1
 400bc3c:	8c000415 	stw	r16,16(r17)
 400bc40:	8805883a 	mov	r2,r17
 400bc44:	dfc00517 	ldw	ra,20(sp)
 400bc48:	dcc00417 	ldw	r19,16(sp)
 400bc4c:	dc800317 	ldw	r18,12(sp)
 400bc50:	dc400217 	ldw	r17,8(sp)
 400bc54:	dc000117 	ldw	r16,4(sp)
 400bc58:	dec00604 	addi	sp,sp,24
 400bc5c:	f800283a 	ret
 400bc60:	89400117 	ldw	r5,4(r17)
 400bc64:	9009883a 	mov	r4,r18
 400bc68:	d9c00015 	stw	r7,0(sp)
 400bc6c:	29400044 	addi	r5,r5,1
 400bc70:	400badc0 	call	400badc <_Balloc>
 400bc74:	89800417 	ldw	r6,16(r17)
 400bc78:	89400304 	addi	r5,r17,12
 400bc7c:	11000304 	addi	r4,r2,12
 400bc80:	31800084 	addi	r6,r6,2
 400bc84:	318d883a 	add	r6,r6,r6
 400bc88:	318d883a 	add	r6,r6,r6
 400bc8c:	1027883a 	mov	r19,r2
 400bc90:	400b7100 	call	400b710 <memcpy>
 400bc94:	d9c00017 	ldw	r7,0(sp)
 400bc98:	88000a26 	beq	r17,zero,400bcc4 <__multadd+0x118>
 400bc9c:	88c00117 	ldw	r3,4(r17)
 400bca0:	90801317 	ldw	r2,76(r18)
 400bca4:	18c7883a 	add	r3,r3,r3
 400bca8:	18c7883a 	add	r3,r3,r3
 400bcac:	10c5883a 	add	r2,r2,r3
 400bcb0:	10c00017 	ldw	r3,0(r2)
 400bcb4:	88c00015 	stw	r3,0(r17)
 400bcb8:	14400015 	stw	r17,0(r2)
 400bcbc:	9823883a 	mov	r17,r19
 400bcc0:	003fd806 	br	400bc24 <__alt_data_end+0xfc00bc24>
 400bcc4:	9823883a 	mov	r17,r19
 400bcc8:	003fd606 	br	400bc24 <__alt_data_end+0xfc00bc24>

0400bccc <__s2b>:
 400bccc:	defff904 	addi	sp,sp,-28
 400bcd0:	dc400115 	stw	r17,4(sp)
 400bcd4:	dc000015 	stw	r16,0(sp)
 400bcd8:	2023883a 	mov	r17,r4
 400bcdc:	2821883a 	mov	r16,r5
 400bce0:	39000204 	addi	r4,r7,8
 400bce4:	01400244 	movi	r5,9
 400bce8:	dcc00315 	stw	r19,12(sp)
 400bcec:	dc800215 	stw	r18,8(sp)
 400bcf0:	dfc00615 	stw	ra,24(sp)
 400bcf4:	dd400515 	stw	r21,20(sp)
 400bcf8:	dd000415 	stw	r20,16(sp)
 400bcfc:	3825883a 	mov	r18,r7
 400bd00:	3027883a 	mov	r19,r6
 400bd04:	40058d80 	call	40058d8 <__divsi3>
 400bd08:	00c00044 	movi	r3,1
 400bd0c:	000b883a 	mov	r5,zero
 400bd10:	1880030e 	bge	r3,r2,400bd20 <__s2b+0x54>
 400bd14:	18c7883a 	add	r3,r3,r3
 400bd18:	29400044 	addi	r5,r5,1
 400bd1c:	18bffd16 	blt	r3,r2,400bd14 <__alt_data_end+0xfc00bd14>
 400bd20:	8809883a 	mov	r4,r17
 400bd24:	400badc0 	call	400badc <_Balloc>
 400bd28:	d8c00717 	ldw	r3,28(sp)
 400bd2c:	10c00515 	stw	r3,20(r2)
 400bd30:	00c00044 	movi	r3,1
 400bd34:	10c00415 	stw	r3,16(r2)
 400bd38:	00c00244 	movi	r3,9
 400bd3c:	1cc0210e 	bge	r3,r19,400bdc4 <__s2b+0xf8>
 400bd40:	80eb883a 	add	r21,r16,r3
 400bd44:	a829883a 	mov	r20,r21
 400bd48:	84e1883a 	add	r16,r16,r19
 400bd4c:	a1c00007 	ldb	r7,0(r20)
 400bd50:	01800284 	movi	r6,10
 400bd54:	a5000044 	addi	r20,r20,1
 400bd58:	100b883a 	mov	r5,r2
 400bd5c:	39fff404 	addi	r7,r7,-48
 400bd60:	8809883a 	mov	r4,r17
 400bd64:	400bbac0 	call	400bbac <__multadd>
 400bd68:	a43ff81e 	bne	r20,r16,400bd4c <__alt_data_end+0xfc00bd4c>
 400bd6c:	ace1883a 	add	r16,r21,r19
 400bd70:	843ffe04 	addi	r16,r16,-8
 400bd74:	9c800a0e 	bge	r19,r18,400bda0 <__s2b+0xd4>
 400bd78:	94e5c83a 	sub	r18,r18,r19
 400bd7c:	84a5883a 	add	r18,r16,r18
 400bd80:	81c00007 	ldb	r7,0(r16)
 400bd84:	01800284 	movi	r6,10
 400bd88:	84000044 	addi	r16,r16,1
 400bd8c:	100b883a 	mov	r5,r2
 400bd90:	39fff404 	addi	r7,r7,-48
 400bd94:	8809883a 	mov	r4,r17
 400bd98:	400bbac0 	call	400bbac <__multadd>
 400bd9c:	84bff81e 	bne	r16,r18,400bd80 <__alt_data_end+0xfc00bd80>
 400bda0:	dfc00617 	ldw	ra,24(sp)
 400bda4:	dd400517 	ldw	r21,20(sp)
 400bda8:	dd000417 	ldw	r20,16(sp)
 400bdac:	dcc00317 	ldw	r19,12(sp)
 400bdb0:	dc800217 	ldw	r18,8(sp)
 400bdb4:	dc400117 	ldw	r17,4(sp)
 400bdb8:	dc000017 	ldw	r16,0(sp)
 400bdbc:	dec00704 	addi	sp,sp,28
 400bdc0:	f800283a 	ret
 400bdc4:	84000284 	addi	r16,r16,10
 400bdc8:	1827883a 	mov	r19,r3
 400bdcc:	003fe906 	br	400bd74 <__alt_data_end+0xfc00bd74>

0400bdd0 <__hi0bits>:
 400bdd0:	20bfffec 	andhi	r2,r4,65535
 400bdd4:	1000141e 	bne	r2,zero,400be28 <__hi0bits+0x58>
 400bdd8:	2008943a 	slli	r4,r4,16
 400bddc:	00800404 	movi	r2,16
 400bde0:	20ffc02c 	andhi	r3,r4,65280
 400bde4:	1800021e 	bne	r3,zero,400bdf0 <__hi0bits+0x20>
 400bde8:	2008923a 	slli	r4,r4,8
 400bdec:	10800204 	addi	r2,r2,8
 400bdf0:	20fc002c 	andhi	r3,r4,61440
 400bdf4:	1800021e 	bne	r3,zero,400be00 <__hi0bits+0x30>
 400bdf8:	2008913a 	slli	r4,r4,4
 400bdfc:	10800104 	addi	r2,r2,4
 400be00:	20f0002c 	andhi	r3,r4,49152
 400be04:	1800031e 	bne	r3,zero,400be14 <__hi0bits+0x44>
 400be08:	2109883a 	add	r4,r4,r4
 400be0c:	10800084 	addi	r2,r2,2
 400be10:	2109883a 	add	r4,r4,r4
 400be14:	20000316 	blt	r4,zero,400be24 <__hi0bits+0x54>
 400be18:	2110002c 	andhi	r4,r4,16384
 400be1c:	2000041e 	bne	r4,zero,400be30 <__hi0bits+0x60>
 400be20:	00800804 	movi	r2,32
 400be24:	f800283a 	ret
 400be28:	0005883a 	mov	r2,zero
 400be2c:	003fec06 	br	400bde0 <__alt_data_end+0xfc00bde0>
 400be30:	10800044 	addi	r2,r2,1
 400be34:	f800283a 	ret

0400be38 <__lo0bits>:
 400be38:	20c00017 	ldw	r3,0(r4)
 400be3c:	188001cc 	andi	r2,r3,7
 400be40:	10000826 	beq	r2,zero,400be64 <__lo0bits+0x2c>
 400be44:	1880004c 	andi	r2,r3,1
 400be48:	1000211e 	bne	r2,zero,400bed0 <__lo0bits+0x98>
 400be4c:	1880008c 	andi	r2,r3,2
 400be50:	1000211e 	bne	r2,zero,400bed8 <__lo0bits+0xa0>
 400be54:	1806d0ba 	srli	r3,r3,2
 400be58:	00800084 	movi	r2,2
 400be5c:	20c00015 	stw	r3,0(r4)
 400be60:	f800283a 	ret
 400be64:	18bfffcc 	andi	r2,r3,65535
 400be68:	10001326 	beq	r2,zero,400beb8 <__lo0bits+0x80>
 400be6c:	0005883a 	mov	r2,zero
 400be70:	19403fcc 	andi	r5,r3,255
 400be74:	2800021e 	bne	r5,zero,400be80 <__lo0bits+0x48>
 400be78:	1806d23a 	srli	r3,r3,8
 400be7c:	10800204 	addi	r2,r2,8
 400be80:	194003cc 	andi	r5,r3,15
 400be84:	2800021e 	bne	r5,zero,400be90 <__lo0bits+0x58>
 400be88:	1806d13a 	srli	r3,r3,4
 400be8c:	10800104 	addi	r2,r2,4
 400be90:	194000cc 	andi	r5,r3,3
 400be94:	2800021e 	bne	r5,zero,400bea0 <__lo0bits+0x68>
 400be98:	1806d0ba 	srli	r3,r3,2
 400be9c:	10800084 	addi	r2,r2,2
 400bea0:	1940004c 	andi	r5,r3,1
 400bea4:	2800081e 	bne	r5,zero,400bec8 <__lo0bits+0x90>
 400bea8:	1806d07a 	srli	r3,r3,1
 400beac:	1800051e 	bne	r3,zero,400bec4 <__lo0bits+0x8c>
 400beb0:	00800804 	movi	r2,32
 400beb4:	f800283a 	ret
 400beb8:	1806d43a 	srli	r3,r3,16
 400bebc:	00800404 	movi	r2,16
 400bec0:	003feb06 	br	400be70 <__alt_data_end+0xfc00be70>
 400bec4:	10800044 	addi	r2,r2,1
 400bec8:	20c00015 	stw	r3,0(r4)
 400becc:	f800283a 	ret
 400bed0:	0005883a 	mov	r2,zero
 400bed4:	f800283a 	ret
 400bed8:	1806d07a 	srli	r3,r3,1
 400bedc:	00800044 	movi	r2,1
 400bee0:	20c00015 	stw	r3,0(r4)
 400bee4:	f800283a 	ret

0400bee8 <__i2b>:
 400bee8:	defffd04 	addi	sp,sp,-12
 400beec:	dc000015 	stw	r16,0(sp)
 400bef0:	04000044 	movi	r16,1
 400bef4:	dc400115 	stw	r17,4(sp)
 400bef8:	2823883a 	mov	r17,r5
 400befc:	800b883a 	mov	r5,r16
 400bf00:	dfc00215 	stw	ra,8(sp)
 400bf04:	400badc0 	call	400badc <_Balloc>
 400bf08:	14400515 	stw	r17,20(r2)
 400bf0c:	14000415 	stw	r16,16(r2)
 400bf10:	dfc00217 	ldw	ra,8(sp)
 400bf14:	dc400117 	ldw	r17,4(sp)
 400bf18:	dc000017 	ldw	r16,0(sp)
 400bf1c:	dec00304 	addi	sp,sp,12
 400bf20:	f800283a 	ret

0400bf24 <__multiply>:
 400bf24:	defffa04 	addi	sp,sp,-24
 400bf28:	dcc00315 	stw	r19,12(sp)
 400bf2c:	dc800215 	stw	r18,8(sp)
 400bf30:	34c00417 	ldw	r19,16(r6)
 400bf34:	2c800417 	ldw	r18,16(r5)
 400bf38:	dd000415 	stw	r20,16(sp)
 400bf3c:	dc400115 	stw	r17,4(sp)
 400bf40:	dfc00515 	stw	ra,20(sp)
 400bf44:	dc000015 	stw	r16,0(sp)
 400bf48:	2829883a 	mov	r20,r5
 400bf4c:	3023883a 	mov	r17,r6
 400bf50:	94c0050e 	bge	r18,r19,400bf68 <__multiply+0x44>
 400bf54:	9007883a 	mov	r3,r18
 400bf58:	3029883a 	mov	r20,r6
 400bf5c:	9825883a 	mov	r18,r19
 400bf60:	2823883a 	mov	r17,r5
 400bf64:	1827883a 	mov	r19,r3
 400bf68:	a0800217 	ldw	r2,8(r20)
 400bf6c:	94e1883a 	add	r16,r18,r19
 400bf70:	a1400117 	ldw	r5,4(r20)
 400bf74:	1400010e 	bge	r2,r16,400bf7c <__multiply+0x58>
 400bf78:	29400044 	addi	r5,r5,1
 400bf7c:	400badc0 	call	400badc <_Balloc>
 400bf80:	8415883a 	add	r10,r16,r16
 400bf84:	12c00504 	addi	r11,r2,20
 400bf88:	5295883a 	add	r10,r10,r10
 400bf8c:	5a95883a 	add	r10,r11,r10
 400bf90:	5807883a 	mov	r3,r11
 400bf94:	5a80032e 	bgeu	r11,r10,400bfa4 <__multiply+0x80>
 400bf98:	18000015 	stw	zero,0(r3)
 400bf9c:	18c00104 	addi	r3,r3,4
 400bfa0:	1abffd36 	bltu	r3,r10,400bf98 <__alt_data_end+0xfc00bf98>
 400bfa4:	9ce7883a 	add	r19,r19,r19
 400bfa8:	94a5883a 	add	r18,r18,r18
 400bfac:	89800504 	addi	r6,r17,20
 400bfb0:	9ce7883a 	add	r19,r19,r19
 400bfb4:	a3400504 	addi	r13,r20,20
 400bfb8:	94a5883a 	add	r18,r18,r18
 400bfbc:	34d9883a 	add	r12,r6,r19
 400bfc0:	6c93883a 	add	r9,r13,r18
 400bfc4:	3300422e 	bgeu	r6,r12,400c0d0 <__multiply+0x1ac>
 400bfc8:	37c00017 	ldw	ra,0(r6)
 400bfcc:	fbffffcc 	andi	r15,ra,65535
 400bfd0:	78001b26 	beq	r15,zero,400c040 <__multiply+0x11c>
 400bfd4:	5811883a 	mov	r8,r11
 400bfd8:	681d883a 	mov	r14,r13
 400bfdc:	000f883a 	mov	r7,zero
 400bfe0:	71000017 	ldw	r4,0(r14)
 400bfe4:	40c00017 	ldw	r3,0(r8)
 400bfe8:	73800104 	addi	r14,r14,4
 400bfec:	217fffcc 	andi	r5,r4,65535
 400bff0:	2bcb383a 	mul	r5,r5,r15
 400bff4:	2008d43a 	srli	r4,r4,16
 400bff8:	1c7fffcc 	andi	r17,r3,65535
 400bffc:	2c4b883a 	add	r5,r5,r17
 400c000:	29cb883a 	add	r5,r5,r7
 400c004:	23c9383a 	mul	r4,r4,r15
 400c008:	1806d43a 	srli	r3,r3,16
 400c00c:	280ed43a 	srli	r7,r5,16
 400c010:	297fffcc 	andi	r5,r5,65535
 400c014:	20c7883a 	add	r3,r4,r3
 400c018:	19c7883a 	add	r3,r3,r7
 400c01c:	1808943a 	slli	r4,r3,16
 400c020:	4023883a 	mov	r17,r8
 400c024:	180ed43a 	srli	r7,r3,16
 400c028:	214ab03a 	or	r5,r4,r5
 400c02c:	41400015 	stw	r5,0(r8)
 400c030:	42000104 	addi	r8,r8,4
 400c034:	727fea36 	bltu	r14,r9,400bfe0 <__alt_data_end+0xfc00bfe0>
 400c038:	89c00115 	stw	r7,4(r17)
 400c03c:	37c00017 	ldw	ra,0(r6)
 400c040:	f83ed43a 	srli	ra,ra,16
 400c044:	f8001f26 	beq	ra,zero,400c0c4 <__multiply+0x1a0>
 400c048:	58c00017 	ldw	r3,0(r11)
 400c04c:	681d883a 	mov	r14,r13
 400c050:	581f883a 	mov	r15,r11
 400c054:	1811883a 	mov	r8,r3
 400c058:	5825883a 	mov	r18,r11
 400c05c:	000f883a 	mov	r7,zero
 400c060:	00000106 	br	400c068 <__multiply+0x144>
 400c064:	8825883a 	mov	r18,r17
 400c068:	7140000b 	ldhu	r5,0(r14)
 400c06c:	4010d43a 	srli	r8,r8,16
 400c070:	193fffcc 	andi	r4,r3,65535
 400c074:	2fcb383a 	mul	r5,r5,ra
 400c078:	7bc00104 	addi	r15,r15,4
 400c07c:	73800104 	addi	r14,r14,4
 400c080:	2a0b883a 	add	r5,r5,r8
 400c084:	29cb883a 	add	r5,r5,r7
 400c088:	2806943a 	slli	r3,r5,16
 400c08c:	94400104 	addi	r17,r18,4
 400c090:	280ad43a 	srli	r5,r5,16
 400c094:	1908b03a 	or	r4,r3,r4
 400c098:	793fff15 	stw	r4,-4(r15)
 400c09c:	70ffff17 	ldw	r3,-4(r14)
 400c0a0:	8a000017 	ldw	r8,0(r17)
 400c0a4:	1806d43a 	srli	r3,r3,16
 400c0a8:	413fffcc 	andi	r4,r8,65535
 400c0ac:	1fc7383a 	mul	r3,r3,ra
 400c0b0:	1907883a 	add	r3,r3,r4
 400c0b4:	1947883a 	add	r3,r3,r5
 400c0b8:	180ed43a 	srli	r7,r3,16
 400c0bc:	727fe936 	bltu	r14,r9,400c064 <__alt_data_end+0xfc00c064>
 400c0c0:	90c00115 	stw	r3,4(r18)
 400c0c4:	31800104 	addi	r6,r6,4
 400c0c8:	5ac00104 	addi	r11,r11,4
 400c0cc:	333fbe36 	bltu	r6,r12,400bfc8 <__alt_data_end+0xfc00bfc8>
 400c0d0:	0400090e 	bge	zero,r16,400c0f8 <__multiply+0x1d4>
 400c0d4:	50ffff17 	ldw	r3,-4(r10)
 400c0d8:	52bfff04 	addi	r10,r10,-4
 400c0dc:	18000326 	beq	r3,zero,400c0ec <__multiply+0x1c8>
 400c0e0:	00000506 	br	400c0f8 <__multiply+0x1d4>
 400c0e4:	50c00017 	ldw	r3,0(r10)
 400c0e8:	1800031e 	bne	r3,zero,400c0f8 <__multiply+0x1d4>
 400c0ec:	843fffc4 	addi	r16,r16,-1
 400c0f0:	52bfff04 	addi	r10,r10,-4
 400c0f4:	803ffb1e 	bne	r16,zero,400c0e4 <__alt_data_end+0xfc00c0e4>
 400c0f8:	14000415 	stw	r16,16(r2)
 400c0fc:	dfc00517 	ldw	ra,20(sp)
 400c100:	dd000417 	ldw	r20,16(sp)
 400c104:	dcc00317 	ldw	r19,12(sp)
 400c108:	dc800217 	ldw	r18,8(sp)
 400c10c:	dc400117 	ldw	r17,4(sp)
 400c110:	dc000017 	ldw	r16,0(sp)
 400c114:	dec00604 	addi	sp,sp,24
 400c118:	f800283a 	ret

0400c11c <__pow5mult>:
 400c11c:	defffa04 	addi	sp,sp,-24
 400c120:	dcc00315 	stw	r19,12(sp)
 400c124:	dc000015 	stw	r16,0(sp)
 400c128:	dfc00515 	stw	ra,20(sp)
 400c12c:	dd000415 	stw	r20,16(sp)
 400c130:	dc800215 	stw	r18,8(sp)
 400c134:	dc400115 	stw	r17,4(sp)
 400c138:	308000cc 	andi	r2,r6,3
 400c13c:	3021883a 	mov	r16,r6
 400c140:	2027883a 	mov	r19,r4
 400c144:	10002f1e 	bne	r2,zero,400c204 <__pow5mult+0xe8>
 400c148:	2825883a 	mov	r18,r5
 400c14c:	8021d0ba 	srai	r16,r16,2
 400c150:	80001a26 	beq	r16,zero,400c1bc <__pow5mult+0xa0>
 400c154:	9c401217 	ldw	r17,72(r19)
 400c158:	8800061e 	bne	r17,zero,400c174 <__pow5mult+0x58>
 400c15c:	00003406 	br	400c230 <__pow5mult+0x114>
 400c160:	8021d07a 	srai	r16,r16,1
 400c164:	80001526 	beq	r16,zero,400c1bc <__pow5mult+0xa0>
 400c168:	88800017 	ldw	r2,0(r17)
 400c16c:	10001c26 	beq	r2,zero,400c1e0 <__pow5mult+0xc4>
 400c170:	1023883a 	mov	r17,r2
 400c174:	8080004c 	andi	r2,r16,1
 400c178:	103ff926 	beq	r2,zero,400c160 <__alt_data_end+0xfc00c160>
 400c17c:	880d883a 	mov	r6,r17
 400c180:	900b883a 	mov	r5,r18
 400c184:	9809883a 	mov	r4,r19
 400c188:	400bf240 	call	400bf24 <__multiply>
 400c18c:	90001b26 	beq	r18,zero,400c1fc <__pow5mult+0xe0>
 400c190:	91000117 	ldw	r4,4(r18)
 400c194:	98c01317 	ldw	r3,76(r19)
 400c198:	8021d07a 	srai	r16,r16,1
 400c19c:	2109883a 	add	r4,r4,r4
 400c1a0:	2109883a 	add	r4,r4,r4
 400c1a4:	1907883a 	add	r3,r3,r4
 400c1a8:	19000017 	ldw	r4,0(r3)
 400c1ac:	91000015 	stw	r4,0(r18)
 400c1b0:	1c800015 	stw	r18,0(r3)
 400c1b4:	1025883a 	mov	r18,r2
 400c1b8:	803feb1e 	bne	r16,zero,400c168 <__alt_data_end+0xfc00c168>
 400c1bc:	9005883a 	mov	r2,r18
 400c1c0:	dfc00517 	ldw	ra,20(sp)
 400c1c4:	dd000417 	ldw	r20,16(sp)
 400c1c8:	dcc00317 	ldw	r19,12(sp)
 400c1cc:	dc800217 	ldw	r18,8(sp)
 400c1d0:	dc400117 	ldw	r17,4(sp)
 400c1d4:	dc000017 	ldw	r16,0(sp)
 400c1d8:	dec00604 	addi	sp,sp,24
 400c1dc:	f800283a 	ret
 400c1e0:	880d883a 	mov	r6,r17
 400c1e4:	880b883a 	mov	r5,r17
 400c1e8:	9809883a 	mov	r4,r19
 400c1ec:	400bf240 	call	400bf24 <__multiply>
 400c1f0:	88800015 	stw	r2,0(r17)
 400c1f4:	10000015 	stw	zero,0(r2)
 400c1f8:	003fdd06 	br	400c170 <__alt_data_end+0xfc00c170>
 400c1fc:	1025883a 	mov	r18,r2
 400c200:	003fd706 	br	400c160 <__alt_data_end+0xfc00c160>
 400c204:	10bfffc4 	addi	r2,r2,-1
 400c208:	1085883a 	add	r2,r2,r2
 400c20c:	00c10074 	movhi	r3,1025
 400c210:	18cbed04 	addi	r3,r3,12212
 400c214:	1085883a 	add	r2,r2,r2
 400c218:	1885883a 	add	r2,r3,r2
 400c21c:	11800017 	ldw	r6,0(r2)
 400c220:	000f883a 	mov	r7,zero
 400c224:	400bbac0 	call	400bbac <__multadd>
 400c228:	1025883a 	mov	r18,r2
 400c22c:	003fc706 	br	400c14c <__alt_data_end+0xfc00c14c>
 400c230:	05000044 	movi	r20,1
 400c234:	a00b883a 	mov	r5,r20
 400c238:	9809883a 	mov	r4,r19
 400c23c:	400badc0 	call	400badc <_Balloc>
 400c240:	1023883a 	mov	r17,r2
 400c244:	00809c44 	movi	r2,625
 400c248:	88800515 	stw	r2,20(r17)
 400c24c:	8d000415 	stw	r20,16(r17)
 400c250:	9c401215 	stw	r17,72(r19)
 400c254:	88000015 	stw	zero,0(r17)
 400c258:	003fc606 	br	400c174 <__alt_data_end+0xfc00c174>

0400c25c <__lshift>:
 400c25c:	defff904 	addi	sp,sp,-28
 400c260:	dd400515 	stw	r21,20(sp)
 400c264:	dcc00315 	stw	r19,12(sp)
 400c268:	302bd17a 	srai	r21,r6,5
 400c26c:	2cc00417 	ldw	r19,16(r5)
 400c270:	28800217 	ldw	r2,8(r5)
 400c274:	dd000415 	stw	r20,16(sp)
 400c278:	ace7883a 	add	r19,r21,r19
 400c27c:	dc800215 	stw	r18,8(sp)
 400c280:	dc400115 	stw	r17,4(sp)
 400c284:	dc000015 	stw	r16,0(sp)
 400c288:	dfc00615 	stw	ra,24(sp)
 400c28c:	9c000044 	addi	r16,r19,1
 400c290:	2823883a 	mov	r17,r5
 400c294:	3029883a 	mov	r20,r6
 400c298:	2025883a 	mov	r18,r4
 400c29c:	29400117 	ldw	r5,4(r5)
 400c2a0:	1400030e 	bge	r2,r16,400c2b0 <__lshift+0x54>
 400c2a4:	1085883a 	add	r2,r2,r2
 400c2a8:	29400044 	addi	r5,r5,1
 400c2ac:	143ffd16 	blt	r2,r16,400c2a4 <__alt_data_end+0xfc00c2a4>
 400c2b0:	9009883a 	mov	r4,r18
 400c2b4:	400badc0 	call	400badc <_Balloc>
 400c2b8:	10c00504 	addi	r3,r2,20
 400c2bc:	0540070e 	bge	zero,r21,400c2dc <__lshift+0x80>
 400c2c0:	ad6b883a 	add	r21,r21,r21
 400c2c4:	ad6b883a 	add	r21,r21,r21
 400c2c8:	1809883a 	mov	r4,r3
 400c2cc:	1d47883a 	add	r3,r3,r21
 400c2d0:	20000015 	stw	zero,0(r4)
 400c2d4:	21000104 	addi	r4,r4,4
 400c2d8:	193ffd1e 	bne	r3,r4,400c2d0 <__alt_data_end+0xfc00c2d0>
 400c2dc:	8a000417 	ldw	r8,16(r17)
 400c2e0:	89000504 	addi	r4,r17,20
 400c2e4:	a18007cc 	andi	r6,r20,31
 400c2e8:	4211883a 	add	r8,r8,r8
 400c2ec:	4211883a 	add	r8,r8,r8
 400c2f0:	2211883a 	add	r8,r4,r8
 400c2f4:	30002326 	beq	r6,zero,400c384 <__lshift+0x128>
 400c2f8:	02400804 	movi	r9,32
 400c2fc:	4993c83a 	sub	r9,r9,r6
 400c300:	000b883a 	mov	r5,zero
 400c304:	21c00017 	ldw	r7,0(r4)
 400c308:	1815883a 	mov	r10,r3
 400c30c:	18c00104 	addi	r3,r3,4
 400c310:	398e983a 	sll	r7,r7,r6
 400c314:	21000104 	addi	r4,r4,4
 400c318:	394ab03a 	or	r5,r7,r5
 400c31c:	197fff15 	stw	r5,-4(r3)
 400c320:	217fff17 	ldw	r5,-4(r4)
 400c324:	2a4ad83a 	srl	r5,r5,r9
 400c328:	223ff636 	bltu	r4,r8,400c304 <__alt_data_end+0xfc00c304>
 400c32c:	51400115 	stw	r5,4(r10)
 400c330:	28001a1e 	bne	r5,zero,400c39c <__lshift+0x140>
 400c334:	843fffc4 	addi	r16,r16,-1
 400c338:	14000415 	stw	r16,16(r2)
 400c33c:	88000826 	beq	r17,zero,400c360 <__lshift+0x104>
 400c340:	89000117 	ldw	r4,4(r17)
 400c344:	90c01317 	ldw	r3,76(r18)
 400c348:	2109883a 	add	r4,r4,r4
 400c34c:	2109883a 	add	r4,r4,r4
 400c350:	1907883a 	add	r3,r3,r4
 400c354:	19000017 	ldw	r4,0(r3)
 400c358:	89000015 	stw	r4,0(r17)
 400c35c:	1c400015 	stw	r17,0(r3)
 400c360:	dfc00617 	ldw	ra,24(sp)
 400c364:	dd400517 	ldw	r21,20(sp)
 400c368:	dd000417 	ldw	r20,16(sp)
 400c36c:	dcc00317 	ldw	r19,12(sp)
 400c370:	dc800217 	ldw	r18,8(sp)
 400c374:	dc400117 	ldw	r17,4(sp)
 400c378:	dc000017 	ldw	r16,0(sp)
 400c37c:	dec00704 	addi	sp,sp,28
 400c380:	f800283a 	ret
 400c384:	21400017 	ldw	r5,0(r4)
 400c388:	18c00104 	addi	r3,r3,4
 400c38c:	21000104 	addi	r4,r4,4
 400c390:	197fff15 	stw	r5,-4(r3)
 400c394:	223ffb36 	bltu	r4,r8,400c384 <__alt_data_end+0xfc00c384>
 400c398:	003fe606 	br	400c334 <__alt_data_end+0xfc00c334>
 400c39c:	9c000084 	addi	r16,r19,2
 400c3a0:	003fe406 	br	400c334 <__alt_data_end+0xfc00c334>

0400c3a4 <__mcmp>:
 400c3a4:	20800417 	ldw	r2,16(r4)
 400c3a8:	28c00417 	ldw	r3,16(r5)
 400c3ac:	10c5c83a 	sub	r2,r2,r3
 400c3b0:	1000111e 	bne	r2,zero,400c3f8 <__mcmp+0x54>
 400c3b4:	18c7883a 	add	r3,r3,r3
 400c3b8:	18c7883a 	add	r3,r3,r3
 400c3bc:	21000504 	addi	r4,r4,20
 400c3c0:	29400504 	addi	r5,r5,20
 400c3c4:	20c5883a 	add	r2,r4,r3
 400c3c8:	28cb883a 	add	r5,r5,r3
 400c3cc:	00000106 	br	400c3d4 <__mcmp+0x30>
 400c3d0:	20800a2e 	bgeu	r4,r2,400c3fc <__mcmp+0x58>
 400c3d4:	10bfff04 	addi	r2,r2,-4
 400c3d8:	297fff04 	addi	r5,r5,-4
 400c3dc:	11800017 	ldw	r6,0(r2)
 400c3e0:	28c00017 	ldw	r3,0(r5)
 400c3e4:	30fffa26 	beq	r6,r3,400c3d0 <__alt_data_end+0xfc00c3d0>
 400c3e8:	30c00236 	bltu	r6,r3,400c3f4 <__mcmp+0x50>
 400c3ec:	00800044 	movi	r2,1
 400c3f0:	f800283a 	ret
 400c3f4:	00bfffc4 	movi	r2,-1
 400c3f8:	f800283a 	ret
 400c3fc:	0005883a 	mov	r2,zero
 400c400:	f800283a 	ret

0400c404 <__mdiff>:
 400c404:	28c00417 	ldw	r3,16(r5)
 400c408:	30800417 	ldw	r2,16(r6)
 400c40c:	defffa04 	addi	sp,sp,-24
 400c410:	dcc00315 	stw	r19,12(sp)
 400c414:	dc800215 	stw	r18,8(sp)
 400c418:	dfc00515 	stw	ra,20(sp)
 400c41c:	dd000415 	stw	r20,16(sp)
 400c420:	dc400115 	stw	r17,4(sp)
 400c424:	dc000015 	stw	r16,0(sp)
 400c428:	1887c83a 	sub	r3,r3,r2
 400c42c:	2825883a 	mov	r18,r5
 400c430:	3027883a 	mov	r19,r6
 400c434:	1800141e 	bne	r3,zero,400c488 <__mdiff+0x84>
 400c438:	1085883a 	add	r2,r2,r2
 400c43c:	1085883a 	add	r2,r2,r2
 400c440:	2a000504 	addi	r8,r5,20
 400c444:	34000504 	addi	r16,r6,20
 400c448:	4087883a 	add	r3,r8,r2
 400c44c:	8085883a 	add	r2,r16,r2
 400c450:	00000106 	br	400c458 <__mdiff+0x54>
 400c454:	40c0592e 	bgeu	r8,r3,400c5bc <__mdiff+0x1b8>
 400c458:	18ffff04 	addi	r3,r3,-4
 400c45c:	10bfff04 	addi	r2,r2,-4
 400c460:	19c00017 	ldw	r7,0(r3)
 400c464:	11400017 	ldw	r5,0(r2)
 400c468:	397ffa26 	beq	r7,r5,400c454 <__alt_data_end+0xfc00c454>
 400c46c:	3940592e 	bgeu	r7,r5,400c5d4 <__mdiff+0x1d0>
 400c470:	9005883a 	mov	r2,r18
 400c474:	4023883a 	mov	r17,r8
 400c478:	9825883a 	mov	r18,r19
 400c47c:	05000044 	movi	r20,1
 400c480:	1027883a 	mov	r19,r2
 400c484:	00000406 	br	400c498 <__mdiff+0x94>
 400c488:	18005616 	blt	r3,zero,400c5e4 <__mdiff+0x1e0>
 400c48c:	34400504 	addi	r17,r6,20
 400c490:	2c000504 	addi	r16,r5,20
 400c494:	0029883a 	mov	r20,zero
 400c498:	91400117 	ldw	r5,4(r18)
 400c49c:	400badc0 	call	400badc <_Balloc>
 400c4a0:	92400417 	ldw	r9,16(r18)
 400c4a4:	9b000417 	ldw	r12,16(r19)
 400c4a8:	12c00504 	addi	r11,r2,20
 400c4ac:	4a51883a 	add	r8,r9,r9
 400c4b0:	6319883a 	add	r12,r12,r12
 400c4b4:	4211883a 	add	r8,r8,r8
 400c4b8:	6319883a 	add	r12,r12,r12
 400c4bc:	15000315 	stw	r20,12(r2)
 400c4c0:	8211883a 	add	r8,r16,r8
 400c4c4:	8b19883a 	add	r12,r17,r12
 400c4c8:	0007883a 	mov	r3,zero
 400c4cc:	81400017 	ldw	r5,0(r16)
 400c4d0:	89c00017 	ldw	r7,0(r17)
 400c4d4:	59800104 	addi	r6,r11,4
 400c4d8:	293fffcc 	andi	r4,r5,65535
 400c4dc:	20c7883a 	add	r3,r4,r3
 400c4e0:	393fffcc 	andi	r4,r7,65535
 400c4e4:	1909c83a 	sub	r4,r3,r4
 400c4e8:	280ad43a 	srli	r5,r5,16
 400c4ec:	380ed43a 	srli	r7,r7,16
 400c4f0:	2007d43a 	srai	r3,r4,16
 400c4f4:	213fffcc 	andi	r4,r4,65535
 400c4f8:	29cbc83a 	sub	r5,r5,r7
 400c4fc:	28c7883a 	add	r3,r5,r3
 400c500:	180a943a 	slli	r5,r3,16
 400c504:	8c400104 	addi	r17,r17,4
 400c508:	84000104 	addi	r16,r16,4
 400c50c:	2908b03a 	or	r4,r5,r4
 400c510:	59000015 	stw	r4,0(r11)
 400c514:	1807d43a 	srai	r3,r3,16
 400c518:	3015883a 	mov	r10,r6
 400c51c:	3017883a 	mov	r11,r6
 400c520:	8b3fea36 	bltu	r17,r12,400c4cc <__alt_data_end+0xfc00c4cc>
 400c524:	8200162e 	bgeu	r16,r8,400c580 <__mdiff+0x17c>
 400c528:	8017883a 	mov	r11,r16
 400c52c:	59400017 	ldw	r5,0(r11)
 400c530:	31800104 	addi	r6,r6,4
 400c534:	5ac00104 	addi	r11,r11,4
 400c538:	293fffcc 	andi	r4,r5,65535
 400c53c:	20c7883a 	add	r3,r4,r3
 400c540:	280ed43a 	srli	r7,r5,16
 400c544:	180bd43a 	srai	r5,r3,16
 400c548:	193fffcc 	andi	r4,r3,65535
 400c54c:	3947883a 	add	r3,r7,r5
 400c550:	180a943a 	slli	r5,r3,16
 400c554:	1807d43a 	srai	r3,r3,16
 400c558:	2908b03a 	or	r4,r5,r4
 400c55c:	313fff15 	stw	r4,-4(r6)
 400c560:	5a3ff236 	bltu	r11,r8,400c52c <__alt_data_end+0xfc00c52c>
 400c564:	0406303a 	nor	r3,zero,r16
 400c568:	1a07883a 	add	r3,r3,r8
 400c56c:	1806d0ba 	srli	r3,r3,2
 400c570:	18c00044 	addi	r3,r3,1
 400c574:	18c7883a 	add	r3,r3,r3
 400c578:	18c7883a 	add	r3,r3,r3
 400c57c:	50d5883a 	add	r10,r10,r3
 400c580:	50ffff04 	addi	r3,r10,-4
 400c584:	2000041e 	bne	r4,zero,400c598 <__mdiff+0x194>
 400c588:	18ffff04 	addi	r3,r3,-4
 400c58c:	19000017 	ldw	r4,0(r3)
 400c590:	4a7fffc4 	addi	r9,r9,-1
 400c594:	203ffc26 	beq	r4,zero,400c588 <__alt_data_end+0xfc00c588>
 400c598:	12400415 	stw	r9,16(r2)
 400c59c:	dfc00517 	ldw	ra,20(sp)
 400c5a0:	dd000417 	ldw	r20,16(sp)
 400c5a4:	dcc00317 	ldw	r19,12(sp)
 400c5a8:	dc800217 	ldw	r18,8(sp)
 400c5ac:	dc400117 	ldw	r17,4(sp)
 400c5b0:	dc000017 	ldw	r16,0(sp)
 400c5b4:	dec00604 	addi	sp,sp,24
 400c5b8:	f800283a 	ret
 400c5bc:	000b883a 	mov	r5,zero
 400c5c0:	400badc0 	call	400badc <_Balloc>
 400c5c4:	00c00044 	movi	r3,1
 400c5c8:	10c00415 	stw	r3,16(r2)
 400c5cc:	10000515 	stw	zero,20(r2)
 400c5d0:	003ff206 	br	400c59c <__alt_data_end+0xfc00c59c>
 400c5d4:	8023883a 	mov	r17,r16
 400c5d8:	0029883a 	mov	r20,zero
 400c5dc:	4021883a 	mov	r16,r8
 400c5e0:	003fad06 	br	400c498 <__alt_data_end+0xfc00c498>
 400c5e4:	9005883a 	mov	r2,r18
 400c5e8:	94400504 	addi	r17,r18,20
 400c5ec:	9c000504 	addi	r16,r19,20
 400c5f0:	9825883a 	mov	r18,r19
 400c5f4:	05000044 	movi	r20,1
 400c5f8:	1027883a 	mov	r19,r2
 400c5fc:	003fa606 	br	400c498 <__alt_data_end+0xfc00c498>

0400c600 <__ulp>:
 400c600:	295ffc2c 	andhi	r5,r5,32752
 400c604:	00bf3034 	movhi	r2,64704
 400c608:	2887883a 	add	r3,r5,r2
 400c60c:	00c0020e 	bge	zero,r3,400c618 <__ulp+0x18>
 400c610:	0005883a 	mov	r2,zero
 400c614:	f800283a 	ret
 400c618:	00c7c83a 	sub	r3,zero,r3
 400c61c:	1807d53a 	srai	r3,r3,20
 400c620:	008004c4 	movi	r2,19
 400c624:	10c00b0e 	bge	r2,r3,400c654 <__ulp+0x54>
 400c628:	18bffb04 	addi	r2,r3,-20
 400c62c:	01000784 	movi	r4,30
 400c630:	0007883a 	mov	r3,zero
 400c634:	20800516 	blt	r4,r2,400c64c <__ulp+0x4c>
 400c638:	010007c4 	movi	r4,31
 400c63c:	2089c83a 	sub	r4,r4,r2
 400c640:	00800044 	movi	r2,1
 400c644:	1104983a 	sll	r2,r2,r4
 400c648:	f800283a 	ret
 400c64c:	00800044 	movi	r2,1
 400c650:	f800283a 	ret
 400c654:	01400234 	movhi	r5,8
 400c658:	28c7d83a 	sra	r3,r5,r3
 400c65c:	0005883a 	mov	r2,zero
 400c660:	f800283a 	ret

0400c664 <__b2d>:
 400c664:	defffa04 	addi	sp,sp,-24
 400c668:	dc000015 	stw	r16,0(sp)
 400c66c:	24000417 	ldw	r16,16(r4)
 400c670:	dc400115 	stw	r17,4(sp)
 400c674:	24400504 	addi	r17,r4,20
 400c678:	8421883a 	add	r16,r16,r16
 400c67c:	8421883a 	add	r16,r16,r16
 400c680:	8c21883a 	add	r16,r17,r16
 400c684:	dc800215 	stw	r18,8(sp)
 400c688:	84bfff17 	ldw	r18,-4(r16)
 400c68c:	dd000415 	stw	r20,16(sp)
 400c690:	dcc00315 	stw	r19,12(sp)
 400c694:	9009883a 	mov	r4,r18
 400c698:	2829883a 	mov	r20,r5
 400c69c:	dfc00515 	stw	ra,20(sp)
 400c6a0:	400bdd00 	call	400bdd0 <__hi0bits>
 400c6a4:	00c00804 	movi	r3,32
 400c6a8:	1889c83a 	sub	r4,r3,r2
 400c6ac:	a1000015 	stw	r4,0(r20)
 400c6b0:	01000284 	movi	r4,10
 400c6b4:	84ffff04 	addi	r19,r16,-4
 400c6b8:	20801216 	blt	r4,r2,400c704 <__b2d+0xa0>
 400c6bc:	018002c4 	movi	r6,11
 400c6c0:	308dc83a 	sub	r6,r6,r2
 400c6c4:	9186d83a 	srl	r3,r18,r6
 400c6c8:	18cffc34 	orhi	r3,r3,16368
 400c6cc:	8cc0212e 	bgeu	r17,r19,400c754 <__b2d+0xf0>
 400c6d0:	813ffe17 	ldw	r4,-8(r16)
 400c6d4:	218cd83a 	srl	r6,r4,r6
 400c6d8:	10800544 	addi	r2,r2,21
 400c6dc:	9084983a 	sll	r2,r18,r2
 400c6e0:	1184b03a 	or	r2,r2,r6
 400c6e4:	dfc00517 	ldw	ra,20(sp)
 400c6e8:	dd000417 	ldw	r20,16(sp)
 400c6ec:	dcc00317 	ldw	r19,12(sp)
 400c6f0:	dc800217 	ldw	r18,8(sp)
 400c6f4:	dc400117 	ldw	r17,4(sp)
 400c6f8:	dc000017 	ldw	r16,0(sp)
 400c6fc:	dec00604 	addi	sp,sp,24
 400c700:	f800283a 	ret
 400c704:	8cc00f2e 	bgeu	r17,r19,400c744 <__b2d+0xe0>
 400c708:	117ffd44 	addi	r5,r2,-11
 400c70c:	80bffe17 	ldw	r2,-8(r16)
 400c710:	28000e26 	beq	r5,zero,400c74c <__b2d+0xe8>
 400c714:	1949c83a 	sub	r4,r3,r5
 400c718:	9164983a 	sll	r18,r18,r5
 400c71c:	1106d83a 	srl	r3,r2,r4
 400c720:	81bffe04 	addi	r6,r16,-8
 400c724:	948ffc34 	orhi	r18,r18,16368
 400c728:	90c6b03a 	or	r3,r18,r3
 400c72c:	89800e2e 	bgeu	r17,r6,400c768 <__b2d+0x104>
 400c730:	81bffd17 	ldw	r6,-12(r16)
 400c734:	1144983a 	sll	r2,r2,r5
 400c738:	310ad83a 	srl	r5,r6,r4
 400c73c:	2884b03a 	or	r2,r5,r2
 400c740:	003fe806 	br	400c6e4 <__alt_data_end+0xfc00c6e4>
 400c744:	10bffd44 	addi	r2,r2,-11
 400c748:	1000041e 	bne	r2,zero,400c75c <__b2d+0xf8>
 400c74c:	90cffc34 	orhi	r3,r18,16368
 400c750:	003fe406 	br	400c6e4 <__alt_data_end+0xfc00c6e4>
 400c754:	000d883a 	mov	r6,zero
 400c758:	003fdf06 	br	400c6d8 <__alt_data_end+0xfc00c6d8>
 400c75c:	90a4983a 	sll	r18,r18,r2
 400c760:	0005883a 	mov	r2,zero
 400c764:	003ff906 	br	400c74c <__alt_data_end+0xfc00c74c>
 400c768:	1144983a 	sll	r2,r2,r5
 400c76c:	003fdd06 	br	400c6e4 <__alt_data_end+0xfc00c6e4>

0400c770 <__d2b>:
 400c770:	defff804 	addi	sp,sp,-32
 400c774:	dc000215 	stw	r16,8(sp)
 400c778:	3021883a 	mov	r16,r6
 400c77c:	dc400315 	stw	r17,12(sp)
 400c780:	8022907a 	slli	r17,r16,1
 400c784:	dd000615 	stw	r20,24(sp)
 400c788:	2829883a 	mov	r20,r5
 400c78c:	01400044 	movi	r5,1
 400c790:	dcc00515 	stw	r19,20(sp)
 400c794:	dc800415 	stw	r18,16(sp)
 400c798:	dfc00715 	stw	ra,28(sp)
 400c79c:	3825883a 	mov	r18,r7
 400c7a0:	8822d57a 	srli	r17,r17,21
 400c7a4:	400badc0 	call	400badc <_Balloc>
 400c7a8:	1027883a 	mov	r19,r2
 400c7ac:	00800434 	movhi	r2,16
 400c7b0:	10bfffc4 	addi	r2,r2,-1
 400c7b4:	808c703a 	and	r6,r16,r2
 400c7b8:	88000126 	beq	r17,zero,400c7c0 <__d2b+0x50>
 400c7bc:	31800434 	orhi	r6,r6,16
 400c7c0:	d9800015 	stw	r6,0(sp)
 400c7c4:	a0002426 	beq	r20,zero,400c858 <__d2b+0xe8>
 400c7c8:	d9000104 	addi	r4,sp,4
 400c7cc:	dd000115 	stw	r20,4(sp)
 400c7d0:	400be380 	call	400be38 <__lo0bits>
 400c7d4:	d8c00017 	ldw	r3,0(sp)
 400c7d8:	10002f1e 	bne	r2,zero,400c898 <__d2b+0x128>
 400c7dc:	d9000117 	ldw	r4,4(sp)
 400c7e0:	99000515 	stw	r4,20(r19)
 400c7e4:	1821003a 	cmpeq	r16,r3,zero
 400c7e8:	01000084 	movi	r4,2
 400c7ec:	2421c83a 	sub	r16,r4,r16
 400c7f0:	98c00615 	stw	r3,24(r19)
 400c7f4:	9c000415 	stw	r16,16(r19)
 400c7f8:	88001f1e 	bne	r17,zero,400c878 <__d2b+0x108>
 400c7fc:	10bef384 	addi	r2,r2,-1074
 400c800:	90800015 	stw	r2,0(r18)
 400c804:	00900034 	movhi	r2,16384
 400c808:	10bfffc4 	addi	r2,r2,-1
 400c80c:	8085883a 	add	r2,r16,r2
 400c810:	1085883a 	add	r2,r2,r2
 400c814:	1085883a 	add	r2,r2,r2
 400c818:	9885883a 	add	r2,r19,r2
 400c81c:	11000517 	ldw	r4,20(r2)
 400c820:	8020917a 	slli	r16,r16,5
 400c824:	400bdd00 	call	400bdd0 <__hi0bits>
 400c828:	d8c00817 	ldw	r3,32(sp)
 400c82c:	8085c83a 	sub	r2,r16,r2
 400c830:	18800015 	stw	r2,0(r3)
 400c834:	9805883a 	mov	r2,r19
 400c838:	dfc00717 	ldw	ra,28(sp)
 400c83c:	dd000617 	ldw	r20,24(sp)
 400c840:	dcc00517 	ldw	r19,20(sp)
 400c844:	dc800417 	ldw	r18,16(sp)
 400c848:	dc400317 	ldw	r17,12(sp)
 400c84c:	dc000217 	ldw	r16,8(sp)
 400c850:	dec00804 	addi	sp,sp,32
 400c854:	f800283a 	ret
 400c858:	d809883a 	mov	r4,sp
 400c85c:	400be380 	call	400be38 <__lo0bits>
 400c860:	d8c00017 	ldw	r3,0(sp)
 400c864:	04000044 	movi	r16,1
 400c868:	9c000415 	stw	r16,16(r19)
 400c86c:	98c00515 	stw	r3,20(r19)
 400c870:	10800804 	addi	r2,r2,32
 400c874:	883fe126 	beq	r17,zero,400c7fc <__alt_data_end+0xfc00c7fc>
 400c878:	00c00d44 	movi	r3,53
 400c87c:	8c7ef344 	addi	r17,r17,-1075
 400c880:	88a3883a 	add	r17,r17,r2
 400c884:	1885c83a 	sub	r2,r3,r2
 400c888:	d8c00817 	ldw	r3,32(sp)
 400c88c:	94400015 	stw	r17,0(r18)
 400c890:	18800015 	stw	r2,0(r3)
 400c894:	003fe706 	br	400c834 <__alt_data_end+0xfc00c834>
 400c898:	01000804 	movi	r4,32
 400c89c:	2089c83a 	sub	r4,r4,r2
 400c8a0:	1908983a 	sll	r4,r3,r4
 400c8a4:	d9400117 	ldw	r5,4(sp)
 400c8a8:	1886d83a 	srl	r3,r3,r2
 400c8ac:	2148b03a 	or	r4,r4,r5
 400c8b0:	99000515 	stw	r4,20(r19)
 400c8b4:	d8c00015 	stw	r3,0(sp)
 400c8b8:	003fca06 	br	400c7e4 <__alt_data_end+0xfc00c7e4>

0400c8bc <__ratio>:
 400c8bc:	defff904 	addi	sp,sp,-28
 400c8c0:	dc400315 	stw	r17,12(sp)
 400c8c4:	2823883a 	mov	r17,r5
 400c8c8:	d9400104 	addi	r5,sp,4
 400c8cc:	dfc00615 	stw	ra,24(sp)
 400c8d0:	dcc00515 	stw	r19,20(sp)
 400c8d4:	dc800415 	stw	r18,16(sp)
 400c8d8:	2027883a 	mov	r19,r4
 400c8dc:	dc000215 	stw	r16,8(sp)
 400c8e0:	400c6640 	call	400c664 <__b2d>
 400c8e4:	d80b883a 	mov	r5,sp
 400c8e8:	8809883a 	mov	r4,r17
 400c8ec:	1025883a 	mov	r18,r2
 400c8f0:	1821883a 	mov	r16,r3
 400c8f4:	400c6640 	call	400c664 <__b2d>
 400c8f8:	8a000417 	ldw	r8,16(r17)
 400c8fc:	99000417 	ldw	r4,16(r19)
 400c900:	d9400117 	ldw	r5,4(sp)
 400c904:	2209c83a 	sub	r4,r4,r8
 400c908:	2010917a 	slli	r8,r4,5
 400c90c:	d9000017 	ldw	r4,0(sp)
 400c910:	2909c83a 	sub	r4,r5,r4
 400c914:	4109883a 	add	r4,r8,r4
 400c918:	01000e0e 	bge	zero,r4,400c954 <__ratio+0x98>
 400c91c:	2008953a 	slli	r4,r4,20
 400c920:	2421883a 	add	r16,r4,r16
 400c924:	100d883a 	mov	r6,r2
 400c928:	180f883a 	mov	r7,r3
 400c92c:	9009883a 	mov	r4,r18
 400c930:	800b883a 	mov	r5,r16
 400c934:	400390c0 	call	400390c <__divdf3>
 400c938:	dfc00617 	ldw	ra,24(sp)
 400c93c:	dcc00517 	ldw	r19,20(sp)
 400c940:	dc800417 	ldw	r18,16(sp)
 400c944:	dc400317 	ldw	r17,12(sp)
 400c948:	dc000217 	ldw	r16,8(sp)
 400c94c:	dec00704 	addi	sp,sp,28
 400c950:	f800283a 	ret
 400c954:	2008953a 	slli	r4,r4,20
 400c958:	1907c83a 	sub	r3,r3,r4
 400c95c:	003ff106 	br	400c924 <__alt_data_end+0xfc00c924>

0400c960 <_mprec_log10>:
 400c960:	defffe04 	addi	sp,sp,-8
 400c964:	dc000015 	stw	r16,0(sp)
 400c968:	dfc00115 	stw	ra,4(sp)
 400c96c:	008005c4 	movi	r2,23
 400c970:	2021883a 	mov	r16,r4
 400c974:	11000d0e 	bge	r2,r4,400c9ac <_mprec_log10+0x4c>
 400c978:	0005883a 	mov	r2,zero
 400c97c:	00cffc34 	movhi	r3,16368
 400c980:	843fffc4 	addi	r16,r16,-1
 400c984:	000d883a 	mov	r6,zero
 400c988:	01d00934 	movhi	r7,16420
 400c98c:	1009883a 	mov	r4,r2
 400c990:	180b883a 	mov	r5,r3
 400c994:	400444c0 	call	400444c <__muldf3>
 400c998:	803ff91e 	bne	r16,zero,400c980 <__alt_data_end+0xfc00c980>
 400c99c:	dfc00117 	ldw	ra,4(sp)
 400c9a0:	dc000017 	ldw	r16,0(sp)
 400c9a4:	dec00204 	addi	sp,sp,8
 400c9a8:	f800283a 	ret
 400c9ac:	202090fa 	slli	r16,r4,3
 400c9b0:	00810074 	movhi	r2,1025
 400c9b4:	108c0404 	addi	r2,r2,12304
 400c9b8:	1421883a 	add	r16,r2,r16
 400c9bc:	80800017 	ldw	r2,0(r16)
 400c9c0:	80c00117 	ldw	r3,4(r16)
 400c9c4:	dfc00117 	ldw	ra,4(sp)
 400c9c8:	dc000017 	ldw	r16,0(sp)
 400c9cc:	dec00204 	addi	sp,sp,8
 400c9d0:	f800283a 	ret

0400c9d4 <__copybits>:
 400c9d4:	297fffc4 	addi	r5,r5,-1
 400c9d8:	280fd17a 	srai	r7,r5,5
 400c9dc:	30c00417 	ldw	r3,16(r6)
 400c9e0:	30800504 	addi	r2,r6,20
 400c9e4:	39c00044 	addi	r7,r7,1
 400c9e8:	18c7883a 	add	r3,r3,r3
 400c9ec:	39cf883a 	add	r7,r7,r7
 400c9f0:	18c7883a 	add	r3,r3,r3
 400c9f4:	39cf883a 	add	r7,r7,r7
 400c9f8:	10c7883a 	add	r3,r2,r3
 400c9fc:	21cf883a 	add	r7,r4,r7
 400ca00:	10c00d2e 	bgeu	r2,r3,400ca38 <__copybits+0x64>
 400ca04:	200b883a 	mov	r5,r4
 400ca08:	12000017 	ldw	r8,0(r2)
 400ca0c:	29400104 	addi	r5,r5,4
 400ca10:	10800104 	addi	r2,r2,4
 400ca14:	2a3fff15 	stw	r8,-4(r5)
 400ca18:	10fffb36 	bltu	r2,r3,400ca08 <__alt_data_end+0xfc00ca08>
 400ca1c:	1985c83a 	sub	r2,r3,r6
 400ca20:	10bffac4 	addi	r2,r2,-21
 400ca24:	1004d0ba 	srli	r2,r2,2
 400ca28:	10800044 	addi	r2,r2,1
 400ca2c:	1085883a 	add	r2,r2,r2
 400ca30:	1085883a 	add	r2,r2,r2
 400ca34:	2089883a 	add	r4,r4,r2
 400ca38:	21c0032e 	bgeu	r4,r7,400ca48 <__copybits+0x74>
 400ca3c:	20000015 	stw	zero,0(r4)
 400ca40:	21000104 	addi	r4,r4,4
 400ca44:	21fffd36 	bltu	r4,r7,400ca3c <__alt_data_end+0xfc00ca3c>
 400ca48:	f800283a 	ret

0400ca4c <__any_on>:
 400ca4c:	20c00417 	ldw	r3,16(r4)
 400ca50:	2805d17a 	srai	r2,r5,5
 400ca54:	21000504 	addi	r4,r4,20
 400ca58:	18800d0e 	bge	r3,r2,400ca90 <__any_on+0x44>
 400ca5c:	18c7883a 	add	r3,r3,r3
 400ca60:	18c7883a 	add	r3,r3,r3
 400ca64:	20c7883a 	add	r3,r4,r3
 400ca68:	20c0192e 	bgeu	r4,r3,400cad0 <__any_on+0x84>
 400ca6c:	18bfff17 	ldw	r2,-4(r3)
 400ca70:	18ffff04 	addi	r3,r3,-4
 400ca74:	1000041e 	bne	r2,zero,400ca88 <__any_on+0x3c>
 400ca78:	20c0142e 	bgeu	r4,r3,400cacc <__any_on+0x80>
 400ca7c:	18ffff04 	addi	r3,r3,-4
 400ca80:	19400017 	ldw	r5,0(r3)
 400ca84:	283ffc26 	beq	r5,zero,400ca78 <__alt_data_end+0xfc00ca78>
 400ca88:	00800044 	movi	r2,1
 400ca8c:	f800283a 	ret
 400ca90:	10c00a0e 	bge	r2,r3,400cabc <__any_on+0x70>
 400ca94:	1085883a 	add	r2,r2,r2
 400ca98:	1085883a 	add	r2,r2,r2
 400ca9c:	294007cc 	andi	r5,r5,31
 400caa0:	2087883a 	add	r3,r4,r2
 400caa4:	283ff026 	beq	r5,zero,400ca68 <__alt_data_end+0xfc00ca68>
 400caa8:	19800017 	ldw	r6,0(r3)
 400caac:	3144d83a 	srl	r2,r6,r5
 400cab0:	114a983a 	sll	r5,r2,r5
 400cab4:	317ff41e 	bne	r6,r5,400ca88 <__alt_data_end+0xfc00ca88>
 400cab8:	003feb06 	br	400ca68 <__alt_data_end+0xfc00ca68>
 400cabc:	1085883a 	add	r2,r2,r2
 400cac0:	1085883a 	add	r2,r2,r2
 400cac4:	2087883a 	add	r3,r4,r2
 400cac8:	003fe706 	br	400ca68 <__alt_data_end+0xfc00ca68>
 400cacc:	f800283a 	ret
 400cad0:	0005883a 	mov	r2,zero
 400cad4:	f800283a 	ret

0400cad8 <_putc_r>:
 400cad8:	defffc04 	addi	sp,sp,-16
 400cadc:	dc000215 	stw	r16,8(sp)
 400cae0:	dfc00315 	stw	ra,12(sp)
 400cae4:	2021883a 	mov	r16,r4
 400cae8:	20000226 	beq	r4,zero,400caf4 <_putc_r+0x1c>
 400caec:	20800e17 	ldw	r2,56(r4)
 400caf0:	10001b26 	beq	r2,zero,400cb60 <_putc_r+0x88>
 400caf4:	30800217 	ldw	r2,8(r6)
 400caf8:	10bfffc4 	addi	r2,r2,-1
 400cafc:	30800215 	stw	r2,8(r6)
 400cb00:	10000a16 	blt	r2,zero,400cb2c <_putc_r+0x54>
 400cb04:	30800017 	ldw	r2,0(r6)
 400cb08:	11400005 	stb	r5,0(r2)
 400cb0c:	30800017 	ldw	r2,0(r6)
 400cb10:	10c00044 	addi	r3,r2,1
 400cb14:	30c00015 	stw	r3,0(r6)
 400cb18:	10800003 	ldbu	r2,0(r2)
 400cb1c:	dfc00317 	ldw	ra,12(sp)
 400cb20:	dc000217 	ldw	r16,8(sp)
 400cb24:	dec00404 	addi	sp,sp,16
 400cb28:	f800283a 	ret
 400cb2c:	30c00617 	ldw	r3,24(r6)
 400cb30:	10c00616 	blt	r2,r3,400cb4c <_putc_r+0x74>
 400cb34:	30800017 	ldw	r2,0(r6)
 400cb38:	00c00284 	movi	r3,10
 400cb3c:	11400005 	stb	r5,0(r2)
 400cb40:	30800017 	ldw	r2,0(r6)
 400cb44:	11400003 	ldbu	r5,0(r2)
 400cb48:	28fff11e 	bne	r5,r3,400cb10 <__alt_data_end+0xfc00cb10>
 400cb4c:	8009883a 	mov	r4,r16
 400cb50:	dfc00317 	ldw	ra,12(sp)
 400cb54:	dc000217 	ldw	r16,8(sp)
 400cb58:	dec00404 	addi	sp,sp,16
 400cb5c:	400ea581 	jmpi	400ea58 <__swbuf_r>
 400cb60:	d9400015 	stw	r5,0(sp)
 400cb64:	d9800115 	stw	r6,4(sp)
 400cb68:	400a0640 	call	400a064 <__sinit>
 400cb6c:	d9800117 	ldw	r6,4(sp)
 400cb70:	d9400017 	ldw	r5,0(sp)
 400cb74:	003fdf06 	br	400caf4 <__alt_data_end+0xfc00caf4>

0400cb78 <putc>:
 400cb78:	00810074 	movhi	r2,1025
 400cb7c:	defffc04 	addi	sp,sp,-16
 400cb80:	10935c04 	addi	r2,r2,19824
 400cb84:	dc000115 	stw	r16,4(sp)
 400cb88:	14000017 	ldw	r16,0(r2)
 400cb8c:	dc400215 	stw	r17,8(sp)
 400cb90:	dfc00315 	stw	ra,12(sp)
 400cb94:	2023883a 	mov	r17,r4
 400cb98:	80000226 	beq	r16,zero,400cba4 <putc+0x2c>
 400cb9c:	80800e17 	ldw	r2,56(r16)
 400cba0:	10001a26 	beq	r2,zero,400cc0c <putc+0x94>
 400cba4:	28800217 	ldw	r2,8(r5)
 400cba8:	10bfffc4 	addi	r2,r2,-1
 400cbac:	28800215 	stw	r2,8(r5)
 400cbb0:	10000b16 	blt	r2,zero,400cbe0 <putc+0x68>
 400cbb4:	28800017 	ldw	r2,0(r5)
 400cbb8:	14400005 	stb	r17,0(r2)
 400cbbc:	28800017 	ldw	r2,0(r5)
 400cbc0:	10c00044 	addi	r3,r2,1
 400cbc4:	28c00015 	stw	r3,0(r5)
 400cbc8:	10800003 	ldbu	r2,0(r2)
 400cbcc:	dfc00317 	ldw	ra,12(sp)
 400cbd0:	dc400217 	ldw	r17,8(sp)
 400cbd4:	dc000117 	ldw	r16,4(sp)
 400cbd8:	dec00404 	addi	sp,sp,16
 400cbdc:	f800283a 	ret
 400cbe0:	28c00617 	ldw	r3,24(r5)
 400cbe4:	10c00e16 	blt	r2,r3,400cc20 <putc+0xa8>
 400cbe8:	28800017 	ldw	r2,0(r5)
 400cbec:	01000284 	movi	r4,10
 400cbf0:	14400005 	stb	r17,0(r2)
 400cbf4:	28800017 	ldw	r2,0(r5)
 400cbf8:	10c00003 	ldbu	r3,0(r2)
 400cbfc:	193ff01e 	bne	r3,r4,400cbc0 <__alt_data_end+0xfc00cbc0>
 400cc00:	280d883a 	mov	r6,r5
 400cc04:	180b883a 	mov	r5,r3
 400cc08:	00000706 	br	400cc28 <putc+0xb0>
 400cc0c:	8009883a 	mov	r4,r16
 400cc10:	d9400015 	stw	r5,0(sp)
 400cc14:	400a0640 	call	400a064 <__sinit>
 400cc18:	d9400017 	ldw	r5,0(sp)
 400cc1c:	003fe106 	br	400cba4 <__alt_data_end+0xfc00cba4>
 400cc20:	280d883a 	mov	r6,r5
 400cc24:	880b883a 	mov	r5,r17
 400cc28:	8009883a 	mov	r4,r16
 400cc2c:	dfc00317 	ldw	ra,12(sp)
 400cc30:	dc400217 	ldw	r17,8(sp)
 400cc34:	dc000117 	ldw	r16,4(sp)
 400cc38:	dec00404 	addi	sp,sp,16
 400cc3c:	400ea581 	jmpi	400ea58 <__swbuf_r>

0400cc40 <_realloc_r>:
 400cc40:	defff604 	addi	sp,sp,-40
 400cc44:	dc800215 	stw	r18,8(sp)
 400cc48:	dfc00915 	stw	ra,36(sp)
 400cc4c:	df000815 	stw	fp,32(sp)
 400cc50:	ddc00715 	stw	r23,28(sp)
 400cc54:	dd800615 	stw	r22,24(sp)
 400cc58:	dd400515 	stw	r21,20(sp)
 400cc5c:	dd000415 	stw	r20,16(sp)
 400cc60:	dcc00315 	stw	r19,12(sp)
 400cc64:	dc400115 	stw	r17,4(sp)
 400cc68:	dc000015 	stw	r16,0(sp)
 400cc6c:	3025883a 	mov	r18,r6
 400cc70:	2800b726 	beq	r5,zero,400cf50 <_realloc_r+0x310>
 400cc74:	282b883a 	mov	r21,r5
 400cc78:	2029883a 	mov	r20,r4
 400cc7c:	40106b40 	call	40106b4 <__malloc_lock>
 400cc80:	a8bfff17 	ldw	r2,-4(r21)
 400cc84:	043fff04 	movi	r16,-4
 400cc88:	90c002c4 	addi	r3,r18,11
 400cc8c:	01000584 	movi	r4,22
 400cc90:	acfffe04 	addi	r19,r21,-8
 400cc94:	1420703a 	and	r16,r2,r16
 400cc98:	20c0332e 	bgeu	r4,r3,400cd68 <_realloc_r+0x128>
 400cc9c:	047ffe04 	movi	r17,-8
 400cca0:	1c62703a 	and	r17,r3,r17
 400cca4:	8807883a 	mov	r3,r17
 400cca8:	88005816 	blt	r17,zero,400ce0c <_realloc_r+0x1cc>
 400ccac:	8c805736 	bltu	r17,r18,400ce0c <_realloc_r+0x1cc>
 400ccb0:	80c0300e 	bge	r16,r3,400cd74 <_realloc_r+0x134>
 400ccb4:	07010074 	movhi	fp,1025
 400ccb8:	e70db004 	addi	fp,fp,14016
 400ccbc:	e1c00217 	ldw	r7,8(fp)
 400ccc0:	9c09883a 	add	r4,r19,r16
 400ccc4:	22000117 	ldw	r8,4(r4)
 400ccc8:	21c06326 	beq	r4,r7,400ce58 <_realloc_r+0x218>
 400cccc:	017fff84 	movi	r5,-2
 400ccd0:	414a703a 	and	r5,r8,r5
 400ccd4:	214b883a 	add	r5,r4,r5
 400ccd8:	29800117 	ldw	r6,4(r5)
 400ccdc:	3180004c 	andi	r6,r6,1
 400cce0:	30003f26 	beq	r6,zero,400cde0 <_realloc_r+0x1a0>
 400cce4:	1080004c 	andi	r2,r2,1
 400cce8:	10008326 	beq	r2,zero,400cef8 <_realloc_r+0x2b8>
 400ccec:	900b883a 	mov	r5,r18
 400ccf0:	a009883a 	mov	r4,r20
 400ccf4:	400ae200 	call	400ae20 <_malloc_r>
 400ccf8:	1025883a 	mov	r18,r2
 400ccfc:	10011e26 	beq	r2,zero,400d178 <_realloc_r+0x538>
 400cd00:	a93fff17 	ldw	r4,-4(r21)
 400cd04:	10fffe04 	addi	r3,r2,-8
 400cd08:	00bfff84 	movi	r2,-2
 400cd0c:	2084703a 	and	r2,r4,r2
 400cd10:	9885883a 	add	r2,r19,r2
 400cd14:	1880ee26 	beq	r3,r2,400d0d0 <_realloc_r+0x490>
 400cd18:	81bfff04 	addi	r6,r16,-4
 400cd1c:	00800904 	movi	r2,36
 400cd20:	1180b836 	bltu	r2,r6,400d004 <_realloc_r+0x3c4>
 400cd24:	00c004c4 	movi	r3,19
 400cd28:	19809636 	bltu	r3,r6,400cf84 <_realloc_r+0x344>
 400cd2c:	9005883a 	mov	r2,r18
 400cd30:	a807883a 	mov	r3,r21
 400cd34:	19000017 	ldw	r4,0(r3)
 400cd38:	11000015 	stw	r4,0(r2)
 400cd3c:	19000117 	ldw	r4,4(r3)
 400cd40:	11000115 	stw	r4,4(r2)
 400cd44:	18c00217 	ldw	r3,8(r3)
 400cd48:	10c00215 	stw	r3,8(r2)
 400cd4c:	a80b883a 	mov	r5,r21
 400cd50:	a009883a 	mov	r4,r20
 400cd54:	400a1d80 	call	400a1d8 <_free_r>
 400cd58:	a009883a 	mov	r4,r20
 400cd5c:	40106d80 	call	40106d8 <__malloc_unlock>
 400cd60:	9005883a 	mov	r2,r18
 400cd64:	00001206 	br	400cdb0 <_realloc_r+0x170>
 400cd68:	00c00404 	movi	r3,16
 400cd6c:	1823883a 	mov	r17,r3
 400cd70:	003fce06 	br	400ccac <__alt_data_end+0xfc00ccac>
 400cd74:	a825883a 	mov	r18,r21
 400cd78:	8445c83a 	sub	r2,r16,r17
 400cd7c:	00c003c4 	movi	r3,15
 400cd80:	18802636 	bltu	r3,r2,400ce1c <_realloc_r+0x1dc>
 400cd84:	99800117 	ldw	r6,4(r19)
 400cd88:	9c07883a 	add	r3,r19,r16
 400cd8c:	3180004c 	andi	r6,r6,1
 400cd90:	3420b03a 	or	r16,r6,r16
 400cd94:	9c000115 	stw	r16,4(r19)
 400cd98:	18800117 	ldw	r2,4(r3)
 400cd9c:	10800054 	ori	r2,r2,1
 400cda0:	18800115 	stw	r2,4(r3)
 400cda4:	a009883a 	mov	r4,r20
 400cda8:	40106d80 	call	40106d8 <__malloc_unlock>
 400cdac:	9005883a 	mov	r2,r18
 400cdb0:	dfc00917 	ldw	ra,36(sp)
 400cdb4:	df000817 	ldw	fp,32(sp)
 400cdb8:	ddc00717 	ldw	r23,28(sp)
 400cdbc:	dd800617 	ldw	r22,24(sp)
 400cdc0:	dd400517 	ldw	r21,20(sp)
 400cdc4:	dd000417 	ldw	r20,16(sp)
 400cdc8:	dcc00317 	ldw	r19,12(sp)
 400cdcc:	dc800217 	ldw	r18,8(sp)
 400cdd0:	dc400117 	ldw	r17,4(sp)
 400cdd4:	dc000017 	ldw	r16,0(sp)
 400cdd8:	dec00a04 	addi	sp,sp,40
 400cddc:	f800283a 	ret
 400cde0:	017fff04 	movi	r5,-4
 400cde4:	414a703a 	and	r5,r8,r5
 400cde8:	814d883a 	add	r6,r16,r5
 400cdec:	30c01f16 	blt	r6,r3,400ce6c <_realloc_r+0x22c>
 400cdf0:	20800317 	ldw	r2,12(r4)
 400cdf4:	20c00217 	ldw	r3,8(r4)
 400cdf8:	a825883a 	mov	r18,r21
 400cdfc:	3021883a 	mov	r16,r6
 400ce00:	18800315 	stw	r2,12(r3)
 400ce04:	10c00215 	stw	r3,8(r2)
 400ce08:	003fdb06 	br	400cd78 <__alt_data_end+0xfc00cd78>
 400ce0c:	00800304 	movi	r2,12
 400ce10:	a0800015 	stw	r2,0(r20)
 400ce14:	0005883a 	mov	r2,zero
 400ce18:	003fe506 	br	400cdb0 <__alt_data_end+0xfc00cdb0>
 400ce1c:	98c00117 	ldw	r3,4(r19)
 400ce20:	9c4b883a 	add	r5,r19,r17
 400ce24:	11000054 	ori	r4,r2,1
 400ce28:	18c0004c 	andi	r3,r3,1
 400ce2c:	1c62b03a 	or	r17,r3,r17
 400ce30:	9c400115 	stw	r17,4(r19)
 400ce34:	29000115 	stw	r4,4(r5)
 400ce38:	2885883a 	add	r2,r5,r2
 400ce3c:	10c00117 	ldw	r3,4(r2)
 400ce40:	29400204 	addi	r5,r5,8
 400ce44:	a009883a 	mov	r4,r20
 400ce48:	18c00054 	ori	r3,r3,1
 400ce4c:	10c00115 	stw	r3,4(r2)
 400ce50:	400a1d80 	call	400a1d8 <_free_r>
 400ce54:	003fd306 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400ce58:	017fff04 	movi	r5,-4
 400ce5c:	414a703a 	and	r5,r8,r5
 400ce60:	89800404 	addi	r6,r17,16
 400ce64:	8151883a 	add	r8,r16,r5
 400ce68:	4180590e 	bge	r8,r6,400cfd0 <_realloc_r+0x390>
 400ce6c:	1080004c 	andi	r2,r2,1
 400ce70:	103f9e1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400ce74:	adbffe17 	ldw	r22,-8(r21)
 400ce78:	00bfff04 	movi	r2,-4
 400ce7c:	9dadc83a 	sub	r22,r19,r22
 400ce80:	b1800117 	ldw	r6,4(r22)
 400ce84:	3084703a 	and	r2,r6,r2
 400ce88:	20002026 	beq	r4,zero,400cf0c <_realloc_r+0x2cc>
 400ce8c:	80af883a 	add	r23,r16,r2
 400ce90:	b96f883a 	add	r23,r23,r5
 400ce94:	21c05f26 	beq	r4,r7,400d014 <_realloc_r+0x3d4>
 400ce98:	b8c01c16 	blt	r23,r3,400cf0c <_realloc_r+0x2cc>
 400ce9c:	20800317 	ldw	r2,12(r4)
 400cea0:	20c00217 	ldw	r3,8(r4)
 400cea4:	81bfff04 	addi	r6,r16,-4
 400cea8:	01000904 	movi	r4,36
 400ceac:	18800315 	stw	r2,12(r3)
 400ceb0:	10c00215 	stw	r3,8(r2)
 400ceb4:	b0c00217 	ldw	r3,8(r22)
 400ceb8:	b0800317 	ldw	r2,12(r22)
 400cebc:	b4800204 	addi	r18,r22,8
 400cec0:	18800315 	stw	r2,12(r3)
 400cec4:	10c00215 	stw	r3,8(r2)
 400cec8:	21801b36 	bltu	r4,r6,400cf38 <_realloc_r+0x2f8>
 400cecc:	008004c4 	movi	r2,19
 400ced0:	1180352e 	bgeu	r2,r6,400cfa8 <_realloc_r+0x368>
 400ced4:	a8800017 	ldw	r2,0(r21)
 400ced8:	b0800215 	stw	r2,8(r22)
 400cedc:	a8800117 	ldw	r2,4(r21)
 400cee0:	b0800315 	stw	r2,12(r22)
 400cee4:	008006c4 	movi	r2,27
 400cee8:	11807f36 	bltu	r2,r6,400d0e8 <_realloc_r+0x4a8>
 400ceec:	b0800404 	addi	r2,r22,16
 400cef0:	ad400204 	addi	r21,r21,8
 400cef4:	00002d06 	br	400cfac <_realloc_r+0x36c>
 400cef8:	adbffe17 	ldw	r22,-8(r21)
 400cefc:	00bfff04 	movi	r2,-4
 400cf00:	9dadc83a 	sub	r22,r19,r22
 400cf04:	b1000117 	ldw	r4,4(r22)
 400cf08:	2084703a 	and	r2,r4,r2
 400cf0c:	b03f7726 	beq	r22,zero,400ccec <__alt_data_end+0xfc00ccec>
 400cf10:	80af883a 	add	r23,r16,r2
 400cf14:	b8ff7516 	blt	r23,r3,400ccec <__alt_data_end+0xfc00ccec>
 400cf18:	b0800317 	ldw	r2,12(r22)
 400cf1c:	b0c00217 	ldw	r3,8(r22)
 400cf20:	81bfff04 	addi	r6,r16,-4
 400cf24:	01000904 	movi	r4,36
 400cf28:	18800315 	stw	r2,12(r3)
 400cf2c:	10c00215 	stw	r3,8(r2)
 400cf30:	b4800204 	addi	r18,r22,8
 400cf34:	21bfe52e 	bgeu	r4,r6,400cecc <__alt_data_end+0xfc00cecc>
 400cf38:	a80b883a 	mov	r5,r21
 400cf3c:	9009883a 	mov	r4,r18
 400cf40:	400b8580 	call	400b858 <memmove>
 400cf44:	b821883a 	mov	r16,r23
 400cf48:	b027883a 	mov	r19,r22
 400cf4c:	003f8a06 	br	400cd78 <__alt_data_end+0xfc00cd78>
 400cf50:	300b883a 	mov	r5,r6
 400cf54:	dfc00917 	ldw	ra,36(sp)
 400cf58:	df000817 	ldw	fp,32(sp)
 400cf5c:	ddc00717 	ldw	r23,28(sp)
 400cf60:	dd800617 	ldw	r22,24(sp)
 400cf64:	dd400517 	ldw	r21,20(sp)
 400cf68:	dd000417 	ldw	r20,16(sp)
 400cf6c:	dcc00317 	ldw	r19,12(sp)
 400cf70:	dc800217 	ldw	r18,8(sp)
 400cf74:	dc400117 	ldw	r17,4(sp)
 400cf78:	dc000017 	ldw	r16,0(sp)
 400cf7c:	dec00a04 	addi	sp,sp,40
 400cf80:	400ae201 	jmpi	400ae20 <_malloc_r>
 400cf84:	a8c00017 	ldw	r3,0(r21)
 400cf88:	90c00015 	stw	r3,0(r18)
 400cf8c:	a8c00117 	ldw	r3,4(r21)
 400cf90:	90c00115 	stw	r3,4(r18)
 400cf94:	00c006c4 	movi	r3,27
 400cf98:	19804536 	bltu	r3,r6,400d0b0 <_realloc_r+0x470>
 400cf9c:	90800204 	addi	r2,r18,8
 400cfa0:	a8c00204 	addi	r3,r21,8
 400cfa4:	003f6306 	br	400cd34 <__alt_data_end+0xfc00cd34>
 400cfa8:	9005883a 	mov	r2,r18
 400cfac:	a8c00017 	ldw	r3,0(r21)
 400cfb0:	b821883a 	mov	r16,r23
 400cfb4:	b027883a 	mov	r19,r22
 400cfb8:	10c00015 	stw	r3,0(r2)
 400cfbc:	a8c00117 	ldw	r3,4(r21)
 400cfc0:	10c00115 	stw	r3,4(r2)
 400cfc4:	a8c00217 	ldw	r3,8(r21)
 400cfc8:	10c00215 	stw	r3,8(r2)
 400cfcc:	003f6a06 	br	400cd78 <__alt_data_end+0xfc00cd78>
 400cfd0:	9c67883a 	add	r19,r19,r17
 400cfd4:	4445c83a 	sub	r2,r8,r17
 400cfd8:	e4c00215 	stw	r19,8(fp)
 400cfdc:	10800054 	ori	r2,r2,1
 400cfe0:	98800115 	stw	r2,4(r19)
 400cfe4:	a8bfff17 	ldw	r2,-4(r21)
 400cfe8:	a009883a 	mov	r4,r20
 400cfec:	1080004c 	andi	r2,r2,1
 400cff0:	1462b03a 	or	r17,r2,r17
 400cff4:	ac7fff15 	stw	r17,-4(r21)
 400cff8:	40106d80 	call	40106d8 <__malloc_unlock>
 400cffc:	a805883a 	mov	r2,r21
 400d000:	003f6b06 	br	400cdb0 <__alt_data_end+0xfc00cdb0>
 400d004:	a80b883a 	mov	r5,r21
 400d008:	9009883a 	mov	r4,r18
 400d00c:	400b8580 	call	400b858 <memmove>
 400d010:	003f4e06 	br	400cd4c <__alt_data_end+0xfc00cd4c>
 400d014:	89000404 	addi	r4,r17,16
 400d018:	b93fbc16 	blt	r23,r4,400cf0c <__alt_data_end+0xfc00cf0c>
 400d01c:	b0800317 	ldw	r2,12(r22)
 400d020:	b0c00217 	ldw	r3,8(r22)
 400d024:	81bfff04 	addi	r6,r16,-4
 400d028:	01000904 	movi	r4,36
 400d02c:	18800315 	stw	r2,12(r3)
 400d030:	10c00215 	stw	r3,8(r2)
 400d034:	b4800204 	addi	r18,r22,8
 400d038:	21804336 	bltu	r4,r6,400d148 <_realloc_r+0x508>
 400d03c:	008004c4 	movi	r2,19
 400d040:	11803f2e 	bgeu	r2,r6,400d140 <_realloc_r+0x500>
 400d044:	a8800017 	ldw	r2,0(r21)
 400d048:	b0800215 	stw	r2,8(r22)
 400d04c:	a8800117 	ldw	r2,4(r21)
 400d050:	b0800315 	stw	r2,12(r22)
 400d054:	008006c4 	movi	r2,27
 400d058:	11803f36 	bltu	r2,r6,400d158 <_realloc_r+0x518>
 400d05c:	b0800404 	addi	r2,r22,16
 400d060:	ad400204 	addi	r21,r21,8
 400d064:	a8c00017 	ldw	r3,0(r21)
 400d068:	10c00015 	stw	r3,0(r2)
 400d06c:	a8c00117 	ldw	r3,4(r21)
 400d070:	10c00115 	stw	r3,4(r2)
 400d074:	a8c00217 	ldw	r3,8(r21)
 400d078:	10c00215 	stw	r3,8(r2)
 400d07c:	b447883a 	add	r3,r22,r17
 400d080:	bc45c83a 	sub	r2,r23,r17
 400d084:	e0c00215 	stw	r3,8(fp)
 400d088:	10800054 	ori	r2,r2,1
 400d08c:	18800115 	stw	r2,4(r3)
 400d090:	b0800117 	ldw	r2,4(r22)
 400d094:	a009883a 	mov	r4,r20
 400d098:	1080004c 	andi	r2,r2,1
 400d09c:	1462b03a 	or	r17,r2,r17
 400d0a0:	b4400115 	stw	r17,4(r22)
 400d0a4:	40106d80 	call	40106d8 <__malloc_unlock>
 400d0a8:	9005883a 	mov	r2,r18
 400d0ac:	003f4006 	br	400cdb0 <__alt_data_end+0xfc00cdb0>
 400d0b0:	a8c00217 	ldw	r3,8(r21)
 400d0b4:	90c00215 	stw	r3,8(r18)
 400d0b8:	a8c00317 	ldw	r3,12(r21)
 400d0bc:	90c00315 	stw	r3,12(r18)
 400d0c0:	30801126 	beq	r6,r2,400d108 <_realloc_r+0x4c8>
 400d0c4:	90800404 	addi	r2,r18,16
 400d0c8:	a8c00404 	addi	r3,r21,16
 400d0cc:	003f1906 	br	400cd34 <__alt_data_end+0xfc00cd34>
 400d0d0:	90ffff17 	ldw	r3,-4(r18)
 400d0d4:	00bfff04 	movi	r2,-4
 400d0d8:	a825883a 	mov	r18,r21
 400d0dc:	1884703a 	and	r2,r3,r2
 400d0e0:	80a1883a 	add	r16,r16,r2
 400d0e4:	003f2406 	br	400cd78 <__alt_data_end+0xfc00cd78>
 400d0e8:	a8800217 	ldw	r2,8(r21)
 400d0ec:	b0800415 	stw	r2,16(r22)
 400d0f0:	a8800317 	ldw	r2,12(r21)
 400d0f4:	b0800515 	stw	r2,20(r22)
 400d0f8:	31000a26 	beq	r6,r4,400d124 <_realloc_r+0x4e4>
 400d0fc:	b0800604 	addi	r2,r22,24
 400d100:	ad400404 	addi	r21,r21,16
 400d104:	003fa906 	br	400cfac <__alt_data_end+0xfc00cfac>
 400d108:	a9000417 	ldw	r4,16(r21)
 400d10c:	90800604 	addi	r2,r18,24
 400d110:	a8c00604 	addi	r3,r21,24
 400d114:	91000415 	stw	r4,16(r18)
 400d118:	a9000517 	ldw	r4,20(r21)
 400d11c:	91000515 	stw	r4,20(r18)
 400d120:	003f0406 	br	400cd34 <__alt_data_end+0xfc00cd34>
 400d124:	a8c00417 	ldw	r3,16(r21)
 400d128:	ad400604 	addi	r21,r21,24
 400d12c:	b0800804 	addi	r2,r22,32
 400d130:	b0c00615 	stw	r3,24(r22)
 400d134:	a8ffff17 	ldw	r3,-4(r21)
 400d138:	b0c00715 	stw	r3,28(r22)
 400d13c:	003f9b06 	br	400cfac <__alt_data_end+0xfc00cfac>
 400d140:	9005883a 	mov	r2,r18
 400d144:	003fc706 	br	400d064 <__alt_data_end+0xfc00d064>
 400d148:	a80b883a 	mov	r5,r21
 400d14c:	9009883a 	mov	r4,r18
 400d150:	400b8580 	call	400b858 <memmove>
 400d154:	003fc906 	br	400d07c <__alt_data_end+0xfc00d07c>
 400d158:	a8800217 	ldw	r2,8(r21)
 400d15c:	b0800415 	stw	r2,16(r22)
 400d160:	a8800317 	ldw	r2,12(r21)
 400d164:	b0800515 	stw	r2,20(r22)
 400d168:	31000726 	beq	r6,r4,400d188 <_realloc_r+0x548>
 400d16c:	b0800604 	addi	r2,r22,24
 400d170:	ad400404 	addi	r21,r21,16
 400d174:	003fbb06 	br	400d064 <__alt_data_end+0xfc00d064>
 400d178:	a009883a 	mov	r4,r20
 400d17c:	40106d80 	call	40106d8 <__malloc_unlock>
 400d180:	0005883a 	mov	r2,zero
 400d184:	003f0a06 	br	400cdb0 <__alt_data_end+0xfc00cdb0>
 400d188:	a8c00417 	ldw	r3,16(r21)
 400d18c:	ad400604 	addi	r21,r21,24
 400d190:	b0800804 	addi	r2,r22,32
 400d194:	b0c00615 	stw	r3,24(r22)
 400d198:	a8ffff17 	ldw	r3,-4(r21)
 400d19c:	b0c00715 	stw	r3,28(r22)
 400d1a0:	003fb006 	br	400d064 <__alt_data_end+0xfc00d064>

0400d1a4 <_sbrk_r>:
 400d1a4:	defffd04 	addi	sp,sp,-12
 400d1a8:	dc000015 	stw	r16,0(sp)
 400d1ac:	04010074 	movhi	r16,1025
 400d1b0:	dc400115 	stw	r17,4(sp)
 400d1b4:	841a5404 	addi	r16,r16,26960
 400d1b8:	2023883a 	mov	r17,r4
 400d1bc:	2809883a 	mov	r4,r5
 400d1c0:	dfc00215 	stw	ra,8(sp)
 400d1c4:	80000015 	stw	zero,0(r16)
 400d1c8:	40108980 	call	4010898 <sbrk>
 400d1cc:	00ffffc4 	movi	r3,-1
 400d1d0:	10c00526 	beq	r2,r3,400d1e8 <_sbrk_r+0x44>
 400d1d4:	dfc00217 	ldw	ra,8(sp)
 400d1d8:	dc400117 	ldw	r17,4(sp)
 400d1dc:	dc000017 	ldw	r16,0(sp)
 400d1e0:	dec00304 	addi	sp,sp,12
 400d1e4:	f800283a 	ret
 400d1e8:	80c00017 	ldw	r3,0(r16)
 400d1ec:	183ff926 	beq	r3,zero,400d1d4 <__alt_data_end+0xfc00d1d4>
 400d1f0:	88c00015 	stw	r3,0(r17)
 400d1f4:	003ff706 	br	400d1d4 <__alt_data_end+0xfc00d1d4>

0400d1f8 <__sread>:
 400d1f8:	defffe04 	addi	sp,sp,-8
 400d1fc:	dc000015 	stw	r16,0(sp)
 400d200:	2821883a 	mov	r16,r5
 400d204:	2940038f 	ldh	r5,14(r5)
 400d208:	dfc00115 	stw	ra,4(sp)
 400d20c:	400f1440 	call	400f144 <_read_r>
 400d210:	10000716 	blt	r2,zero,400d230 <__sread+0x38>
 400d214:	80c01417 	ldw	r3,80(r16)
 400d218:	1887883a 	add	r3,r3,r2
 400d21c:	80c01415 	stw	r3,80(r16)
 400d220:	dfc00117 	ldw	ra,4(sp)
 400d224:	dc000017 	ldw	r16,0(sp)
 400d228:	dec00204 	addi	sp,sp,8
 400d22c:	f800283a 	ret
 400d230:	80c0030b 	ldhu	r3,12(r16)
 400d234:	18fbffcc 	andi	r3,r3,61439
 400d238:	80c0030d 	sth	r3,12(r16)
 400d23c:	dfc00117 	ldw	ra,4(sp)
 400d240:	dc000017 	ldw	r16,0(sp)
 400d244:	dec00204 	addi	sp,sp,8
 400d248:	f800283a 	ret

0400d24c <__seofread>:
 400d24c:	0005883a 	mov	r2,zero
 400d250:	f800283a 	ret

0400d254 <__swrite>:
 400d254:	2880030b 	ldhu	r2,12(r5)
 400d258:	defffb04 	addi	sp,sp,-20
 400d25c:	dcc00315 	stw	r19,12(sp)
 400d260:	dc800215 	stw	r18,8(sp)
 400d264:	dc400115 	stw	r17,4(sp)
 400d268:	dc000015 	stw	r16,0(sp)
 400d26c:	dfc00415 	stw	ra,16(sp)
 400d270:	10c0400c 	andi	r3,r2,256
 400d274:	2821883a 	mov	r16,r5
 400d278:	2023883a 	mov	r17,r4
 400d27c:	3025883a 	mov	r18,r6
 400d280:	3827883a 	mov	r19,r7
 400d284:	18000526 	beq	r3,zero,400d29c <__swrite+0x48>
 400d288:	2940038f 	ldh	r5,14(r5)
 400d28c:	01c00084 	movi	r7,2
 400d290:	000d883a 	mov	r6,zero
 400d294:	400f0e40 	call	400f0e4 <_lseek_r>
 400d298:	8080030b 	ldhu	r2,12(r16)
 400d29c:	8140038f 	ldh	r5,14(r16)
 400d2a0:	10bbffcc 	andi	r2,r2,61439
 400d2a4:	980f883a 	mov	r7,r19
 400d2a8:	900d883a 	mov	r6,r18
 400d2ac:	8809883a 	mov	r4,r17
 400d2b0:	8080030d 	sth	r2,12(r16)
 400d2b4:	dfc00417 	ldw	ra,16(sp)
 400d2b8:	dcc00317 	ldw	r19,12(sp)
 400d2bc:	dc800217 	ldw	r18,8(sp)
 400d2c0:	dc400117 	ldw	r17,4(sp)
 400d2c4:	dc000017 	ldw	r16,0(sp)
 400d2c8:	dec00504 	addi	sp,sp,20
 400d2cc:	400ebb01 	jmpi	400ebb0 <_write_r>

0400d2d0 <__sseek>:
 400d2d0:	defffe04 	addi	sp,sp,-8
 400d2d4:	dc000015 	stw	r16,0(sp)
 400d2d8:	2821883a 	mov	r16,r5
 400d2dc:	2940038f 	ldh	r5,14(r5)
 400d2e0:	dfc00115 	stw	ra,4(sp)
 400d2e4:	400f0e40 	call	400f0e4 <_lseek_r>
 400d2e8:	00ffffc4 	movi	r3,-1
 400d2ec:	10c00826 	beq	r2,r3,400d310 <__sseek+0x40>
 400d2f0:	80c0030b 	ldhu	r3,12(r16)
 400d2f4:	80801415 	stw	r2,80(r16)
 400d2f8:	18c40014 	ori	r3,r3,4096
 400d2fc:	80c0030d 	sth	r3,12(r16)
 400d300:	dfc00117 	ldw	ra,4(sp)
 400d304:	dc000017 	ldw	r16,0(sp)
 400d308:	dec00204 	addi	sp,sp,8
 400d30c:	f800283a 	ret
 400d310:	80c0030b 	ldhu	r3,12(r16)
 400d314:	18fbffcc 	andi	r3,r3,61439
 400d318:	80c0030d 	sth	r3,12(r16)
 400d31c:	dfc00117 	ldw	ra,4(sp)
 400d320:	dc000017 	ldw	r16,0(sp)
 400d324:	dec00204 	addi	sp,sp,8
 400d328:	f800283a 	ret

0400d32c <__sclose>:
 400d32c:	2940038f 	ldh	r5,14(r5)
 400d330:	400ec101 	jmpi	400ec10 <_close_r>

0400d334 <strcmp>:
 400d334:	2144b03a 	or	r2,r4,r5
 400d338:	108000cc 	andi	r2,r2,3
 400d33c:	1000171e 	bne	r2,zero,400d39c <strcmp+0x68>
 400d340:	20800017 	ldw	r2,0(r4)
 400d344:	28c00017 	ldw	r3,0(r5)
 400d348:	10c0141e 	bne	r2,r3,400d39c <strcmp+0x68>
 400d34c:	027fbff4 	movhi	r9,65279
 400d350:	4a7fbfc4 	addi	r9,r9,-257
 400d354:	0086303a 	nor	r3,zero,r2
 400d358:	02202074 	movhi	r8,32897
 400d35c:	1245883a 	add	r2,r2,r9
 400d360:	42202004 	addi	r8,r8,-32640
 400d364:	10c4703a 	and	r2,r2,r3
 400d368:	1204703a 	and	r2,r2,r8
 400d36c:	10000226 	beq	r2,zero,400d378 <strcmp+0x44>
 400d370:	00002306 	br	400d400 <strcmp+0xcc>
 400d374:	1000221e 	bne	r2,zero,400d400 <strcmp+0xcc>
 400d378:	21000104 	addi	r4,r4,4
 400d37c:	20c00017 	ldw	r3,0(r4)
 400d380:	29400104 	addi	r5,r5,4
 400d384:	29800017 	ldw	r6,0(r5)
 400d388:	1a4f883a 	add	r7,r3,r9
 400d38c:	00c4303a 	nor	r2,zero,r3
 400d390:	3884703a 	and	r2,r7,r2
 400d394:	1204703a 	and	r2,r2,r8
 400d398:	19bff626 	beq	r3,r6,400d374 <__alt_data_end+0xfc00d374>
 400d39c:	20800003 	ldbu	r2,0(r4)
 400d3a0:	10c03fcc 	andi	r3,r2,255
 400d3a4:	18c0201c 	xori	r3,r3,128
 400d3a8:	18ffe004 	addi	r3,r3,-128
 400d3ac:	18000c26 	beq	r3,zero,400d3e0 <strcmp+0xac>
 400d3b0:	29800007 	ldb	r6,0(r5)
 400d3b4:	19800326 	beq	r3,r6,400d3c4 <strcmp+0x90>
 400d3b8:	00001306 	br	400d408 <strcmp+0xd4>
 400d3bc:	29800007 	ldb	r6,0(r5)
 400d3c0:	11800b1e 	bne	r2,r6,400d3f0 <strcmp+0xbc>
 400d3c4:	21000044 	addi	r4,r4,1
 400d3c8:	20c00003 	ldbu	r3,0(r4)
 400d3cc:	29400044 	addi	r5,r5,1
 400d3d0:	18803fcc 	andi	r2,r3,255
 400d3d4:	1080201c 	xori	r2,r2,128
 400d3d8:	10bfe004 	addi	r2,r2,-128
 400d3dc:	103ff71e 	bne	r2,zero,400d3bc <__alt_data_end+0xfc00d3bc>
 400d3e0:	0007883a 	mov	r3,zero
 400d3e4:	28800003 	ldbu	r2,0(r5)
 400d3e8:	1885c83a 	sub	r2,r3,r2
 400d3ec:	f800283a 	ret
 400d3f0:	28800003 	ldbu	r2,0(r5)
 400d3f4:	18c03fcc 	andi	r3,r3,255
 400d3f8:	1885c83a 	sub	r2,r3,r2
 400d3fc:	f800283a 	ret
 400d400:	0005883a 	mov	r2,zero
 400d404:	f800283a 	ret
 400d408:	10c03fcc 	andi	r3,r2,255
 400d40c:	003ff506 	br	400d3e4 <__alt_data_end+0xfc00d3e4>

0400d410 <__sprint_r.part.0>:
 400d410:	28801917 	ldw	r2,100(r5)
 400d414:	defff604 	addi	sp,sp,-40
 400d418:	dd400515 	stw	r21,20(sp)
 400d41c:	dfc00915 	stw	ra,36(sp)
 400d420:	df000815 	stw	fp,32(sp)
 400d424:	ddc00715 	stw	r23,28(sp)
 400d428:	dd800615 	stw	r22,24(sp)
 400d42c:	dd000415 	stw	r20,16(sp)
 400d430:	dcc00315 	stw	r19,12(sp)
 400d434:	dc800215 	stw	r18,8(sp)
 400d438:	dc400115 	stw	r17,4(sp)
 400d43c:	dc000015 	stw	r16,0(sp)
 400d440:	1088000c 	andi	r2,r2,8192
 400d444:	302b883a 	mov	r21,r6
 400d448:	10002e26 	beq	r2,zero,400d504 <__sprint_r.part.0+0xf4>
 400d44c:	30800217 	ldw	r2,8(r6)
 400d450:	35800017 	ldw	r22,0(r6)
 400d454:	10002926 	beq	r2,zero,400d4fc <__sprint_r.part.0+0xec>
 400d458:	2827883a 	mov	r19,r5
 400d45c:	2029883a 	mov	r20,r4
 400d460:	b5c00104 	addi	r23,r22,4
 400d464:	04bfffc4 	movi	r18,-1
 400d468:	bc400017 	ldw	r17,0(r23)
 400d46c:	b4000017 	ldw	r16,0(r22)
 400d470:	0039883a 	mov	fp,zero
 400d474:	8822d0ba 	srli	r17,r17,2
 400d478:	8800031e 	bne	r17,zero,400d488 <__sprint_r.part.0+0x78>
 400d47c:	00001806 	br	400d4e0 <__sprint_r.part.0+0xd0>
 400d480:	84000104 	addi	r16,r16,4
 400d484:	8f001526 	beq	r17,fp,400d4dc <__sprint_r.part.0+0xcc>
 400d488:	81400017 	ldw	r5,0(r16)
 400d48c:	980d883a 	mov	r6,r19
 400d490:	a009883a 	mov	r4,r20
 400d494:	400ef900 	call	400ef90 <_fputwc_r>
 400d498:	e7000044 	addi	fp,fp,1
 400d49c:	14bff81e 	bne	r2,r18,400d480 <__alt_data_end+0xfc00d480>
 400d4a0:	9005883a 	mov	r2,r18
 400d4a4:	a8000215 	stw	zero,8(r21)
 400d4a8:	a8000115 	stw	zero,4(r21)
 400d4ac:	dfc00917 	ldw	ra,36(sp)
 400d4b0:	df000817 	ldw	fp,32(sp)
 400d4b4:	ddc00717 	ldw	r23,28(sp)
 400d4b8:	dd800617 	ldw	r22,24(sp)
 400d4bc:	dd400517 	ldw	r21,20(sp)
 400d4c0:	dd000417 	ldw	r20,16(sp)
 400d4c4:	dcc00317 	ldw	r19,12(sp)
 400d4c8:	dc800217 	ldw	r18,8(sp)
 400d4cc:	dc400117 	ldw	r17,4(sp)
 400d4d0:	dc000017 	ldw	r16,0(sp)
 400d4d4:	dec00a04 	addi	sp,sp,40
 400d4d8:	f800283a 	ret
 400d4dc:	a8800217 	ldw	r2,8(r21)
 400d4e0:	8c63883a 	add	r17,r17,r17
 400d4e4:	8c63883a 	add	r17,r17,r17
 400d4e8:	1445c83a 	sub	r2,r2,r17
 400d4ec:	a8800215 	stw	r2,8(r21)
 400d4f0:	b5800204 	addi	r22,r22,8
 400d4f4:	bdc00204 	addi	r23,r23,8
 400d4f8:	103fdb1e 	bne	r2,zero,400d468 <__alt_data_end+0xfc00d468>
 400d4fc:	0005883a 	mov	r2,zero
 400d500:	003fe806 	br	400d4a4 <__alt_data_end+0xfc00d4a4>
 400d504:	400a4e80 	call	400a4e8 <__sfvwrite_r>
 400d508:	003fe606 	br	400d4a4 <__alt_data_end+0xfc00d4a4>

0400d50c <__sprint_r>:
 400d50c:	30c00217 	ldw	r3,8(r6)
 400d510:	18000126 	beq	r3,zero,400d518 <__sprint_r+0xc>
 400d514:	400d4101 	jmpi	400d410 <__sprint_r.part.0>
 400d518:	30000115 	stw	zero,4(r6)
 400d51c:	0005883a 	mov	r2,zero
 400d520:	f800283a 	ret

0400d524 <___vfiprintf_internal_r>:
 400d524:	deffc904 	addi	sp,sp,-220
 400d528:	df003515 	stw	fp,212(sp)
 400d52c:	dd003115 	stw	r20,196(sp)
 400d530:	dfc03615 	stw	ra,216(sp)
 400d534:	ddc03415 	stw	r23,208(sp)
 400d538:	dd803315 	stw	r22,204(sp)
 400d53c:	dd403215 	stw	r21,200(sp)
 400d540:	dcc03015 	stw	r19,192(sp)
 400d544:	dc802f15 	stw	r18,188(sp)
 400d548:	dc402e15 	stw	r17,184(sp)
 400d54c:	dc002d15 	stw	r16,180(sp)
 400d550:	d9002015 	stw	r4,128(sp)
 400d554:	d9c02215 	stw	r7,136(sp)
 400d558:	2829883a 	mov	r20,r5
 400d55c:	3039883a 	mov	fp,r6
 400d560:	20000226 	beq	r4,zero,400d56c <___vfiprintf_internal_r+0x48>
 400d564:	20800e17 	ldw	r2,56(r4)
 400d568:	1000cf26 	beq	r2,zero,400d8a8 <___vfiprintf_internal_r+0x384>
 400d56c:	a080030b 	ldhu	r2,12(r20)
 400d570:	10c8000c 	andi	r3,r2,8192
 400d574:	1800061e 	bne	r3,zero,400d590 <___vfiprintf_internal_r+0x6c>
 400d578:	a1001917 	ldw	r4,100(r20)
 400d57c:	00f7ffc4 	movi	r3,-8193
 400d580:	10880014 	ori	r2,r2,8192
 400d584:	20c6703a 	and	r3,r4,r3
 400d588:	a080030d 	sth	r2,12(r20)
 400d58c:	a0c01915 	stw	r3,100(r20)
 400d590:	10c0020c 	andi	r3,r2,8
 400d594:	1800a926 	beq	r3,zero,400d83c <___vfiprintf_internal_r+0x318>
 400d598:	a0c00417 	ldw	r3,16(r20)
 400d59c:	1800a726 	beq	r3,zero,400d83c <___vfiprintf_internal_r+0x318>
 400d5a0:	1080068c 	andi	r2,r2,26
 400d5a4:	00c00284 	movi	r3,10
 400d5a8:	10c0ac26 	beq	r2,r3,400d85c <___vfiprintf_internal_r+0x338>
 400d5ac:	da801a04 	addi	r10,sp,104
 400d5b0:	da801e15 	stw	r10,120(sp)
 400d5b4:	d8801e17 	ldw	r2,120(sp)
 400d5b8:	da8019c4 	addi	r10,sp,103
 400d5bc:	05810074 	movhi	r22,1025
 400d5c0:	05c10074 	movhi	r23,1025
 400d5c4:	da801f15 	stw	r10,124(sp)
 400d5c8:	1295c83a 	sub	r10,r2,r10
 400d5cc:	b58c3a04 	addi	r22,r22,12520
 400d5d0:	bdcc3604 	addi	r23,r23,12504
 400d5d4:	dec01a15 	stw	sp,104(sp)
 400d5d8:	d8001c15 	stw	zero,112(sp)
 400d5dc:	d8001b15 	stw	zero,108(sp)
 400d5e0:	d8002615 	stw	zero,152(sp)
 400d5e4:	d8002315 	stw	zero,140(sp)
 400d5e8:	da802715 	stw	r10,156(sp)
 400d5ec:	d811883a 	mov	r8,sp
 400d5f0:	dd002115 	stw	r20,132(sp)
 400d5f4:	e021883a 	mov	r16,fp
 400d5f8:	80800007 	ldb	r2,0(r16)
 400d5fc:	1003ea26 	beq	r2,zero,400e5a8 <___vfiprintf_internal_r+0x1084>
 400d600:	00c00944 	movi	r3,37
 400d604:	8025883a 	mov	r18,r16
 400d608:	10c0021e 	bne	r2,r3,400d614 <___vfiprintf_internal_r+0xf0>
 400d60c:	00001606 	br	400d668 <___vfiprintf_internal_r+0x144>
 400d610:	10c00326 	beq	r2,r3,400d620 <___vfiprintf_internal_r+0xfc>
 400d614:	94800044 	addi	r18,r18,1
 400d618:	90800007 	ldb	r2,0(r18)
 400d61c:	103ffc1e 	bne	r2,zero,400d610 <__alt_data_end+0xfc00d610>
 400d620:	9423c83a 	sub	r17,r18,r16
 400d624:	88001026 	beq	r17,zero,400d668 <___vfiprintf_internal_r+0x144>
 400d628:	d8c01c17 	ldw	r3,112(sp)
 400d62c:	d8801b17 	ldw	r2,108(sp)
 400d630:	44000015 	stw	r16,0(r8)
 400d634:	88c7883a 	add	r3,r17,r3
 400d638:	10800044 	addi	r2,r2,1
 400d63c:	44400115 	stw	r17,4(r8)
 400d640:	d8c01c15 	stw	r3,112(sp)
 400d644:	d8801b15 	stw	r2,108(sp)
 400d648:	010001c4 	movi	r4,7
 400d64c:	2080760e 	bge	r4,r2,400d828 <___vfiprintf_internal_r+0x304>
 400d650:	1803821e 	bne	r3,zero,400e45c <___vfiprintf_internal_r+0xf38>
 400d654:	da802317 	ldw	r10,140(sp)
 400d658:	d8001b15 	stw	zero,108(sp)
 400d65c:	d811883a 	mov	r8,sp
 400d660:	5455883a 	add	r10,r10,r17
 400d664:	da802315 	stw	r10,140(sp)
 400d668:	90800007 	ldb	r2,0(r18)
 400d66c:	10044626 	beq	r2,zero,400e788 <___vfiprintf_internal_r+0x1264>
 400d670:	90c00047 	ldb	r3,1(r18)
 400d674:	94000044 	addi	r16,r18,1
 400d678:	d8001d85 	stb	zero,118(sp)
 400d67c:	0009883a 	mov	r4,zero
 400d680:	000f883a 	mov	r7,zero
 400d684:	027fffc4 	movi	r9,-1
 400d688:	0023883a 	mov	r17,zero
 400d68c:	0029883a 	mov	r20,zero
 400d690:	01401604 	movi	r5,88
 400d694:	01800244 	movi	r6,9
 400d698:	03400a84 	movi	r13,42
 400d69c:	03001b04 	movi	r12,108
 400d6a0:	84000044 	addi	r16,r16,1
 400d6a4:	18bff804 	addi	r2,r3,-32
 400d6a8:	28827336 	bltu	r5,r2,400e078 <___vfiprintf_internal_r+0xb54>
 400d6ac:	100490ba 	slli	r2,r2,2
 400d6b0:	02810074 	movhi	r10,1025
 400d6b4:	52b5b104 	addi	r10,r10,-10556
 400d6b8:	1285883a 	add	r2,r2,r10
 400d6bc:	10800017 	ldw	r2,0(r2)
 400d6c0:	1000683a 	jmp	r2
 400d6c4:	0400ddac 	andhi	r16,zero,886
 400d6c8:	0400e078 	rdprs	r16,zero,897
 400d6cc:	0400e078 	rdprs	r16,zero,897
 400d6d0:	0400ddcc 	andi	r16,zero,887
 400d6d4:	0400e078 	rdprs	r16,zero,897
 400d6d8:	0400e078 	rdprs	r16,zero,897
 400d6dc:	0400e078 	rdprs	r16,zero,897
 400d6e0:	0400e078 	rdprs	r16,zero,897
 400d6e4:	0400e078 	rdprs	r16,zero,897
 400d6e8:	0400e078 	rdprs	r16,zero,897
 400d6ec:	0400dfb4 	movhi	r16,894
 400d6f0:	0400dfd0 	cmplti	r16,zero,895
 400d6f4:	0400e078 	rdprs	r16,zero,897
 400d6f8:	0400d8b8 	rdprs	r16,zero,866
 400d6fc:	0400dfe0 	cmpeqi	r16,zero,895
 400d700:	0400e078 	rdprs	r16,zero,897
 400d704:	0400ddd8 	cmpnei	r16,zero,887
 400d708:	0400dde4 	muli	r16,zero,887
 400d70c:	0400dde4 	muli	r16,zero,887
 400d710:	0400dde4 	muli	r16,zero,887
 400d714:	0400dde4 	muli	r16,zero,887
 400d718:	0400dde4 	muli	r16,zero,887
 400d71c:	0400dde4 	muli	r16,zero,887
 400d720:	0400dde4 	muli	r16,zero,887
 400d724:	0400dde4 	muli	r16,zero,887
 400d728:	0400dde4 	muli	r16,zero,887
 400d72c:	0400e078 	rdprs	r16,zero,897
 400d730:	0400e078 	rdprs	r16,zero,897
 400d734:	0400e078 	rdprs	r16,zero,897
 400d738:	0400e078 	rdprs	r16,zero,897
 400d73c:	0400e078 	rdprs	r16,zero,897
 400d740:	0400e078 	rdprs	r16,zero,897
 400d744:	0400e078 	rdprs	r16,zero,897
 400d748:	0400e078 	rdprs	r16,zero,897
 400d74c:	0400e078 	rdprs	r16,zero,897
 400d750:	0400e078 	rdprs	r16,zero,897
 400d754:	0400de10 	cmplti	r16,zero,888
 400d758:	0400e078 	rdprs	r16,zero,897
 400d75c:	0400e078 	rdprs	r16,zero,897
 400d760:	0400e078 	rdprs	r16,zero,897
 400d764:	0400e078 	rdprs	r16,zero,897
 400d768:	0400e078 	rdprs	r16,zero,897
 400d76c:	0400e078 	rdprs	r16,zero,897
 400d770:	0400e078 	rdprs	r16,zero,897
 400d774:	0400e078 	rdprs	r16,zero,897
 400d778:	0400e078 	rdprs	r16,zero,897
 400d77c:	0400e078 	rdprs	r16,zero,897
 400d780:	0400de48 	cmpgei	r16,zero,889
 400d784:	0400e078 	rdprs	r16,zero,897
 400d788:	0400e078 	rdprs	r16,zero,897
 400d78c:	0400e078 	rdprs	r16,zero,897
 400d790:	0400e078 	rdprs	r16,zero,897
 400d794:	0400e078 	rdprs	r16,zero,897
 400d798:	0400dea0 	cmpeqi	r16,zero,890
 400d79c:	0400e078 	rdprs	r16,zero,897
 400d7a0:	0400e078 	rdprs	r16,zero,897
 400d7a4:	0400df10 	cmplti	r16,zero,892
 400d7a8:	0400e078 	rdprs	r16,zero,897
 400d7ac:	0400e078 	rdprs	r16,zero,897
 400d7b0:	0400e078 	rdprs	r16,zero,897
 400d7b4:	0400e078 	rdprs	r16,zero,897
 400d7b8:	0400e078 	rdprs	r16,zero,897
 400d7bc:	0400e078 	rdprs	r16,zero,897
 400d7c0:	0400e078 	rdprs	r16,zero,897
 400d7c4:	0400e078 	rdprs	r16,zero,897
 400d7c8:	0400e078 	rdprs	r16,zero,897
 400d7cc:	0400e078 	rdprs	r16,zero,897
 400d7d0:	0400dcbc 	xorhi	r16,zero,882
 400d7d4:	0400dce8 	cmpgeui	r16,zero,883
 400d7d8:	0400e078 	rdprs	r16,zero,897
 400d7dc:	0400e078 	rdprs	r16,zero,897
 400d7e0:	0400e078 	rdprs	r16,zero,897
 400d7e4:	0400e020 	cmpeqi	r16,zero,896
 400d7e8:	0400dce8 	cmpgeui	r16,zero,883
 400d7ec:	0400e078 	rdprs	r16,zero,897
 400d7f0:	0400e078 	rdprs	r16,zero,897
 400d7f4:	0400db7c 	xorhi	r16,zero,877
 400d7f8:	0400e078 	rdprs	r16,zero,897
 400d7fc:	0400db8c 	andi	r16,zero,878
 400d800:	0400dbc8 	cmpgei	r16,zero,879
 400d804:	0400d8c4 	movi	r16,867
 400d808:	0400db70 	cmpltui	r16,zero,877
 400d80c:	0400e078 	rdprs	r16,zero,897
 400d810:	0400df4c 	andi	r16,zero,893
 400d814:	0400e078 	rdprs	r16,zero,897
 400d818:	0400dfa4 	muli	r16,zero,894
 400d81c:	0400e078 	rdprs	r16,zero,897
 400d820:	0400e078 	rdprs	r16,zero,897
 400d824:	0400dc68 	cmpgeui	r16,zero,881
 400d828:	42000204 	addi	r8,r8,8
 400d82c:	da802317 	ldw	r10,140(sp)
 400d830:	5455883a 	add	r10,r10,r17
 400d834:	da802315 	stw	r10,140(sp)
 400d838:	003f8b06 	br	400d668 <__alt_data_end+0xfc00d668>
 400d83c:	d9002017 	ldw	r4,128(sp)
 400d840:	a00b883a 	mov	r5,r20
 400d844:	40080900 	call	4008090 <__swsetup_r>
 400d848:	1003b11e 	bne	r2,zero,400e710 <___vfiprintf_internal_r+0x11ec>
 400d84c:	a080030b 	ldhu	r2,12(r20)
 400d850:	00c00284 	movi	r3,10
 400d854:	1080068c 	andi	r2,r2,26
 400d858:	10ff541e 	bne	r2,r3,400d5ac <__alt_data_end+0xfc00d5ac>
 400d85c:	a080038f 	ldh	r2,14(r20)
 400d860:	103f5216 	blt	r2,zero,400d5ac <__alt_data_end+0xfc00d5ac>
 400d864:	d9c02217 	ldw	r7,136(sp)
 400d868:	d9002017 	ldw	r4,128(sp)
 400d86c:	e00d883a 	mov	r6,fp
 400d870:	a00b883a 	mov	r5,r20
 400d874:	400e99c0 	call	400e99c <__sbprintf>
 400d878:	dfc03617 	ldw	ra,216(sp)
 400d87c:	df003517 	ldw	fp,212(sp)
 400d880:	ddc03417 	ldw	r23,208(sp)
 400d884:	dd803317 	ldw	r22,204(sp)
 400d888:	dd403217 	ldw	r21,200(sp)
 400d88c:	dd003117 	ldw	r20,196(sp)
 400d890:	dcc03017 	ldw	r19,192(sp)
 400d894:	dc802f17 	ldw	r18,188(sp)
 400d898:	dc402e17 	ldw	r17,184(sp)
 400d89c:	dc002d17 	ldw	r16,180(sp)
 400d8a0:	dec03704 	addi	sp,sp,220
 400d8a4:	f800283a 	ret
 400d8a8:	400a0640 	call	400a064 <__sinit>
 400d8ac:	003f2f06 	br	400d56c <__alt_data_end+0xfc00d56c>
 400d8b0:	0463c83a 	sub	r17,zero,r17
 400d8b4:	d8802215 	stw	r2,136(sp)
 400d8b8:	a5000114 	ori	r20,r20,4
 400d8bc:	80c00007 	ldb	r3,0(r16)
 400d8c0:	003f7706 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400d8c4:	00800c04 	movi	r2,48
 400d8c8:	da802217 	ldw	r10,136(sp)
 400d8cc:	d8801d05 	stb	r2,116(sp)
 400d8d0:	00801e04 	movi	r2,120
 400d8d4:	d8801d45 	stb	r2,117(sp)
 400d8d8:	d8001d85 	stb	zero,118(sp)
 400d8dc:	50c00104 	addi	r3,r10,4
 400d8e0:	54800017 	ldw	r18,0(r10)
 400d8e4:	0027883a 	mov	r19,zero
 400d8e8:	a0800094 	ori	r2,r20,2
 400d8ec:	48030b16 	blt	r9,zero,400e51c <___vfiprintf_internal_r+0xff8>
 400d8f0:	00bfdfc4 	movi	r2,-129
 400d8f4:	a096703a 	and	r11,r20,r2
 400d8f8:	d8c02215 	stw	r3,136(sp)
 400d8fc:	5d000094 	ori	r20,r11,2
 400d900:	90032b1e 	bne	r18,zero,400e5b0 <___vfiprintf_internal_r+0x108c>
 400d904:	00810074 	movhi	r2,1025
 400d908:	108bd604 	addi	r2,r2,12120
 400d90c:	d8802615 	stw	r2,152(sp)
 400d910:	0039883a 	mov	fp,zero
 400d914:	48017b1e 	bne	r9,zero,400df04 <___vfiprintf_internal_r+0x9e0>
 400d918:	0013883a 	mov	r9,zero
 400d91c:	0027883a 	mov	r19,zero
 400d920:	dd401a04 	addi	r21,sp,104
 400d924:	4825883a 	mov	r18,r9
 400d928:	4cc0010e 	bge	r9,r19,400d930 <___vfiprintf_internal_r+0x40c>
 400d92c:	9825883a 	mov	r18,r19
 400d930:	e7003fcc 	andi	fp,fp,255
 400d934:	e700201c 	xori	fp,fp,128
 400d938:	e73fe004 	addi	fp,fp,-128
 400d93c:	e0000126 	beq	fp,zero,400d944 <___vfiprintf_internal_r+0x420>
 400d940:	94800044 	addi	r18,r18,1
 400d944:	a380008c 	andi	r14,r20,2
 400d948:	70000126 	beq	r14,zero,400d950 <___vfiprintf_internal_r+0x42c>
 400d94c:	94800084 	addi	r18,r18,2
 400d950:	a700210c 	andi	fp,r20,132
 400d954:	e001df1e 	bne	fp,zero,400e0d4 <___vfiprintf_internal_r+0xbb0>
 400d958:	8c87c83a 	sub	r3,r17,r18
 400d95c:	00c1dd0e 	bge	zero,r3,400e0d4 <___vfiprintf_internal_r+0xbb0>
 400d960:	01c00404 	movi	r7,16
 400d964:	d8801c17 	ldw	r2,112(sp)
 400d968:	38c3ad0e 	bge	r7,r3,400e820 <___vfiprintf_internal_r+0x12fc>
 400d96c:	02810074 	movhi	r10,1025
 400d970:	528c3a04 	addi	r10,r10,12520
 400d974:	dc002915 	stw	r16,164(sp)
 400d978:	d9801b17 	ldw	r6,108(sp)
 400d97c:	da802415 	stw	r10,144(sp)
 400d980:	03c001c4 	movi	r15,7
 400d984:	da402515 	stw	r9,148(sp)
 400d988:	db802815 	stw	r14,160(sp)
 400d98c:	1821883a 	mov	r16,r3
 400d990:	00000506 	br	400d9a8 <___vfiprintf_internal_r+0x484>
 400d994:	31400084 	addi	r5,r6,2
 400d998:	42000204 	addi	r8,r8,8
 400d99c:	200d883a 	mov	r6,r4
 400d9a0:	843ffc04 	addi	r16,r16,-16
 400d9a4:	3c000d0e 	bge	r7,r16,400d9dc <___vfiprintf_internal_r+0x4b8>
 400d9a8:	10800404 	addi	r2,r2,16
 400d9ac:	31000044 	addi	r4,r6,1
 400d9b0:	45800015 	stw	r22,0(r8)
 400d9b4:	41c00115 	stw	r7,4(r8)
 400d9b8:	d8801c15 	stw	r2,112(sp)
 400d9bc:	d9001b15 	stw	r4,108(sp)
 400d9c0:	793ff40e 	bge	r15,r4,400d994 <__alt_data_end+0xfc00d994>
 400d9c4:	1001b51e 	bne	r2,zero,400e09c <___vfiprintf_internal_r+0xb78>
 400d9c8:	843ffc04 	addi	r16,r16,-16
 400d9cc:	000d883a 	mov	r6,zero
 400d9d0:	01400044 	movi	r5,1
 400d9d4:	d811883a 	mov	r8,sp
 400d9d8:	3c3ff316 	blt	r7,r16,400d9a8 <__alt_data_end+0xfc00d9a8>
 400d9dc:	8007883a 	mov	r3,r16
 400d9e0:	da402517 	ldw	r9,148(sp)
 400d9e4:	db802817 	ldw	r14,160(sp)
 400d9e8:	dc002917 	ldw	r16,164(sp)
 400d9ec:	da802417 	ldw	r10,144(sp)
 400d9f0:	1885883a 	add	r2,r3,r2
 400d9f4:	40c00115 	stw	r3,4(r8)
 400d9f8:	42800015 	stw	r10,0(r8)
 400d9fc:	d8801c15 	stw	r2,112(sp)
 400da00:	d9401b15 	stw	r5,108(sp)
 400da04:	00c001c4 	movi	r3,7
 400da08:	19426016 	blt	r3,r5,400e38c <___vfiprintf_internal_r+0xe68>
 400da0c:	d8c01d87 	ldb	r3,118(sp)
 400da10:	42000204 	addi	r8,r8,8
 400da14:	29000044 	addi	r4,r5,1
 400da18:	1801b31e 	bne	r3,zero,400e0e8 <___vfiprintf_internal_r+0xbc4>
 400da1c:	7001c026 	beq	r14,zero,400e120 <___vfiprintf_internal_r+0xbfc>
 400da20:	d8c01d04 	addi	r3,sp,116
 400da24:	10800084 	addi	r2,r2,2
 400da28:	40c00015 	stw	r3,0(r8)
 400da2c:	00c00084 	movi	r3,2
 400da30:	40c00115 	stw	r3,4(r8)
 400da34:	d8801c15 	stw	r2,112(sp)
 400da38:	d9001b15 	stw	r4,108(sp)
 400da3c:	00c001c4 	movi	r3,7
 400da40:	1902650e 	bge	r3,r4,400e3d8 <___vfiprintf_internal_r+0xeb4>
 400da44:	10029a1e 	bne	r2,zero,400e4b0 <___vfiprintf_internal_r+0xf8c>
 400da48:	00c02004 	movi	r3,128
 400da4c:	01000044 	movi	r4,1
 400da50:	000b883a 	mov	r5,zero
 400da54:	d811883a 	mov	r8,sp
 400da58:	e0c1b31e 	bne	fp,r3,400e128 <___vfiprintf_internal_r+0xc04>
 400da5c:	8cb9c83a 	sub	fp,r17,r18
 400da60:	0701b10e 	bge	zero,fp,400e128 <___vfiprintf_internal_r+0xc04>
 400da64:	01c00404 	movi	r7,16
 400da68:	3f03890e 	bge	r7,fp,400e890 <___vfiprintf_internal_r+0x136c>
 400da6c:	00c10074 	movhi	r3,1025
 400da70:	18cc3604 	addi	r3,r3,12504
 400da74:	d8c02415 	stw	r3,144(sp)
 400da78:	8007883a 	mov	r3,r16
 400da7c:	034001c4 	movi	r13,7
 400da80:	e021883a 	mov	r16,fp
 400da84:	da402515 	stw	r9,148(sp)
 400da88:	1839883a 	mov	fp,r3
 400da8c:	00000506 	br	400daa4 <___vfiprintf_internal_r+0x580>
 400da90:	29800084 	addi	r6,r5,2
 400da94:	42000204 	addi	r8,r8,8
 400da98:	180b883a 	mov	r5,r3
 400da9c:	843ffc04 	addi	r16,r16,-16
 400daa0:	3c000d0e 	bge	r7,r16,400dad8 <___vfiprintf_internal_r+0x5b4>
 400daa4:	10800404 	addi	r2,r2,16
 400daa8:	28c00044 	addi	r3,r5,1
 400daac:	45c00015 	stw	r23,0(r8)
 400dab0:	41c00115 	stw	r7,4(r8)
 400dab4:	d8801c15 	stw	r2,112(sp)
 400dab8:	d8c01b15 	stw	r3,108(sp)
 400dabc:	68fff40e 	bge	r13,r3,400da90 <__alt_data_end+0xfc00da90>
 400dac0:	1002241e 	bne	r2,zero,400e354 <___vfiprintf_internal_r+0xe30>
 400dac4:	843ffc04 	addi	r16,r16,-16
 400dac8:	01800044 	movi	r6,1
 400dacc:	000b883a 	mov	r5,zero
 400dad0:	d811883a 	mov	r8,sp
 400dad4:	3c3ff316 	blt	r7,r16,400daa4 <__alt_data_end+0xfc00daa4>
 400dad8:	da402517 	ldw	r9,148(sp)
 400dadc:	e007883a 	mov	r3,fp
 400dae0:	8039883a 	mov	fp,r16
 400dae4:	1821883a 	mov	r16,r3
 400dae8:	d8c02417 	ldw	r3,144(sp)
 400daec:	1705883a 	add	r2,r2,fp
 400daf0:	47000115 	stw	fp,4(r8)
 400daf4:	40c00015 	stw	r3,0(r8)
 400daf8:	d8801c15 	stw	r2,112(sp)
 400dafc:	d9801b15 	stw	r6,108(sp)
 400db00:	00c001c4 	movi	r3,7
 400db04:	19827616 	blt	r3,r6,400e4e0 <___vfiprintf_internal_r+0xfbc>
 400db08:	4cf9c83a 	sub	fp,r9,r19
 400db0c:	42000204 	addi	r8,r8,8
 400db10:	31000044 	addi	r4,r6,1
 400db14:	300b883a 	mov	r5,r6
 400db18:	07018516 	blt	zero,fp,400e130 <___vfiprintf_internal_r+0xc0c>
 400db1c:	9885883a 	add	r2,r19,r2
 400db20:	45400015 	stw	r21,0(r8)
 400db24:	44c00115 	stw	r19,4(r8)
 400db28:	d8801c15 	stw	r2,112(sp)
 400db2c:	d9001b15 	stw	r4,108(sp)
 400db30:	00c001c4 	movi	r3,7
 400db34:	1901dd0e 	bge	r3,r4,400e2ac <___vfiprintf_internal_r+0xd88>
 400db38:	1002401e 	bne	r2,zero,400e43c <___vfiprintf_internal_r+0xf18>
 400db3c:	d8001b15 	stw	zero,108(sp)
 400db40:	a2c0010c 	andi	r11,r20,4
 400db44:	58000226 	beq	r11,zero,400db50 <___vfiprintf_internal_r+0x62c>
 400db48:	8ca7c83a 	sub	r19,r17,r18
 400db4c:	04c2f216 	blt	zero,r19,400e718 <___vfiprintf_internal_r+0x11f4>
 400db50:	8c80010e 	bge	r17,r18,400db58 <___vfiprintf_internal_r+0x634>
 400db54:	9023883a 	mov	r17,r18
 400db58:	da802317 	ldw	r10,140(sp)
 400db5c:	5455883a 	add	r10,r10,r17
 400db60:	da802315 	stw	r10,140(sp)
 400db64:	d8001b15 	stw	zero,108(sp)
 400db68:	d811883a 	mov	r8,sp
 400db6c:	003ea206 	br	400d5f8 <__alt_data_end+0xfc00d5f8>
 400db70:	a5000814 	ori	r20,r20,32
 400db74:	80c00007 	ldb	r3,0(r16)
 400db78:	003ec906 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400db7c:	80c00007 	ldb	r3,0(r16)
 400db80:	1b030926 	beq	r3,r12,400e7a8 <___vfiprintf_internal_r+0x1284>
 400db84:	a5000414 	ori	r20,r20,16
 400db88:	003ec506 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400db8c:	21003fcc 	andi	r4,r4,255
 400db90:	20035e1e 	bne	r4,zero,400e90c <___vfiprintf_internal_r+0x13e8>
 400db94:	a080080c 	andi	r2,r20,32
 400db98:	1002a526 	beq	r2,zero,400e630 <___vfiprintf_internal_r+0x110c>
 400db9c:	da802217 	ldw	r10,136(sp)
 400dba0:	50800017 	ldw	r2,0(r10)
 400dba4:	da802317 	ldw	r10,140(sp)
 400dba8:	5007d7fa 	srai	r3,r10,31
 400dbac:	da802217 	ldw	r10,136(sp)
 400dbb0:	10c00115 	stw	r3,4(r2)
 400dbb4:	52800104 	addi	r10,r10,4
 400dbb8:	da802215 	stw	r10,136(sp)
 400dbbc:	da802317 	ldw	r10,140(sp)
 400dbc0:	12800015 	stw	r10,0(r2)
 400dbc4:	003e8c06 	br	400d5f8 <__alt_data_end+0xfc00d5f8>
 400dbc8:	21003fcc 	andi	r4,r4,255
 400dbcc:	2003511e 	bne	r4,zero,400e914 <___vfiprintf_internal_r+0x13f0>
 400dbd0:	a080080c 	andi	r2,r20,32
 400dbd4:	1000a126 	beq	r2,zero,400de5c <___vfiprintf_internal_r+0x938>
 400dbd8:	da802217 	ldw	r10,136(sp)
 400dbdc:	d8001d85 	stb	zero,118(sp)
 400dbe0:	50800204 	addi	r2,r10,8
 400dbe4:	54800017 	ldw	r18,0(r10)
 400dbe8:	54c00117 	ldw	r19,4(r10)
 400dbec:	4802b416 	blt	r9,zero,400e6c0 <___vfiprintf_internal_r+0x119c>
 400dbf0:	013fdfc4 	movi	r4,-129
 400dbf4:	94c6b03a 	or	r3,r18,r19
 400dbf8:	d8802215 	stw	r2,136(sp)
 400dbfc:	a128703a 	and	r20,r20,r4
 400dc00:	1800a226 	beq	r3,zero,400de8c <___vfiprintf_internal_r+0x968>
 400dc04:	0039883a 	mov	fp,zero
 400dc08:	dd401a04 	addi	r21,sp,104
 400dc0c:	9006d0fa 	srli	r3,r18,3
 400dc10:	9808977a 	slli	r4,r19,29
 400dc14:	9826d0fa 	srli	r19,r19,3
 400dc18:	948001cc 	andi	r18,r18,7
 400dc1c:	90800c04 	addi	r2,r18,48
 400dc20:	ad7fffc4 	addi	r21,r21,-1
 400dc24:	20e4b03a 	or	r18,r4,r3
 400dc28:	a8800005 	stb	r2,0(r21)
 400dc2c:	94c6b03a 	or	r3,r18,r19
 400dc30:	183ff61e 	bne	r3,zero,400dc0c <__alt_data_end+0xfc00dc0c>
 400dc34:	a0c0004c 	andi	r3,r20,1
 400dc38:	18005926 	beq	r3,zero,400dda0 <___vfiprintf_internal_r+0x87c>
 400dc3c:	10803fcc 	andi	r2,r2,255
 400dc40:	1080201c 	xori	r2,r2,128
 400dc44:	10bfe004 	addi	r2,r2,-128
 400dc48:	00c00c04 	movi	r3,48
 400dc4c:	10c05426 	beq	r2,r3,400dda0 <___vfiprintf_internal_r+0x87c>
 400dc50:	da801e17 	ldw	r10,120(sp)
 400dc54:	a8bfffc4 	addi	r2,r21,-1
 400dc58:	a8ffffc5 	stb	r3,-1(r21)
 400dc5c:	50a7c83a 	sub	r19,r10,r2
 400dc60:	102b883a 	mov	r21,r2
 400dc64:	003f2f06 	br	400d924 <__alt_data_end+0xfc00d924>
 400dc68:	21003fcc 	andi	r4,r4,255
 400dc6c:	2003421e 	bne	r4,zero,400e978 <___vfiprintf_internal_r+0x1454>
 400dc70:	00810074 	movhi	r2,1025
 400dc74:	108bd604 	addi	r2,r2,12120
 400dc78:	d8802615 	stw	r2,152(sp)
 400dc7c:	a080080c 	andi	r2,r20,32
 400dc80:	1000aa26 	beq	r2,zero,400df2c <___vfiprintf_internal_r+0xa08>
 400dc84:	da802217 	ldw	r10,136(sp)
 400dc88:	54800017 	ldw	r18,0(r10)
 400dc8c:	54c00117 	ldw	r19,4(r10)
 400dc90:	52800204 	addi	r10,r10,8
 400dc94:	da802215 	stw	r10,136(sp)
 400dc98:	a080004c 	andi	r2,r20,1
 400dc9c:	1001d226 	beq	r2,zero,400e3e8 <___vfiprintf_internal_r+0xec4>
 400dca0:	94c4b03a 	or	r2,r18,r19
 400dca4:	1002351e 	bne	r2,zero,400e57c <___vfiprintf_internal_r+0x1058>
 400dca8:	d8001d85 	stb	zero,118(sp)
 400dcac:	48022216 	blt	r9,zero,400e538 <___vfiprintf_internal_r+0x1014>
 400dcb0:	00bfdfc4 	movi	r2,-129
 400dcb4:	a0a8703a 	and	r20,r20,r2
 400dcb8:	003f1506 	br	400d910 <__alt_data_end+0xfc00d910>
 400dcbc:	da802217 	ldw	r10,136(sp)
 400dcc0:	04800044 	movi	r18,1
 400dcc4:	d8001d85 	stb	zero,118(sp)
 400dcc8:	50800017 	ldw	r2,0(r10)
 400dccc:	52800104 	addi	r10,r10,4
 400dcd0:	da802215 	stw	r10,136(sp)
 400dcd4:	d8801005 	stb	r2,64(sp)
 400dcd8:	9027883a 	mov	r19,r18
 400dcdc:	dd401004 	addi	r21,sp,64
 400dce0:	0013883a 	mov	r9,zero
 400dce4:	003f1706 	br	400d944 <__alt_data_end+0xfc00d944>
 400dce8:	21003fcc 	andi	r4,r4,255
 400dcec:	2003201e 	bne	r4,zero,400e970 <___vfiprintf_internal_r+0x144c>
 400dcf0:	a080080c 	andi	r2,r20,32
 400dcf4:	10004b26 	beq	r2,zero,400de24 <___vfiprintf_internal_r+0x900>
 400dcf8:	da802217 	ldw	r10,136(sp)
 400dcfc:	50800117 	ldw	r2,4(r10)
 400dd00:	54800017 	ldw	r18,0(r10)
 400dd04:	52800204 	addi	r10,r10,8
 400dd08:	da802215 	stw	r10,136(sp)
 400dd0c:	1027883a 	mov	r19,r2
 400dd10:	10022c16 	blt	r2,zero,400e5c4 <___vfiprintf_internal_r+0x10a0>
 400dd14:	df001d83 	ldbu	fp,118(sp)
 400dd18:	48007216 	blt	r9,zero,400dee4 <___vfiprintf_internal_r+0x9c0>
 400dd1c:	00ffdfc4 	movi	r3,-129
 400dd20:	94c4b03a 	or	r2,r18,r19
 400dd24:	a0e8703a 	and	r20,r20,r3
 400dd28:	1000cc26 	beq	r2,zero,400e05c <___vfiprintf_internal_r+0xb38>
 400dd2c:	98021026 	beq	r19,zero,400e570 <___vfiprintf_internal_r+0x104c>
 400dd30:	dc402415 	stw	r17,144(sp)
 400dd34:	dc002515 	stw	r16,148(sp)
 400dd38:	9823883a 	mov	r17,r19
 400dd3c:	9021883a 	mov	r16,r18
 400dd40:	dd401a04 	addi	r21,sp,104
 400dd44:	4825883a 	mov	r18,r9
 400dd48:	4027883a 	mov	r19,r8
 400dd4c:	8009883a 	mov	r4,r16
 400dd50:	880b883a 	mov	r5,r17
 400dd54:	01800284 	movi	r6,10
 400dd58:	000f883a 	mov	r7,zero
 400dd5c:	400f9640 	call	400f964 <__umoddi3>
 400dd60:	10800c04 	addi	r2,r2,48
 400dd64:	ad7fffc4 	addi	r21,r21,-1
 400dd68:	8009883a 	mov	r4,r16
 400dd6c:	880b883a 	mov	r5,r17
 400dd70:	a8800005 	stb	r2,0(r21)
 400dd74:	01800284 	movi	r6,10
 400dd78:	000f883a 	mov	r7,zero
 400dd7c:	400f3ec0 	call	400f3ec <__udivdi3>
 400dd80:	1021883a 	mov	r16,r2
 400dd84:	10c4b03a 	or	r2,r2,r3
 400dd88:	1823883a 	mov	r17,r3
 400dd8c:	103fef1e 	bne	r2,zero,400dd4c <__alt_data_end+0xfc00dd4c>
 400dd90:	dc402417 	ldw	r17,144(sp)
 400dd94:	dc002517 	ldw	r16,148(sp)
 400dd98:	9013883a 	mov	r9,r18
 400dd9c:	9811883a 	mov	r8,r19
 400dda0:	da801e17 	ldw	r10,120(sp)
 400dda4:	5567c83a 	sub	r19,r10,r21
 400dda8:	003ede06 	br	400d924 <__alt_data_end+0xfc00d924>
 400ddac:	38803fcc 	andi	r2,r7,255
 400ddb0:	1080201c 	xori	r2,r2,128
 400ddb4:	10bfe004 	addi	r2,r2,-128
 400ddb8:	1002371e 	bne	r2,zero,400e698 <___vfiprintf_internal_r+0x1174>
 400ddbc:	01000044 	movi	r4,1
 400ddc0:	01c00804 	movi	r7,32
 400ddc4:	80c00007 	ldb	r3,0(r16)
 400ddc8:	003e3506 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400ddcc:	a5000054 	ori	r20,r20,1
 400ddd0:	80c00007 	ldb	r3,0(r16)
 400ddd4:	003e3206 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400ddd8:	a5002014 	ori	r20,r20,128
 400dddc:	80c00007 	ldb	r3,0(r16)
 400dde0:	003e2f06 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400dde4:	8015883a 	mov	r10,r16
 400dde8:	0023883a 	mov	r17,zero
 400ddec:	18bff404 	addi	r2,r3,-48
 400ddf0:	50c00007 	ldb	r3,0(r10)
 400ddf4:	8c4002a4 	muli	r17,r17,10
 400ddf8:	84000044 	addi	r16,r16,1
 400ddfc:	8015883a 	mov	r10,r16
 400de00:	1463883a 	add	r17,r2,r17
 400de04:	18bff404 	addi	r2,r3,-48
 400de08:	30bff92e 	bgeu	r6,r2,400ddf0 <__alt_data_end+0xfc00ddf0>
 400de0c:	003e2506 	br	400d6a4 <__alt_data_end+0xfc00d6a4>
 400de10:	21003fcc 	andi	r4,r4,255
 400de14:	2002d41e 	bne	r4,zero,400e968 <___vfiprintf_internal_r+0x1444>
 400de18:	a5000414 	ori	r20,r20,16
 400de1c:	a080080c 	andi	r2,r20,32
 400de20:	103fb51e 	bne	r2,zero,400dcf8 <__alt_data_end+0xfc00dcf8>
 400de24:	a080040c 	andi	r2,r20,16
 400de28:	1001f826 	beq	r2,zero,400e60c <___vfiprintf_internal_r+0x10e8>
 400de2c:	da802217 	ldw	r10,136(sp)
 400de30:	54800017 	ldw	r18,0(r10)
 400de34:	52800104 	addi	r10,r10,4
 400de38:	da802215 	stw	r10,136(sp)
 400de3c:	9027d7fa 	srai	r19,r18,31
 400de40:	9805883a 	mov	r2,r19
 400de44:	003fb206 	br	400dd10 <__alt_data_end+0xfc00dd10>
 400de48:	21003fcc 	andi	r4,r4,255
 400de4c:	2002c41e 	bne	r4,zero,400e960 <___vfiprintf_internal_r+0x143c>
 400de50:	a5000414 	ori	r20,r20,16
 400de54:	a080080c 	andi	r2,r20,32
 400de58:	103f5f1e 	bne	r2,zero,400dbd8 <__alt_data_end+0xfc00dbd8>
 400de5c:	a080040c 	andi	r2,r20,16
 400de60:	10020f26 	beq	r2,zero,400e6a0 <___vfiprintf_internal_r+0x117c>
 400de64:	da802217 	ldw	r10,136(sp)
 400de68:	d8001d85 	stb	zero,118(sp)
 400de6c:	0027883a 	mov	r19,zero
 400de70:	50800104 	addi	r2,r10,4
 400de74:	54800017 	ldw	r18,0(r10)
 400de78:	48021116 	blt	r9,zero,400e6c0 <___vfiprintf_internal_r+0x119c>
 400de7c:	00ffdfc4 	movi	r3,-129
 400de80:	d8802215 	stw	r2,136(sp)
 400de84:	a0e8703a 	and	r20,r20,r3
 400de88:	903f5e1e 	bne	r18,zero,400dc04 <__alt_data_end+0xfc00dc04>
 400de8c:	0039883a 	mov	fp,zero
 400de90:	4802a626 	beq	r9,zero,400e92c <___vfiprintf_internal_r+0x1408>
 400de94:	0025883a 	mov	r18,zero
 400de98:	0027883a 	mov	r19,zero
 400de9c:	003f5a06 	br	400dc08 <__alt_data_end+0xfc00dc08>
 400dea0:	21003fcc 	andi	r4,r4,255
 400dea4:	20029f1e 	bne	r4,zero,400e924 <___vfiprintf_internal_r+0x1400>
 400dea8:	a5000414 	ori	r20,r20,16
 400deac:	a080080c 	andi	r2,r20,32
 400deb0:	10005e1e 	bne	r2,zero,400e02c <___vfiprintf_internal_r+0xb08>
 400deb4:	a080040c 	andi	r2,r20,16
 400deb8:	1001a21e 	bne	r2,zero,400e544 <___vfiprintf_internal_r+0x1020>
 400debc:	a080100c 	andi	r2,r20,64
 400dec0:	d8001d85 	stb	zero,118(sp)
 400dec4:	da802217 	ldw	r10,136(sp)
 400dec8:	1002231e 	bne	r2,zero,400e758 <___vfiprintf_internal_r+0x1234>
 400decc:	50800104 	addi	r2,r10,4
 400ded0:	54800017 	ldw	r18,0(r10)
 400ded4:	0027883a 	mov	r19,zero
 400ded8:	4801a00e 	bge	r9,zero,400e55c <___vfiprintf_internal_r+0x1038>
 400dedc:	d8802215 	stw	r2,136(sp)
 400dee0:	0039883a 	mov	fp,zero
 400dee4:	94c4b03a 	or	r2,r18,r19
 400dee8:	103f901e 	bne	r2,zero,400dd2c <__alt_data_end+0xfc00dd2c>
 400deec:	00800044 	movi	r2,1
 400def0:	10803fcc 	andi	r2,r2,255
 400def4:	00c00044 	movi	r3,1
 400def8:	10c05926 	beq	r2,r3,400e060 <___vfiprintf_internal_r+0xb3c>
 400defc:	00c00084 	movi	r3,2
 400df00:	10ffe41e 	bne	r2,r3,400de94 <__alt_data_end+0xfc00de94>
 400df04:	0025883a 	mov	r18,zero
 400df08:	0027883a 	mov	r19,zero
 400df0c:	00013d06 	br	400e404 <___vfiprintf_internal_r+0xee0>
 400df10:	21003fcc 	andi	r4,r4,255
 400df14:	2002811e 	bne	r4,zero,400e91c <___vfiprintf_internal_r+0x13f8>
 400df18:	00810074 	movhi	r2,1025
 400df1c:	108bd104 	addi	r2,r2,12100
 400df20:	d8802615 	stw	r2,152(sp)
 400df24:	a080080c 	andi	r2,r20,32
 400df28:	103f561e 	bne	r2,zero,400dc84 <__alt_data_end+0xfc00dc84>
 400df2c:	a080040c 	andi	r2,r20,16
 400df30:	1001d126 	beq	r2,zero,400e678 <___vfiprintf_internal_r+0x1154>
 400df34:	da802217 	ldw	r10,136(sp)
 400df38:	0027883a 	mov	r19,zero
 400df3c:	54800017 	ldw	r18,0(r10)
 400df40:	52800104 	addi	r10,r10,4
 400df44:	da802215 	stw	r10,136(sp)
 400df48:	003f5306 	br	400dc98 <__alt_data_end+0xfc00dc98>
 400df4c:	da802217 	ldw	r10,136(sp)
 400df50:	d8001d85 	stb	zero,118(sp)
 400df54:	55400017 	ldw	r21,0(r10)
 400df58:	50c00104 	addi	r3,r10,4
 400df5c:	a8024226 	beq	r21,zero,400e868 <___vfiprintf_internal_r+0x1344>
 400df60:	48021816 	blt	r9,zero,400e7c4 <___vfiprintf_internal_r+0x12a0>
 400df64:	480d883a 	mov	r6,r9
 400df68:	000b883a 	mov	r5,zero
 400df6c:	a809883a 	mov	r4,r21
 400df70:	d8c02a15 	stw	r3,168(sp)
 400df74:	da002b15 	stw	r8,172(sp)
 400df78:	da402c15 	stw	r9,176(sp)
 400df7c:	400b62c0 	call	400b62c <memchr>
 400df80:	d8c02a17 	ldw	r3,168(sp)
 400df84:	da002b17 	ldw	r8,172(sp)
 400df88:	da402c17 	ldw	r9,176(sp)
 400df8c:	10024826 	beq	r2,zero,400e8b0 <___vfiprintf_internal_r+0x138c>
 400df90:	1567c83a 	sub	r19,r2,r21
 400df94:	df001d83 	ldbu	fp,118(sp)
 400df98:	d8c02215 	stw	r3,136(sp)
 400df9c:	0013883a 	mov	r9,zero
 400dfa0:	003e6006 	br	400d924 <__alt_data_end+0xfc00d924>
 400dfa4:	21003fcc 	andi	r4,r4,255
 400dfa8:	203fc026 	beq	r4,zero,400deac <__alt_data_end+0xfc00deac>
 400dfac:	d9c01d85 	stb	r7,118(sp)
 400dfb0:	003fbe06 	br	400deac <__alt_data_end+0xfc00deac>
 400dfb4:	da802217 	ldw	r10,136(sp)
 400dfb8:	54400017 	ldw	r17,0(r10)
 400dfbc:	50800104 	addi	r2,r10,4
 400dfc0:	883e3b16 	blt	r17,zero,400d8b0 <__alt_data_end+0xfc00d8b0>
 400dfc4:	d8802215 	stw	r2,136(sp)
 400dfc8:	80c00007 	ldb	r3,0(r16)
 400dfcc:	003db406 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400dfd0:	01000044 	movi	r4,1
 400dfd4:	01c00ac4 	movi	r7,43
 400dfd8:	80c00007 	ldb	r3,0(r16)
 400dfdc:	003db006 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400dfe0:	80c00007 	ldb	r3,0(r16)
 400dfe4:	82800044 	addi	r10,r16,1
 400dfe8:	1b423c26 	beq	r3,r13,400e8dc <___vfiprintf_internal_r+0x13b8>
 400dfec:	18bff404 	addi	r2,r3,-48
 400dff0:	0013883a 	mov	r9,zero
 400dff4:	30822b36 	bltu	r6,r2,400e8a4 <___vfiprintf_internal_r+0x1380>
 400dff8:	50c00007 	ldb	r3,0(r10)
 400dffc:	4a4002a4 	muli	r9,r9,10
 400e000:	54000044 	addi	r16,r10,1
 400e004:	8015883a 	mov	r10,r16
 400e008:	4893883a 	add	r9,r9,r2
 400e00c:	18bff404 	addi	r2,r3,-48
 400e010:	30bff92e 	bgeu	r6,r2,400dff8 <__alt_data_end+0xfc00dff8>
 400e014:	483da30e 	bge	r9,zero,400d6a4 <__alt_data_end+0xfc00d6a4>
 400e018:	027fffc4 	movi	r9,-1
 400e01c:	003da106 	br	400d6a4 <__alt_data_end+0xfc00d6a4>
 400e020:	a5001014 	ori	r20,r20,64
 400e024:	80c00007 	ldb	r3,0(r16)
 400e028:	003d9d06 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400e02c:	da802217 	ldw	r10,136(sp)
 400e030:	d8001d85 	stb	zero,118(sp)
 400e034:	50c00204 	addi	r3,r10,8
 400e038:	54800017 	ldw	r18,0(r10)
 400e03c:	54c00117 	ldw	r19,4(r10)
 400e040:	4801ca16 	blt	r9,zero,400e76c <___vfiprintf_internal_r+0x1248>
 400e044:	013fdfc4 	movi	r4,-129
 400e048:	94c4b03a 	or	r2,r18,r19
 400e04c:	d8c02215 	stw	r3,136(sp)
 400e050:	a128703a 	and	r20,r20,r4
 400e054:	0039883a 	mov	fp,zero
 400e058:	103f341e 	bne	r2,zero,400dd2c <__alt_data_end+0xfc00dd2c>
 400e05c:	483e2e26 	beq	r9,zero,400d918 <__alt_data_end+0xfc00d918>
 400e060:	0025883a 	mov	r18,zero
 400e064:	94800c04 	addi	r18,r18,48
 400e068:	dc8019c5 	stb	r18,103(sp)
 400e06c:	dcc02717 	ldw	r19,156(sp)
 400e070:	dd4019c4 	addi	r21,sp,103
 400e074:	003e2b06 	br	400d924 <__alt_data_end+0xfc00d924>
 400e078:	21003fcc 	andi	r4,r4,255
 400e07c:	2002361e 	bne	r4,zero,400e958 <___vfiprintf_internal_r+0x1434>
 400e080:	1801c126 	beq	r3,zero,400e788 <___vfiprintf_internal_r+0x1264>
 400e084:	04800044 	movi	r18,1
 400e088:	d8c01005 	stb	r3,64(sp)
 400e08c:	d8001d85 	stb	zero,118(sp)
 400e090:	9027883a 	mov	r19,r18
 400e094:	dd401004 	addi	r21,sp,64
 400e098:	003f1106 	br	400dce0 <__alt_data_end+0xfc00dce0>
 400e09c:	d9402117 	ldw	r5,132(sp)
 400e0a0:	d9002017 	ldw	r4,128(sp)
 400e0a4:	d9801a04 	addi	r6,sp,104
 400e0a8:	d9c02b15 	stw	r7,172(sp)
 400e0ac:	dbc02a15 	stw	r15,168(sp)
 400e0b0:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e0b4:	d9c02b17 	ldw	r7,172(sp)
 400e0b8:	dbc02a17 	ldw	r15,168(sp)
 400e0bc:	10006d1e 	bne	r2,zero,400e274 <___vfiprintf_internal_r+0xd50>
 400e0c0:	d9801b17 	ldw	r6,108(sp)
 400e0c4:	d8801c17 	ldw	r2,112(sp)
 400e0c8:	d811883a 	mov	r8,sp
 400e0cc:	31400044 	addi	r5,r6,1
 400e0d0:	003e3306 	br	400d9a0 <__alt_data_end+0xfc00d9a0>
 400e0d4:	d9401b17 	ldw	r5,108(sp)
 400e0d8:	d8801c17 	ldw	r2,112(sp)
 400e0dc:	29000044 	addi	r4,r5,1
 400e0e0:	d8c01d87 	ldb	r3,118(sp)
 400e0e4:	183e4d26 	beq	r3,zero,400da1c <__alt_data_end+0xfc00da1c>
 400e0e8:	00c00044 	movi	r3,1
 400e0ec:	d9401d84 	addi	r5,sp,118
 400e0f0:	10c5883a 	add	r2,r2,r3
 400e0f4:	41400015 	stw	r5,0(r8)
 400e0f8:	40c00115 	stw	r3,4(r8)
 400e0fc:	d8801c15 	stw	r2,112(sp)
 400e100:	d9001b15 	stw	r4,108(sp)
 400e104:	014001c4 	movi	r5,7
 400e108:	2900a90e 	bge	r5,r4,400e3b0 <___vfiprintf_internal_r+0xe8c>
 400e10c:	1000da1e 	bne	r2,zero,400e478 <___vfiprintf_internal_r+0xf54>
 400e110:	7000ab1e 	bne	r14,zero,400e3c0 <___vfiprintf_internal_r+0xe9c>
 400e114:	000b883a 	mov	r5,zero
 400e118:	1809883a 	mov	r4,r3
 400e11c:	d811883a 	mov	r8,sp
 400e120:	00c02004 	movi	r3,128
 400e124:	e0fe4d26 	beq	fp,r3,400da5c <__alt_data_end+0xfc00da5c>
 400e128:	4cf9c83a 	sub	fp,r9,r19
 400e12c:	073e7b0e 	bge	zero,fp,400db1c <__alt_data_end+0xfc00db1c>
 400e130:	01c00404 	movi	r7,16
 400e134:	3f01900e 	bge	r7,fp,400e778 <___vfiprintf_internal_r+0x1254>
 400e138:	00c10074 	movhi	r3,1025
 400e13c:	18cc3604 	addi	r3,r3,12504
 400e140:	d8c02415 	stw	r3,144(sp)
 400e144:	034001c4 	movi	r13,7
 400e148:	00000506 	br	400e160 <___vfiprintf_internal_r+0xc3c>
 400e14c:	29000084 	addi	r4,r5,2
 400e150:	42000204 	addi	r8,r8,8
 400e154:	180b883a 	mov	r5,r3
 400e158:	e73ffc04 	addi	fp,fp,-16
 400e15c:	3f000d0e 	bge	r7,fp,400e194 <___vfiprintf_internal_r+0xc70>
 400e160:	10800404 	addi	r2,r2,16
 400e164:	28c00044 	addi	r3,r5,1
 400e168:	45c00015 	stw	r23,0(r8)
 400e16c:	41c00115 	stw	r7,4(r8)
 400e170:	d8801c15 	stw	r2,112(sp)
 400e174:	d8c01b15 	stw	r3,108(sp)
 400e178:	68fff40e 	bge	r13,r3,400e14c <__alt_data_end+0xfc00e14c>
 400e17c:	1000101e 	bne	r2,zero,400e1c0 <___vfiprintf_internal_r+0xc9c>
 400e180:	e73ffc04 	addi	fp,fp,-16
 400e184:	01000044 	movi	r4,1
 400e188:	000b883a 	mov	r5,zero
 400e18c:	d811883a 	mov	r8,sp
 400e190:	3f3ff316 	blt	r7,fp,400e160 <__alt_data_end+0xfc00e160>
 400e194:	da802417 	ldw	r10,144(sp)
 400e198:	1705883a 	add	r2,r2,fp
 400e19c:	47000115 	stw	fp,4(r8)
 400e1a0:	42800015 	stw	r10,0(r8)
 400e1a4:	d8801c15 	stw	r2,112(sp)
 400e1a8:	d9001b15 	stw	r4,108(sp)
 400e1ac:	00c001c4 	movi	r3,7
 400e1b0:	19003616 	blt	r3,r4,400e28c <___vfiprintf_internal_r+0xd68>
 400e1b4:	42000204 	addi	r8,r8,8
 400e1b8:	21000044 	addi	r4,r4,1
 400e1bc:	003e5706 	br	400db1c <__alt_data_end+0xfc00db1c>
 400e1c0:	d9402117 	ldw	r5,132(sp)
 400e1c4:	d9002017 	ldw	r4,128(sp)
 400e1c8:	d9801a04 	addi	r6,sp,104
 400e1cc:	d9c02b15 	stw	r7,172(sp)
 400e1d0:	db402a15 	stw	r13,168(sp)
 400e1d4:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e1d8:	d9c02b17 	ldw	r7,172(sp)
 400e1dc:	db402a17 	ldw	r13,168(sp)
 400e1e0:	1000241e 	bne	r2,zero,400e274 <___vfiprintf_internal_r+0xd50>
 400e1e4:	d9401b17 	ldw	r5,108(sp)
 400e1e8:	d8801c17 	ldw	r2,112(sp)
 400e1ec:	d811883a 	mov	r8,sp
 400e1f0:	29000044 	addi	r4,r5,1
 400e1f4:	003fd806 	br	400e158 <__alt_data_end+0xfc00e158>
 400e1f8:	d9401b17 	ldw	r5,108(sp)
 400e1fc:	00c10074 	movhi	r3,1025
 400e200:	18cc3a04 	addi	r3,r3,12520
 400e204:	d8c02415 	stw	r3,144(sp)
 400e208:	29400044 	addi	r5,r5,1
 400e20c:	d8c02417 	ldw	r3,144(sp)
 400e210:	14c5883a 	add	r2,r2,r19
 400e214:	44c00115 	stw	r19,4(r8)
 400e218:	40c00015 	stw	r3,0(r8)
 400e21c:	d8801c15 	stw	r2,112(sp)
 400e220:	d9401b15 	stw	r5,108(sp)
 400e224:	00c001c4 	movi	r3,7
 400e228:	1940070e 	bge	r3,r5,400e248 <___vfiprintf_internal_r+0xd24>
 400e22c:	103e4826 	beq	r2,zero,400db50 <__alt_data_end+0xfc00db50>
 400e230:	d9402117 	ldw	r5,132(sp)
 400e234:	d9002017 	ldw	r4,128(sp)
 400e238:	d9801a04 	addi	r6,sp,104
 400e23c:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e240:	10000c1e 	bne	r2,zero,400e274 <___vfiprintf_internal_r+0xd50>
 400e244:	d8801c17 	ldw	r2,112(sp)
 400e248:	8c80010e 	bge	r17,r18,400e250 <___vfiprintf_internal_r+0xd2c>
 400e24c:	9023883a 	mov	r17,r18
 400e250:	da802317 	ldw	r10,140(sp)
 400e254:	5455883a 	add	r10,r10,r17
 400e258:	da802315 	stw	r10,140(sp)
 400e25c:	103e4126 	beq	r2,zero,400db64 <__alt_data_end+0xfc00db64>
 400e260:	d9402117 	ldw	r5,132(sp)
 400e264:	d9002017 	ldw	r4,128(sp)
 400e268:	d9801a04 	addi	r6,sp,104
 400e26c:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e270:	103e3c26 	beq	r2,zero,400db64 <__alt_data_end+0xfc00db64>
 400e274:	dd002117 	ldw	r20,132(sp)
 400e278:	a080030b 	ldhu	r2,12(r20)
 400e27c:	1080100c 	andi	r2,r2,64
 400e280:	1001231e 	bne	r2,zero,400e710 <___vfiprintf_internal_r+0x11ec>
 400e284:	d8802317 	ldw	r2,140(sp)
 400e288:	003d7b06 	br	400d878 <__alt_data_end+0xfc00d878>
 400e28c:	1000991e 	bne	r2,zero,400e4f4 <___vfiprintf_internal_r+0xfd0>
 400e290:	00c00044 	movi	r3,1
 400e294:	9805883a 	mov	r2,r19
 400e298:	dd400015 	stw	r21,0(sp)
 400e29c:	dcc00115 	stw	r19,4(sp)
 400e2a0:	dcc01c15 	stw	r19,112(sp)
 400e2a4:	d8c01b15 	stw	r3,108(sp)
 400e2a8:	d811883a 	mov	r8,sp
 400e2ac:	42000204 	addi	r8,r8,8
 400e2b0:	a2c0010c 	andi	r11,r20,4
 400e2b4:	583fe426 	beq	r11,zero,400e248 <__alt_data_end+0xfc00e248>
 400e2b8:	8ca7c83a 	sub	r19,r17,r18
 400e2bc:	04ffe20e 	bge	zero,r19,400e248 <__alt_data_end+0xfc00e248>
 400e2c0:	01c00404 	movi	r7,16
 400e2c4:	3cffcc0e 	bge	r7,r19,400e1f8 <__alt_data_end+0xfc00e1f8>
 400e2c8:	02810074 	movhi	r10,1025
 400e2cc:	528c3a04 	addi	r10,r10,12520
 400e2d0:	d9001b17 	ldw	r4,108(sp)
 400e2d4:	da802415 	stw	r10,144(sp)
 400e2d8:	382b883a 	mov	r21,r7
 400e2dc:	050001c4 	movi	r20,7
 400e2e0:	df002017 	ldw	fp,128(sp)
 400e2e4:	00000506 	br	400e2fc <___vfiprintf_internal_r+0xdd8>
 400e2e8:	21400084 	addi	r5,r4,2
 400e2ec:	42000204 	addi	r8,r8,8
 400e2f0:	1809883a 	mov	r4,r3
 400e2f4:	9cfffc04 	addi	r19,r19,-16
 400e2f8:	acffc40e 	bge	r21,r19,400e20c <__alt_data_end+0xfc00e20c>
 400e2fc:	10800404 	addi	r2,r2,16
 400e300:	20c00044 	addi	r3,r4,1
 400e304:	45800015 	stw	r22,0(r8)
 400e308:	45400115 	stw	r21,4(r8)
 400e30c:	d8801c15 	stw	r2,112(sp)
 400e310:	d8c01b15 	stw	r3,108(sp)
 400e314:	a0fff40e 	bge	r20,r3,400e2e8 <__alt_data_end+0xfc00e2e8>
 400e318:	1000041e 	bne	r2,zero,400e32c <___vfiprintf_internal_r+0xe08>
 400e31c:	01400044 	movi	r5,1
 400e320:	0009883a 	mov	r4,zero
 400e324:	d811883a 	mov	r8,sp
 400e328:	003ff206 	br	400e2f4 <__alt_data_end+0xfc00e2f4>
 400e32c:	d9402117 	ldw	r5,132(sp)
 400e330:	d9801a04 	addi	r6,sp,104
 400e334:	e009883a 	mov	r4,fp
 400e338:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e33c:	103fcd1e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e340:	d9001b17 	ldw	r4,108(sp)
 400e344:	d8801c17 	ldw	r2,112(sp)
 400e348:	d811883a 	mov	r8,sp
 400e34c:	21400044 	addi	r5,r4,1
 400e350:	003fe806 	br	400e2f4 <__alt_data_end+0xfc00e2f4>
 400e354:	d9402117 	ldw	r5,132(sp)
 400e358:	d9002017 	ldw	r4,128(sp)
 400e35c:	d9801a04 	addi	r6,sp,104
 400e360:	d9c02b15 	stw	r7,172(sp)
 400e364:	db402a15 	stw	r13,168(sp)
 400e368:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e36c:	d9c02b17 	ldw	r7,172(sp)
 400e370:	db402a17 	ldw	r13,168(sp)
 400e374:	103fbf1e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e378:	d9401b17 	ldw	r5,108(sp)
 400e37c:	d8801c17 	ldw	r2,112(sp)
 400e380:	d811883a 	mov	r8,sp
 400e384:	29800044 	addi	r6,r5,1
 400e388:	003dc406 	br	400da9c <__alt_data_end+0xfc00da9c>
 400e38c:	1000d21e 	bne	r2,zero,400e6d8 <___vfiprintf_internal_r+0x11b4>
 400e390:	d8c01d87 	ldb	r3,118(sp)
 400e394:	18009526 	beq	r3,zero,400e5ec <___vfiprintf_internal_r+0x10c8>
 400e398:	00800044 	movi	r2,1
 400e39c:	d8c01d84 	addi	r3,sp,118
 400e3a0:	1009883a 	mov	r4,r2
 400e3a4:	d8c00015 	stw	r3,0(sp)
 400e3a8:	d8800115 	stw	r2,4(sp)
 400e3ac:	d811883a 	mov	r8,sp
 400e3b0:	200b883a 	mov	r5,r4
 400e3b4:	42000204 	addi	r8,r8,8
 400e3b8:	21000044 	addi	r4,r4,1
 400e3bc:	003d9706 	br	400da1c <__alt_data_end+0xfc00da1c>
 400e3c0:	d9001d04 	addi	r4,sp,116
 400e3c4:	00800084 	movi	r2,2
 400e3c8:	d9000015 	stw	r4,0(sp)
 400e3cc:	d8800115 	stw	r2,4(sp)
 400e3d0:	1809883a 	mov	r4,r3
 400e3d4:	d811883a 	mov	r8,sp
 400e3d8:	200b883a 	mov	r5,r4
 400e3dc:	42000204 	addi	r8,r8,8
 400e3e0:	21000044 	addi	r4,r4,1
 400e3e4:	003f4e06 	br	400e120 <__alt_data_end+0xfc00e120>
 400e3e8:	d8001d85 	stb	zero,118(sp)
 400e3ec:	48005016 	blt	r9,zero,400e530 <___vfiprintf_internal_r+0x100c>
 400e3f0:	00ffdfc4 	movi	r3,-129
 400e3f4:	94c4b03a 	or	r2,r18,r19
 400e3f8:	a0e8703a 	and	r20,r20,r3
 400e3fc:	103d4426 	beq	r2,zero,400d910 <__alt_data_end+0xfc00d910>
 400e400:	0039883a 	mov	fp,zero
 400e404:	d9002617 	ldw	r4,152(sp)
 400e408:	dd401a04 	addi	r21,sp,104
 400e40c:	908003cc 	andi	r2,r18,15
 400e410:	9806973a 	slli	r3,r19,28
 400e414:	2085883a 	add	r2,r4,r2
 400e418:	9024d13a 	srli	r18,r18,4
 400e41c:	10800003 	ldbu	r2,0(r2)
 400e420:	9826d13a 	srli	r19,r19,4
 400e424:	ad7fffc4 	addi	r21,r21,-1
 400e428:	1ca4b03a 	or	r18,r3,r18
 400e42c:	a8800005 	stb	r2,0(r21)
 400e430:	94c4b03a 	or	r2,r18,r19
 400e434:	103ff51e 	bne	r2,zero,400e40c <__alt_data_end+0xfc00e40c>
 400e438:	003e5906 	br	400dda0 <__alt_data_end+0xfc00dda0>
 400e43c:	d9402117 	ldw	r5,132(sp)
 400e440:	d9002017 	ldw	r4,128(sp)
 400e444:	d9801a04 	addi	r6,sp,104
 400e448:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e44c:	103f891e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e450:	d8801c17 	ldw	r2,112(sp)
 400e454:	d811883a 	mov	r8,sp
 400e458:	003f9506 	br	400e2b0 <__alt_data_end+0xfc00e2b0>
 400e45c:	d9402117 	ldw	r5,132(sp)
 400e460:	d9002017 	ldw	r4,128(sp)
 400e464:	d9801a04 	addi	r6,sp,104
 400e468:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e46c:	103f811e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e470:	d811883a 	mov	r8,sp
 400e474:	003ced06 	br	400d82c <__alt_data_end+0xfc00d82c>
 400e478:	d9402117 	ldw	r5,132(sp)
 400e47c:	d9002017 	ldw	r4,128(sp)
 400e480:	d9801a04 	addi	r6,sp,104
 400e484:	da402c15 	stw	r9,176(sp)
 400e488:	db802a15 	stw	r14,168(sp)
 400e48c:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e490:	da402c17 	ldw	r9,176(sp)
 400e494:	db802a17 	ldw	r14,168(sp)
 400e498:	103f761e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e49c:	d9401b17 	ldw	r5,108(sp)
 400e4a0:	d8801c17 	ldw	r2,112(sp)
 400e4a4:	d811883a 	mov	r8,sp
 400e4a8:	29000044 	addi	r4,r5,1
 400e4ac:	003d5b06 	br	400da1c <__alt_data_end+0xfc00da1c>
 400e4b0:	d9402117 	ldw	r5,132(sp)
 400e4b4:	d9002017 	ldw	r4,128(sp)
 400e4b8:	d9801a04 	addi	r6,sp,104
 400e4bc:	da402c15 	stw	r9,176(sp)
 400e4c0:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e4c4:	da402c17 	ldw	r9,176(sp)
 400e4c8:	103f6a1e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e4cc:	d9401b17 	ldw	r5,108(sp)
 400e4d0:	d8801c17 	ldw	r2,112(sp)
 400e4d4:	d811883a 	mov	r8,sp
 400e4d8:	29000044 	addi	r4,r5,1
 400e4dc:	003f1006 	br	400e120 <__alt_data_end+0xfc00e120>
 400e4e0:	1000c31e 	bne	r2,zero,400e7f0 <___vfiprintf_internal_r+0x12cc>
 400e4e4:	01000044 	movi	r4,1
 400e4e8:	000b883a 	mov	r5,zero
 400e4ec:	d811883a 	mov	r8,sp
 400e4f0:	003f0d06 	br	400e128 <__alt_data_end+0xfc00e128>
 400e4f4:	d9402117 	ldw	r5,132(sp)
 400e4f8:	d9002017 	ldw	r4,128(sp)
 400e4fc:	d9801a04 	addi	r6,sp,104
 400e500:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e504:	103f5b1e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e508:	d9001b17 	ldw	r4,108(sp)
 400e50c:	d8801c17 	ldw	r2,112(sp)
 400e510:	d811883a 	mov	r8,sp
 400e514:	21000044 	addi	r4,r4,1
 400e518:	003d8006 	br	400db1c <__alt_data_end+0xfc00db1c>
 400e51c:	01010074 	movhi	r4,1025
 400e520:	210bd604 	addi	r4,r4,12120
 400e524:	d9002615 	stw	r4,152(sp)
 400e528:	d8c02215 	stw	r3,136(sp)
 400e52c:	1029883a 	mov	r20,r2
 400e530:	94c4b03a 	or	r2,r18,r19
 400e534:	103fb21e 	bne	r2,zero,400e400 <__alt_data_end+0xfc00e400>
 400e538:	0039883a 	mov	fp,zero
 400e53c:	00800084 	movi	r2,2
 400e540:	003e6b06 	br	400def0 <__alt_data_end+0xfc00def0>
 400e544:	da802217 	ldw	r10,136(sp)
 400e548:	d8001d85 	stb	zero,118(sp)
 400e54c:	0027883a 	mov	r19,zero
 400e550:	50800104 	addi	r2,r10,4
 400e554:	54800017 	ldw	r18,0(r10)
 400e558:	483e6016 	blt	r9,zero,400dedc <__alt_data_end+0xfc00dedc>
 400e55c:	00ffdfc4 	movi	r3,-129
 400e560:	d8802215 	stw	r2,136(sp)
 400e564:	a0e8703a 	and	r20,r20,r3
 400e568:	0039883a 	mov	fp,zero
 400e56c:	903ebb26 	beq	r18,zero,400e05c <__alt_data_end+0xfc00e05c>
 400e570:	00800244 	movi	r2,9
 400e574:	14bdee36 	bltu	r2,r18,400dd30 <__alt_data_end+0xfc00dd30>
 400e578:	003eba06 	br	400e064 <__alt_data_end+0xfc00e064>
 400e57c:	00800c04 	movi	r2,48
 400e580:	d8c01d45 	stb	r3,117(sp)
 400e584:	d8801d05 	stb	r2,116(sp)
 400e588:	d8001d85 	stb	zero,118(sp)
 400e58c:	a0c00094 	ori	r3,r20,2
 400e590:	4800a916 	blt	r9,zero,400e838 <___vfiprintf_internal_r+0x1314>
 400e594:	00bfdfc4 	movi	r2,-129
 400e598:	a096703a 	and	r11,r20,r2
 400e59c:	5d000094 	ori	r20,r11,2
 400e5a0:	0039883a 	mov	fp,zero
 400e5a4:	003f9706 	br	400e404 <__alt_data_end+0xfc00e404>
 400e5a8:	8025883a 	mov	r18,r16
 400e5ac:	003c2e06 	br	400d668 <__alt_data_end+0xfc00d668>
 400e5b0:	00810074 	movhi	r2,1025
 400e5b4:	108bd604 	addi	r2,r2,12120
 400e5b8:	0039883a 	mov	fp,zero
 400e5bc:	d8802615 	stw	r2,152(sp)
 400e5c0:	003f9006 	br	400e404 <__alt_data_end+0xfc00e404>
 400e5c4:	04a5c83a 	sub	r18,zero,r18
 400e5c8:	07000b44 	movi	fp,45
 400e5cc:	9004c03a 	cmpne	r2,r18,zero
 400e5d0:	04e7c83a 	sub	r19,zero,r19
 400e5d4:	df001d85 	stb	fp,118(sp)
 400e5d8:	98a7c83a 	sub	r19,r19,r2
 400e5dc:	48009f16 	blt	r9,zero,400e85c <___vfiprintf_internal_r+0x1338>
 400e5e0:	00bfdfc4 	movi	r2,-129
 400e5e4:	a0a8703a 	and	r20,r20,r2
 400e5e8:	003dd006 	br	400dd2c <__alt_data_end+0xfc00dd2c>
 400e5ec:	70004c26 	beq	r14,zero,400e720 <___vfiprintf_internal_r+0x11fc>
 400e5f0:	00800084 	movi	r2,2
 400e5f4:	d8c01d04 	addi	r3,sp,116
 400e5f8:	d8c00015 	stw	r3,0(sp)
 400e5fc:	d8800115 	stw	r2,4(sp)
 400e600:	01000044 	movi	r4,1
 400e604:	d811883a 	mov	r8,sp
 400e608:	003f7306 	br	400e3d8 <__alt_data_end+0xfc00e3d8>
 400e60c:	a080100c 	andi	r2,r20,64
 400e610:	da802217 	ldw	r10,136(sp)
 400e614:	103e0626 	beq	r2,zero,400de30 <__alt_data_end+0xfc00de30>
 400e618:	5480000f 	ldh	r18,0(r10)
 400e61c:	52800104 	addi	r10,r10,4
 400e620:	da802215 	stw	r10,136(sp)
 400e624:	9027d7fa 	srai	r19,r18,31
 400e628:	9805883a 	mov	r2,r19
 400e62c:	003db806 	br	400dd10 <__alt_data_end+0xfc00dd10>
 400e630:	a080040c 	andi	r2,r20,16
 400e634:	1000091e 	bne	r2,zero,400e65c <___vfiprintf_internal_r+0x1138>
 400e638:	a2c0100c 	andi	r11,r20,64
 400e63c:	58000726 	beq	r11,zero,400e65c <___vfiprintf_internal_r+0x1138>
 400e640:	da802217 	ldw	r10,136(sp)
 400e644:	50800017 	ldw	r2,0(r10)
 400e648:	52800104 	addi	r10,r10,4
 400e64c:	da802215 	stw	r10,136(sp)
 400e650:	da802317 	ldw	r10,140(sp)
 400e654:	1280000d 	sth	r10,0(r2)
 400e658:	003be706 	br	400d5f8 <__alt_data_end+0xfc00d5f8>
 400e65c:	da802217 	ldw	r10,136(sp)
 400e660:	50800017 	ldw	r2,0(r10)
 400e664:	52800104 	addi	r10,r10,4
 400e668:	da802215 	stw	r10,136(sp)
 400e66c:	da802317 	ldw	r10,140(sp)
 400e670:	12800015 	stw	r10,0(r2)
 400e674:	003be006 	br	400d5f8 <__alt_data_end+0xfc00d5f8>
 400e678:	a080100c 	andi	r2,r20,64
 400e67c:	da802217 	ldw	r10,136(sp)
 400e680:	10003026 	beq	r2,zero,400e744 <___vfiprintf_internal_r+0x1220>
 400e684:	5480000b 	ldhu	r18,0(r10)
 400e688:	52800104 	addi	r10,r10,4
 400e68c:	0027883a 	mov	r19,zero
 400e690:	da802215 	stw	r10,136(sp)
 400e694:	003d8006 	br	400dc98 <__alt_data_end+0xfc00dc98>
 400e698:	80c00007 	ldb	r3,0(r16)
 400e69c:	003c0006 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400e6a0:	a080100c 	andi	r2,r20,64
 400e6a4:	d8001d85 	stb	zero,118(sp)
 400e6a8:	da802217 	ldw	r10,136(sp)
 400e6ac:	1000201e 	bne	r2,zero,400e730 <___vfiprintf_internal_r+0x120c>
 400e6b0:	50800104 	addi	r2,r10,4
 400e6b4:	54800017 	ldw	r18,0(r10)
 400e6b8:	0027883a 	mov	r19,zero
 400e6bc:	483def0e 	bge	r9,zero,400de7c <__alt_data_end+0xfc00de7c>
 400e6c0:	94c6b03a 	or	r3,r18,r19
 400e6c4:	d8802215 	stw	r2,136(sp)
 400e6c8:	183d4e1e 	bne	r3,zero,400dc04 <__alt_data_end+0xfc00dc04>
 400e6cc:	0039883a 	mov	fp,zero
 400e6d0:	0005883a 	mov	r2,zero
 400e6d4:	003e0606 	br	400def0 <__alt_data_end+0xfc00def0>
 400e6d8:	d9402117 	ldw	r5,132(sp)
 400e6dc:	d9002017 	ldw	r4,128(sp)
 400e6e0:	d9801a04 	addi	r6,sp,104
 400e6e4:	da402c15 	stw	r9,176(sp)
 400e6e8:	db802a15 	stw	r14,168(sp)
 400e6ec:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e6f0:	da402c17 	ldw	r9,176(sp)
 400e6f4:	db802a17 	ldw	r14,168(sp)
 400e6f8:	103ede1e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e6fc:	d9401b17 	ldw	r5,108(sp)
 400e700:	d8801c17 	ldw	r2,112(sp)
 400e704:	d811883a 	mov	r8,sp
 400e708:	29000044 	addi	r4,r5,1
 400e70c:	003e7406 	br	400e0e0 <__alt_data_end+0xfc00e0e0>
 400e710:	00bfffc4 	movi	r2,-1
 400e714:	003c5806 	br	400d878 <__alt_data_end+0xfc00d878>
 400e718:	d811883a 	mov	r8,sp
 400e71c:	003ee806 	br	400e2c0 <__alt_data_end+0xfc00e2c0>
 400e720:	000b883a 	mov	r5,zero
 400e724:	01000044 	movi	r4,1
 400e728:	d811883a 	mov	r8,sp
 400e72c:	003e7c06 	br	400e120 <__alt_data_end+0xfc00e120>
 400e730:	50800104 	addi	r2,r10,4
 400e734:	5480000b 	ldhu	r18,0(r10)
 400e738:	0027883a 	mov	r19,zero
 400e73c:	483dcf0e 	bge	r9,zero,400de7c <__alt_data_end+0xfc00de7c>
 400e740:	003fdf06 	br	400e6c0 <__alt_data_end+0xfc00e6c0>
 400e744:	54800017 	ldw	r18,0(r10)
 400e748:	52800104 	addi	r10,r10,4
 400e74c:	0027883a 	mov	r19,zero
 400e750:	da802215 	stw	r10,136(sp)
 400e754:	003d5006 	br	400dc98 <__alt_data_end+0xfc00dc98>
 400e758:	50800104 	addi	r2,r10,4
 400e75c:	5480000b 	ldhu	r18,0(r10)
 400e760:	0027883a 	mov	r19,zero
 400e764:	483f7d0e 	bge	r9,zero,400e55c <__alt_data_end+0xfc00e55c>
 400e768:	003ddc06 	br	400dedc <__alt_data_end+0xfc00dedc>
 400e76c:	d8c02215 	stw	r3,136(sp)
 400e770:	0039883a 	mov	fp,zero
 400e774:	003ddb06 	br	400dee4 <__alt_data_end+0xfc00dee4>
 400e778:	02810074 	movhi	r10,1025
 400e77c:	528c3604 	addi	r10,r10,12504
 400e780:	da802415 	stw	r10,144(sp)
 400e784:	003e8306 	br	400e194 <__alt_data_end+0xfc00e194>
 400e788:	d8801c17 	ldw	r2,112(sp)
 400e78c:	dd002117 	ldw	r20,132(sp)
 400e790:	103eb926 	beq	r2,zero,400e278 <__alt_data_end+0xfc00e278>
 400e794:	d9002017 	ldw	r4,128(sp)
 400e798:	d9801a04 	addi	r6,sp,104
 400e79c:	a00b883a 	mov	r5,r20
 400e7a0:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e7a4:	003eb406 	br	400e278 <__alt_data_end+0xfc00e278>
 400e7a8:	80c00043 	ldbu	r3,1(r16)
 400e7ac:	a5000814 	ori	r20,r20,32
 400e7b0:	84000044 	addi	r16,r16,1
 400e7b4:	18c03fcc 	andi	r3,r3,255
 400e7b8:	18c0201c 	xori	r3,r3,128
 400e7bc:	18ffe004 	addi	r3,r3,-128
 400e7c0:	003bb706 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400e7c4:	a809883a 	mov	r4,r21
 400e7c8:	d8c02a15 	stw	r3,168(sp)
 400e7cc:	da002b15 	stw	r8,172(sp)
 400e7d0:	4005c780 	call	4005c78 <strlen>
 400e7d4:	d8c02a17 	ldw	r3,168(sp)
 400e7d8:	1027883a 	mov	r19,r2
 400e7dc:	df001d83 	ldbu	fp,118(sp)
 400e7e0:	d8c02215 	stw	r3,136(sp)
 400e7e4:	0013883a 	mov	r9,zero
 400e7e8:	da002b17 	ldw	r8,172(sp)
 400e7ec:	003c4d06 	br	400d924 <__alt_data_end+0xfc00d924>
 400e7f0:	d9402117 	ldw	r5,132(sp)
 400e7f4:	d9002017 	ldw	r4,128(sp)
 400e7f8:	d9801a04 	addi	r6,sp,104
 400e7fc:	da402c15 	stw	r9,176(sp)
 400e800:	400d4100 	call	400d410 <__sprint_r.part.0>
 400e804:	da402c17 	ldw	r9,176(sp)
 400e808:	103e9a1e 	bne	r2,zero,400e274 <__alt_data_end+0xfc00e274>
 400e80c:	d9401b17 	ldw	r5,108(sp)
 400e810:	d8801c17 	ldw	r2,112(sp)
 400e814:	d811883a 	mov	r8,sp
 400e818:	29000044 	addi	r4,r5,1
 400e81c:	003e4206 	br	400e128 <__alt_data_end+0xfc00e128>
 400e820:	d9401b17 	ldw	r5,108(sp)
 400e824:	01010074 	movhi	r4,1025
 400e828:	210c3a04 	addi	r4,r4,12520
 400e82c:	d9002415 	stw	r4,144(sp)
 400e830:	29400044 	addi	r5,r5,1
 400e834:	003c6d06 	br	400d9ec <__alt_data_end+0xfc00d9ec>
 400e838:	0039883a 	mov	fp,zero
 400e83c:	00800084 	movi	r2,2
 400e840:	10803fcc 	andi	r2,r2,255
 400e844:	01000044 	movi	r4,1
 400e848:	11001e26 	beq	r2,r4,400e8c4 <___vfiprintf_internal_r+0x13a0>
 400e84c:	01000084 	movi	r4,2
 400e850:	11001e1e 	bne	r2,r4,400e8cc <___vfiprintf_internal_r+0x13a8>
 400e854:	1829883a 	mov	r20,r3
 400e858:	003eea06 	br	400e404 <__alt_data_end+0xfc00e404>
 400e85c:	a007883a 	mov	r3,r20
 400e860:	00800044 	movi	r2,1
 400e864:	003ff606 	br	400e840 <__alt_data_end+0xfc00e840>
 400e868:	00800184 	movi	r2,6
 400e86c:	1240012e 	bgeu	r2,r9,400e874 <___vfiprintf_internal_r+0x1350>
 400e870:	1013883a 	mov	r9,r2
 400e874:	4827883a 	mov	r19,r9
 400e878:	4825883a 	mov	r18,r9
 400e87c:	48001516 	blt	r9,zero,400e8d4 <___vfiprintf_internal_r+0x13b0>
 400e880:	05410074 	movhi	r21,1025
 400e884:	d8c02215 	stw	r3,136(sp)
 400e888:	ad4bdb04 	addi	r21,r21,12140
 400e88c:	003d1406 	br	400dce0 <__alt_data_end+0xfc00dce0>
 400e890:	02810074 	movhi	r10,1025
 400e894:	528c3604 	addi	r10,r10,12504
 400e898:	da802415 	stw	r10,144(sp)
 400e89c:	200d883a 	mov	r6,r4
 400e8a0:	003c9106 	br	400dae8 <__alt_data_end+0xfc00dae8>
 400e8a4:	5021883a 	mov	r16,r10
 400e8a8:	0013883a 	mov	r9,zero
 400e8ac:	003b7d06 	br	400d6a4 <__alt_data_end+0xfc00d6a4>
 400e8b0:	4827883a 	mov	r19,r9
 400e8b4:	df001d83 	ldbu	fp,118(sp)
 400e8b8:	d8c02215 	stw	r3,136(sp)
 400e8bc:	0013883a 	mov	r9,zero
 400e8c0:	003c1806 	br	400d924 <__alt_data_end+0xfc00d924>
 400e8c4:	1829883a 	mov	r20,r3
 400e8c8:	003d1806 	br	400dd2c <__alt_data_end+0xfc00dd2c>
 400e8cc:	1829883a 	mov	r20,r3
 400e8d0:	003ccd06 	br	400dc08 <__alt_data_end+0xfc00dc08>
 400e8d4:	0025883a 	mov	r18,zero
 400e8d8:	003fe906 	br	400e880 <__alt_data_end+0xfc00e880>
 400e8dc:	d8802217 	ldw	r2,136(sp)
 400e8e0:	80c00043 	ldbu	r3,1(r16)
 400e8e4:	5021883a 	mov	r16,r10
 400e8e8:	12400017 	ldw	r9,0(r2)
 400e8ec:	10800104 	addi	r2,r2,4
 400e8f0:	d8802215 	stw	r2,136(sp)
 400e8f4:	483faf0e 	bge	r9,zero,400e7b4 <__alt_data_end+0xfc00e7b4>
 400e8f8:	18c03fcc 	andi	r3,r3,255
 400e8fc:	18c0201c 	xori	r3,r3,128
 400e900:	027fffc4 	movi	r9,-1
 400e904:	18ffe004 	addi	r3,r3,-128
 400e908:	003b6506 	br	400d6a0 <__alt_data_end+0xfc00d6a0>
 400e90c:	d9c01d85 	stb	r7,118(sp)
 400e910:	003ca006 	br	400db94 <__alt_data_end+0xfc00db94>
 400e914:	d9c01d85 	stb	r7,118(sp)
 400e918:	003cad06 	br	400dbd0 <__alt_data_end+0xfc00dbd0>
 400e91c:	d9c01d85 	stb	r7,118(sp)
 400e920:	003d7d06 	br	400df18 <__alt_data_end+0xfc00df18>
 400e924:	d9c01d85 	stb	r7,118(sp)
 400e928:	003d5f06 	br	400dea8 <__alt_data_end+0xfc00dea8>
 400e92c:	a080004c 	andi	r2,r20,1
 400e930:	0039883a 	mov	fp,zero
 400e934:	10000526 	beq	r2,zero,400e94c <___vfiprintf_internal_r+0x1428>
 400e938:	00800c04 	movi	r2,48
 400e93c:	d88019c5 	stb	r2,103(sp)
 400e940:	dcc02717 	ldw	r19,156(sp)
 400e944:	dd4019c4 	addi	r21,sp,103
 400e948:	003bf606 	br	400d924 <__alt_data_end+0xfc00d924>
 400e94c:	0027883a 	mov	r19,zero
 400e950:	dd401a04 	addi	r21,sp,104
 400e954:	003bf306 	br	400d924 <__alt_data_end+0xfc00d924>
 400e958:	d9c01d85 	stb	r7,118(sp)
 400e95c:	003dc806 	br	400e080 <__alt_data_end+0xfc00e080>
 400e960:	d9c01d85 	stb	r7,118(sp)
 400e964:	003d3a06 	br	400de50 <__alt_data_end+0xfc00de50>
 400e968:	d9c01d85 	stb	r7,118(sp)
 400e96c:	003d2a06 	br	400de18 <__alt_data_end+0xfc00de18>
 400e970:	d9c01d85 	stb	r7,118(sp)
 400e974:	003cde06 	br	400dcf0 <__alt_data_end+0xfc00dcf0>
 400e978:	d9c01d85 	stb	r7,118(sp)
 400e97c:	003cbc06 	br	400dc70 <__alt_data_end+0xfc00dc70>

0400e980 <__vfiprintf_internal>:
 400e980:	00810074 	movhi	r2,1025
 400e984:	10935c04 	addi	r2,r2,19824
 400e988:	300f883a 	mov	r7,r6
 400e98c:	280d883a 	mov	r6,r5
 400e990:	200b883a 	mov	r5,r4
 400e994:	11000017 	ldw	r4,0(r2)
 400e998:	400d5241 	jmpi	400d524 <___vfiprintf_internal_r>

0400e99c <__sbprintf>:
 400e99c:	2880030b 	ldhu	r2,12(r5)
 400e9a0:	2ac01917 	ldw	r11,100(r5)
 400e9a4:	2a80038b 	ldhu	r10,14(r5)
 400e9a8:	2a400717 	ldw	r9,28(r5)
 400e9ac:	2a000917 	ldw	r8,36(r5)
 400e9b0:	defee204 	addi	sp,sp,-1144
 400e9b4:	00c10004 	movi	r3,1024
 400e9b8:	dc011a15 	stw	r16,1128(sp)
 400e9bc:	10bfff4c 	andi	r2,r2,65533
 400e9c0:	2821883a 	mov	r16,r5
 400e9c4:	d8cb883a 	add	r5,sp,r3
 400e9c8:	dc811c15 	stw	r18,1136(sp)
 400e9cc:	dc411b15 	stw	r17,1132(sp)
 400e9d0:	dfc11d15 	stw	ra,1140(sp)
 400e9d4:	2025883a 	mov	r18,r4
 400e9d8:	d881030d 	sth	r2,1036(sp)
 400e9dc:	dac11915 	stw	r11,1124(sp)
 400e9e0:	da81038d 	sth	r10,1038(sp)
 400e9e4:	da410715 	stw	r9,1052(sp)
 400e9e8:	da010915 	stw	r8,1060(sp)
 400e9ec:	dec10015 	stw	sp,1024(sp)
 400e9f0:	dec10415 	stw	sp,1040(sp)
 400e9f4:	d8c10215 	stw	r3,1032(sp)
 400e9f8:	d8c10515 	stw	r3,1044(sp)
 400e9fc:	d8010615 	stw	zero,1048(sp)
 400ea00:	400d5240 	call	400d524 <___vfiprintf_internal_r>
 400ea04:	1023883a 	mov	r17,r2
 400ea08:	10000416 	blt	r2,zero,400ea1c <__sbprintf+0x80>
 400ea0c:	d9410004 	addi	r5,sp,1024
 400ea10:	9009883a 	mov	r4,r18
 400ea14:	4009c880 	call	4009c88 <_fflush_r>
 400ea18:	10000d1e 	bne	r2,zero,400ea50 <__sbprintf+0xb4>
 400ea1c:	d881030b 	ldhu	r2,1036(sp)
 400ea20:	1080100c 	andi	r2,r2,64
 400ea24:	10000326 	beq	r2,zero,400ea34 <__sbprintf+0x98>
 400ea28:	8080030b 	ldhu	r2,12(r16)
 400ea2c:	10801014 	ori	r2,r2,64
 400ea30:	8080030d 	sth	r2,12(r16)
 400ea34:	8805883a 	mov	r2,r17
 400ea38:	dfc11d17 	ldw	ra,1140(sp)
 400ea3c:	dc811c17 	ldw	r18,1136(sp)
 400ea40:	dc411b17 	ldw	r17,1132(sp)
 400ea44:	dc011a17 	ldw	r16,1128(sp)
 400ea48:	dec11e04 	addi	sp,sp,1144
 400ea4c:	f800283a 	ret
 400ea50:	047fffc4 	movi	r17,-1
 400ea54:	003ff106 	br	400ea1c <__alt_data_end+0xfc00ea1c>

0400ea58 <__swbuf_r>:
 400ea58:	defffb04 	addi	sp,sp,-20
 400ea5c:	dcc00315 	stw	r19,12(sp)
 400ea60:	dc800215 	stw	r18,8(sp)
 400ea64:	dc000015 	stw	r16,0(sp)
 400ea68:	dfc00415 	stw	ra,16(sp)
 400ea6c:	dc400115 	stw	r17,4(sp)
 400ea70:	2025883a 	mov	r18,r4
 400ea74:	2827883a 	mov	r19,r5
 400ea78:	3021883a 	mov	r16,r6
 400ea7c:	20000226 	beq	r4,zero,400ea88 <__swbuf_r+0x30>
 400ea80:	20800e17 	ldw	r2,56(r4)
 400ea84:	10004226 	beq	r2,zero,400eb90 <__swbuf_r+0x138>
 400ea88:	80800617 	ldw	r2,24(r16)
 400ea8c:	8100030b 	ldhu	r4,12(r16)
 400ea90:	80800215 	stw	r2,8(r16)
 400ea94:	2080020c 	andi	r2,r4,8
 400ea98:	10003626 	beq	r2,zero,400eb74 <__swbuf_r+0x11c>
 400ea9c:	80c00417 	ldw	r3,16(r16)
 400eaa0:	18003426 	beq	r3,zero,400eb74 <__swbuf_r+0x11c>
 400eaa4:	2088000c 	andi	r2,r4,8192
 400eaa8:	9c403fcc 	andi	r17,r19,255
 400eaac:	10001a26 	beq	r2,zero,400eb18 <__swbuf_r+0xc0>
 400eab0:	80800017 	ldw	r2,0(r16)
 400eab4:	81000517 	ldw	r4,20(r16)
 400eab8:	10c7c83a 	sub	r3,r2,r3
 400eabc:	1900200e 	bge	r3,r4,400eb40 <__swbuf_r+0xe8>
 400eac0:	18c00044 	addi	r3,r3,1
 400eac4:	81000217 	ldw	r4,8(r16)
 400eac8:	11400044 	addi	r5,r2,1
 400eacc:	81400015 	stw	r5,0(r16)
 400ead0:	213fffc4 	addi	r4,r4,-1
 400ead4:	81000215 	stw	r4,8(r16)
 400ead8:	14c00005 	stb	r19,0(r2)
 400eadc:	80800517 	ldw	r2,20(r16)
 400eae0:	10c01e26 	beq	r2,r3,400eb5c <__swbuf_r+0x104>
 400eae4:	8080030b 	ldhu	r2,12(r16)
 400eae8:	1080004c 	andi	r2,r2,1
 400eaec:	10000226 	beq	r2,zero,400eaf8 <__swbuf_r+0xa0>
 400eaf0:	00800284 	movi	r2,10
 400eaf4:	88801926 	beq	r17,r2,400eb5c <__swbuf_r+0x104>
 400eaf8:	8805883a 	mov	r2,r17
 400eafc:	dfc00417 	ldw	ra,16(sp)
 400eb00:	dcc00317 	ldw	r19,12(sp)
 400eb04:	dc800217 	ldw	r18,8(sp)
 400eb08:	dc400117 	ldw	r17,4(sp)
 400eb0c:	dc000017 	ldw	r16,0(sp)
 400eb10:	dec00504 	addi	sp,sp,20
 400eb14:	f800283a 	ret
 400eb18:	81401917 	ldw	r5,100(r16)
 400eb1c:	00b7ffc4 	movi	r2,-8193
 400eb20:	21080014 	ori	r4,r4,8192
 400eb24:	2884703a 	and	r2,r5,r2
 400eb28:	80801915 	stw	r2,100(r16)
 400eb2c:	80800017 	ldw	r2,0(r16)
 400eb30:	8100030d 	sth	r4,12(r16)
 400eb34:	81000517 	ldw	r4,20(r16)
 400eb38:	10c7c83a 	sub	r3,r2,r3
 400eb3c:	193fe016 	blt	r3,r4,400eac0 <__alt_data_end+0xfc00eac0>
 400eb40:	800b883a 	mov	r5,r16
 400eb44:	9009883a 	mov	r4,r18
 400eb48:	4009c880 	call	4009c88 <_fflush_r>
 400eb4c:	1000071e 	bne	r2,zero,400eb6c <__swbuf_r+0x114>
 400eb50:	80800017 	ldw	r2,0(r16)
 400eb54:	00c00044 	movi	r3,1
 400eb58:	003fda06 	br	400eac4 <__alt_data_end+0xfc00eac4>
 400eb5c:	800b883a 	mov	r5,r16
 400eb60:	9009883a 	mov	r4,r18
 400eb64:	4009c880 	call	4009c88 <_fflush_r>
 400eb68:	103fe326 	beq	r2,zero,400eaf8 <__alt_data_end+0xfc00eaf8>
 400eb6c:	00bfffc4 	movi	r2,-1
 400eb70:	003fe206 	br	400eafc <__alt_data_end+0xfc00eafc>
 400eb74:	800b883a 	mov	r5,r16
 400eb78:	9009883a 	mov	r4,r18
 400eb7c:	40080900 	call	4008090 <__swsetup_r>
 400eb80:	103ffa1e 	bne	r2,zero,400eb6c <__alt_data_end+0xfc00eb6c>
 400eb84:	8100030b 	ldhu	r4,12(r16)
 400eb88:	80c00417 	ldw	r3,16(r16)
 400eb8c:	003fc506 	br	400eaa4 <__alt_data_end+0xfc00eaa4>
 400eb90:	400a0640 	call	400a064 <__sinit>
 400eb94:	003fbc06 	br	400ea88 <__alt_data_end+0xfc00ea88>

0400eb98 <__swbuf>:
 400eb98:	00810074 	movhi	r2,1025
 400eb9c:	10935c04 	addi	r2,r2,19824
 400eba0:	280d883a 	mov	r6,r5
 400eba4:	200b883a 	mov	r5,r4
 400eba8:	11000017 	ldw	r4,0(r2)
 400ebac:	400ea581 	jmpi	400ea58 <__swbuf_r>

0400ebb0 <_write_r>:
 400ebb0:	defffd04 	addi	sp,sp,-12
 400ebb4:	2805883a 	mov	r2,r5
 400ebb8:	dc000015 	stw	r16,0(sp)
 400ebbc:	04010074 	movhi	r16,1025
 400ebc0:	dc400115 	stw	r17,4(sp)
 400ebc4:	300b883a 	mov	r5,r6
 400ebc8:	841a5404 	addi	r16,r16,26960
 400ebcc:	2023883a 	mov	r17,r4
 400ebd0:	380d883a 	mov	r6,r7
 400ebd4:	1009883a 	mov	r4,r2
 400ebd8:	dfc00215 	stw	ra,8(sp)
 400ebdc:	80000015 	stw	zero,0(r16)
 400ebe0:	4010b280 	call	4010b28 <write>
 400ebe4:	00ffffc4 	movi	r3,-1
 400ebe8:	10c00526 	beq	r2,r3,400ec00 <_write_r+0x50>
 400ebec:	dfc00217 	ldw	ra,8(sp)
 400ebf0:	dc400117 	ldw	r17,4(sp)
 400ebf4:	dc000017 	ldw	r16,0(sp)
 400ebf8:	dec00304 	addi	sp,sp,12
 400ebfc:	f800283a 	ret
 400ec00:	80c00017 	ldw	r3,0(r16)
 400ec04:	183ff926 	beq	r3,zero,400ebec <__alt_data_end+0xfc00ebec>
 400ec08:	88c00015 	stw	r3,0(r17)
 400ec0c:	003ff706 	br	400ebec <__alt_data_end+0xfc00ebec>

0400ec10 <_close_r>:
 400ec10:	defffd04 	addi	sp,sp,-12
 400ec14:	dc000015 	stw	r16,0(sp)
 400ec18:	04010074 	movhi	r16,1025
 400ec1c:	dc400115 	stw	r17,4(sp)
 400ec20:	841a5404 	addi	r16,r16,26960
 400ec24:	2023883a 	mov	r17,r4
 400ec28:	2809883a 	mov	r4,r5
 400ec2c:	dfc00215 	stw	ra,8(sp)
 400ec30:	80000015 	stw	zero,0(r16)
 400ec34:	400ff800 	call	400ff80 <close>
 400ec38:	00ffffc4 	movi	r3,-1
 400ec3c:	10c00526 	beq	r2,r3,400ec54 <_close_r+0x44>
 400ec40:	dfc00217 	ldw	ra,8(sp)
 400ec44:	dc400117 	ldw	r17,4(sp)
 400ec48:	dc000017 	ldw	r16,0(sp)
 400ec4c:	dec00304 	addi	sp,sp,12
 400ec50:	f800283a 	ret
 400ec54:	80c00017 	ldw	r3,0(r16)
 400ec58:	183ff926 	beq	r3,zero,400ec40 <__alt_data_end+0xfc00ec40>
 400ec5c:	88c00015 	stw	r3,0(r17)
 400ec60:	003ff706 	br	400ec40 <__alt_data_end+0xfc00ec40>

0400ec64 <_calloc_r>:
 400ec64:	298b383a 	mul	r5,r5,r6
 400ec68:	defffe04 	addi	sp,sp,-8
 400ec6c:	dfc00115 	stw	ra,4(sp)
 400ec70:	dc000015 	stw	r16,0(sp)
 400ec74:	400ae200 	call	400ae20 <_malloc_r>
 400ec78:	10002926 	beq	r2,zero,400ed20 <_calloc_r+0xbc>
 400ec7c:	11bfff17 	ldw	r6,-4(r2)
 400ec80:	1021883a 	mov	r16,r2
 400ec84:	00bfff04 	movi	r2,-4
 400ec88:	308c703a 	and	r6,r6,r2
 400ec8c:	00c00904 	movi	r3,36
 400ec90:	308d883a 	add	r6,r6,r2
 400ec94:	19801636 	bltu	r3,r6,400ecf0 <_calloc_r+0x8c>
 400ec98:	008004c4 	movi	r2,19
 400ec9c:	11800b2e 	bgeu	r2,r6,400eccc <_calloc_r+0x68>
 400eca0:	80000015 	stw	zero,0(r16)
 400eca4:	80000115 	stw	zero,4(r16)
 400eca8:	008006c4 	movi	r2,27
 400ecac:	11801a2e 	bgeu	r2,r6,400ed18 <_calloc_r+0xb4>
 400ecb0:	80000215 	stw	zero,8(r16)
 400ecb4:	80000315 	stw	zero,12(r16)
 400ecb8:	30c0151e 	bne	r6,r3,400ed10 <_calloc_r+0xac>
 400ecbc:	80000415 	stw	zero,16(r16)
 400ecc0:	80800604 	addi	r2,r16,24
 400ecc4:	80000515 	stw	zero,20(r16)
 400ecc8:	00000106 	br	400ecd0 <_calloc_r+0x6c>
 400eccc:	8005883a 	mov	r2,r16
 400ecd0:	10000015 	stw	zero,0(r2)
 400ecd4:	10000115 	stw	zero,4(r2)
 400ecd8:	10000215 	stw	zero,8(r2)
 400ecdc:	8005883a 	mov	r2,r16
 400ece0:	dfc00117 	ldw	ra,4(sp)
 400ece4:	dc000017 	ldw	r16,0(sp)
 400ece8:	dec00204 	addi	sp,sp,8
 400ecec:	f800283a 	ret
 400ecf0:	000b883a 	mov	r5,zero
 400ecf4:	8009883a 	mov	r4,r16
 400ecf8:	400b9b40 	call	400b9b4 <memset>
 400ecfc:	8005883a 	mov	r2,r16
 400ed00:	dfc00117 	ldw	ra,4(sp)
 400ed04:	dc000017 	ldw	r16,0(sp)
 400ed08:	dec00204 	addi	sp,sp,8
 400ed0c:	f800283a 	ret
 400ed10:	80800404 	addi	r2,r16,16
 400ed14:	003fee06 	br	400ecd0 <__alt_data_end+0xfc00ecd0>
 400ed18:	80800204 	addi	r2,r16,8
 400ed1c:	003fec06 	br	400ecd0 <__alt_data_end+0xfc00ecd0>
 400ed20:	0005883a 	mov	r2,zero
 400ed24:	003fee06 	br	400ece0 <__alt_data_end+0xfc00ece0>

0400ed28 <_fclose_r>:
 400ed28:	28003926 	beq	r5,zero,400ee10 <_fclose_r+0xe8>
 400ed2c:	defffc04 	addi	sp,sp,-16
 400ed30:	dc400115 	stw	r17,4(sp)
 400ed34:	dc000015 	stw	r16,0(sp)
 400ed38:	dfc00315 	stw	ra,12(sp)
 400ed3c:	dc800215 	stw	r18,8(sp)
 400ed40:	2023883a 	mov	r17,r4
 400ed44:	2821883a 	mov	r16,r5
 400ed48:	20000226 	beq	r4,zero,400ed54 <_fclose_r+0x2c>
 400ed4c:	20800e17 	ldw	r2,56(r4)
 400ed50:	10002726 	beq	r2,zero,400edf0 <_fclose_r+0xc8>
 400ed54:	8080030f 	ldh	r2,12(r16)
 400ed58:	1000071e 	bne	r2,zero,400ed78 <_fclose_r+0x50>
 400ed5c:	0005883a 	mov	r2,zero
 400ed60:	dfc00317 	ldw	ra,12(sp)
 400ed64:	dc800217 	ldw	r18,8(sp)
 400ed68:	dc400117 	ldw	r17,4(sp)
 400ed6c:	dc000017 	ldw	r16,0(sp)
 400ed70:	dec00404 	addi	sp,sp,16
 400ed74:	f800283a 	ret
 400ed78:	800b883a 	mov	r5,r16
 400ed7c:	8809883a 	mov	r4,r17
 400ed80:	4009a6c0 	call	4009a6c <__sflush_r>
 400ed84:	1025883a 	mov	r18,r2
 400ed88:	80800b17 	ldw	r2,44(r16)
 400ed8c:	10000426 	beq	r2,zero,400eda0 <_fclose_r+0x78>
 400ed90:	81400717 	ldw	r5,28(r16)
 400ed94:	8809883a 	mov	r4,r17
 400ed98:	103ee83a 	callr	r2
 400ed9c:	10001616 	blt	r2,zero,400edf8 <_fclose_r+0xd0>
 400eda0:	8080030b 	ldhu	r2,12(r16)
 400eda4:	1080200c 	andi	r2,r2,128
 400eda8:	1000151e 	bne	r2,zero,400ee00 <_fclose_r+0xd8>
 400edac:	81400c17 	ldw	r5,48(r16)
 400edb0:	28000526 	beq	r5,zero,400edc8 <_fclose_r+0xa0>
 400edb4:	80801004 	addi	r2,r16,64
 400edb8:	28800226 	beq	r5,r2,400edc4 <_fclose_r+0x9c>
 400edbc:	8809883a 	mov	r4,r17
 400edc0:	400a1d80 	call	400a1d8 <_free_r>
 400edc4:	80000c15 	stw	zero,48(r16)
 400edc8:	81401117 	ldw	r5,68(r16)
 400edcc:	28000326 	beq	r5,zero,400eddc <_fclose_r+0xb4>
 400edd0:	8809883a 	mov	r4,r17
 400edd4:	400a1d80 	call	400a1d8 <_free_r>
 400edd8:	80001115 	stw	zero,68(r16)
 400eddc:	400a0740 	call	400a074 <__sfp_lock_acquire>
 400ede0:	8000030d 	sth	zero,12(r16)
 400ede4:	400a0780 	call	400a078 <__sfp_lock_release>
 400ede8:	9005883a 	mov	r2,r18
 400edec:	003fdc06 	br	400ed60 <__alt_data_end+0xfc00ed60>
 400edf0:	400a0640 	call	400a064 <__sinit>
 400edf4:	003fd706 	br	400ed54 <__alt_data_end+0xfc00ed54>
 400edf8:	04bfffc4 	movi	r18,-1
 400edfc:	003fe806 	br	400eda0 <__alt_data_end+0xfc00eda0>
 400ee00:	81400417 	ldw	r5,16(r16)
 400ee04:	8809883a 	mov	r4,r17
 400ee08:	400a1d80 	call	400a1d8 <_free_r>
 400ee0c:	003fe706 	br	400edac <__alt_data_end+0xfc00edac>
 400ee10:	0005883a 	mov	r2,zero
 400ee14:	f800283a 	ret

0400ee18 <fclose>:
 400ee18:	00810074 	movhi	r2,1025
 400ee1c:	10935c04 	addi	r2,r2,19824
 400ee20:	200b883a 	mov	r5,r4
 400ee24:	11000017 	ldw	r4,0(r2)
 400ee28:	400ed281 	jmpi	400ed28 <_fclose_r>

0400ee2c <__fputwc>:
 400ee2c:	defff804 	addi	sp,sp,-32
 400ee30:	dcc00415 	stw	r19,16(sp)
 400ee34:	dc800315 	stw	r18,12(sp)
 400ee38:	dc000115 	stw	r16,4(sp)
 400ee3c:	dfc00715 	stw	ra,28(sp)
 400ee40:	dd400615 	stw	r21,24(sp)
 400ee44:	dd000515 	stw	r20,20(sp)
 400ee48:	dc400215 	stw	r17,8(sp)
 400ee4c:	2027883a 	mov	r19,r4
 400ee50:	2825883a 	mov	r18,r5
 400ee54:	3021883a 	mov	r16,r6
 400ee58:	400ac100 	call	400ac10 <__locale_mb_cur_max>
 400ee5c:	00c00044 	movi	r3,1
 400ee60:	10c03e26 	beq	r2,r3,400ef5c <__fputwc+0x130>
 400ee64:	81c01704 	addi	r7,r16,92
 400ee68:	900d883a 	mov	r6,r18
 400ee6c:	d80b883a 	mov	r5,sp
 400ee70:	9809883a 	mov	r4,r19
 400ee74:	400f1a40 	call	400f1a4 <_wcrtomb_r>
 400ee78:	1029883a 	mov	r20,r2
 400ee7c:	00bfffc4 	movi	r2,-1
 400ee80:	a0802026 	beq	r20,r2,400ef04 <__fputwc+0xd8>
 400ee84:	d9400003 	ldbu	r5,0(sp)
 400ee88:	a0001c26 	beq	r20,zero,400eefc <__fputwc+0xd0>
 400ee8c:	0023883a 	mov	r17,zero
 400ee90:	05400284 	movi	r21,10
 400ee94:	00000906 	br	400eebc <__fputwc+0x90>
 400ee98:	80800017 	ldw	r2,0(r16)
 400ee9c:	11400005 	stb	r5,0(r2)
 400eea0:	80c00017 	ldw	r3,0(r16)
 400eea4:	18c00044 	addi	r3,r3,1
 400eea8:	80c00015 	stw	r3,0(r16)
 400eeac:	8c400044 	addi	r17,r17,1
 400eeb0:	dc45883a 	add	r2,sp,r17
 400eeb4:	8d00112e 	bgeu	r17,r20,400eefc <__fputwc+0xd0>
 400eeb8:	11400003 	ldbu	r5,0(r2)
 400eebc:	80c00217 	ldw	r3,8(r16)
 400eec0:	18ffffc4 	addi	r3,r3,-1
 400eec4:	80c00215 	stw	r3,8(r16)
 400eec8:	183ff30e 	bge	r3,zero,400ee98 <__alt_data_end+0xfc00ee98>
 400eecc:	80800617 	ldw	r2,24(r16)
 400eed0:	18801916 	blt	r3,r2,400ef38 <__fputwc+0x10c>
 400eed4:	80800017 	ldw	r2,0(r16)
 400eed8:	11400005 	stb	r5,0(r2)
 400eedc:	80800017 	ldw	r2,0(r16)
 400eee0:	10c00003 	ldbu	r3,0(r2)
 400eee4:	10800044 	addi	r2,r2,1
 400eee8:	1d402326 	beq	r3,r21,400ef78 <__fputwc+0x14c>
 400eeec:	80800015 	stw	r2,0(r16)
 400eef0:	8c400044 	addi	r17,r17,1
 400eef4:	dc45883a 	add	r2,sp,r17
 400eef8:	8d3fef36 	bltu	r17,r20,400eeb8 <__alt_data_end+0xfc00eeb8>
 400eefc:	9005883a 	mov	r2,r18
 400ef00:	00000406 	br	400ef14 <__fputwc+0xe8>
 400ef04:	80c0030b 	ldhu	r3,12(r16)
 400ef08:	a005883a 	mov	r2,r20
 400ef0c:	18c01014 	ori	r3,r3,64
 400ef10:	80c0030d 	sth	r3,12(r16)
 400ef14:	dfc00717 	ldw	ra,28(sp)
 400ef18:	dd400617 	ldw	r21,24(sp)
 400ef1c:	dd000517 	ldw	r20,20(sp)
 400ef20:	dcc00417 	ldw	r19,16(sp)
 400ef24:	dc800317 	ldw	r18,12(sp)
 400ef28:	dc400217 	ldw	r17,8(sp)
 400ef2c:	dc000117 	ldw	r16,4(sp)
 400ef30:	dec00804 	addi	sp,sp,32
 400ef34:	f800283a 	ret
 400ef38:	800d883a 	mov	r6,r16
 400ef3c:	29403fcc 	andi	r5,r5,255
 400ef40:	9809883a 	mov	r4,r19
 400ef44:	400ea580 	call	400ea58 <__swbuf_r>
 400ef48:	10bfffe0 	cmpeqi	r2,r2,-1
 400ef4c:	10803fcc 	andi	r2,r2,255
 400ef50:	103fd626 	beq	r2,zero,400eeac <__alt_data_end+0xfc00eeac>
 400ef54:	00bfffc4 	movi	r2,-1
 400ef58:	003fee06 	br	400ef14 <__alt_data_end+0xfc00ef14>
 400ef5c:	90ffffc4 	addi	r3,r18,-1
 400ef60:	01003f84 	movi	r4,254
 400ef64:	20ffbf36 	bltu	r4,r3,400ee64 <__alt_data_end+0xfc00ee64>
 400ef68:	900b883a 	mov	r5,r18
 400ef6c:	dc800005 	stb	r18,0(sp)
 400ef70:	1029883a 	mov	r20,r2
 400ef74:	003fc506 	br	400ee8c <__alt_data_end+0xfc00ee8c>
 400ef78:	800d883a 	mov	r6,r16
 400ef7c:	a80b883a 	mov	r5,r21
 400ef80:	9809883a 	mov	r4,r19
 400ef84:	400ea580 	call	400ea58 <__swbuf_r>
 400ef88:	10bfffe0 	cmpeqi	r2,r2,-1
 400ef8c:	003fef06 	br	400ef4c <__alt_data_end+0xfc00ef4c>

0400ef90 <_fputwc_r>:
 400ef90:	3080030b 	ldhu	r2,12(r6)
 400ef94:	10c8000c 	andi	r3,r2,8192
 400ef98:	1800051e 	bne	r3,zero,400efb0 <_fputwc_r+0x20>
 400ef9c:	30c01917 	ldw	r3,100(r6)
 400efa0:	10880014 	ori	r2,r2,8192
 400efa4:	3080030d 	sth	r2,12(r6)
 400efa8:	18880014 	ori	r2,r3,8192
 400efac:	30801915 	stw	r2,100(r6)
 400efb0:	400ee2c1 	jmpi	400ee2c <__fputwc>

0400efb4 <fputwc>:
 400efb4:	00810074 	movhi	r2,1025
 400efb8:	defffc04 	addi	sp,sp,-16
 400efbc:	10935c04 	addi	r2,r2,19824
 400efc0:	dc000115 	stw	r16,4(sp)
 400efc4:	14000017 	ldw	r16,0(r2)
 400efc8:	dc400215 	stw	r17,8(sp)
 400efcc:	dfc00315 	stw	ra,12(sp)
 400efd0:	2023883a 	mov	r17,r4
 400efd4:	80000226 	beq	r16,zero,400efe0 <fputwc+0x2c>
 400efd8:	80800e17 	ldw	r2,56(r16)
 400efdc:	10001026 	beq	r2,zero,400f020 <fputwc+0x6c>
 400efe0:	2880030b 	ldhu	r2,12(r5)
 400efe4:	10c8000c 	andi	r3,r2,8192
 400efe8:	1800051e 	bne	r3,zero,400f000 <fputwc+0x4c>
 400efec:	28c01917 	ldw	r3,100(r5)
 400eff0:	10880014 	ori	r2,r2,8192
 400eff4:	2880030d 	sth	r2,12(r5)
 400eff8:	18880014 	ori	r2,r3,8192
 400effc:	28801915 	stw	r2,100(r5)
 400f000:	280d883a 	mov	r6,r5
 400f004:	8009883a 	mov	r4,r16
 400f008:	880b883a 	mov	r5,r17
 400f00c:	dfc00317 	ldw	ra,12(sp)
 400f010:	dc400217 	ldw	r17,8(sp)
 400f014:	dc000117 	ldw	r16,4(sp)
 400f018:	dec00404 	addi	sp,sp,16
 400f01c:	400ee2c1 	jmpi	400ee2c <__fputwc>
 400f020:	8009883a 	mov	r4,r16
 400f024:	d9400015 	stw	r5,0(sp)
 400f028:	400a0640 	call	400a064 <__sinit>
 400f02c:	d9400017 	ldw	r5,0(sp)
 400f030:	003feb06 	br	400efe0 <__alt_data_end+0xfc00efe0>

0400f034 <_fstat_r>:
 400f034:	defffd04 	addi	sp,sp,-12
 400f038:	2805883a 	mov	r2,r5
 400f03c:	dc000015 	stw	r16,0(sp)
 400f040:	04010074 	movhi	r16,1025
 400f044:	dc400115 	stw	r17,4(sp)
 400f048:	841a5404 	addi	r16,r16,26960
 400f04c:	2023883a 	mov	r17,r4
 400f050:	300b883a 	mov	r5,r6
 400f054:	1009883a 	mov	r4,r2
 400f058:	dfc00215 	stw	ra,8(sp)
 400f05c:	80000015 	stw	zero,0(r16)
 400f060:	40100b80 	call	40100b8 <fstat>
 400f064:	00ffffc4 	movi	r3,-1
 400f068:	10c00526 	beq	r2,r3,400f080 <_fstat_r+0x4c>
 400f06c:	dfc00217 	ldw	ra,8(sp)
 400f070:	dc400117 	ldw	r17,4(sp)
 400f074:	dc000017 	ldw	r16,0(sp)
 400f078:	dec00304 	addi	sp,sp,12
 400f07c:	f800283a 	ret
 400f080:	80c00017 	ldw	r3,0(r16)
 400f084:	183ff926 	beq	r3,zero,400f06c <__alt_data_end+0xfc00f06c>
 400f088:	88c00015 	stw	r3,0(r17)
 400f08c:	003ff706 	br	400f06c <__alt_data_end+0xfc00f06c>

0400f090 <_isatty_r>:
 400f090:	defffd04 	addi	sp,sp,-12
 400f094:	dc000015 	stw	r16,0(sp)
 400f098:	04010074 	movhi	r16,1025
 400f09c:	dc400115 	stw	r17,4(sp)
 400f0a0:	841a5404 	addi	r16,r16,26960
 400f0a4:	2023883a 	mov	r17,r4
 400f0a8:	2809883a 	mov	r4,r5
 400f0ac:	dfc00215 	stw	ra,8(sp)
 400f0b0:	80000015 	stw	zero,0(r16)
 400f0b4:	40103980 	call	4010398 <isatty>
 400f0b8:	00ffffc4 	movi	r3,-1
 400f0bc:	10c00526 	beq	r2,r3,400f0d4 <_isatty_r+0x44>
 400f0c0:	dfc00217 	ldw	ra,8(sp)
 400f0c4:	dc400117 	ldw	r17,4(sp)
 400f0c8:	dc000017 	ldw	r16,0(sp)
 400f0cc:	dec00304 	addi	sp,sp,12
 400f0d0:	f800283a 	ret
 400f0d4:	80c00017 	ldw	r3,0(r16)
 400f0d8:	183ff926 	beq	r3,zero,400f0c0 <__alt_data_end+0xfc00f0c0>
 400f0dc:	88c00015 	stw	r3,0(r17)
 400f0e0:	003ff706 	br	400f0c0 <__alt_data_end+0xfc00f0c0>

0400f0e4 <_lseek_r>:
 400f0e4:	defffd04 	addi	sp,sp,-12
 400f0e8:	2805883a 	mov	r2,r5
 400f0ec:	dc000015 	stw	r16,0(sp)
 400f0f0:	04010074 	movhi	r16,1025
 400f0f4:	dc400115 	stw	r17,4(sp)
 400f0f8:	300b883a 	mov	r5,r6
 400f0fc:	841a5404 	addi	r16,r16,26960
 400f100:	2023883a 	mov	r17,r4
 400f104:	380d883a 	mov	r6,r7
 400f108:	1009883a 	mov	r4,r2
 400f10c:	dfc00215 	stw	ra,8(sp)
 400f110:	80000015 	stw	zero,0(r16)
 400f114:	40105640 	call	4010564 <lseek>
 400f118:	00ffffc4 	movi	r3,-1
 400f11c:	10c00526 	beq	r2,r3,400f134 <_lseek_r+0x50>
 400f120:	dfc00217 	ldw	ra,8(sp)
 400f124:	dc400117 	ldw	r17,4(sp)
 400f128:	dc000017 	ldw	r16,0(sp)
 400f12c:	dec00304 	addi	sp,sp,12
 400f130:	f800283a 	ret
 400f134:	80c00017 	ldw	r3,0(r16)
 400f138:	183ff926 	beq	r3,zero,400f120 <__alt_data_end+0xfc00f120>
 400f13c:	88c00015 	stw	r3,0(r17)
 400f140:	003ff706 	br	400f120 <__alt_data_end+0xfc00f120>

0400f144 <_read_r>:
 400f144:	defffd04 	addi	sp,sp,-12
 400f148:	2805883a 	mov	r2,r5
 400f14c:	dc000015 	stw	r16,0(sp)
 400f150:	04010074 	movhi	r16,1025
 400f154:	dc400115 	stw	r17,4(sp)
 400f158:	300b883a 	mov	r5,r6
 400f15c:	841a5404 	addi	r16,r16,26960
 400f160:	2023883a 	mov	r17,r4
 400f164:	380d883a 	mov	r6,r7
 400f168:	1009883a 	mov	r4,r2
 400f16c:	dfc00215 	stw	ra,8(sp)
 400f170:	80000015 	stw	zero,0(r16)
 400f174:	40107380 	call	4010738 <read>
 400f178:	00ffffc4 	movi	r3,-1
 400f17c:	10c00526 	beq	r2,r3,400f194 <_read_r+0x50>
 400f180:	dfc00217 	ldw	ra,8(sp)
 400f184:	dc400117 	ldw	r17,4(sp)
 400f188:	dc000017 	ldw	r16,0(sp)
 400f18c:	dec00304 	addi	sp,sp,12
 400f190:	f800283a 	ret
 400f194:	80c00017 	ldw	r3,0(r16)
 400f198:	183ff926 	beq	r3,zero,400f180 <__alt_data_end+0xfc00f180>
 400f19c:	88c00015 	stw	r3,0(r17)
 400f1a0:	003ff706 	br	400f180 <__alt_data_end+0xfc00f180>

0400f1a4 <_wcrtomb_r>:
 400f1a4:	defff604 	addi	sp,sp,-40
 400f1a8:	00810074 	movhi	r2,1025
 400f1ac:	dc800815 	stw	r18,32(sp)
 400f1b0:	dc400715 	stw	r17,28(sp)
 400f1b4:	dc000615 	stw	r16,24(sp)
 400f1b8:	10936004 	addi	r2,r2,19840
 400f1bc:	dfc00915 	stw	ra,36(sp)
 400f1c0:	2021883a 	mov	r16,r4
 400f1c4:	3823883a 	mov	r17,r7
 400f1c8:	14800017 	ldw	r18,0(r2)
 400f1cc:	28001426 	beq	r5,zero,400f220 <_wcrtomb_r+0x7c>
 400f1d0:	d9400415 	stw	r5,16(sp)
 400f1d4:	d9800515 	stw	r6,20(sp)
 400f1d8:	400ac040 	call	400ac04 <__locale_charset>
 400f1dc:	d9800517 	ldw	r6,20(sp)
 400f1e0:	d9400417 	ldw	r5,16(sp)
 400f1e4:	100f883a 	mov	r7,r2
 400f1e8:	dc400015 	stw	r17,0(sp)
 400f1ec:	8009883a 	mov	r4,r16
 400f1f0:	903ee83a 	callr	r18
 400f1f4:	00ffffc4 	movi	r3,-1
 400f1f8:	10c0031e 	bne	r2,r3,400f208 <_wcrtomb_r+0x64>
 400f1fc:	88000015 	stw	zero,0(r17)
 400f200:	00c02284 	movi	r3,138
 400f204:	80c00015 	stw	r3,0(r16)
 400f208:	dfc00917 	ldw	ra,36(sp)
 400f20c:	dc800817 	ldw	r18,32(sp)
 400f210:	dc400717 	ldw	r17,28(sp)
 400f214:	dc000617 	ldw	r16,24(sp)
 400f218:	dec00a04 	addi	sp,sp,40
 400f21c:	f800283a 	ret
 400f220:	400ac040 	call	400ac04 <__locale_charset>
 400f224:	100f883a 	mov	r7,r2
 400f228:	dc400015 	stw	r17,0(sp)
 400f22c:	000d883a 	mov	r6,zero
 400f230:	d9400104 	addi	r5,sp,4
 400f234:	8009883a 	mov	r4,r16
 400f238:	903ee83a 	callr	r18
 400f23c:	003fed06 	br	400f1f4 <__alt_data_end+0xfc00f1f4>

0400f240 <wcrtomb>:
 400f240:	defff604 	addi	sp,sp,-40
 400f244:	00810074 	movhi	r2,1025
 400f248:	dc800615 	stw	r18,24(sp)
 400f24c:	dc400515 	stw	r17,20(sp)
 400f250:	10935c04 	addi	r2,r2,19824
 400f254:	dfc00915 	stw	ra,36(sp)
 400f258:	dd000815 	stw	r20,32(sp)
 400f25c:	dcc00715 	stw	r19,28(sp)
 400f260:	dc000415 	stw	r16,16(sp)
 400f264:	3025883a 	mov	r18,r6
 400f268:	14400017 	ldw	r17,0(r2)
 400f26c:	20001926 	beq	r4,zero,400f2d4 <wcrtomb+0x94>
 400f270:	00810074 	movhi	r2,1025
 400f274:	10936004 	addi	r2,r2,19840
 400f278:	15000017 	ldw	r20,0(r2)
 400f27c:	2021883a 	mov	r16,r4
 400f280:	2827883a 	mov	r19,r5
 400f284:	400ac040 	call	400ac04 <__locale_charset>
 400f288:	100f883a 	mov	r7,r2
 400f28c:	dc800015 	stw	r18,0(sp)
 400f290:	980d883a 	mov	r6,r19
 400f294:	800b883a 	mov	r5,r16
 400f298:	8809883a 	mov	r4,r17
 400f29c:	a03ee83a 	callr	r20
 400f2a0:	00ffffc4 	movi	r3,-1
 400f2a4:	10c0031e 	bne	r2,r3,400f2b4 <wcrtomb+0x74>
 400f2a8:	90000015 	stw	zero,0(r18)
 400f2ac:	00c02284 	movi	r3,138
 400f2b0:	88c00015 	stw	r3,0(r17)
 400f2b4:	dfc00917 	ldw	ra,36(sp)
 400f2b8:	dd000817 	ldw	r20,32(sp)
 400f2bc:	dcc00717 	ldw	r19,28(sp)
 400f2c0:	dc800617 	ldw	r18,24(sp)
 400f2c4:	dc400517 	ldw	r17,20(sp)
 400f2c8:	dc000417 	ldw	r16,16(sp)
 400f2cc:	dec00a04 	addi	sp,sp,40
 400f2d0:	f800283a 	ret
 400f2d4:	00810074 	movhi	r2,1025
 400f2d8:	10936004 	addi	r2,r2,19840
 400f2dc:	14000017 	ldw	r16,0(r2)
 400f2e0:	400ac040 	call	400ac04 <__locale_charset>
 400f2e4:	100f883a 	mov	r7,r2
 400f2e8:	dc800015 	stw	r18,0(sp)
 400f2ec:	000d883a 	mov	r6,zero
 400f2f0:	d9400104 	addi	r5,sp,4
 400f2f4:	8809883a 	mov	r4,r17
 400f2f8:	803ee83a 	callr	r16
 400f2fc:	003fe806 	br	400f2a0 <__alt_data_end+0xfc00f2a0>

0400f300 <__ascii_wctomb>:
 400f300:	28000526 	beq	r5,zero,400f318 <__ascii_wctomb+0x18>
 400f304:	00803fc4 	movi	r2,255
 400f308:	11800536 	bltu	r2,r6,400f320 <__ascii_wctomb+0x20>
 400f30c:	29800005 	stb	r6,0(r5)
 400f310:	00800044 	movi	r2,1
 400f314:	f800283a 	ret
 400f318:	0005883a 	mov	r2,zero
 400f31c:	f800283a 	ret
 400f320:	00802284 	movi	r2,138
 400f324:	20800015 	stw	r2,0(r4)
 400f328:	00bfffc4 	movi	r2,-1
 400f32c:	f800283a 	ret

0400f330 <_wctomb_r>:
 400f330:	00810074 	movhi	r2,1025
 400f334:	defff904 	addi	sp,sp,-28
 400f338:	10936004 	addi	r2,r2,19840
 400f33c:	dfc00615 	stw	ra,24(sp)
 400f340:	dc400515 	stw	r17,20(sp)
 400f344:	dc000415 	stw	r16,16(sp)
 400f348:	3823883a 	mov	r17,r7
 400f34c:	14000017 	ldw	r16,0(r2)
 400f350:	d9000115 	stw	r4,4(sp)
 400f354:	d9400215 	stw	r5,8(sp)
 400f358:	d9800315 	stw	r6,12(sp)
 400f35c:	400ac040 	call	400ac04 <__locale_charset>
 400f360:	d9800317 	ldw	r6,12(sp)
 400f364:	d9400217 	ldw	r5,8(sp)
 400f368:	d9000117 	ldw	r4,4(sp)
 400f36c:	100f883a 	mov	r7,r2
 400f370:	dc400015 	stw	r17,0(sp)
 400f374:	803ee83a 	callr	r16
 400f378:	dfc00617 	ldw	ra,24(sp)
 400f37c:	dc400517 	ldw	r17,20(sp)
 400f380:	dc000417 	ldw	r16,16(sp)
 400f384:	dec00704 	addi	sp,sp,28
 400f388:	f800283a 	ret

0400f38c <__muldi3>:
 400f38c:	223fffcc 	andi	r8,r4,65535
 400f390:	2006d43a 	srli	r3,r4,16
 400f394:	32bfffcc 	andi	r10,r6,65535
 400f398:	3012d43a 	srli	r9,r6,16
 400f39c:	4297383a 	mul	r11,r8,r10
 400f3a0:	1a95383a 	mul	r10,r3,r10
 400f3a4:	4251383a 	mul	r8,r8,r9
 400f3a8:	5804d43a 	srli	r2,r11,16
 400f3ac:	4291883a 	add	r8,r8,r10
 400f3b0:	1205883a 	add	r2,r2,r8
 400f3b4:	1a51383a 	mul	r8,r3,r9
 400f3b8:	1280022e 	bgeu	r2,r10,400f3c4 <__muldi3+0x38>
 400f3bc:	00c00074 	movhi	r3,1
 400f3c0:	40d1883a 	add	r8,r8,r3
 400f3c4:	1006d43a 	srli	r3,r2,16
 400f3c8:	21cf383a 	mul	r7,r4,r7
 400f3cc:	314b383a 	mul	r5,r6,r5
 400f3d0:	1004943a 	slli	r2,r2,16
 400f3d4:	1a11883a 	add	r8,r3,r8
 400f3d8:	5affffcc 	andi	r11,r11,65535
 400f3dc:	3947883a 	add	r3,r7,r5
 400f3e0:	12c5883a 	add	r2,r2,r11
 400f3e4:	1a07883a 	add	r3,r3,r8
 400f3e8:	f800283a 	ret

0400f3ec <__udivdi3>:
 400f3ec:	defff504 	addi	sp,sp,-44
 400f3f0:	dcc00415 	stw	r19,16(sp)
 400f3f4:	dc000115 	stw	r16,4(sp)
 400f3f8:	dfc00a15 	stw	ra,40(sp)
 400f3fc:	df000915 	stw	fp,36(sp)
 400f400:	ddc00815 	stw	r23,32(sp)
 400f404:	dd800715 	stw	r22,28(sp)
 400f408:	dd400615 	stw	r21,24(sp)
 400f40c:	dd000515 	stw	r20,20(sp)
 400f410:	dc800315 	stw	r18,12(sp)
 400f414:	dc400215 	stw	r17,8(sp)
 400f418:	2027883a 	mov	r19,r4
 400f41c:	2821883a 	mov	r16,r5
 400f420:	3800411e 	bne	r7,zero,400f528 <__udivdi3+0x13c>
 400f424:	3023883a 	mov	r17,r6
 400f428:	2025883a 	mov	r18,r4
 400f42c:	2980522e 	bgeu	r5,r6,400f578 <__udivdi3+0x18c>
 400f430:	00bfffd4 	movui	r2,65535
 400f434:	282d883a 	mov	r22,r5
 400f438:	1180a836 	bltu	r2,r6,400f6dc <__udivdi3+0x2f0>
 400f43c:	00803fc4 	movi	r2,255
 400f440:	1185803a 	cmpltu	r2,r2,r6
 400f444:	100490fa 	slli	r2,r2,3
 400f448:	3086d83a 	srl	r3,r6,r2
 400f44c:	01010074 	movhi	r4,1025
 400f450:	210b8a44 	addi	r4,r4,11817
 400f454:	20c7883a 	add	r3,r4,r3
 400f458:	18c00003 	ldbu	r3,0(r3)
 400f45c:	1885883a 	add	r2,r3,r2
 400f460:	00c00804 	movi	r3,32
 400f464:	1887c83a 	sub	r3,r3,r2
 400f468:	18000526 	beq	r3,zero,400f480 <__udivdi3+0x94>
 400f46c:	80e0983a 	sll	r16,r16,r3
 400f470:	9884d83a 	srl	r2,r19,r2
 400f474:	30e2983a 	sll	r17,r6,r3
 400f478:	98e4983a 	sll	r18,r19,r3
 400f47c:	142cb03a 	or	r22,r2,r16
 400f480:	882ad43a 	srli	r21,r17,16
 400f484:	b009883a 	mov	r4,r22
 400f488:	8d3fffcc 	andi	r20,r17,65535
 400f48c:	a80b883a 	mov	r5,r21
 400f490:	4005a340 	call	4005a34 <__umodsi3>
 400f494:	b009883a 	mov	r4,r22
 400f498:	a80b883a 	mov	r5,r21
 400f49c:	1027883a 	mov	r19,r2
 400f4a0:	40059d00 	call	40059d0 <__udivsi3>
 400f4a4:	102d883a 	mov	r22,r2
 400f4a8:	9826943a 	slli	r19,r19,16
 400f4ac:	9004d43a 	srli	r2,r18,16
 400f4b0:	a5a1383a 	mul	r16,r20,r22
 400f4b4:	14c4b03a 	or	r2,r2,r19
 400f4b8:	1400052e 	bgeu	r2,r16,400f4d0 <__udivdi3+0xe4>
 400f4bc:	1445883a 	add	r2,r2,r17
 400f4c0:	b0ffffc4 	addi	r3,r22,-1
 400f4c4:	14400136 	bltu	r2,r17,400f4cc <__udivdi3+0xe0>
 400f4c8:	14012336 	bltu	r2,r16,400f958 <__udivdi3+0x56c>
 400f4cc:	182d883a 	mov	r22,r3
 400f4d0:	1421c83a 	sub	r16,r2,r16
 400f4d4:	a80b883a 	mov	r5,r21
 400f4d8:	8009883a 	mov	r4,r16
 400f4dc:	4005a340 	call	4005a34 <__umodsi3>
 400f4e0:	1027883a 	mov	r19,r2
 400f4e4:	a80b883a 	mov	r5,r21
 400f4e8:	8009883a 	mov	r4,r16
 400f4ec:	40059d00 	call	40059d0 <__udivsi3>
 400f4f0:	9826943a 	slli	r19,r19,16
 400f4f4:	a0a9383a 	mul	r20,r20,r2
 400f4f8:	94bfffcc 	andi	r18,r18,65535
 400f4fc:	94e4b03a 	or	r18,r18,r19
 400f500:	9500052e 	bgeu	r18,r20,400f518 <__udivdi3+0x12c>
 400f504:	8ca5883a 	add	r18,r17,r18
 400f508:	10ffffc4 	addi	r3,r2,-1
 400f50c:	9440f136 	bltu	r18,r17,400f8d4 <__udivdi3+0x4e8>
 400f510:	9500f02e 	bgeu	r18,r20,400f8d4 <__udivdi3+0x4e8>
 400f514:	10bfff84 	addi	r2,r2,-2
 400f518:	b00c943a 	slli	r6,r22,16
 400f51c:	0007883a 	mov	r3,zero
 400f520:	3084b03a 	or	r2,r6,r2
 400f524:	00005906 	br	400f68c <__udivdi3+0x2a0>
 400f528:	29c05636 	bltu	r5,r7,400f684 <__udivdi3+0x298>
 400f52c:	00bfffd4 	movui	r2,65535
 400f530:	11c0622e 	bgeu	r2,r7,400f6bc <__udivdi3+0x2d0>
 400f534:	00804034 	movhi	r2,256
 400f538:	10bfffc4 	addi	r2,r2,-1
 400f53c:	11c0ee36 	bltu	r2,r7,400f8f8 <__udivdi3+0x50c>
 400f540:	00800404 	movi	r2,16
 400f544:	3886d83a 	srl	r3,r7,r2
 400f548:	01010074 	movhi	r4,1025
 400f54c:	210b8a44 	addi	r4,r4,11817
 400f550:	20c7883a 	add	r3,r4,r3
 400f554:	18c00003 	ldbu	r3,0(r3)
 400f558:	05400804 	movi	r21,32
 400f55c:	1885883a 	add	r2,r3,r2
 400f560:	a8abc83a 	sub	r21,r21,r2
 400f564:	a800621e 	bne	r21,zero,400f6f0 <__udivdi3+0x304>
 400f568:	3c00e936 	bltu	r7,r16,400f910 <__udivdi3+0x524>
 400f56c:	9985403a 	cmpgeu	r2,r19,r6
 400f570:	0007883a 	mov	r3,zero
 400f574:	00004506 	br	400f68c <__udivdi3+0x2a0>
 400f578:	3000041e 	bne	r6,zero,400f58c <__udivdi3+0x1a0>
 400f57c:	000b883a 	mov	r5,zero
 400f580:	01000044 	movi	r4,1
 400f584:	40059d00 	call	40059d0 <__udivsi3>
 400f588:	1023883a 	mov	r17,r2
 400f58c:	00bfffd4 	movui	r2,65535
 400f590:	14404e2e 	bgeu	r2,r17,400f6cc <__udivdi3+0x2e0>
 400f594:	00804034 	movhi	r2,256
 400f598:	10bfffc4 	addi	r2,r2,-1
 400f59c:	1440d836 	bltu	r2,r17,400f900 <__udivdi3+0x514>
 400f5a0:	00800404 	movi	r2,16
 400f5a4:	8886d83a 	srl	r3,r17,r2
 400f5a8:	01010074 	movhi	r4,1025
 400f5ac:	210b8a44 	addi	r4,r4,11817
 400f5b0:	20c7883a 	add	r3,r4,r3
 400f5b4:	18c00003 	ldbu	r3,0(r3)
 400f5b8:	1885883a 	add	r2,r3,r2
 400f5bc:	00c00804 	movi	r3,32
 400f5c0:	1887c83a 	sub	r3,r3,r2
 400f5c4:	18008f1e 	bne	r3,zero,400f804 <__udivdi3+0x418>
 400f5c8:	882ad43a 	srli	r21,r17,16
 400f5cc:	8461c83a 	sub	r16,r16,r17
 400f5d0:	8d3fffcc 	andi	r20,r17,65535
 400f5d4:	00c00044 	movi	r3,1
 400f5d8:	8009883a 	mov	r4,r16
 400f5dc:	a80b883a 	mov	r5,r21
 400f5e0:	d8c00015 	stw	r3,0(sp)
 400f5e4:	4005a340 	call	4005a34 <__umodsi3>
 400f5e8:	8009883a 	mov	r4,r16
 400f5ec:	a80b883a 	mov	r5,r21
 400f5f0:	1027883a 	mov	r19,r2
 400f5f4:	40059d00 	call	40059d0 <__udivsi3>
 400f5f8:	9826943a 	slli	r19,r19,16
 400f5fc:	9008d43a 	srli	r4,r18,16
 400f600:	1521383a 	mul	r16,r2,r20
 400f604:	102d883a 	mov	r22,r2
 400f608:	24c8b03a 	or	r4,r4,r19
 400f60c:	d8c00017 	ldw	r3,0(sp)
 400f610:	2400052e 	bgeu	r4,r16,400f628 <__udivdi3+0x23c>
 400f614:	2449883a 	add	r4,r4,r17
 400f618:	b0bfffc4 	addi	r2,r22,-1
 400f61c:	24400136 	bltu	r4,r17,400f624 <__udivdi3+0x238>
 400f620:	2400ca36 	bltu	r4,r16,400f94c <__udivdi3+0x560>
 400f624:	102d883a 	mov	r22,r2
 400f628:	2421c83a 	sub	r16,r4,r16
 400f62c:	a80b883a 	mov	r5,r21
 400f630:	8009883a 	mov	r4,r16
 400f634:	d8c00015 	stw	r3,0(sp)
 400f638:	4005a340 	call	4005a34 <__umodsi3>
 400f63c:	1027883a 	mov	r19,r2
 400f640:	a80b883a 	mov	r5,r21
 400f644:	8009883a 	mov	r4,r16
 400f648:	40059d00 	call	40059d0 <__udivsi3>
 400f64c:	9826943a 	slli	r19,r19,16
 400f650:	1529383a 	mul	r20,r2,r20
 400f654:	94bfffcc 	andi	r18,r18,65535
 400f658:	94e4b03a 	or	r18,r18,r19
 400f65c:	d8c00017 	ldw	r3,0(sp)
 400f660:	9500052e 	bgeu	r18,r20,400f678 <__udivdi3+0x28c>
 400f664:	8ca5883a 	add	r18,r17,r18
 400f668:	113fffc4 	addi	r4,r2,-1
 400f66c:	94409736 	bltu	r18,r17,400f8cc <__udivdi3+0x4e0>
 400f670:	9500962e 	bgeu	r18,r20,400f8cc <__udivdi3+0x4e0>
 400f674:	10bfff84 	addi	r2,r2,-2
 400f678:	b00c943a 	slli	r6,r22,16
 400f67c:	3084b03a 	or	r2,r6,r2
 400f680:	00000206 	br	400f68c <__udivdi3+0x2a0>
 400f684:	0007883a 	mov	r3,zero
 400f688:	0005883a 	mov	r2,zero
 400f68c:	dfc00a17 	ldw	ra,40(sp)
 400f690:	df000917 	ldw	fp,36(sp)
 400f694:	ddc00817 	ldw	r23,32(sp)
 400f698:	dd800717 	ldw	r22,28(sp)
 400f69c:	dd400617 	ldw	r21,24(sp)
 400f6a0:	dd000517 	ldw	r20,20(sp)
 400f6a4:	dcc00417 	ldw	r19,16(sp)
 400f6a8:	dc800317 	ldw	r18,12(sp)
 400f6ac:	dc400217 	ldw	r17,8(sp)
 400f6b0:	dc000117 	ldw	r16,4(sp)
 400f6b4:	dec00b04 	addi	sp,sp,44
 400f6b8:	f800283a 	ret
 400f6bc:	00803fc4 	movi	r2,255
 400f6c0:	11c5803a 	cmpltu	r2,r2,r7
 400f6c4:	100490fa 	slli	r2,r2,3
 400f6c8:	003f9e06 	br	400f544 <__alt_data_end+0xfc00f544>
 400f6cc:	00803fc4 	movi	r2,255
 400f6d0:	1445803a 	cmpltu	r2,r2,r17
 400f6d4:	100490fa 	slli	r2,r2,3
 400f6d8:	003fb206 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400f6dc:	00804034 	movhi	r2,256
 400f6e0:	10bfffc4 	addi	r2,r2,-1
 400f6e4:	11808836 	bltu	r2,r6,400f908 <__udivdi3+0x51c>
 400f6e8:	00800404 	movi	r2,16
 400f6ec:	003f5606 	br	400f448 <__alt_data_end+0xfc00f448>
 400f6f0:	30aed83a 	srl	r23,r6,r2
 400f6f4:	3d4e983a 	sll	r7,r7,r21
 400f6f8:	80acd83a 	srl	r22,r16,r2
 400f6fc:	9884d83a 	srl	r2,r19,r2
 400f700:	3deeb03a 	or	r23,r7,r23
 400f704:	b824d43a 	srli	r18,r23,16
 400f708:	8560983a 	sll	r16,r16,r21
 400f70c:	b009883a 	mov	r4,r22
 400f710:	900b883a 	mov	r5,r18
 400f714:	3568983a 	sll	r20,r6,r21
 400f718:	1420b03a 	or	r16,r2,r16
 400f71c:	4005a340 	call	4005a34 <__umodsi3>
 400f720:	b009883a 	mov	r4,r22
 400f724:	900b883a 	mov	r5,r18
 400f728:	1023883a 	mov	r17,r2
 400f72c:	40059d00 	call	40059d0 <__udivsi3>
 400f730:	8808943a 	slli	r4,r17,16
 400f734:	bf3fffcc 	andi	fp,r23,65535
 400f738:	8006d43a 	srli	r3,r16,16
 400f73c:	e0a3383a 	mul	r17,fp,r2
 400f740:	100d883a 	mov	r6,r2
 400f744:	1906b03a 	or	r3,r3,r4
 400f748:	1c40042e 	bgeu	r3,r17,400f75c <__udivdi3+0x370>
 400f74c:	1dc7883a 	add	r3,r3,r23
 400f750:	10bfffc4 	addi	r2,r2,-1
 400f754:	1dc0752e 	bgeu	r3,r23,400f92c <__udivdi3+0x540>
 400f758:	100d883a 	mov	r6,r2
 400f75c:	1c63c83a 	sub	r17,r3,r17
 400f760:	900b883a 	mov	r5,r18
 400f764:	8809883a 	mov	r4,r17
 400f768:	d9800015 	stw	r6,0(sp)
 400f76c:	4005a340 	call	4005a34 <__umodsi3>
 400f770:	102d883a 	mov	r22,r2
 400f774:	8809883a 	mov	r4,r17
 400f778:	900b883a 	mov	r5,r18
 400f77c:	40059d00 	call	40059d0 <__udivsi3>
 400f780:	b02c943a 	slli	r22,r22,16
 400f784:	e089383a 	mul	r4,fp,r2
 400f788:	843fffcc 	andi	r16,r16,65535
 400f78c:	85a0b03a 	or	r16,r16,r22
 400f790:	d9800017 	ldw	r6,0(sp)
 400f794:	8100042e 	bgeu	r16,r4,400f7a8 <__udivdi3+0x3bc>
 400f798:	85e1883a 	add	r16,r16,r23
 400f79c:	10ffffc4 	addi	r3,r2,-1
 400f7a0:	85c05e2e 	bgeu	r16,r23,400f91c <__udivdi3+0x530>
 400f7a4:	1805883a 	mov	r2,r3
 400f7a8:	300c943a 	slli	r6,r6,16
 400f7ac:	a17fffcc 	andi	r5,r20,65535
 400f7b0:	a028d43a 	srli	r20,r20,16
 400f7b4:	3084b03a 	or	r2,r6,r2
 400f7b8:	10ffffcc 	andi	r3,r2,65535
 400f7bc:	100cd43a 	srli	r6,r2,16
 400f7c0:	194f383a 	mul	r7,r3,r5
 400f7c4:	1d07383a 	mul	r3,r3,r20
 400f7c8:	314b383a 	mul	r5,r6,r5
 400f7cc:	3810d43a 	srli	r8,r7,16
 400f7d0:	8121c83a 	sub	r16,r16,r4
 400f7d4:	1947883a 	add	r3,r3,r5
 400f7d8:	40c7883a 	add	r3,r8,r3
 400f7dc:	350d383a 	mul	r6,r6,r20
 400f7e0:	1940022e 	bgeu	r3,r5,400f7ec <__udivdi3+0x400>
 400f7e4:	01000074 	movhi	r4,1
 400f7e8:	310d883a 	add	r6,r6,r4
 400f7ec:	1828d43a 	srli	r20,r3,16
 400f7f0:	a18d883a 	add	r6,r20,r6
 400f7f4:	81803e36 	bltu	r16,r6,400f8f0 <__udivdi3+0x504>
 400f7f8:	81803826 	beq	r16,r6,400f8dc <__udivdi3+0x4f0>
 400f7fc:	0007883a 	mov	r3,zero
 400f800:	003fa206 	br	400f68c <__alt_data_end+0xfc00f68c>
 400f804:	88e2983a 	sll	r17,r17,r3
 400f808:	80a8d83a 	srl	r20,r16,r2
 400f80c:	80e0983a 	sll	r16,r16,r3
 400f810:	882ad43a 	srli	r21,r17,16
 400f814:	9884d83a 	srl	r2,r19,r2
 400f818:	a009883a 	mov	r4,r20
 400f81c:	a80b883a 	mov	r5,r21
 400f820:	142eb03a 	or	r23,r2,r16
 400f824:	98e4983a 	sll	r18,r19,r3
 400f828:	4005a340 	call	4005a34 <__umodsi3>
 400f82c:	a009883a 	mov	r4,r20
 400f830:	a80b883a 	mov	r5,r21
 400f834:	1021883a 	mov	r16,r2
 400f838:	40059d00 	call	40059d0 <__udivsi3>
 400f83c:	1039883a 	mov	fp,r2
 400f840:	8d3fffcc 	andi	r20,r17,65535
 400f844:	8020943a 	slli	r16,r16,16
 400f848:	b804d43a 	srli	r2,r23,16
 400f84c:	a72d383a 	mul	r22,r20,fp
 400f850:	1404b03a 	or	r2,r2,r16
 400f854:	1580062e 	bgeu	r2,r22,400f870 <__udivdi3+0x484>
 400f858:	1445883a 	add	r2,r2,r17
 400f85c:	e0ffffc4 	addi	r3,fp,-1
 400f860:	14403836 	bltu	r2,r17,400f944 <__udivdi3+0x558>
 400f864:	1580372e 	bgeu	r2,r22,400f944 <__udivdi3+0x558>
 400f868:	e73fff84 	addi	fp,fp,-2
 400f86c:	1445883a 	add	r2,r2,r17
 400f870:	15adc83a 	sub	r22,r2,r22
 400f874:	a80b883a 	mov	r5,r21
 400f878:	b009883a 	mov	r4,r22
 400f87c:	4005a340 	call	4005a34 <__umodsi3>
 400f880:	1027883a 	mov	r19,r2
 400f884:	b009883a 	mov	r4,r22
 400f888:	a80b883a 	mov	r5,r21
 400f88c:	40059d00 	call	40059d0 <__udivsi3>
 400f890:	9826943a 	slli	r19,r19,16
 400f894:	a0a1383a 	mul	r16,r20,r2
 400f898:	b93fffcc 	andi	r4,r23,65535
 400f89c:	24c8b03a 	or	r4,r4,r19
 400f8a0:	2400062e 	bgeu	r4,r16,400f8bc <__udivdi3+0x4d0>
 400f8a4:	2449883a 	add	r4,r4,r17
 400f8a8:	10ffffc4 	addi	r3,r2,-1
 400f8ac:	24402336 	bltu	r4,r17,400f93c <__udivdi3+0x550>
 400f8b0:	2400222e 	bgeu	r4,r16,400f93c <__udivdi3+0x550>
 400f8b4:	10bfff84 	addi	r2,r2,-2
 400f8b8:	2449883a 	add	r4,r4,r17
 400f8bc:	e038943a 	slli	fp,fp,16
 400f8c0:	2421c83a 	sub	r16,r4,r16
 400f8c4:	e086b03a 	or	r3,fp,r2
 400f8c8:	003f4306 	br	400f5d8 <__alt_data_end+0xfc00f5d8>
 400f8cc:	2005883a 	mov	r2,r4
 400f8d0:	003f6906 	br	400f678 <__alt_data_end+0xfc00f678>
 400f8d4:	1805883a 	mov	r2,r3
 400f8d8:	003f0f06 	br	400f518 <__alt_data_end+0xfc00f518>
 400f8dc:	1806943a 	slli	r3,r3,16
 400f8e0:	9d66983a 	sll	r19,r19,r21
 400f8e4:	39ffffcc 	andi	r7,r7,65535
 400f8e8:	19c7883a 	add	r3,r3,r7
 400f8ec:	98ffc32e 	bgeu	r19,r3,400f7fc <__alt_data_end+0xfc00f7fc>
 400f8f0:	10bfffc4 	addi	r2,r2,-1
 400f8f4:	003fc106 	br	400f7fc <__alt_data_end+0xfc00f7fc>
 400f8f8:	00800604 	movi	r2,24
 400f8fc:	003f1106 	br	400f544 <__alt_data_end+0xfc00f544>
 400f900:	00800604 	movi	r2,24
 400f904:	003f2706 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400f908:	00800604 	movi	r2,24
 400f90c:	003ece06 	br	400f448 <__alt_data_end+0xfc00f448>
 400f910:	0007883a 	mov	r3,zero
 400f914:	00800044 	movi	r2,1
 400f918:	003f5c06 	br	400f68c <__alt_data_end+0xfc00f68c>
 400f91c:	813fa12e 	bgeu	r16,r4,400f7a4 <__alt_data_end+0xfc00f7a4>
 400f920:	10bfff84 	addi	r2,r2,-2
 400f924:	85e1883a 	add	r16,r16,r23
 400f928:	003f9f06 	br	400f7a8 <__alt_data_end+0xfc00f7a8>
 400f92c:	1c7f8a2e 	bgeu	r3,r17,400f758 <__alt_data_end+0xfc00f758>
 400f930:	31bfff84 	addi	r6,r6,-2
 400f934:	1dc7883a 	add	r3,r3,r23
 400f938:	003f8806 	br	400f75c <__alt_data_end+0xfc00f75c>
 400f93c:	1805883a 	mov	r2,r3
 400f940:	003fde06 	br	400f8bc <__alt_data_end+0xfc00f8bc>
 400f944:	1839883a 	mov	fp,r3
 400f948:	003fc906 	br	400f870 <__alt_data_end+0xfc00f870>
 400f94c:	b5bfff84 	addi	r22,r22,-2
 400f950:	2449883a 	add	r4,r4,r17
 400f954:	003f3406 	br	400f628 <__alt_data_end+0xfc00f628>
 400f958:	b5bfff84 	addi	r22,r22,-2
 400f95c:	1445883a 	add	r2,r2,r17
 400f960:	003edb06 	br	400f4d0 <__alt_data_end+0xfc00f4d0>

0400f964 <__umoddi3>:
 400f964:	defff404 	addi	sp,sp,-48
 400f968:	df000a15 	stw	fp,40(sp)
 400f96c:	dc400315 	stw	r17,12(sp)
 400f970:	dc000215 	stw	r16,8(sp)
 400f974:	dfc00b15 	stw	ra,44(sp)
 400f978:	ddc00915 	stw	r23,36(sp)
 400f97c:	dd800815 	stw	r22,32(sp)
 400f980:	dd400715 	stw	r21,28(sp)
 400f984:	dd000615 	stw	r20,24(sp)
 400f988:	dcc00515 	stw	r19,20(sp)
 400f98c:	dc800415 	stw	r18,16(sp)
 400f990:	2021883a 	mov	r16,r4
 400f994:	2823883a 	mov	r17,r5
 400f998:	2839883a 	mov	fp,r5
 400f99c:	38003c1e 	bne	r7,zero,400fa90 <__umoddi3+0x12c>
 400f9a0:	3027883a 	mov	r19,r6
 400f9a4:	2029883a 	mov	r20,r4
 400f9a8:	2980512e 	bgeu	r5,r6,400faf0 <__umoddi3+0x18c>
 400f9ac:	00bfffd4 	movui	r2,65535
 400f9b0:	11809a36 	bltu	r2,r6,400fc1c <__umoddi3+0x2b8>
 400f9b4:	01003fc4 	movi	r4,255
 400f9b8:	2189803a 	cmpltu	r4,r4,r6
 400f9bc:	200890fa 	slli	r4,r4,3
 400f9c0:	3104d83a 	srl	r2,r6,r4
 400f9c4:	00c10074 	movhi	r3,1025
 400f9c8:	18cb8a44 	addi	r3,r3,11817
 400f9cc:	1885883a 	add	r2,r3,r2
 400f9d0:	10c00003 	ldbu	r3,0(r2)
 400f9d4:	00800804 	movi	r2,32
 400f9d8:	1909883a 	add	r4,r3,r4
 400f9dc:	1125c83a 	sub	r18,r2,r4
 400f9e0:	90000526 	beq	r18,zero,400f9f8 <__umoddi3+0x94>
 400f9e4:	8ca2983a 	sll	r17,r17,r18
 400f9e8:	8108d83a 	srl	r4,r16,r4
 400f9ec:	34a6983a 	sll	r19,r6,r18
 400f9f0:	84a8983a 	sll	r20,r16,r18
 400f9f4:	2478b03a 	or	fp,r4,r17
 400f9f8:	982ed43a 	srli	r23,r19,16
 400f9fc:	e009883a 	mov	r4,fp
 400fa00:	9dbfffcc 	andi	r22,r19,65535
 400fa04:	b80b883a 	mov	r5,r23
 400fa08:	4005a340 	call	4005a34 <__umodsi3>
 400fa0c:	e009883a 	mov	r4,fp
 400fa10:	b80b883a 	mov	r5,r23
 400fa14:	102b883a 	mov	r21,r2
 400fa18:	40059d00 	call	40059d0 <__udivsi3>
 400fa1c:	a806943a 	slli	r3,r21,16
 400fa20:	a008d43a 	srli	r4,r20,16
 400fa24:	b085383a 	mul	r2,r22,r2
 400fa28:	20c8b03a 	or	r4,r4,r3
 400fa2c:	2080032e 	bgeu	r4,r2,400fa3c <__umoddi3+0xd8>
 400fa30:	24c9883a 	add	r4,r4,r19
 400fa34:	24c00136 	bltu	r4,r19,400fa3c <__umoddi3+0xd8>
 400fa38:	20811036 	bltu	r4,r2,400fe7c <__umoddi3+0x518>
 400fa3c:	20abc83a 	sub	r21,r4,r2
 400fa40:	b80b883a 	mov	r5,r23
 400fa44:	a809883a 	mov	r4,r21
 400fa48:	4005a340 	call	4005a34 <__umodsi3>
 400fa4c:	1023883a 	mov	r17,r2
 400fa50:	b80b883a 	mov	r5,r23
 400fa54:	a809883a 	mov	r4,r21
 400fa58:	40059d00 	call	40059d0 <__udivsi3>
 400fa5c:	8822943a 	slli	r17,r17,16
 400fa60:	b085383a 	mul	r2,r22,r2
 400fa64:	a0ffffcc 	andi	r3,r20,65535
 400fa68:	1c46b03a 	or	r3,r3,r17
 400fa6c:	1880042e 	bgeu	r3,r2,400fa80 <__umoddi3+0x11c>
 400fa70:	1cc7883a 	add	r3,r3,r19
 400fa74:	1cc00236 	bltu	r3,r19,400fa80 <__umoddi3+0x11c>
 400fa78:	1880012e 	bgeu	r3,r2,400fa80 <__umoddi3+0x11c>
 400fa7c:	1cc7883a 	add	r3,r3,r19
 400fa80:	1885c83a 	sub	r2,r3,r2
 400fa84:	1484d83a 	srl	r2,r2,r18
 400fa88:	0007883a 	mov	r3,zero
 400fa8c:	00004f06 	br	400fbcc <__umoddi3+0x268>
 400fa90:	29c04c36 	bltu	r5,r7,400fbc4 <__umoddi3+0x260>
 400fa94:	00bfffd4 	movui	r2,65535
 400fa98:	11c0582e 	bgeu	r2,r7,400fbfc <__umoddi3+0x298>
 400fa9c:	00804034 	movhi	r2,256
 400faa0:	10bfffc4 	addi	r2,r2,-1
 400faa4:	11c0e736 	bltu	r2,r7,400fe44 <__umoddi3+0x4e0>
 400faa8:	01000404 	movi	r4,16
 400faac:	3904d83a 	srl	r2,r7,r4
 400fab0:	00c10074 	movhi	r3,1025
 400fab4:	18cb8a44 	addi	r3,r3,11817
 400fab8:	1885883a 	add	r2,r3,r2
 400fabc:	14c00003 	ldbu	r19,0(r2)
 400fac0:	00c00804 	movi	r3,32
 400fac4:	9927883a 	add	r19,r19,r4
 400fac8:	1ce9c83a 	sub	r20,r3,r19
 400facc:	a000581e 	bne	r20,zero,400fc30 <__umoddi3+0x2cc>
 400fad0:	3c400136 	bltu	r7,r17,400fad8 <__umoddi3+0x174>
 400fad4:	8180eb36 	bltu	r16,r6,400fe84 <__umoddi3+0x520>
 400fad8:	8185c83a 	sub	r2,r16,r6
 400fadc:	89e3c83a 	sub	r17,r17,r7
 400fae0:	8089803a 	cmpltu	r4,r16,r2
 400fae4:	8939c83a 	sub	fp,r17,r4
 400fae8:	e007883a 	mov	r3,fp
 400faec:	00003706 	br	400fbcc <__umoddi3+0x268>
 400faf0:	3000041e 	bne	r6,zero,400fb04 <__umoddi3+0x1a0>
 400faf4:	000b883a 	mov	r5,zero
 400faf8:	01000044 	movi	r4,1
 400fafc:	40059d00 	call	40059d0 <__udivsi3>
 400fb00:	1027883a 	mov	r19,r2
 400fb04:	00bfffd4 	movui	r2,65535
 400fb08:	14c0402e 	bgeu	r2,r19,400fc0c <__umoddi3+0x2a8>
 400fb0c:	00804034 	movhi	r2,256
 400fb10:	10bfffc4 	addi	r2,r2,-1
 400fb14:	14c0cd36 	bltu	r2,r19,400fe4c <__umoddi3+0x4e8>
 400fb18:	00800404 	movi	r2,16
 400fb1c:	9886d83a 	srl	r3,r19,r2
 400fb20:	01010074 	movhi	r4,1025
 400fb24:	210b8a44 	addi	r4,r4,11817
 400fb28:	20c7883a 	add	r3,r4,r3
 400fb2c:	18c00003 	ldbu	r3,0(r3)
 400fb30:	1887883a 	add	r3,r3,r2
 400fb34:	00800804 	movi	r2,32
 400fb38:	10e5c83a 	sub	r18,r2,r3
 400fb3c:	9000901e 	bne	r18,zero,400fd80 <__umoddi3+0x41c>
 400fb40:	982cd43a 	srli	r22,r19,16
 400fb44:	8ce3c83a 	sub	r17,r17,r19
 400fb48:	9d7fffcc 	andi	r21,r19,65535
 400fb4c:	b00b883a 	mov	r5,r22
 400fb50:	8809883a 	mov	r4,r17
 400fb54:	4005a340 	call	4005a34 <__umodsi3>
 400fb58:	8809883a 	mov	r4,r17
 400fb5c:	b00b883a 	mov	r5,r22
 400fb60:	1021883a 	mov	r16,r2
 400fb64:	40059d00 	call	40059d0 <__udivsi3>
 400fb68:	8006943a 	slli	r3,r16,16
 400fb6c:	a008d43a 	srli	r4,r20,16
 400fb70:	1545383a 	mul	r2,r2,r21
 400fb74:	20c8b03a 	or	r4,r4,r3
 400fb78:	2080042e 	bgeu	r4,r2,400fb8c <__umoddi3+0x228>
 400fb7c:	24c9883a 	add	r4,r4,r19
 400fb80:	24c00236 	bltu	r4,r19,400fb8c <__umoddi3+0x228>
 400fb84:	2080012e 	bgeu	r4,r2,400fb8c <__umoddi3+0x228>
 400fb88:	24c9883a 	add	r4,r4,r19
 400fb8c:	20a1c83a 	sub	r16,r4,r2
 400fb90:	b00b883a 	mov	r5,r22
 400fb94:	8009883a 	mov	r4,r16
 400fb98:	4005a340 	call	4005a34 <__umodsi3>
 400fb9c:	1023883a 	mov	r17,r2
 400fba0:	b00b883a 	mov	r5,r22
 400fba4:	8009883a 	mov	r4,r16
 400fba8:	40059d00 	call	40059d0 <__udivsi3>
 400fbac:	8822943a 	slli	r17,r17,16
 400fbb0:	1545383a 	mul	r2,r2,r21
 400fbb4:	a53fffcc 	andi	r20,r20,65535
 400fbb8:	a446b03a 	or	r3,r20,r17
 400fbbc:	18bfb02e 	bgeu	r3,r2,400fa80 <__alt_data_end+0xfc00fa80>
 400fbc0:	003fab06 	br	400fa70 <__alt_data_end+0xfc00fa70>
 400fbc4:	2005883a 	mov	r2,r4
 400fbc8:	2807883a 	mov	r3,r5
 400fbcc:	dfc00b17 	ldw	ra,44(sp)
 400fbd0:	df000a17 	ldw	fp,40(sp)
 400fbd4:	ddc00917 	ldw	r23,36(sp)
 400fbd8:	dd800817 	ldw	r22,32(sp)
 400fbdc:	dd400717 	ldw	r21,28(sp)
 400fbe0:	dd000617 	ldw	r20,24(sp)
 400fbe4:	dcc00517 	ldw	r19,20(sp)
 400fbe8:	dc800417 	ldw	r18,16(sp)
 400fbec:	dc400317 	ldw	r17,12(sp)
 400fbf0:	dc000217 	ldw	r16,8(sp)
 400fbf4:	dec00c04 	addi	sp,sp,48
 400fbf8:	f800283a 	ret
 400fbfc:	04c03fc4 	movi	r19,255
 400fc00:	99c9803a 	cmpltu	r4,r19,r7
 400fc04:	200890fa 	slli	r4,r4,3
 400fc08:	003fa806 	br	400faac <__alt_data_end+0xfc00faac>
 400fc0c:	00803fc4 	movi	r2,255
 400fc10:	14c5803a 	cmpltu	r2,r2,r19
 400fc14:	100490fa 	slli	r2,r2,3
 400fc18:	003fc006 	br	400fb1c <__alt_data_end+0xfc00fb1c>
 400fc1c:	00804034 	movhi	r2,256
 400fc20:	10bfffc4 	addi	r2,r2,-1
 400fc24:	11808b36 	bltu	r2,r6,400fe54 <__umoddi3+0x4f0>
 400fc28:	01000404 	movi	r4,16
 400fc2c:	003f6406 	br	400f9c0 <__alt_data_end+0xfc00f9c0>
 400fc30:	34c4d83a 	srl	r2,r6,r19
 400fc34:	3d0e983a 	sll	r7,r7,r20
 400fc38:	8cf8d83a 	srl	fp,r17,r19
 400fc3c:	8d10983a 	sll	r8,r17,r20
 400fc40:	38aab03a 	or	r21,r7,r2
 400fc44:	a82cd43a 	srli	r22,r21,16
 400fc48:	84e2d83a 	srl	r17,r16,r19
 400fc4c:	e009883a 	mov	r4,fp
 400fc50:	b00b883a 	mov	r5,r22
 400fc54:	8a22b03a 	or	r17,r17,r8
 400fc58:	3524983a 	sll	r18,r6,r20
 400fc5c:	4005a340 	call	4005a34 <__umodsi3>
 400fc60:	e009883a 	mov	r4,fp
 400fc64:	b00b883a 	mov	r5,r22
 400fc68:	102f883a 	mov	r23,r2
 400fc6c:	40059d00 	call	40059d0 <__udivsi3>
 400fc70:	100d883a 	mov	r6,r2
 400fc74:	b808943a 	slli	r4,r23,16
 400fc78:	aa3fffcc 	andi	r8,r21,65535
 400fc7c:	8804d43a 	srli	r2,r17,16
 400fc80:	41af383a 	mul	r23,r8,r6
 400fc84:	8520983a 	sll	r16,r16,r20
 400fc88:	1104b03a 	or	r2,r2,r4
 400fc8c:	15c0042e 	bgeu	r2,r23,400fca0 <__umoddi3+0x33c>
 400fc90:	1545883a 	add	r2,r2,r21
 400fc94:	30ffffc4 	addi	r3,r6,-1
 400fc98:	1540742e 	bgeu	r2,r21,400fe6c <__umoddi3+0x508>
 400fc9c:	180d883a 	mov	r6,r3
 400fca0:	15efc83a 	sub	r23,r2,r23
 400fca4:	b00b883a 	mov	r5,r22
 400fca8:	b809883a 	mov	r4,r23
 400fcac:	d9800115 	stw	r6,4(sp)
 400fcb0:	da000015 	stw	r8,0(sp)
 400fcb4:	4005a340 	call	4005a34 <__umodsi3>
 400fcb8:	b00b883a 	mov	r5,r22
 400fcbc:	b809883a 	mov	r4,r23
 400fcc0:	1039883a 	mov	fp,r2
 400fcc4:	40059d00 	call	40059d0 <__udivsi3>
 400fcc8:	da000017 	ldw	r8,0(sp)
 400fccc:	e038943a 	slli	fp,fp,16
 400fcd0:	100b883a 	mov	r5,r2
 400fcd4:	4089383a 	mul	r4,r8,r2
 400fcd8:	8a3fffcc 	andi	r8,r17,65535
 400fcdc:	4710b03a 	or	r8,r8,fp
 400fce0:	d9800117 	ldw	r6,4(sp)
 400fce4:	4100042e 	bgeu	r8,r4,400fcf8 <__umoddi3+0x394>
 400fce8:	4551883a 	add	r8,r8,r21
 400fcec:	10bfffc4 	addi	r2,r2,-1
 400fcf0:	45405a2e 	bgeu	r8,r21,400fe5c <__umoddi3+0x4f8>
 400fcf4:	100b883a 	mov	r5,r2
 400fcf8:	300c943a 	slli	r6,r6,16
 400fcfc:	91ffffcc 	andi	r7,r18,65535
 400fd00:	9004d43a 	srli	r2,r18,16
 400fd04:	314cb03a 	or	r6,r6,r5
 400fd08:	317fffcc 	andi	r5,r6,65535
 400fd0c:	300cd43a 	srli	r6,r6,16
 400fd10:	29d3383a 	mul	r9,r5,r7
 400fd14:	288b383a 	mul	r5,r5,r2
 400fd18:	31cf383a 	mul	r7,r6,r7
 400fd1c:	4806d43a 	srli	r3,r9,16
 400fd20:	4111c83a 	sub	r8,r8,r4
 400fd24:	29cb883a 	add	r5,r5,r7
 400fd28:	194b883a 	add	r5,r3,r5
 400fd2c:	3085383a 	mul	r2,r6,r2
 400fd30:	29c0022e 	bgeu	r5,r7,400fd3c <__umoddi3+0x3d8>
 400fd34:	00c00074 	movhi	r3,1
 400fd38:	10c5883a 	add	r2,r2,r3
 400fd3c:	2808d43a 	srli	r4,r5,16
 400fd40:	280a943a 	slli	r5,r5,16
 400fd44:	4a7fffcc 	andi	r9,r9,65535
 400fd48:	2085883a 	add	r2,r4,r2
 400fd4c:	2a4b883a 	add	r5,r5,r9
 400fd50:	40803636 	bltu	r8,r2,400fe2c <__umoddi3+0x4c8>
 400fd54:	40804d26 	beq	r8,r2,400fe8c <__umoddi3+0x528>
 400fd58:	4089c83a 	sub	r4,r8,r2
 400fd5c:	280f883a 	mov	r7,r5
 400fd60:	81cfc83a 	sub	r7,r16,r7
 400fd64:	81c7803a 	cmpltu	r3,r16,r7
 400fd68:	20c7c83a 	sub	r3,r4,r3
 400fd6c:	1cc4983a 	sll	r2,r3,r19
 400fd70:	3d0ed83a 	srl	r7,r7,r20
 400fd74:	1d06d83a 	srl	r3,r3,r20
 400fd78:	11c4b03a 	or	r2,r2,r7
 400fd7c:	003f9306 	br	400fbcc <__alt_data_end+0xfc00fbcc>
 400fd80:	9ca6983a 	sll	r19,r19,r18
 400fd84:	88e8d83a 	srl	r20,r17,r3
 400fd88:	80c4d83a 	srl	r2,r16,r3
 400fd8c:	982cd43a 	srli	r22,r19,16
 400fd90:	8ca2983a 	sll	r17,r17,r18
 400fd94:	a009883a 	mov	r4,r20
 400fd98:	b00b883a 	mov	r5,r22
 400fd9c:	1478b03a 	or	fp,r2,r17
 400fda0:	4005a340 	call	4005a34 <__umodsi3>
 400fda4:	a009883a 	mov	r4,r20
 400fda8:	b00b883a 	mov	r5,r22
 400fdac:	1023883a 	mov	r17,r2
 400fdb0:	40059d00 	call	40059d0 <__udivsi3>
 400fdb4:	9d7fffcc 	andi	r21,r19,65535
 400fdb8:	880a943a 	slli	r5,r17,16
 400fdbc:	e008d43a 	srli	r4,fp,16
 400fdc0:	a885383a 	mul	r2,r21,r2
 400fdc4:	84a8983a 	sll	r20,r16,r18
 400fdc8:	2148b03a 	or	r4,r4,r5
 400fdcc:	2080042e 	bgeu	r4,r2,400fde0 <__umoddi3+0x47c>
 400fdd0:	24c9883a 	add	r4,r4,r19
 400fdd4:	24c00236 	bltu	r4,r19,400fde0 <__umoddi3+0x47c>
 400fdd8:	2080012e 	bgeu	r4,r2,400fde0 <__umoddi3+0x47c>
 400fddc:	24c9883a 	add	r4,r4,r19
 400fde0:	20a3c83a 	sub	r17,r4,r2
 400fde4:	b00b883a 	mov	r5,r22
 400fde8:	8809883a 	mov	r4,r17
 400fdec:	4005a340 	call	4005a34 <__umodsi3>
 400fdf0:	102f883a 	mov	r23,r2
 400fdf4:	8809883a 	mov	r4,r17
 400fdf8:	b00b883a 	mov	r5,r22
 400fdfc:	40059d00 	call	40059d0 <__udivsi3>
 400fe00:	b82e943a 	slli	r23,r23,16
 400fe04:	a885383a 	mul	r2,r21,r2
 400fe08:	e13fffcc 	andi	r4,fp,65535
 400fe0c:	25c8b03a 	or	r4,r4,r23
 400fe10:	2080042e 	bgeu	r4,r2,400fe24 <__umoddi3+0x4c0>
 400fe14:	24c9883a 	add	r4,r4,r19
 400fe18:	24c00236 	bltu	r4,r19,400fe24 <__umoddi3+0x4c0>
 400fe1c:	2080012e 	bgeu	r4,r2,400fe24 <__umoddi3+0x4c0>
 400fe20:	24c9883a 	add	r4,r4,r19
 400fe24:	20a3c83a 	sub	r17,r4,r2
 400fe28:	003f4806 	br	400fb4c <__alt_data_end+0xfc00fb4c>
 400fe2c:	2c8fc83a 	sub	r7,r5,r18
 400fe30:	1545c83a 	sub	r2,r2,r21
 400fe34:	29cb803a 	cmpltu	r5,r5,r7
 400fe38:	1145c83a 	sub	r2,r2,r5
 400fe3c:	4089c83a 	sub	r4,r8,r2
 400fe40:	003fc706 	br	400fd60 <__alt_data_end+0xfc00fd60>
 400fe44:	01000604 	movi	r4,24
 400fe48:	003f1806 	br	400faac <__alt_data_end+0xfc00faac>
 400fe4c:	00800604 	movi	r2,24
 400fe50:	003f3206 	br	400fb1c <__alt_data_end+0xfc00fb1c>
 400fe54:	01000604 	movi	r4,24
 400fe58:	003ed906 	br	400f9c0 <__alt_data_end+0xfc00f9c0>
 400fe5c:	413fa52e 	bgeu	r8,r4,400fcf4 <__alt_data_end+0xfc00fcf4>
 400fe60:	297fff84 	addi	r5,r5,-2
 400fe64:	4551883a 	add	r8,r8,r21
 400fe68:	003fa306 	br	400fcf8 <__alt_data_end+0xfc00fcf8>
 400fe6c:	15ff8b2e 	bgeu	r2,r23,400fc9c <__alt_data_end+0xfc00fc9c>
 400fe70:	31bfff84 	addi	r6,r6,-2
 400fe74:	1545883a 	add	r2,r2,r21
 400fe78:	003f8906 	br	400fca0 <__alt_data_end+0xfc00fca0>
 400fe7c:	24c9883a 	add	r4,r4,r19
 400fe80:	003eee06 	br	400fa3c <__alt_data_end+0xfc00fa3c>
 400fe84:	8005883a 	mov	r2,r16
 400fe88:	003f1706 	br	400fae8 <__alt_data_end+0xfc00fae8>
 400fe8c:	817fe736 	bltu	r16,r5,400fe2c <__alt_data_end+0xfc00fe2c>
 400fe90:	280f883a 	mov	r7,r5
 400fe94:	0009883a 	mov	r4,zero
 400fe98:	003fb106 	br	400fd60 <__alt_data_end+0xfc00fd60>

0400fe9c <__floatunsidf>:
 400fe9c:	defffe04 	addi	sp,sp,-8
 400fea0:	dc000015 	stw	r16,0(sp)
 400fea4:	dfc00115 	stw	ra,4(sp)
 400fea8:	2021883a 	mov	r16,r4
 400feac:	20002226 	beq	r4,zero,400ff38 <__floatunsidf+0x9c>
 400feb0:	40058740 	call	4005874 <__clzsi2>
 400feb4:	01010784 	movi	r4,1054
 400feb8:	2089c83a 	sub	r4,r4,r2
 400febc:	01810cc4 	movi	r6,1075
 400fec0:	310dc83a 	sub	r6,r6,r4
 400fec4:	00c007c4 	movi	r3,31
 400fec8:	1980120e 	bge	r3,r6,400ff14 <__floatunsidf+0x78>
 400fecc:	00c104c4 	movi	r3,1043
 400fed0:	1907c83a 	sub	r3,r3,r4
 400fed4:	80ca983a 	sll	r5,r16,r3
 400fed8:	00800434 	movhi	r2,16
 400fedc:	10bfffc4 	addi	r2,r2,-1
 400fee0:	2101ffcc 	andi	r4,r4,2047
 400fee4:	0021883a 	mov	r16,zero
 400fee8:	288a703a 	and	r5,r5,r2
 400feec:	2008953a 	slli	r4,r4,20
 400fef0:	00c00434 	movhi	r3,16
 400fef4:	18ffffc4 	addi	r3,r3,-1
 400fef8:	28c6703a 	and	r3,r5,r3
 400fefc:	8005883a 	mov	r2,r16
 400ff00:	1906b03a 	or	r3,r3,r4
 400ff04:	dfc00117 	ldw	ra,4(sp)
 400ff08:	dc000017 	ldw	r16,0(sp)
 400ff0c:	dec00204 	addi	sp,sp,8
 400ff10:	f800283a 	ret
 400ff14:	00c002c4 	movi	r3,11
 400ff18:	188bc83a 	sub	r5,r3,r2
 400ff1c:	814ad83a 	srl	r5,r16,r5
 400ff20:	00c00434 	movhi	r3,16
 400ff24:	18ffffc4 	addi	r3,r3,-1
 400ff28:	81a0983a 	sll	r16,r16,r6
 400ff2c:	2101ffcc 	andi	r4,r4,2047
 400ff30:	28ca703a 	and	r5,r5,r3
 400ff34:	003fed06 	br	400feec <__alt_data_end+0xfc00feec>
 400ff38:	0009883a 	mov	r4,zero
 400ff3c:	000b883a 	mov	r5,zero
 400ff40:	003fea06 	br	400feec <__alt_data_end+0xfc00feec>

0400ff44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ff44:	defffe04 	addi	sp,sp,-8
 400ff48:	dfc00115 	stw	ra,4(sp)
 400ff4c:	df000015 	stw	fp,0(sp)
 400ff50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ff54:	d0a03217 	ldw	r2,-32568(gp)
 400ff58:	10000326 	beq	r2,zero,400ff68 <alt_get_errno+0x24>
 400ff5c:	d0a03217 	ldw	r2,-32568(gp)
 400ff60:	103ee83a 	callr	r2
 400ff64:	00000106 	br	400ff6c <alt_get_errno+0x28>
 400ff68:	d0a72004 	addi	r2,gp,-25472
}
 400ff6c:	e037883a 	mov	sp,fp
 400ff70:	dfc00117 	ldw	ra,4(sp)
 400ff74:	df000017 	ldw	fp,0(sp)
 400ff78:	dec00204 	addi	sp,sp,8
 400ff7c:	f800283a 	ret

0400ff80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400ff80:	defffb04 	addi	sp,sp,-20
 400ff84:	dfc00415 	stw	ra,16(sp)
 400ff88:	df000315 	stw	fp,12(sp)
 400ff8c:	df000304 	addi	fp,sp,12
 400ff90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400ff94:	e0bfff17 	ldw	r2,-4(fp)
 400ff98:	10000616 	blt	r2,zero,400ffb4 <close+0x34>
 400ff9c:	e0bfff17 	ldw	r2,-4(fp)
 400ffa0:	10c00324 	muli	r3,r2,12
 400ffa4:	00810074 	movhi	r2,1025
 400ffa8:	108ebc04 	addi	r2,r2,15088
 400ffac:	1885883a 	add	r2,r3,r2
 400ffb0:	00000106 	br	400ffb8 <close+0x38>
 400ffb4:	0005883a 	mov	r2,zero
 400ffb8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400ffbc:	e0bffd17 	ldw	r2,-12(fp)
 400ffc0:	10001926 	beq	r2,zero,4010028 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400ffc4:	e0bffd17 	ldw	r2,-12(fp)
 400ffc8:	10800017 	ldw	r2,0(r2)
 400ffcc:	10800417 	ldw	r2,16(r2)
 400ffd0:	10000626 	beq	r2,zero,400ffec <close+0x6c>
 400ffd4:	e0bffd17 	ldw	r2,-12(fp)
 400ffd8:	10800017 	ldw	r2,0(r2)
 400ffdc:	10800417 	ldw	r2,16(r2)
 400ffe0:	e13ffd17 	ldw	r4,-12(fp)
 400ffe4:	103ee83a 	callr	r2
 400ffe8:	00000106 	br	400fff0 <close+0x70>
 400ffec:	0005883a 	mov	r2,zero
 400fff0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400fff4:	e13fff17 	ldw	r4,-4(fp)
 400fff8:	40108340 	call	4010834 <alt_release_fd>
    if (rval < 0)
 400fffc:	e0bffe17 	ldw	r2,-8(fp)
 4010000:	1000070e 	bge	r2,zero,4010020 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4010004:	400ff440 	call	400ff44 <alt_get_errno>
 4010008:	1007883a 	mov	r3,r2
 401000c:	e0bffe17 	ldw	r2,-8(fp)
 4010010:	0085c83a 	sub	r2,zero,r2
 4010014:	18800015 	stw	r2,0(r3)
      return -1;
 4010018:	00bfffc4 	movi	r2,-1
 401001c:	00000706 	br	401003c <close+0xbc>
    }
    return 0;
 4010020:	0005883a 	mov	r2,zero
 4010024:	00000506 	br	401003c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010028:	400ff440 	call	400ff44 <alt_get_errno>
 401002c:	1007883a 	mov	r3,r2
 4010030:	00801444 	movi	r2,81
 4010034:	18800015 	stw	r2,0(r3)
    return -1;
 4010038:	00bfffc4 	movi	r2,-1
  }
}
 401003c:	e037883a 	mov	sp,fp
 4010040:	dfc00117 	ldw	ra,4(sp)
 4010044:	df000017 	ldw	fp,0(sp)
 4010048:	dec00204 	addi	sp,sp,8
 401004c:	f800283a 	ret

04010050 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4010050:	defffc04 	addi	sp,sp,-16
 4010054:	df000315 	stw	fp,12(sp)
 4010058:	df000304 	addi	fp,sp,12
 401005c:	e13ffd15 	stw	r4,-12(fp)
 4010060:	e17ffe15 	stw	r5,-8(fp)
 4010064:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4010068:	e0bfff17 	ldw	r2,-4(fp)
}
 401006c:	e037883a 	mov	sp,fp
 4010070:	df000017 	ldw	fp,0(sp)
 4010074:	dec00104 	addi	sp,sp,4
 4010078:	f800283a 	ret

0401007c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401007c:	defffe04 	addi	sp,sp,-8
 4010080:	dfc00115 	stw	ra,4(sp)
 4010084:	df000015 	stw	fp,0(sp)
 4010088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401008c:	d0a03217 	ldw	r2,-32568(gp)
 4010090:	10000326 	beq	r2,zero,40100a0 <alt_get_errno+0x24>
 4010094:	d0a03217 	ldw	r2,-32568(gp)
 4010098:	103ee83a 	callr	r2
 401009c:	00000106 	br	40100a4 <alt_get_errno+0x28>
 40100a0:	d0a72004 	addi	r2,gp,-25472
}
 40100a4:	e037883a 	mov	sp,fp
 40100a8:	dfc00117 	ldw	ra,4(sp)
 40100ac:	df000017 	ldw	fp,0(sp)
 40100b0:	dec00204 	addi	sp,sp,8
 40100b4:	f800283a 	ret

040100b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40100b8:	defffb04 	addi	sp,sp,-20
 40100bc:	dfc00415 	stw	ra,16(sp)
 40100c0:	df000315 	stw	fp,12(sp)
 40100c4:	df000304 	addi	fp,sp,12
 40100c8:	e13ffe15 	stw	r4,-8(fp)
 40100cc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40100d0:	e0bffe17 	ldw	r2,-8(fp)
 40100d4:	10000616 	blt	r2,zero,40100f0 <fstat+0x38>
 40100d8:	e0bffe17 	ldw	r2,-8(fp)
 40100dc:	10c00324 	muli	r3,r2,12
 40100e0:	00810074 	movhi	r2,1025
 40100e4:	108ebc04 	addi	r2,r2,15088
 40100e8:	1885883a 	add	r2,r3,r2
 40100ec:	00000106 	br	40100f4 <fstat+0x3c>
 40100f0:	0005883a 	mov	r2,zero
 40100f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40100f8:	e0bffd17 	ldw	r2,-12(fp)
 40100fc:	10001026 	beq	r2,zero,4010140 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4010100:	e0bffd17 	ldw	r2,-12(fp)
 4010104:	10800017 	ldw	r2,0(r2)
 4010108:	10800817 	ldw	r2,32(r2)
 401010c:	10000726 	beq	r2,zero,401012c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4010110:	e0bffd17 	ldw	r2,-12(fp)
 4010114:	10800017 	ldw	r2,0(r2)
 4010118:	10800817 	ldw	r2,32(r2)
 401011c:	e17fff17 	ldw	r5,-4(fp)
 4010120:	e13ffd17 	ldw	r4,-12(fp)
 4010124:	103ee83a 	callr	r2
 4010128:	00000a06 	br	4010154 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401012c:	e0bfff17 	ldw	r2,-4(fp)
 4010130:	00c80004 	movi	r3,8192
 4010134:	10c00115 	stw	r3,4(r2)
      return 0;
 4010138:	0005883a 	mov	r2,zero
 401013c:	00000506 	br	4010154 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010140:	401007c0 	call	401007c <alt_get_errno>
 4010144:	1007883a 	mov	r3,r2
 4010148:	00801444 	movi	r2,81
 401014c:	18800015 	stw	r2,0(r3)
    return -1;
 4010150:	00bfffc4 	movi	r2,-1
  }
}
 4010154:	e037883a 	mov	sp,fp
 4010158:	dfc00117 	ldw	ra,4(sp)
 401015c:	df000017 	ldw	fp,0(sp)
 4010160:	dec00204 	addi	sp,sp,8
 4010164:	f800283a 	ret

04010168 <gettimeofday>:
 4010168:	defff404 	addi	sp,sp,-48
 401016c:	dfc00b15 	stw	ra,44(sp)
 4010170:	df000a15 	stw	fp,40(sp)
 4010174:	dd000915 	stw	r20,36(sp)
 4010178:	dcc00815 	stw	r19,32(sp)
 401017c:	dc800715 	stw	r18,28(sp)
 4010180:	dc400615 	stw	r17,24(sp)
 4010184:	dc000515 	stw	r16,20(sp)
 4010188:	df000a04 	addi	fp,sp,40
 401018c:	e13ff915 	stw	r4,-28(fp)
 4010190:	e17ffa15 	stw	r5,-24(fp)
 4010194:	e0bffa17 	ldw	r2,-24(fp)
 4010198:	e0bff615 	stw	r2,-40(fp)
 401019c:	d0a72f17 	ldw	r2,-25412(gp)
 40101a0:	e0bff715 	stw	r2,-36(fp)
 40101a4:	d0a72e17 	ldw	r2,-25416(gp)
 40101a8:	e0bff815 	stw	r2,-32(fp)
 40101ac:	e0bff817 	ldw	r2,-32(fp)
 40101b0:	10005f26 	beq	r2,zero,4010330 <gettimeofday+0x1c8>
 40101b4:	d0a72917 	ldw	r2,-25436(gp)
 40101b8:	1029883a 	mov	r20,r2
 40101bc:	e17ff817 	ldw	r5,-32(fp)
 40101c0:	e13ff717 	ldw	r4,-36(fp)
 40101c4:	40059d00 	call	40059d0 <__udivsi3>
 40101c8:	a085883a 	add	r2,r20,r2
 40101cc:	1007883a 	mov	r3,r2
 40101d0:	e0bff917 	ldw	r2,-28(fp)
 40101d4:	10c00015 	stw	r3,0(r2)
 40101d8:	d0a72a17 	ldw	r2,-25432(gp)
 40101dc:	1029883a 	mov	r20,r2
 40101e0:	e0bff717 	ldw	r2,-36(fp)
 40101e4:	1021883a 	mov	r16,r2
 40101e8:	0023883a 	mov	r17,zero
 40101ec:	e17ff817 	ldw	r5,-32(fp)
 40101f0:	010003f4 	movhi	r4,15
 40101f4:	21109004 	addi	r4,r4,16960
 40101f8:	40059d00 	call	40059d0 <__udivsi3>
 40101fc:	1025883a 	mov	r18,r2
 4010200:	0027883a 	mov	r19,zero
 4010204:	900d883a 	mov	r6,r18
 4010208:	980f883a 	mov	r7,r19
 401020c:	8009883a 	mov	r4,r16
 4010210:	880b883a 	mov	r5,r17
 4010214:	400f38c0 	call	400f38c <__muldi3>
 4010218:	1009883a 	mov	r4,r2
 401021c:	180b883a 	mov	r5,r3
 4010220:	2005883a 	mov	r2,r4
 4010224:	2807883a 	mov	r3,r5
 4010228:	018003f4 	movhi	r6,15
 401022c:	31909004 	addi	r6,r6,16960
 4010230:	000f883a 	mov	r7,zero
 4010234:	1009883a 	mov	r4,r2
 4010238:	180b883a 	mov	r5,r3
 401023c:	400f9640 	call	400f964 <__umoddi3>
 4010240:	1009883a 	mov	r4,r2
 4010244:	180b883a 	mov	r5,r3
 4010248:	2005883a 	mov	r2,r4
 401024c:	2807883a 	mov	r3,r5
 4010250:	a085883a 	add	r2,r20,r2
 4010254:	1007883a 	mov	r3,r2
 4010258:	e0bff917 	ldw	r2,-28(fp)
 401025c:	10c00115 	stw	r3,4(r2)
 4010260:	00001406 	br	40102b4 <gettimeofday+0x14c>
 4010264:	e0bff917 	ldw	r2,-28(fp)
 4010268:	10800017 	ldw	r2,0(r2)
 401026c:	00800516 	blt	zero,r2,4010284 <gettimeofday+0x11c>
 4010270:	e0bff917 	ldw	r2,-28(fp)
 4010274:	10000015 	stw	zero,0(r2)
 4010278:	e0bff917 	ldw	r2,-28(fp)
 401027c:	10000115 	stw	zero,4(r2)
 4010280:	00000f06 	br	40102c0 <gettimeofday+0x158>
 4010284:	e0bff917 	ldw	r2,-28(fp)
 4010288:	10800017 	ldw	r2,0(r2)
 401028c:	10ffffc4 	addi	r3,r2,-1
 4010290:	e0bff917 	ldw	r2,-28(fp)
 4010294:	10c00015 	stw	r3,0(r2)
 4010298:	e0bff917 	ldw	r2,-28(fp)
 401029c:	10c00117 	ldw	r3,4(r2)
 40102a0:	008003f4 	movhi	r2,15
 40102a4:	10909004 	addi	r2,r2,16960
 40102a8:	1887883a 	add	r3,r3,r2
 40102ac:	e0bff917 	ldw	r2,-28(fp)
 40102b0:	10c00115 	stw	r3,4(r2)
 40102b4:	e0bff917 	ldw	r2,-28(fp)
 40102b8:	10800117 	ldw	r2,4(r2)
 40102bc:	103fe916 	blt	r2,zero,4010264 <__alt_data_end+0xfc010264>
 40102c0:	00000c06 	br	40102f4 <gettimeofday+0x18c>
 40102c4:	e0bff917 	ldw	r2,-28(fp)
 40102c8:	10800017 	ldw	r2,0(r2)
 40102cc:	10c00044 	addi	r3,r2,1
 40102d0:	e0bff917 	ldw	r2,-28(fp)
 40102d4:	10c00015 	stw	r3,0(r2)
 40102d8:	e0bff917 	ldw	r2,-28(fp)
 40102dc:	10c00117 	ldw	r3,4(r2)
 40102e0:	00bffc74 	movhi	r2,65521
 40102e4:	10af7004 	addi	r2,r2,-16960
 40102e8:	1887883a 	add	r3,r3,r2
 40102ec:	e0bff917 	ldw	r2,-28(fp)
 40102f0:	10c00115 	stw	r3,4(r2)
 40102f4:	e0bff917 	ldw	r2,-28(fp)
 40102f8:	10c00117 	ldw	r3,4(r2)
 40102fc:	008003f4 	movhi	r2,15
 4010300:	10908fc4 	addi	r2,r2,16959
 4010304:	10ffef16 	blt	r2,r3,40102c4 <__alt_data_end+0xfc0102c4>
 4010308:	e0bff617 	ldw	r2,-40(fp)
 401030c:	10000626 	beq	r2,zero,4010328 <gettimeofday+0x1c0>
 4010310:	d0e72717 	ldw	r3,-25444(gp)
 4010314:	e0bff617 	ldw	r2,-40(fp)
 4010318:	10c00015 	stw	r3,0(r2)
 401031c:	d0e72817 	ldw	r3,-25440(gp)
 4010320:	e0bff617 	ldw	r2,-40(fp)
 4010324:	10c00115 	stw	r3,4(r2)
 4010328:	0005883a 	mov	r2,zero
 401032c:	00000106 	br	4010334 <gettimeofday+0x1cc>
 4010330:	00bfde84 	movi	r2,-134
 4010334:	e6fffb04 	addi	sp,fp,-20
 4010338:	dfc00617 	ldw	ra,24(sp)
 401033c:	df000517 	ldw	fp,20(sp)
 4010340:	dd000417 	ldw	r20,16(sp)
 4010344:	dcc00317 	ldw	r19,12(sp)
 4010348:	dc800217 	ldw	r18,8(sp)
 401034c:	dc400117 	ldw	r17,4(sp)
 4010350:	dc000017 	ldw	r16,0(sp)
 4010354:	dec00704 	addi	sp,sp,28
 4010358:	f800283a 	ret

0401035c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401035c:	defffe04 	addi	sp,sp,-8
 4010360:	dfc00115 	stw	ra,4(sp)
 4010364:	df000015 	stw	fp,0(sp)
 4010368:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401036c:	d0a03217 	ldw	r2,-32568(gp)
 4010370:	10000326 	beq	r2,zero,4010380 <alt_get_errno+0x24>
 4010374:	d0a03217 	ldw	r2,-32568(gp)
 4010378:	103ee83a 	callr	r2
 401037c:	00000106 	br	4010384 <alt_get_errno+0x28>
 4010380:	d0a72004 	addi	r2,gp,-25472
}
 4010384:	e037883a 	mov	sp,fp
 4010388:	dfc00117 	ldw	ra,4(sp)
 401038c:	df000017 	ldw	fp,0(sp)
 4010390:	dec00204 	addi	sp,sp,8
 4010394:	f800283a 	ret

04010398 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4010398:	deffed04 	addi	sp,sp,-76
 401039c:	dfc01215 	stw	ra,72(sp)
 40103a0:	df001115 	stw	fp,68(sp)
 40103a4:	df001104 	addi	fp,sp,68
 40103a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40103ac:	e0bfff17 	ldw	r2,-4(fp)
 40103b0:	10000616 	blt	r2,zero,40103cc <isatty+0x34>
 40103b4:	e0bfff17 	ldw	r2,-4(fp)
 40103b8:	10c00324 	muli	r3,r2,12
 40103bc:	00810074 	movhi	r2,1025
 40103c0:	108ebc04 	addi	r2,r2,15088
 40103c4:	1885883a 	add	r2,r3,r2
 40103c8:	00000106 	br	40103d0 <isatty+0x38>
 40103cc:	0005883a 	mov	r2,zero
 40103d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40103d4:	e0bfef17 	ldw	r2,-68(fp)
 40103d8:	10000e26 	beq	r2,zero,4010414 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40103dc:	e0bfef17 	ldw	r2,-68(fp)
 40103e0:	10800017 	ldw	r2,0(r2)
 40103e4:	10800817 	ldw	r2,32(r2)
 40103e8:	1000021e 	bne	r2,zero,40103f4 <isatty+0x5c>
    {
      return 1;
 40103ec:	00800044 	movi	r2,1
 40103f0:	00000d06 	br	4010428 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40103f4:	e0bff004 	addi	r2,fp,-64
 40103f8:	100b883a 	mov	r5,r2
 40103fc:	e13fff17 	ldw	r4,-4(fp)
 4010400:	40100b80 	call	40100b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4010404:	e0bff117 	ldw	r2,-60(fp)
 4010408:	10880020 	cmpeqi	r2,r2,8192
 401040c:	10803fcc 	andi	r2,r2,255
 4010410:	00000506 	br	4010428 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010414:	401035c0 	call	401035c <alt_get_errno>
 4010418:	1007883a 	mov	r3,r2
 401041c:	00801444 	movi	r2,81
 4010420:	18800015 	stw	r2,0(r3)
    return 0;
 4010424:	0005883a 	mov	r2,zero
  }
}
 4010428:	e037883a 	mov	sp,fp
 401042c:	dfc00117 	ldw	ra,4(sp)
 4010430:	df000017 	ldw	fp,0(sp)
 4010434:	dec00204 	addi	sp,sp,8
 4010438:	f800283a 	ret

0401043c <alt_load_section>:
 401043c:	defffc04 	addi	sp,sp,-16
 4010440:	df000315 	stw	fp,12(sp)
 4010444:	df000304 	addi	fp,sp,12
 4010448:	e13ffd15 	stw	r4,-12(fp)
 401044c:	e17ffe15 	stw	r5,-8(fp)
 4010450:	e1bfff15 	stw	r6,-4(fp)
 4010454:	e0fffe17 	ldw	r3,-8(fp)
 4010458:	e0bffd17 	ldw	r2,-12(fp)
 401045c:	18800c26 	beq	r3,r2,4010490 <alt_load_section+0x54>
 4010460:	00000806 	br	4010484 <alt_load_section+0x48>
 4010464:	e0bffe17 	ldw	r2,-8(fp)
 4010468:	10c00104 	addi	r3,r2,4
 401046c:	e0fffe15 	stw	r3,-8(fp)
 4010470:	e0fffd17 	ldw	r3,-12(fp)
 4010474:	19000104 	addi	r4,r3,4
 4010478:	e13ffd15 	stw	r4,-12(fp)
 401047c:	18c00017 	ldw	r3,0(r3)
 4010480:	10c00015 	stw	r3,0(r2)
 4010484:	e0fffe17 	ldw	r3,-8(fp)
 4010488:	e0bfff17 	ldw	r2,-4(fp)
 401048c:	18bff51e 	bne	r3,r2,4010464 <__alt_data_end+0xfc010464>
 4010490:	0001883a 	nop
 4010494:	e037883a 	mov	sp,fp
 4010498:	df000017 	ldw	fp,0(sp)
 401049c:	dec00104 	addi	sp,sp,4
 40104a0:	f800283a 	ret

040104a4 <alt_load>:
 40104a4:	defffe04 	addi	sp,sp,-8
 40104a8:	dfc00115 	stw	ra,4(sp)
 40104ac:	df000015 	stw	fp,0(sp)
 40104b0:	d839883a 	mov	fp,sp
 40104b4:	01810074 	movhi	r6,1025
 40104b8:	31936b04 	addi	r6,r6,19884
 40104bc:	01410074 	movhi	r5,1025
 40104c0:	294c8904 	addi	r5,r5,12836
 40104c4:	01010074 	movhi	r4,1025
 40104c8:	21136b04 	addi	r4,r4,19884
 40104cc:	401043c0 	call	401043c <alt_load_section>
 40104d0:	01810034 	movhi	r6,1024
 40104d4:	31809104 	addi	r6,r6,580
 40104d8:	01410034 	movhi	r5,1024
 40104dc:	29400804 	addi	r5,r5,32
 40104e0:	01010034 	movhi	r4,1024
 40104e4:	21000804 	addi	r4,r4,32
 40104e8:	401043c0 	call	401043c <alt_load_section>
 40104ec:	01810074 	movhi	r6,1025
 40104f0:	318c8904 	addi	r6,r6,12836
 40104f4:	01410074 	movhi	r5,1025
 40104f8:	294b5b04 	addi	r5,r5,11628
 40104fc:	01010074 	movhi	r4,1025
 4010500:	210b5b04 	addi	r4,r4,11628
 4010504:	401043c0 	call	401043c <alt_load_section>
 4010508:	4011c000 	call	4011c00 <alt_dcache_flush_all>
 401050c:	4011de80 	call	4011de8 <alt_icache_flush_all>
 4010510:	0001883a 	nop
 4010514:	e037883a 	mov	sp,fp
 4010518:	dfc00117 	ldw	ra,4(sp)
 401051c:	df000017 	ldw	fp,0(sp)
 4010520:	dec00204 	addi	sp,sp,8
 4010524:	f800283a 	ret

04010528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010528:	defffe04 	addi	sp,sp,-8
 401052c:	dfc00115 	stw	ra,4(sp)
 4010530:	df000015 	stw	fp,0(sp)
 4010534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010538:	d0a03217 	ldw	r2,-32568(gp)
 401053c:	10000326 	beq	r2,zero,401054c <alt_get_errno+0x24>
 4010540:	d0a03217 	ldw	r2,-32568(gp)
 4010544:	103ee83a 	callr	r2
 4010548:	00000106 	br	4010550 <alt_get_errno+0x28>
 401054c:	d0a72004 	addi	r2,gp,-25472
}
 4010550:	e037883a 	mov	sp,fp
 4010554:	dfc00117 	ldw	ra,4(sp)
 4010558:	df000017 	ldw	fp,0(sp)
 401055c:	dec00204 	addi	sp,sp,8
 4010560:	f800283a 	ret

04010564 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4010564:	defff904 	addi	sp,sp,-28
 4010568:	dfc00615 	stw	ra,24(sp)
 401056c:	df000515 	stw	fp,20(sp)
 4010570:	df000504 	addi	fp,sp,20
 4010574:	e13ffd15 	stw	r4,-12(fp)
 4010578:	e17ffe15 	stw	r5,-8(fp)
 401057c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4010580:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010584:	e0bffd17 	ldw	r2,-12(fp)
 4010588:	10000616 	blt	r2,zero,40105a4 <lseek+0x40>
 401058c:	e0bffd17 	ldw	r2,-12(fp)
 4010590:	10c00324 	muli	r3,r2,12
 4010594:	00810074 	movhi	r2,1025
 4010598:	108ebc04 	addi	r2,r2,15088
 401059c:	1885883a 	add	r2,r3,r2
 40105a0:	00000106 	br	40105a8 <lseek+0x44>
 40105a4:	0005883a 	mov	r2,zero
 40105a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40105ac:	e0bffc17 	ldw	r2,-16(fp)
 40105b0:	10001026 	beq	r2,zero,40105f4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40105b4:	e0bffc17 	ldw	r2,-16(fp)
 40105b8:	10800017 	ldw	r2,0(r2)
 40105bc:	10800717 	ldw	r2,28(r2)
 40105c0:	10000926 	beq	r2,zero,40105e8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40105c4:	e0bffc17 	ldw	r2,-16(fp)
 40105c8:	10800017 	ldw	r2,0(r2)
 40105cc:	10800717 	ldw	r2,28(r2)
 40105d0:	e1bfff17 	ldw	r6,-4(fp)
 40105d4:	e17ffe17 	ldw	r5,-8(fp)
 40105d8:	e13ffc17 	ldw	r4,-16(fp)
 40105dc:	103ee83a 	callr	r2
 40105e0:	e0bffb15 	stw	r2,-20(fp)
 40105e4:	00000506 	br	40105fc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40105e8:	00bfde84 	movi	r2,-134
 40105ec:	e0bffb15 	stw	r2,-20(fp)
 40105f0:	00000206 	br	40105fc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 40105f4:	00bfebc4 	movi	r2,-81
 40105f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40105fc:	e0bffb17 	ldw	r2,-20(fp)
 4010600:	1000070e 	bge	r2,zero,4010620 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4010604:	40105280 	call	4010528 <alt_get_errno>
 4010608:	1007883a 	mov	r3,r2
 401060c:	e0bffb17 	ldw	r2,-20(fp)
 4010610:	0085c83a 	sub	r2,zero,r2
 4010614:	18800015 	stw	r2,0(r3)
    rc = -1;
 4010618:	00bfffc4 	movi	r2,-1
 401061c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4010620:	e0bffb17 	ldw	r2,-20(fp)
}
 4010624:	e037883a 	mov	sp,fp
 4010628:	dfc00117 	ldw	ra,4(sp)
 401062c:	df000017 	ldw	fp,0(sp)
 4010630:	dec00204 	addi	sp,sp,8
 4010634:	f800283a 	ret

04010638 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4010638:	defffd04 	addi	sp,sp,-12
 401063c:	dfc00215 	stw	ra,8(sp)
 4010640:	df000115 	stw	fp,4(sp)
 4010644:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4010648:	0009883a 	mov	r4,zero
 401064c:	4010c540 	call	4010c54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4010650:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4010654:	4010c8c0 	call	4010c8c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4010658:	01810074 	movhi	r6,1025
 401065c:	318c4104 	addi	r6,r6,12548
 4010660:	01410074 	movhi	r5,1025
 4010664:	294c4104 	addi	r5,r5,12548
 4010668:	01010074 	movhi	r4,1025
 401066c:	210c4104 	addi	r4,r4,12548
 4010670:	40121800 	call	4012180 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4010674:	4011d280 	call	4011d28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4010678:	01010074 	movhi	r4,1025
 401067c:	21076204 	addi	r4,r4,7560
 4010680:	40129680 	call	4012968 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4010684:	d0a72b17 	ldw	r2,-25428(gp)
 4010688:	d0e72c17 	ldw	r3,-25424(gp)
 401068c:	d1272d17 	ldw	r4,-25420(gp)
 4010690:	200d883a 	mov	r6,r4
 4010694:	180b883a 	mov	r5,r3
 4010698:	1009883a 	mov	r4,r2
 401069c:	40012cc0 	call	40012cc <main>
 40106a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40106a4:	01000044 	movi	r4,1
 40106a8:	400ff800 	call	400ff80 <close>
  exit (result);
 40106ac:	e13fff17 	ldw	r4,-4(fp)
 40106b0:	401297c0 	call	401297c <exit>

040106b4 <__malloc_lock>:
 40106b4:	defffe04 	addi	sp,sp,-8
 40106b8:	df000115 	stw	fp,4(sp)
 40106bc:	df000104 	addi	fp,sp,4
 40106c0:	e13fff15 	stw	r4,-4(fp)
 40106c4:	0001883a 	nop
 40106c8:	e037883a 	mov	sp,fp
 40106cc:	df000017 	ldw	fp,0(sp)
 40106d0:	dec00104 	addi	sp,sp,4
 40106d4:	f800283a 	ret

040106d8 <__malloc_unlock>:
 40106d8:	defffe04 	addi	sp,sp,-8
 40106dc:	df000115 	stw	fp,4(sp)
 40106e0:	df000104 	addi	fp,sp,4
 40106e4:	e13fff15 	stw	r4,-4(fp)
 40106e8:	0001883a 	nop
 40106ec:	e037883a 	mov	sp,fp
 40106f0:	df000017 	ldw	fp,0(sp)
 40106f4:	dec00104 	addi	sp,sp,4
 40106f8:	f800283a 	ret

040106fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40106fc:	defffe04 	addi	sp,sp,-8
 4010700:	dfc00115 	stw	ra,4(sp)
 4010704:	df000015 	stw	fp,0(sp)
 4010708:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401070c:	d0a03217 	ldw	r2,-32568(gp)
 4010710:	10000326 	beq	r2,zero,4010720 <alt_get_errno+0x24>
 4010714:	d0a03217 	ldw	r2,-32568(gp)
 4010718:	103ee83a 	callr	r2
 401071c:	00000106 	br	4010724 <alt_get_errno+0x28>
 4010720:	d0a72004 	addi	r2,gp,-25472
}
 4010724:	e037883a 	mov	sp,fp
 4010728:	dfc00117 	ldw	ra,4(sp)
 401072c:	df000017 	ldw	fp,0(sp)
 4010730:	dec00204 	addi	sp,sp,8
 4010734:	f800283a 	ret

04010738 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4010738:	defff904 	addi	sp,sp,-28
 401073c:	dfc00615 	stw	ra,24(sp)
 4010740:	df000515 	stw	fp,20(sp)
 4010744:	df000504 	addi	fp,sp,20
 4010748:	e13ffd15 	stw	r4,-12(fp)
 401074c:	e17ffe15 	stw	r5,-8(fp)
 4010750:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010754:	e0bffd17 	ldw	r2,-12(fp)
 4010758:	10000616 	blt	r2,zero,4010774 <read+0x3c>
 401075c:	e0bffd17 	ldw	r2,-12(fp)
 4010760:	10c00324 	muli	r3,r2,12
 4010764:	00810074 	movhi	r2,1025
 4010768:	108ebc04 	addi	r2,r2,15088
 401076c:	1885883a 	add	r2,r3,r2
 4010770:	00000106 	br	4010778 <read+0x40>
 4010774:	0005883a 	mov	r2,zero
 4010778:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401077c:	e0bffb17 	ldw	r2,-20(fp)
 4010780:	10002226 	beq	r2,zero,401080c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4010784:	e0bffb17 	ldw	r2,-20(fp)
 4010788:	10800217 	ldw	r2,8(r2)
 401078c:	108000cc 	andi	r2,r2,3
 4010790:	10800060 	cmpeqi	r2,r2,1
 4010794:	1000181e 	bne	r2,zero,40107f8 <read+0xc0>
        (fd->dev->read))
 4010798:	e0bffb17 	ldw	r2,-20(fp)
 401079c:	10800017 	ldw	r2,0(r2)
 40107a0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40107a4:	10001426 	beq	r2,zero,40107f8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40107a8:	e0bffb17 	ldw	r2,-20(fp)
 40107ac:	10800017 	ldw	r2,0(r2)
 40107b0:	10800517 	ldw	r2,20(r2)
 40107b4:	e0ffff17 	ldw	r3,-4(fp)
 40107b8:	180d883a 	mov	r6,r3
 40107bc:	e17ffe17 	ldw	r5,-8(fp)
 40107c0:	e13ffb17 	ldw	r4,-20(fp)
 40107c4:	103ee83a 	callr	r2
 40107c8:	e0bffc15 	stw	r2,-16(fp)
 40107cc:	e0bffc17 	ldw	r2,-16(fp)
 40107d0:	1000070e 	bge	r2,zero,40107f0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 40107d4:	40106fc0 	call	40106fc <alt_get_errno>
 40107d8:	1007883a 	mov	r3,r2
 40107dc:	e0bffc17 	ldw	r2,-16(fp)
 40107e0:	0085c83a 	sub	r2,zero,r2
 40107e4:	18800015 	stw	r2,0(r3)
          return -1;
 40107e8:	00bfffc4 	movi	r2,-1
 40107ec:	00000c06 	br	4010820 <read+0xe8>
        }
        return rval;
 40107f0:	e0bffc17 	ldw	r2,-16(fp)
 40107f4:	00000a06 	br	4010820 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40107f8:	40106fc0 	call	40106fc <alt_get_errno>
 40107fc:	1007883a 	mov	r3,r2
 4010800:	00800344 	movi	r2,13
 4010804:	18800015 	stw	r2,0(r3)
 4010808:	00000406 	br	401081c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401080c:	40106fc0 	call	40106fc <alt_get_errno>
 4010810:	1007883a 	mov	r3,r2
 4010814:	00801444 	movi	r2,81
 4010818:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401081c:	00bfffc4 	movi	r2,-1
}
 4010820:	e037883a 	mov	sp,fp
 4010824:	dfc00117 	ldw	ra,4(sp)
 4010828:	df000017 	ldw	fp,0(sp)
 401082c:	dec00204 	addi	sp,sp,8
 4010830:	f800283a 	ret

04010834 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4010834:	defffe04 	addi	sp,sp,-8
 4010838:	df000115 	stw	fp,4(sp)
 401083c:	df000104 	addi	fp,sp,4
 4010840:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4010844:	e0bfff17 	ldw	r2,-4(fp)
 4010848:	108000d0 	cmplti	r2,r2,3
 401084c:	10000d1e 	bne	r2,zero,4010884 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4010850:	00810074 	movhi	r2,1025
 4010854:	108ebc04 	addi	r2,r2,15088
 4010858:	e0ffff17 	ldw	r3,-4(fp)
 401085c:	18c00324 	muli	r3,r3,12
 4010860:	10c5883a 	add	r2,r2,r3
 4010864:	10800204 	addi	r2,r2,8
 4010868:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401086c:	00810074 	movhi	r2,1025
 4010870:	108ebc04 	addi	r2,r2,15088
 4010874:	e0ffff17 	ldw	r3,-4(fp)
 4010878:	18c00324 	muli	r3,r3,12
 401087c:	10c5883a 	add	r2,r2,r3
 4010880:	10000015 	stw	zero,0(r2)
  }
}
 4010884:	0001883a 	nop
 4010888:	e037883a 	mov	sp,fp
 401088c:	df000017 	ldw	fp,0(sp)
 4010890:	dec00104 	addi	sp,sp,4
 4010894:	f800283a 	ret

04010898 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4010898:	defff904 	addi	sp,sp,-28
 401089c:	df000615 	stw	fp,24(sp)
 40108a0:	df000604 	addi	fp,sp,24
 40108a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40108a8:	0005303a 	rdctl	r2,status
 40108ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40108b0:	e0fffe17 	ldw	r3,-8(fp)
 40108b4:	00bfff84 	movi	r2,-2
 40108b8:	1884703a 	and	r2,r3,r2
 40108bc:	1001703a 	wrctl	status,r2
  
  return context;
 40108c0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40108c4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40108c8:	d0a03317 	ldw	r2,-32564(gp)
 40108cc:	10c000c4 	addi	r3,r2,3
 40108d0:	00bfff04 	movi	r2,-4
 40108d4:	1884703a 	and	r2,r3,r2
 40108d8:	d0a03315 	stw	r2,-32564(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40108dc:	d0e03317 	ldw	r3,-32564(gp)
 40108e0:	e0bfff17 	ldw	r2,-4(fp)
 40108e4:	1887883a 	add	r3,r3,r2
 40108e8:	00820034 	movhi	r2,2048
 40108ec:	10800004 	addi	r2,r2,0
 40108f0:	10c0062e 	bgeu	r2,r3,401090c <sbrk+0x74>
 40108f4:	e0bffb17 	ldw	r2,-20(fp)
 40108f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40108fc:	e0bffa17 	ldw	r2,-24(fp)
 4010900:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4010904:	00bfffc4 	movi	r2,-1
 4010908:	00000b06 	br	4010938 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401090c:	d0a03317 	ldw	r2,-32564(gp)
 4010910:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4010914:	d0e03317 	ldw	r3,-32564(gp)
 4010918:	e0bfff17 	ldw	r2,-4(fp)
 401091c:	1885883a 	add	r2,r3,r2
 4010920:	d0a03315 	stw	r2,-32564(gp)
 4010924:	e0bffb17 	ldw	r2,-20(fp)
 4010928:	e0bffc15 	stw	r2,-16(fp)
 401092c:	e0bffc17 	ldw	r2,-16(fp)
 4010930:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4010934:	e0bffd17 	ldw	r2,-12(fp)
} 
 4010938:	e037883a 	mov	sp,fp
 401093c:	df000017 	ldw	fp,0(sp)
 4010940:	dec00104 	addi	sp,sp,4
 4010944:	f800283a 	ret

04010948 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4010948:	defffa04 	addi	sp,sp,-24
 401094c:	df000515 	stw	fp,20(sp)
 4010950:	df000504 	addi	fp,sp,20
 4010954:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010958:	0005303a 	rdctl	r2,status
 401095c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010960:	e0fffc17 	ldw	r3,-16(fp)
 4010964:	00bfff84 	movi	r2,-2
 4010968:	1884703a 	and	r2,r3,r2
 401096c:	1001703a 	wrctl	status,r2
  
  return context;
 4010970:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4010974:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4010978:	e0bfff17 	ldw	r2,-4(fp)
 401097c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4010980:	e0bffd17 	ldw	r2,-12(fp)
 4010984:	10800017 	ldw	r2,0(r2)
 4010988:	e0fffd17 	ldw	r3,-12(fp)
 401098c:	18c00117 	ldw	r3,4(r3)
 4010990:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4010994:	e0bffd17 	ldw	r2,-12(fp)
 4010998:	10800117 	ldw	r2,4(r2)
 401099c:	e0fffd17 	ldw	r3,-12(fp)
 40109a0:	18c00017 	ldw	r3,0(r3)
 40109a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40109a8:	e0bffd17 	ldw	r2,-12(fp)
 40109ac:	e0fffd17 	ldw	r3,-12(fp)
 40109b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40109b4:	e0bffd17 	ldw	r2,-12(fp)
 40109b8:	e0fffd17 	ldw	r3,-12(fp)
 40109bc:	10c00015 	stw	r3,0(r2)
 40109c0:	e0bffb17 	ldw	r2,-20(fp)
 40109c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40109c8:	e0bffe17 	ldw	r2,-8(fp)
 40109cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40109d0:	0001883a 	nop
 40109d4:	e037883a 	mov	sp,fp
 40109d8:	df000017 	ldw	fp,0(sp)
 40109dc:	dec00104 	addi	sp,sp,4
 40109e0:	f800283a 	ret

040109e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40109e4:	defffb04 	addi	sp,sp,-20
 40109e8:	dfc00415 	stw	ra,16(sp)
 40109ec:	df000315 	stw	fp,12(sp)
 40109f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40109f4:	d0a03417 	ldw	r2,-32560(gp)
 40109f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40109fc:	d0a72f17 	ldw	r2,-25412(gp)
 4010a00:	10800044 	addi	r2,r2,1
 4010a04:	d0a72f15 	stw	r2,-25412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4010a08:	00002e06 	br	4010ac4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4010a0c:	e0bffd17 	ldw	r2,-12(fp)
 4010a10:	10800017 	ldw	r2,0(r2)
 4010a14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4010a18:	e0bffd17 	ldw	r2,-12(fp)
 4010a1c:	10800403 	ldbu	r2,16(r2)
 4010a20:	10803fcc 	andi	r2,r2,255
 4010a24:	10000426 	beq	r2,zero,4010a38 <alt_tick+0x54>
 4010a28:	d0a72f17 	ldw	r2,-25412(gp)
 4010a2c:	1000021e 	bne	r2,zero,4010a38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4010a30:	e0bffd17 	ldw	r2,-12(fp)
 4010a34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4010a38:	e0bffd17 	ldw	r2,-12(fp)
 4010a3c:	10800217 	ldw	r2,8(r2)
 4010a40:	d0e72f17 	ldw	r3,-25412(gp)
 4010a44:	18801d36 	bltu	r3,r2,4010abc <alt_tick+0xd8>
 4010a48:	e0bffd17 	ldw	r2,-12(fp)
 4010a4c:	10800403 	ldbu	r2,16(r2)
 4010a50:	10803fcc 	andi	r2,r2,255
 4010a54:	1000191e 	bne	r2,zero,4010abc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4010a58:	e0bffd17 	ldw	r2,-12(fp)
 4010a5c:	10800317 	ldw	r2,12(r2)
 4010a60:	e0fffd17 	ldw	r3,-12(fp)
 4010a64:	18c00517 	ldw	r3,20(r3)
 4010a68:	1809883a 	mov	r4,r3
 4010a6c:	103ee83a 	callr	r2
 4010a70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4010a74:	e0bfff17 	ldw	r2,-4(fp)
 4010a78:	1000031e 	bne	r2,zero,4010a88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4010a7c:	e13ffd17 	ldw	r4,-12(fp)
 4010a80:	40109480 	call	4010948 <alt_alarm_stop>
 4010a84:	00000d06 	br	4010abc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4010a88:	e0bffd17 	ldw	r2,-12(fp)
 4010a8c:	10c00217 	ldw	r3,8(r2)
 4010a90:	e0bfff17 	ldw	r2,-4(fp)
 4010a94:	1887883a 	add	r3,r3,r2
 4010a98:	e0bffd17 	ldw	r2,-12(fp)
 4010a9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4010aa0:	e0bffd17 	ldw	r2,-12(fp)
 4010aa4:	10c00217 	ldw	r3,8(r2)
 4010aa8:	d0a72f17 	ldw	r2,-25412(gp)
 4010aac:	1880032e 	bgeu	r3,r2,4010abc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4010ab0:	e0bffd17 	ldw	r2,-12(fp)
 4010ab4:	00c00044 	movi	r3,1
 4010ab8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4010abc:	e0bffe17 	ldw	r2,-8(fp)
 4010ac0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4010ac4:	e0fffd17 	ldw	r3,-12(fp)
 4010ac8:	d0a03404 	addi	r2,gp,-32560
 4010acc:	18bfcf1e 	bne	r3,r2,4010a0c <__alt_data_end+0xfc010a0c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4010ad0:	0001883a 	nop
}
 4010ad4:	0001883a 	nop
 4010ad8:	e037883a 	mov	sp,fp
 4010adc:	dfc00117 	ldw	ra,4(sp)
 4010ae0:	df000017 	ldw	fp,0(sp)
 4010ae4:	dec00204 	addi	sp,sp,8
 4010ae8:	f800283a 	ret

04010aec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010aec:	defffe04 	addi	sp,sp,-8
 4010af0:	dfc00115 	stw	ra,4(sp)
 4010af4:	df000015 	stw	fp,0(sp)
 4010af8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010afc:	d0a03217 	ldw	r2,-32568(gp)
 4010b00:	10000326 	beq	r2,zero,4010b10 <alt_get_errno+0x24>
 4010b04:	d0a03217 	ldw	r2,-32568(gp)
 4010b08:	103ee83a 	callr	r2
 4010b0c:	00000106 	br	4010b14 <alt_get_errno+0x28>
 4010b10:	d0a72004 	addi	r2,gp,-25472
}
 4010b14:	e037883a 	mov	sp,fp
 4010b18:	dfc00117 	ldw	ra,4(sp)
 4010b1c:	df000017 	ldw	fp,0(sp)
 4010b20:	dec00204 	addi	sp,sp,8
 4010b24:	f800283a 	ret

04010b28 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4010b28:	defff904 	addi	sp,sp,-28
 4010b2c:	dfc00615 	stw	ra,24(sp)
 4010b30:	df000515 	stw	fp,20(sp)
 4010b34:	df000504 	addi	fp,sp,20
 4010b38:	e13ffd15 	stw	r4,-12(fp)
 4010b3c:	e17ffe15 	stw	r5,-8(fp)
 4010b40:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010b44:	e0bffd17 	ldw	r2,-12(fp)
 4010b48:	10000616 	blt	r2,zero,4010b64 <write+0x3c>
 4010b4c:	e0bffd17 	ldw	r2,-12(fp)
 4010b50:	10c00324 	muli	r3,r2,12
 4010b54:	00810074 	movhi	r2,1025
 4010b58:	108ebc04 	addi	r2,r2,15088
 4010b5c:	1885883a 	add	r2,r3,r2
 4010b60:	00000106 	br	4010b68 <write+0x40>
 4010b64:	0005883a 	mov	r2,zero
 4010b68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4010b6c:	e0bffb17 	ldw	r2,-20(fp)
 4010b70:	10002126 	beq	r2,zero,4010bf8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4010b74:	e0bffb17 	ldw	r2,-20(fp)
 4010b78:	10800217 	ldw	r2,8(r2)
 4010b7c:	108000cc 	andi	r2,r2,3
 4010b80:	10001826 	beq	r2,zero,4010be4 <write+0xbc>
 4010b84:	e0bffb17 	ldw	r2,-20(fp)
 4010b88:	10800017 	ldw	r2,0(r2)
 4010b8c:	10800617 	ldw	r2,24(r2)
 4010b90:	10001426 	beq	r2,zero,4010be4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4010b94:	e0bffb17 	ldw	r2,-20(fp)
 4010b98:	10800017 	ldw	r2,0(r2)
 4010b9c:	10800617 	ldw	r2,24(r2)
 4010ba0:	e0ffff17 	ldw	r3,-4(fp)
 4010ba4:	180d883a 	mov	r6,r3
 4010ba8:	e17ffe17 	ldw	r5,-8(fp)
 4010bac:	e13ffb17 	ldw	r4,-20(fp)
 4010bb0:	103ee83a 	callr	r2
 4010bb4:	e0bffc15 	stw	r2,-16(fp)
 4010bb8:	e0bffc17 	ldw	r2,-16(fp)
 4010bbc:	1000070e 	bge	r2,zero,4010bdc <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4010bc0:	4010aec0 	call	4010aec <alt_get_errno>
 4010bc4:	1007883a 	mov	r3,r2
 4010bc8:	e0bffc17 	ldw	r2,-16(fp)
 4010bcc:	0085c83a 	sub	r2,zero,r2
 4010bd0:	18800015 	stw	r2,0(r3)
        return -1;
 4010bd4:	00bfffc4 	movi	r2,-1
 4010bd8:	00000c06 	br	4010c0c <write+0xe4>
      }
      return rval;
 4010bdc:	e0bffc17 	ldw	r2,-16(fp)
 4010be0:	00000a06 	br	4010c0c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4010be4:	4010aec0 	call	4010aec <alt_get_errno>
 4010be8:	1007883a 	mov	r3,r2
 4010bec:	00800344 	movi	r2,13
 4010bf0:	18800015 	stw	r2,0(r3)
 4010bf4:	00000406 	br	4010c08 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4010bf8:	4010aec0 	call	4010aec <alt_get_errno>
 4010bfc:	1007883a 	mov	r3,r2
 4010c00:	00801444 	movi	r2,81
 4010c04:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4010c08:	00bfffc4 	movi	r2,-1
}
 4010c0c:	e037883a 	mov	sp,fp
 4010c10:	dfc00117 	ldw	ra,4(sp)
 4010c14:	df000017 	ldw	fp,0(sp)
 4010c18:	dec00204 	addi	sp,sp,8
 4010c1c:	f800283a 	ret

04010c20 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4010c20:	defffd04 	addi	sp,sp,-12
 4010c24:	dfc00215 	stw	ra,8(sp)
 4010c28:	df000115 	stw	fp,4(sp)
 4010c2c:	df000104 	addi	fp,sp,4
 4010c30:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4010c34:	d1602f04 	addi	r5,gp,-32580
 4010c38:	e13fff17 	ldw	r4,-4(fp)
 4010c3c:	4011c840 	call	4011c84 <alt_dev_llist_insert>
}
 4010c40:	e037883a 	mov	sp,fp
 4010c44:	dfc00117 	ldw	ra,4(sp)
 4010c48:	df000017 	ldw	fp,0(sp)
 4010c4c:	dec00204 	addi	sp,sp,8
 4010c50:	f800283a 	ret

04010c54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4010c54:	defffd04 	addi	sp,sp,-12
 4010c58:	dfc00215 	stw	ra,8(sp)
 4010c5c:	df000115 	stw	fp,4(sp)
 4010c60:	df000104 	addi	fp,sp,4
 4010c64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 4010c68:	40124500 	call	4012450 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4010c6c:	00800044 	movi	r2,1
 4010c70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4010c74:	0001883a 	nop
 4010c78:	e037883a 	mov	sp,fp
 4010c7c:	dfc00117 	ldw	ra,4(sp)
 4010c80:	df000017 	ldw	fp,0(sp)
 4010c84:	dec00204 	addi	sp,sp,8
 4010c88:	f800283a 	ret

04010c8c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4010c8c:	defffe04 	addi	sp,sp,-8
 4010c90:	dfc00115 	stw	ra,4(sp)
 4010c94:	df000015 	stw	fp,0(sp)
 4010c98:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4010c9c:	01c0fa04 	movi	r7,1000
 4010ca0:	01800044 	movi	r6,1
 4010ca4:	000b883a 	mov	r5,zero
 4010ca8:	01020034 	movhi	r4,2048
 4010cac:	40117d80 	call	40117d8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4010cb0:	000d883a 	mov	r6,zero
 4010cb4:	000b883a 	mov	r5,zero
 4010cb8:	01010074 	movhi	r4,1025
 4010cbc:	210f2604 	addi	r4,r4,15512
 4010cc0:	4010e5c0 	call	4010e5c <altera_avalon_jtag_uart_init>
 4010cc4:	01010074 	movhi	r4,1025
 4010cc8:	210f1c04 	addi	r4,r4,15472
 4010ccc:	4010c200 	call	4010c20 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 4010cd0:	00800044 	movi	r2,1
 4010cd4:	0007883a 	mov	r3,zero
 4010cd8:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4010cdc:	0001883a 	nop
}
 4010ce0:	0001883a 	nop
 4010ce4:	e037883a 	mov	sp,fp
 4010ce8:	dfc00117 	ldw	ra,4(sp)
 4010cec:	df000017 	ldw	fp,0(sp)
 4010cf0:	dec00204 	addi	sp,sp,8
 4010cf4:	f800283a 	ret

04010cf8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4010cf8:	defffa04 	addi	sp,sp,-24
 4010cfc:	dfc00515 	stw	ra,20(sp)
 4010d00:	df000415 	stw	fp,16(sp)
 4010d04:	df000404 	addi	fp,sp,16
 4010d08:	e13ffd15 	stw	r4,-12(fp)
 4010d0c:	e17ffe15 	stw	r5,-8(fp)
 4010d10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010d14:	e0bffd17 	ldw	r2,-12(fp)
 4010d18:	10800017 	ldw	r2,0(r2)
 4010d1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4010d20:	e0bffc17 	ldw	r2,-16(fp)
 4010d24:	10c00a04 	addi	r3,r2,40
 4010d28:	e0bffd17 	ldw	r2,-12(fp)
 4010d2c:	10800217 	ldw	r2,8(r2)
 4010d30:	100f883a 	mov	r7,r2
 4010d34:	e1bfff17 	ldw	r6,-4(fp)
 4010d38:	e17ffe17 	ldw	r5,-8(fp)
 4010d3c:	1809883a 	mov	r4,r3
 4010d40:	40113200 	call	4011320 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4010d44:	e037883a 	mov	sp,fp
 4010d48:	dfc00117 	ldw	ra,4(sp)
 4010d4c:	df000017 	ldw	fp,0(sp)
 4010d50:	dec00204 	addi	sp,sp,8
 4010d54:	f800283a 	ret

04010d58 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4010d58:	defffa04 	addi	sp,sp,-24
 4010d5c:	dfc00515 	stw	ra,20(sp)
 4010d60:	df000415 	stw	fp,16(sp)
 4010d64:	df000404 	addi	fp,sp,16
 4010d68:	e13ffd15 	stw	r4,-12(fp)
 4010d6c:	e17ffe15 	stw	r5,-8(fp)
 4010d70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010d74:	e0bffd17 	ldw	r2,-12(fp)
 4010d78:	10800017 	ldw	r2,0(r2)
 4010d7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4010d80:	e0bffc17 	ldw	r2,-16(fp)
 4010d84:	10c00a04 	addi	r3,r2,40
 4010d88:	e0bffd17 	ldw	r2,-12(fp)
 4010d8c:	10800217 	ldw	r2,8(r2)
 4010d90:	100f883a 	mov	r7,r2
 4010d94:	e1bfff17 	ldw	r6,-4(fp)
 4010d98:	e17ffe17 	ldw	r5,-8(fp)
 4010d9c:	1809883a 	mov	r4,r3
 4010da0:	401153c0 	call	401153c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4010da4:	e037883a 	mov	sp,fp
 4010da8:	dfc00117 	ldw	ra,4(sp)
 4010dac:	df000017 	ldw	fp,0(sp)
 4010db0:	dec00204 	addi	sp,sp,8
 4010db4:	f800283a 	ret

04010db8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4010db8:	defffc04 	addi	sp,sp,-16
 4010dbc:	dfc00315 	stw	ra,12(sp)
 4010dc0:	df000215 	stw	fp,8(sp)
 4010dc4:	df000204 	addi	fp,sp,8
 4010dc8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010dcc:	e0bfff17 	ldw	r2,-4(fp)
 4010dd0:	10800017 	ldw	r2,0(r2)
 4010dd4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4010dd8:	e0bffe17 	ldw	r2,-8(fp)
 4010ddc:	10c00a04 	addi	r3,r2,40
 4010de0:	e0bfff17 	ldw	r2,-4(fp)
 4010de4:	10800217 	ldw	r2,8(r2)
 4010de8:	100b883a 	mov	r5,r2
 4010dec:	1809883a 	mov	r4,r3
 4010df0:	40111c80 	call	40111c8 <altera_avalon_jtag_uart_close>
}
 4010df4:	e037883a 	mov	sp,fp
 4010df8:	dfc00117 	ldw	ra,4(sp)
 4010dfc:	df000017 	ldw	fp,0(sp)
 4010e00:	dec00204 	addi	sp,sp,8
 4010e04:	f800283a 	ret

04010e08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4010e08:	defffa04 	addi	sp,sp,-24
 4010e0c:	dfc00515 	stw	ra,20(sp)
 4010e10:	df000415 	stw	fp,16(sp)
 4010e14:	df000404 	addi	fp,sp,16
 4010e18:	e13ffd15 	stw	r4,-12(fp)
 4010e1c:	e17ffe15 	stw	r5,-8(fp)
 4010e20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4010e24:	e0bffd17 	ldw	r2,-12(fp)
 4010e28:	10800017 	ldw	r2,0(r2)
 4010e2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4010e30:	e0bffc17 	ldw	r2,-16(fp)
 4010e34:	10800a04 	addi	r2,r2,40
 4010e38:	e1bfff17 	ldw	r6,-4(fp)
 4010e3c:	e17ffe17 	ldw	r5,-8(fp)
 4010e40:	1009883a 	mov	r4,r2
 4010e44:	40112300 	call	4011230 <altera_avalon_jtag_uart_ioctl>
}
 4010e48:	e037883a 	mov	sp,fp
 4010e4c:	dfc00117 	ldw	ra,4(sp)
 4010e50:	df000017 	ldw	fp,0(sp)
 4010e54:	dec00204 	addi	sp,sp,8
 4010e58:	f800283a 	ret

04010e5c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4010e5c:	defffa04 	addi	sp,sp,-24
 4010e60:	dfc00515 	stw	ra,20(sp)
 4010e64:	df000415 	stw	fp,16(sp)
 4010e68:	df000404 	addi	fp,sp,16
 4010e6c:	e13ffd15 	stw	r4,-12(fp)
 4010e70:	e17ffe15 	stw	r5,-8(fp)
 4010e74:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4010e78:	e0bffd17 	ldw	r2,-12(fp)
 4010e7c:	00c00044 	movi	r3,1
 4010e80:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4010e84:	e0bffd17 	ldw	r2,-12(fp)
 4010e88:	10800017 	ldw	r2,0(r2)
 4010e8c:	10800104 	addi	r2,r2,4
 4010e90:	1007883a 	mov	r3,r2
 4010e94:	e0bffd17 	ldw	r2,-12(fp)
 4010e98:	10800817 	ldw	r2,32(r2)
 4010e9c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4010ea0:	e0bffe17 	ldw	r2,-8(fp)
 4010ea4:	e0ffff17 	ldw	r3,-4(fp)
 4010ea8:	d8000015 	stw	zero,0(sp)
 4010eac:	e1fffd17 	ldw	r7,-12(fp)
 4010eb0:	01810074 	movhi	r6,1025
 4010eb4:	3183c704 	addi	r6,r6,3868
 4010eb8:	180b883a 	mov	r5,r3
 4010ebc:	1009883a 	mov	r4,r2
 4010ec0:	4011e1c0 	call	4011e1c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4010ec4:	e0bffd17 	ldw	r2,-12(fp)
 4010ec8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4010ecc:	e0bffd17 	ldw	r2,-12(fp)
 4010ed0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010ed4:	d0e72e17 	ldw	r3,-25416(gp)
 4010ed8:	e1fffd17 	ldw	r7,-12(fp)
 4010edc:	01810074 	movhi	r6,1025
 4010ee0:	31844a04 	addi	r6,r6,4392
 4010ee4:	180b883a 	mov	r5,r3
 4010ee8:	1009883a 	mov	r4,r2
 4010eec:	4011ad40 	call	4011ad4 <alt_alarm_start>
 4010ef0:	1000040e 	bge	r2,zero,4010f04 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4010ef4:	e0fffd17 	ldw	r3,-12(fp)
 4010ef8:	00a00034 	movhi	r2,32768
 4010efc:	10bfffc4 	addi	r2,r2,-1
 4010f00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4010f04:	0001883a 	nop
 4010f08:	e037883a 	mov	sp,fp
 4010f0c:	dfc00117 	ldw	ra,4(sp)
 4010f10:	df000017 	ldw	fp,0(sp)
 4010f14:	dec00204 	addi	sp,sp,8
 4010f18:	f800283a 	ret

04010f1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4010f1c:	defff804 	addi	sp,sp,-32
 4010f20:	df000715 	stw	fp,28(sp)
 4010f24:	df000704 	addi	fp,sp,28
 4010f28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4010f2c:	e0bfff17 	ldw	r2,-4(fp)
 4010f30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4010f34:	e0bffb17 	ldw	r2,-20(fp)
 4010f38:	10800017 	ldw	r2,0(r2)
 4010f3c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4010f40:	e0bffc17 	ldw	r2,-16(fp)
 4010f44:	10800104 	addi	r2,r2,4
 4010f48:	10800037 	ldwio	r2,0(r2)
 4010f4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4010f50:	e0bffd17 	ldw	r2,-12(fp)
 4010f54:	1080c00c 	andi	r2,r2,768
 4010f58:	10006d26 	beq	r2,zero,4011110 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4010f5c:	e0bffd17 	ldw	r2,-12(fp)
 4010f60:	1080400c 	andi	r2,r2,256
 4010f64:	10003526 	beq	r2,zero,401103c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4010f68:	00800074 	movhi	r2,1
 4010f6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010f70:	e0bffb17 	ldw	r2,-20(fp)
 4010f74:	10800a17 	ldw	r2,40(r2)
 4010f78:	10800044 	addi	r2,r2,1
 4010f7c:	1081ffcc 	andi	r2,r2,2047
 4010f80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4010f84:	e0bffb17 	ldw	r2,-20(fp)
 4010f88:	10c00b17 	ldw	r3,44(r2)
 4010f8c:	e0bffe17 	ldw	r2,-8(fp)
 4010f90:	18801526 	beq	r3,r2,4010fe8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4010f94:	e0bffc17 	ldw	r2,-16(fp)
 4010f98:	10800037 	ldwio	r2,0(r2)
 4010f9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4010fa0:	e0bff917 	ldw	r2,-28(fp)
 4010fa4:	10a0000c 	andi	r2,r2,32768
 4010fa8:	10001126 	beq	r2,zero,4010ff0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4010fac:	e0bffb17 	ldw	r2,-20(fp)
 4010fb0:	10800a17 	ldw	r2,40(r2)
 4010fb4:	e0fff917 	ldw	r3,-28(fp)
 4010fb8:	1809883a 	mov	r4,r3
 4010fbc:	e0fffb17 	ldw	r3,-20(fp)
 4010fc0:	1885883a 	add	r2,r3,r2
 4010fc4:	10800e04 	addi	r2,r2,56
 4010fc8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010fcc:	e0bffb17 	ldw	r2,-20(fp)
 4010fd0:	10800a17 	ldw	r2,40(r2)
 4010fd4:	10800044 	addi	r2,r2,1
 4010fd8:	10c1ffcc 	andi	r3,r2,2047
 4010fdc:	e0bffb17 	ldw	r2,-20(fp)
 4010fe0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4010fe4:	003fe206 	br	4010f70 <__alt_data_end+0xfc010f70>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4010fe8:	0001883a 	nop
 4010fec:	00000106 	br	4010ff4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4010ff0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4010ff4:	e0bff917 	ldw	r2,-28(fp)
 4010ff8:	10bfffec 	andhi	r2,r2,65535
 4010ffc:	10000f26 	beq	r2,zero,401103c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4011000:	e0bffb17 	ldw	r2,-20(fp)
 4011004:	10c00817 	ldw	r3,32(r2)
 4011008:	00bfff84 	movi	r2,-2
 401100c:	1886703a 	and	r3,r3,r2
 4011010:	e0bffb17 	ldw	r2,-20(fp)
 4011014:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4011018:	e0bffc17 	ldw	r2,-16(fp)
 401101c:	10800104 	addi	r2,r2,4
 4011020:	1007883a 	mov	r3,r2
 4011024:	e0bffb17 	ldw	r2,-20(fp)
 4011028:	10800817 	ldw	r2,32(r2)
 401102c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011030:	e0bffc17 	ldw	r2,-16(fp)
 4011034:	10800104 	addi	r2,r2,4
 4011038:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401103c:	e0bffd17 	ldw	r2,-12(fp)
 4011040:	1080800c 	andi	r2,r2,512
 4011044:	103fbe26 	beq	r2,zero,4010f40 <__alt_data_end+0xfc010f40>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4011048:	e0bffd17 	ldw	r2,-12(fp)
 401104c:	1004d43a 	srli	r2,r2,16
 4011050:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4011054:	00001406 	br	40110a8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4011058:	e0bffc17 	ldw	r2,-16(fp)
 401105c:	e0fffb17 	ldw	r3,-20(fp)
 4011060:	18c00d17 	ldw	r3,52(r3)
 4011064:	e13ffb17 	ldw	r4,-20(fp)
 4011068:	20c7883a 	add	r3,r4,r3
 401106c:	18c20e04 	addi	r3,r3,2104
 4011070:	18c00003 	ldbu	r3,0(r3)
 4011074:	18c03fcc 	andi	r3,r3,255
 4011078:	18c0201c 	xori	r3,r3,128
 401107c:	18ffe004 	addi	r3,r3,-128
 4011080:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011084:	e0bffb17 	ldw	r2,-20(fp)
 4011088:	10800d17 	ldw	r2,52(r2)
 401108c:	10800044 	addi	r2,r2,1
 4011090:	10c1ffcc 	andi	r3,r2,2047
 4011094:	e0bffb17 	ldw	r2,-20(fp)
 4011098:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401109c:	e0bffa17 	ldw	r2,-24(fp)
 40110a0:	10bfffc4 	addi	r2,r2,-1
 40110a4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40110a8:	e0bffa17 	ldw	r2,-24(fp)
 40110ac:	10000526 	beq	r2,zero,40110c4 <altera_avalon_jtag_uart_irq+0x1a8>
 40110b0:	e0bffb17 	ldw	r2,-20(fp)
 40110b4:	10c00d17 	ldw	r3,52(r2)
 40110b8:	e0bffb17 	ldw	r2,-20(fp)
 40110bc:	10800c17 	ldw	r2,48(r2)
 40110c0:	18bfe51e 	bne	r3,r2,4011058 <__alt_data_end+0xfc011058>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40110c4:	e0bffa17 	ldw	r2,-24(fp)
 40110c8:	103f9d26 	beq	r2,zero,4010f40 <__alt_data_end+0xfc010f40>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40110cc:	e0bffb17 	ldw	r2,-20(fp)
 40110d0:	10c00817 	ldw	r3,32(r2)
 40110d4:	00bfff44 	movi	r2,-3
 40110d8:	1886703a 	and	r3,r3,r2
 40110dc:	e0bffb17 	ldw	r2,-20(fp)
 40110e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40110e4:	e0bffb17 	ldw	r2,-20(fp)
 40110e8:	10800017 	ldw	r2,0(r2)
 40110ec:	10800104 	addi	r2,r2,4
 40110f0:	1007883a 	mov	r3,r2
 40110f4:	e0bffb17 	ldw	r2,-20(fp)
 40110f8:	10800817 	ldw	r2,32(r2)
 40110fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011100:	e0bffc17 	ldw	r2,-16(fp)
 4011104:	10800104 	addi	r2,r2,4
 4011108:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401110c:	003f8c06 	br	4010f40 <__alt_data_end+0xfc010f40>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4011110:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4011114:	0001883a 	nop
 4011118:	e037883a 	mov	sp,fp
 401111c:	df000017 	ldw	fp,0(sp)
 4011120:	dec00104 	addi	sp,sp,4
 4011124:	f800283a 	ret

04011128 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4011128:	defff804 	addi	sp,sp,-32
 401112c:	df000715 	stw	fp,28(sp)
 4011130:	df000704 	addi	fp,sp,28
 4011134:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4011138:	e0bffb17 	ldw	r2,-20(fp)
 401113c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4011140:	e0bff917 	ldw	r2,-28(fp)
 4011144:	10800017 	ldw	r2,0(r2)
 4011148:	10800104 	addi	r2,r2,4
 401114c:	10800037 	ldwio	r2,0(r2)
 4011150:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4011154:	e0bffa17 	ldw	r2,-24(fp)
 4011158:	1081000c 	andi	r2,r2,1024
 401115c:	10000b26 	beq	r2,zero,401118c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4011160:	e0bff917 	ldw	r2,-28(fp)
 4011164:	10800017 	ldw	r2,0(r2)
 4011168:	10800104 	addi	r2,r2,4
 401116c:	1007883a 	mov	r3,r2
 4011170:	e0bff917 	ldw	r2,-28(fp)
 4011174:	10800817 	ldw	r2,32(r2)
 4011178:	10810014 	ori	r2,r2,1024
 401117c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4011180:	e0bff917 	ldw	r2,-28(fp)
 4011184:	10000915 	stw	zero,36(r2)
 4011188:	00000a06 	br	40111b4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401118c:	e0bff917 	ldw	r2,-28(fp)
 4011190:	10c00917 	ldw	r3,36(r2)
 4011194:	00a00034 	movhi	r2,32768
 4011198:	10bfff04 	addi	r2,r2,-4
 401119c:	10c00536 	bltu	r2,r3,40111b4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40111a0:	e0bff917 	ldw	r2,-28(fp)
 40111a4:	10800917 	ldw	r2,36(r2)
 40111a8:	10c00044 	addi	r3,r2,1
 40111ac:	e0bff917 	ldw	r2,-28(fp)
 40111b0:	10c00915 	stw	r3,36(r2)
 40111b4:	d0a72e17 	ldw	r2,-25416(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40111b8:	e037883a 	mov	sp,fp
 40111bc:	df000017 	ldw	fp,0(sp)
 40111c0:	dec00104 	addi	sp,sp,4
 40111c4:	f800283a 	ret

040111c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40111c8:	defffd04 	addi	sp,sp,-12
 40111cc:	df000215 	stw	fp,8(sp)
 40111d0:	df000204 	addi	fp,sp,8
 40111d4:	e13ffe15 	stw	r4,-8(fp)
 40111d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40111dc:	00000506 	br	40111f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40111e0:	e0bfff17 	ldw	r2,-4(fp)
 40111e4:	1090000c 	andi	r2,r2,16384
 40111e8:	10000226 	beq	r2,zero,40111f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40111ec:	00bffd44 	movi	r2,-11
 40111f0:	00000b06 	br	4011220 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40111f4:	e0bffe17 	ldw	r2,-8(fp)
 40111f8:	10c00d17 	ldw	r3,52(r2)
 40111fc:	e0bffe17 	ldw	r2,-8(fp)
 4011200:	10800c17 	ldw	r2,48(r2)
 4011204:	18800526 	beq	r3,r2,401121c <altera_avalon_jtag_uart_close+0x54>
 4011208:	e0bffe17 	ldw	r2,-8(fp)
 401120c:	10c00917 	ldw	r3,36(r2)
 4011210:	e0bffe17 	ldw	r2,-8(fp)
 4011214:	10800117 	ldw	r2,4(r2)
 4011218:	18bff136 	bltu	r3,r2,40111e0 <__alt_data_end+0xfc0111e0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401121c:	0005883a 	mov	r2,zero
}
 4011220:	e037883a 	mov	sp,fp
 4011224:	df000017 	ldw	fp,0(sp)
 4011228:	dec00104 	addi	sp,sp,4
 401122c:	f800283a 	ret

04011230 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4011230:	defffa04 	addi	sp,sp,-24
 4011234:	df000515 	stw	fp,20(sp)
 4011238:	df000504 	addi	fp,sp,20
 401123c:	e13ffd15 	stw	r4,-12(fp)
 4011240:	e17ffe15 	stw	r5,-8(fp)
 4011244:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4011248:	00bff9c4 	movi	r2,-25
 401124c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4011250:	e0bffe17 	ldw	r2,-8(fp)
 4011254:	10da8060 	cmpeqi	r3,r2,27137
 4011258:	1800031e 	bne	r3,zero,4011268 <altera_avalon_jtag_uart_ioctl+0x38>
 401125c:	109a80a0 	cmpeqi	r2,r2,27138
 4011260:	1000181e 	bne	r2,zero,40112c4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4011264:	00002906 	br	401130c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4011268:	e0bffd17 	ldw	r2,-12(fp)
 401126c:	10c00117 	ldw	r3,4(r2)
 4011270:	00a00034 	movhi	r2,32768
 4011274:	10bfffc4 	addi	r2,r2,-1
 4011278:	18802126 	beq	r3,r2,4011300 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401127c:	e0bfff17 	ldw	r2,-4(fp)
 4011280:	10800017 	ldw	r2,0(r2)
 4011284:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4011288:	e0bffc17 	ldw	r2,-16(fp)
 401128c:	10800090 	cmplti	r2,r2,2
 4011290:	1000061e 	bne	r2,zero,40112ac <altera_avalon_jtag_uart_ioctl+0x7c>
 4011294:	e0fffc17 	ldw	r3,-16(fp)
 4011298:	00a00034 	movhi	r2,32768
 401129c:	10bfffc4 	addi	r2,r2,-1
 40112a0:	18800226 	beq	r3,r2,40112ac <altera_avalon_jtag_uart_ioctl+0x7c>
 40112a4:	e0bffc17 	ldw	r2,-16(fp)
 40112a8:	00000206 	br	40112b4 <altera_avalon_jtag_uart_ioctl+0x84>
 40112ac:	00a00034 	movhi	r2,32768
 40112b0:	10bfff84 	addi	r2,r2,-2
 40112b4:	e0fffd17 	ldw	r3,-12(fp)
 40112b8:	18800115 	stw	r2,4(r3)
      rc = 0;
 40112bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40112c0:	00000f06 	br	4011300 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40112c4:	e0bffd17 	ldw	r2,-12(fp)
 40112c8:	10c00117 	ldw	r3,4(r2)
 40112cc:	00a00034 	movhi	r2,32768
 40112d0:	10bfffc4 	addi	r2,r2,-1
 40112d4:	18800c26 	beq	r3,r2,4011308 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40112d8:	e0bffd17 	ldw	r2,-12(fp)
 40112dc:	10c00917 	ldw	r3,36(r2)
 40112e0:	e0bffd17 	ldw	r2,-12(fp)
 40112e4:	10800117 	ldw	r2,4(r2)
 40112e8:	1885803a 	cmpltu	r2,r3,r2
 40112ec:	10c03fcc 	andi	r3,r2,255
 40112f0:	e0bfff17 	ldw	r2,-4(fp)
 40112f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40112f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40112fc:	00000206 	br	4011308 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4011300:	0001883a 	nop
 4011304:	00000106 	br	401130c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4011308:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401130c:	e0bffb17 	ldw	r2,-20(fp)
}
 4011310:	e037883a 	mov	sp,fp
 4011314:	df000017 	ldw	fp,0(sp)
 4011318:	dec00104 	addi	sp,sp,4
 401131c:	f800283a 	ret

04011320 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4011320:	defff304 	addi	sp,sp,-52
 4011324:	dfc00c15 	stw	ra,48(sp)
 4011328:	df000b15 	stw	fp,44(sp)
 401132c:	df000b04 	addi	fp,sp,44
 4011330:	e13ffc15 	stw	r4,-16(fp)
 4011334:	e17ffd15 	stw	r5,-12(fp)
 4011338:	e1bffe15 	stw	r6,-8(fp)
 401133c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4011340:	e0bffd17 	ldw	r2,-12(fp)
 4011344:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4011348:	00004706 	br	4011468 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401134c:	e0bffc17 	ldw	r2,-16(fp)
 4011350:	10800a17 	ldw	r2,40(r2)
 4011354:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4011358:	e0bffc17 	ldw	r2,-16(fp)
 401135c:	10800b17 	ldw	r2,44(r2)
 4011360:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4011364:	e0fff717 	ldw	r3,-36(fp)
 4011368:	e0bff817 	ldw	r2,-32(fp)
 401136c:	18800536 	bltu	r3,r2,4011384 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4011370:	e0fff717 	ldw	r3,-36(fp)
 4011374:	e0bff817 	ldw	r2,-32(fp)
 4011378:	1885c83a 	sub	r2,r3,r2
 401137c:	e0bff615 	stw	r2,-40(fp)
 4011380:	00000406 	br	4011394 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4011384:	00c20004 	movi	r3,2048
 4011388:	e0bff817 	ldw	r2,-32(fp)
 401138c:	1885c83a 	sub	r2,r3,r2
 4011390:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4011394:	e0bff617 	ldw	r2,-40(fp)
 4011398:	10001e26 	beq	r2,zero,4011414 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401139c:	e0fffe17 	ldw	r3,-8(fp)
 40113a0:	e0bff617 	ldw	r2,-40(fp)
 40113a4:	1880022e 	bgeu	r3,r2,40113b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40113a8:	e0bffe17 	ldw	r2,-8(fp)
 40113ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40113b0:	e0bffc17 	ldw	r2,-16(fp)
 40113b4:	10c00e04 	addi	r3,r2,56
 40113b8:	e0bff817 	ldw	r2,-32(fp)
 40113bc:	1885883a 	add	r2,r3,r2
 40113c0:	e1bff617 	ldw	r6,-40(fp)
 40113c4:	100b883a 	mov	r5,r2
 40113c8:	e13ff517 	ldw	r4,-44(fp)
 40113cc:	400b7100 	call	400b710 <memcpy>
      ptr   += n;
 40113d0:	e0fff517 	ldw	r3,-44(fp)
 40113d4:	e0bff617 	ldw	r2,-40(fp)
 40113d8:	1885883a 	add	r2,r3,r2
 40113dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40113e0:	e0fffe17 	ldw	r3,-8(fp)
 40113e4:	e0bff617 	ldw	r2,-40(fp)
 40113e8:	1885c83a 	sub	r2,r3,r2
 40113ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40113f0:	e0fff817 	ldw	r3,-32(fp)
 40113f4:	e0bff617 	ldw	r2,-40(fp)
 40113f8:	1885883a 	add	r2,r3,r2
 40113fc:	10c1ffcc 	andi	r3,r2,2047
 4011400:	e0bffc17 	ldw	r2,-16(fp)
 4011404:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4011408:	e0bffe17 	ldw	r2,-8(fp)
 401140c:	00bfcf16 	blt	zero,r2,401134c <__alt_data_end+0xfc01134c>
 4011410:	00000106 	br	4011418 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4011414:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4011418:	e0fff517 	ldw	r3,-44(fp)
 401141c:	e0bffd17 	ldw	r2,-12(fp)
 4011420:	1880141e 	bne	r3,r2,4011474 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4011424:	e0bfff17 	ldw	r2,-4(fp)
 4011428:	1090000c 	andi	r2,r2,16384
 401142c:	1000131e 	bne	r2,zero,401147c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4011430:	0001883a 	nop
 4011434:	e0bffc17 	ldw	r2,-16(fp)
 4011438:	10c00a17 	ldw	r3,40(r2)
 401143c:	e0bff717 	ldw	r2,-36(fp)
 4011440:	1880051e 	bne	r3,r2,4011458 <altera_avalon_jtag_uart_read+0x138>
 4011444:	e0bffc17 	ldw	r2,-16(fp)
 4011448:	10c00917 	ldw	r3,36(r2)
 401144c:	e0bffc17 	ldw	r2,-16(fp)
 4011450:	10800117 	ldw	r2,4(r2)
 4011454:	18bff736 	bltu	r3,r2,4011434 <__alt_data_end+0xfc011434>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4011458:	e0bffc17 	ldw	r2,-16(fp)
 401145c:	10c00a17 	ldw	r3,40(r2)
 4011460:	e0bff717 	ldw	r2,-36(fp)
 4011464:	18800726 	beq	r3,r2,4011484 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4011468:	e0bffe17 	ldw	r2,-8(fp)
 401146c:	00bfb716 	blt	zero,r2,401134c <__alt_data_end+0xfc01134c>
 4011470:	00000506 	br	4011488 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4011474:	0001883a 	nop
 4011478:	00000306 	br	4011488 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401147c:	0001883a 	nop
 4011480:	00000106 	br	4011488 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4011484:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4011488:	e0fff517 	ldw	r3,-44(fp)
 401148c:	e0bffd17 	ldw	r2,-12(fp)
 4011490:	18801826 	beq	r3,r2,40114f4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011494:	0005303a 	rdctl	r2,status
 4011498:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401149c:	e0fffb17 	ldw	r3,-20(fp)
 40114a0:	00bfff84 	movi	r2,-2
 40114a4:	1884703a 	and	r2,r3,r2
 40114a8:	1001703a 	wrctl	status,r2
  
  return context;
 40114ac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40114b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40114b4:	e0bffc17 	ldw	r2,-16(fp)
 40114b8:	10800817 	ldw	r2,32(r2)
 40114bc:	10c00054 	ori	r3,r2,1
 40114c0:	e0bffc17 	ldw	r2,-16(fp)
 40114c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40114c8:	e0bffc17 	ldw	r2,-16(fp)
 40114cc:	10800017 	ldw	r2,0(r2)
 40114d0:	10800104 	addi	r2,r2,4
 40114d4:	1007883a 	mov	r3,r2
 40114d8:	e0bffc17 	ldw	r2,-16(fp)
 40114dc:	10800817 	ldw	r2,32(r2)
 40114e0:	18800035 	stwio	r2,0(r3)
 40114e4:	e0bffa17 	ldw	r2,-24(fp)
 40114e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40114ec:	e0bff917 	ldw	r2,-28(fp)
 40114f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40114f4:	e0fff517 	ldw	r3,-44(fp)
 40114f8:	e0bffd17 	ldw	r2,-12(fp)
 40114fc:	18800426 	beq	r3,r2,4011510 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4011500:	e0fff517 	ldw	r3,-44(fp)
 4011504:	e0bffd17 	ldw	r2,-12(fp)
 4011508:	1885c83a 	sub	r2,r3,r2
 401150c:	00000606 	br	4011528 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4011510:	e0bfff17 	ldw	r2,-4(fp)
 4011514:	1090000c 	andi	r2,r2,16384
 4011518:	10000226 	beq	r2,zero,4011524 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401151c:	00bffd44 	movi	r2,-11
 4011520:	00000106 	br	4011528 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4011524:	00bffec4 	movi	r2,-5
}
 4011528:	e037883a 	mov	sp,fp
 401152c:	dfc00117 	ldw	ra,4(sp)
 4011530:	df000017 	ldw	fp,0(sp)
 4011534:	dec00204 	addi	sp,sp,8
 4011538:	f800283a 	ret

0401153c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401153c:	defff304 	addi	sp,sp,-52
 4011540:	dfc00c15 	stw	ra,48(sp)
 4011544:	df000b15 	stw	fp,44(sp)
 4011548:	df000b04 	addi	fp,sp,44
 401154c:	e13ffc15 	stw	r4,-16(fp)
 4011550:	e17ffd15 	stw	r5,-12(fp)
 4011554:	e1bffe15 	stw	r6,-8(fp)
 4011558:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401155c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4011560:	e0bffd17 	ldw	r2,-12(fp)
 4011564:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4011568:	00003706 	br	4011648 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401156c:	e0bffc17 	ldw	r2,-16(fp)
 4011570:	10800c17 	ldw	r2,48(r2)
 4011574:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4011578:	e0bffc17 	ldw	r2,-16(fp)
 401157c:	10800d17 	ldw	r2,52(r2)
 4011580:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4011584:	e0fff917 	ldw	r3,-28(fp)
 4011588:	e0bff517 	ldw	r2,-44(fp)
 401158c:	1880062e 	bgeu	r3,r2,40115a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4011590:	e0fff517 	ldw	r3,-44(fp)
 4011594:	e0bff917 	ldw	r2,-28(fp)
 4011598:	1885c83a 	sub	r2,r3,r2
 401159c:	10bfffc4 	addi	r2,r2,-1
 40115a0:	e0bff615 	stw	r2,-40(fp)
 40115a4:	00000b06 	br	40115d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40115a8:	e0bff517 	ldw	r2,-44(fp)
 40115ac:	10000526 	beq	r2,zero,40115c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40115b0:	00c20004 	movi	r3,2048
 40115b4:	e0bff917 	ldw	r2,-28(fp)
 40115b8:	1885c83a 	sub	r2,r3,r2
 40115bc:	e0bff615 	stw	r2,-40(fp)
 40115c0:	00000406 	br	40115d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40115c4:	00c1ffc4 	movi	r3,2047
 40115c8:	e0bff917 	ldw	r2,-28(fp)
 40115cc:	1885c83a 	sub	r2,r3,r2
 40115d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40115d4:	e0bff617 	ldw	r2,-40(fp)
 40115d8:	10001e26 	beq	r2,zero,4011654 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40115dc:	e0fffe17 	ldw	r3,-8(fp)
 40115e0:	e0bff617 	ldw	r2,-40(fp)
 40115e4:	1880022e 	bgeu	r3,r2,40115f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40115e8:	e0bffe17 	ldw	r2,-8(fp)
 40115ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40115f0:	e0bffc17 	ldw	r2,-16(fp)
 40115f4:	10c20e04 	addi	r3,r2,2104
 40115f8:	e0bff917 	ldw	r2,-28(fp)
 40115fc:	1885883a 	add	r2,r3,r2
 4011600:	e1bff617 	ldw	r6,-40(fp)
 4011604:	e17ffd17 	ldw	r5,-12(fp)
 4011608:	1009883a 	mov	r4,r2
 401160c:	400b7100 	call	400b710 <memcpy>
      ptr   += n;
 4011610:	e0fffd17 	ldw	r3,-12(fp)
 4011614:	e0bff617 	ldw	r2,-40(fp)
 4011618:	1885883a 	add	r2,r3,r2
 401161c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4011620:	e0fffe17 	ldw	r3,-8(fp)
 4011624:	e0bff617 	ldw	r2,-40(fp)
 4011628:	1885c83a 	sub	r2,r3,r2
 401162c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011630:	e0fff917 	ldw	r3,-28(fp)
 4011634:	e0bff617 	ldw	r2,-40(fp)
 4011638:	1885883a 	add	r2,r3,r2
 401163c:	10c1ffcc 	andi	r3,r2,2047
 4011640:	e0bffc17 	ldw	r2,-16(fp)
 4011644:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4011648:	e0bffe17 	ldw	r2,-8(fp)
 401164c:	00bfc716 	blt	zero,r2,401156c <__alt_data_end+0xfc01156c>
 4011650:	00000106 	br	4011658 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4011654:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011658:	0005303a 	rdctl	r2,status
 401165c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011660:	e0fffb17 	ldw	r3,-20(fp)
 4011664:	00bfff84 	movi	r2,-2
 4011668:	1884703a 	and	r2,r3,r2
 401166c:	1001703a 	wrctl	status,r2
  
  return context;
 4011670:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4011674:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4011678:	e0bffc17 	ldw	r2,-16(fp)
 401167c:	10800817 	ldw	r2,32(r2)
 4011680:	10c00094 	ori	r3,r2,2
 4011684:	e0bffc17 	ldw	r2,-16(fp)
 4011688:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401168c:	e0bffc17 	ldw	r2,-16(fp)
 4011690:	10800017 	ldw	r2,0(r2)
 4011694:	10800104 	addi	r2,r2,4
 4011698:	1007883a 	mov	r3,r2
 401169c:	e0bffc17 	ldw	r2,-16(fp)
 40116a0:	10800817 	ldw	r2,32(r2)
 40116a4:	18800035 	stwio	r2,0(r3)
 40116a8:	e0bffa17 	ldw	r2,-24(fp)
 40116ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40116b0:	e0bff817 	ldw	r2,-32(fp)
 40116b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40116b8:	e0bffe17 	ldw	r2,-8(fp)
 40116bc:	0080100e 	bge	zero,r2,4011700 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40116c0:	e0bfff17 	ldw	r2,-4(fp)
 40116c4:	1090000c 	andi	r2,r2,16384
 40116c8:	1000101e 	bne	r2,zero,401170c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40116cc:	0001883a 	nop
 40116d0:	e0bffc17 	ldw	r2,-16(fp)
 40116d4:	10c00d17 	ldw	r3,52(r2)
 40116d8:	e0bff517 	ldw	r2,-44(fp)
 40116dc:	1880051e 	bne	r3,r2,40116f4 <altera_avalon_jtag_uart_write+0x1b8>
 40116e0:	e0bffc17 	ldw	r2,-16(fp)
 40116e4:	10c00917 	ldw	r3,36(r2)
 40116e8:	e0bffc17 	ldw	r2,-16(fp)
 40116ec:	10800117 	ldw	r2,4(r2)
 40116f0:	18bff736 	bltu	r3,r2,40116d0 <__alt_data_end+0xfc0116d0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40116f4:	e0bffc17 	ldw	r2,-16(fp)
 40116f8:	10800917 	ldw	r2,36(r2)
 40116fc:	1000051e 	bne	r2,zero,4011714 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4011700:	e0bffe17 	ldw	r2,-8(fp)
 4011704:	00bfd016 	blt	zero,r2,4011648 <__alt_data_end+0xfc011648>
 4011708:	00000306 	br	4011718 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401170c:	0001883a 	nop
 4011710:	00000106 	br	4011718 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4011714:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4011718:	e0fffd17 	ldw	r3,-12(fp)
 401171c:	e0bff717 	ldw	r2,-36(fp)
 4011720:	18800426 	beq	r3,r2,4011734 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4011724:	e0fffd17 	ldw	r3,-12(fp)
 4011728:	e0bff717 	ldw	r2,-36(fp)
 401172c:	1885c83a 	sub	r2,r3,r2
 4011730:	00000606 	br	401174c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4011734:	e0bfff17 	ldw	r2,-4(fp)
 4011738:	1090000c 	andi	r2,r2,16384
 401173c:	10000226 	beq	r2,zero,4011748 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4011740:	00bffd44 	movi	r2,-11
 4011744:	00000106 	br	401174c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4011748:	00bffec4 	movi	r2,-5
}
 401174c:	e037883a 	mov	sp,fp
 4011750:	dfc00117 	ldw	ra,4(sp)
 4011754:	df000017 	ldw	fp,0(sp)
 4011758:	dec00204 	addi	sp,sp,8
 401175c:	f800283a 	ret

04011760 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4011760:	defffa04 	addi	sp,sp,-24
 4011764:	dfc00515 	stw	ra,20(sp)
 4011768:	df000415 	stw	fp,16(sp)
 401176c:	df000404 	addi	fp,sp,16
 4011770:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4011774:	0007883a 	mov	r3,zero
 4011778:	e0bfff17 	ldw	r2,-4(fp)
 401177c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4011780:	e0bfff17 	ldw	r2,-4(fp)
 4011784:	10800104 	addi	r2,r2,4
 4011788:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401178c:	0005303a 	rdctl	r2,status
 4011790:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011794:	e0fffd17 	ldw	r3,-12(fp)
 4011798:	00bfff84 	movi	r2,-2
 401179c:	1884703a 	and	r2,r3,r2
 40117a0:	1001703a 	wrctl	status,r2
  
  return context;
 40117a4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40117a8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40117ac:	40109e40 	call	40109e4 <alt_tick>
 40117b0:	e0bffc17 	ldw	r2,-16(fp)
 40117b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40117b8:	e0bffe17 	ldw	r2,-8(fp)
 40117bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40117c0:	0001883a 	nop
 40117c4:	e037883a 	mov	sp,fp
 40117c8:	dfc00117 	ldw	ra,4(sp)
 40117cc:	df000017 	ldw	fp,0(sp)
 40117d0:	dec00204 	addi	sp,sp,8
 40117d4:	f800283a 	ret

040117d8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40117d8:	defff804 	addi	sp,sp,-32
 40117dc:	dfc00715 	stw	ra,28(sp)
 40117e0:	df000615 	stw	fp,24(sp)
 40117e4:	df000604 	addi	fp,sp,24
 40117e8:	e13ffc15 	stw	r4,-16(fp)
 40117ec:	e17ffd15 	stw	r5,-12(fp)
 40117f0:	e1bffe15 	stw	r6,-8(fp)
 40117f4:	e1ffff15 	stw	r7,-4(fp)
 40117f8:	e0bfff17 	ldw	r2,-4(fp)
 40117fc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4011800:	d0a72e17 	ldw	r2,-25416(gp)
 4011804:	1000021e 	bne	r2,zero,4011810 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4011808:	e0bffb17 	ldw	r2,-20(fp)
 401180c:	d0a72e15 	stw	r2,-25416(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4011810:	e0bffc17 	ldw	r2,-16(fp)
 4011814:	10800104 	addi	r2,r2,4
 4011818:	00c001c4 	movi	r3,7
 401181c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4011820:	d8000015 	stw	zero,0(sp)
 4011824:	e1fffc17 	ldw	r7,-16(fp)
 4011828:	01810074 	movhi	r6,1025
 401182c:	3185d804 	addi	r6,r6,5984
 4011830:	e17ffe17 	ldw	r5,-8(fp)
 4011834:	e13ffd17 	ldw	r4,-12(fp)
 4011838:	4011e1c0 	call	4011e1c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401183c:	0001883a 	nop
 4011840:	e037883a 	mov	sp,fp
 4011844:	dfc00117 	ldw	ra,4(sp)
 4011848:	df000017 	ldw	fp,0(sp)
 401184c:	dec00204 	addi	sp,sp,8
 4011850:	f800283a 	ret

04011854 <perf_print_formatted_report>:
 4011854:	deffe504 	addi	sp,sp,-108
 4011858:	dfc01915 	stw	ra,100(sp)
 401185c:	df001815 	stw	fp,96(sp)
 4011860:	dcc01715 	stw	r19,92(sp)
 4011864:	dc801615 	stw	r18,88(sp)
 4011868:	dc401515 	stw	r17,84(sp)
 401186c:	dc001415 	stw	r16,80(sp)
 4011870:	df001804 	addi	fp,sp,96
 4011874:	e13ff915 	stw	r4,-28(fp)
 4011878:	e17ffa15 	stw	r5,-24(fp)
 401187c:	e1bffb15 	stw	r6,-20(fp)
 4011880:	e1c00215 	stw	r7,8(fp)
 4011884:	00800044 	movi	r2,1
 4011888:	e0bfef15 	stw	r2,-68(fp)
 401188c:	00810074 	movhi	r2,1025
 4011890:	108c4904 	addi	r2,r2,12580
 4011894:	e0bff015 	stw	r2,-64(fp)
 4011898:	00810074 	movhi	r2,1025
 401189c:	108c5a04 	addi	r2,r2,12648
 40118a0:	e0bff115 	stw	r2,-60(fp)
 40118a4:	0007883a 	mov	r3,zero
 40118a8:	e0bff917 	ldw	r2,-28(fp)
 40118ac:	10c00035 	stwio	r3,0(r2)
 40118b0:	e0800204 	addi	r2,fp,8
 40118b4:	e0bff815 	stw	r2,-32(fp)
 40118b8:	e13ff917 	ldw	r4,-28(fp)
 40118bc:	40125300 	call	4012530 <perf_get_total_time>
 40118c0:	e0bff215 	stw	r2,-56(fp)
 40118c4:	e0fff315 	stw	r3,-52(fp)
 40118c8:	e13ff217 	ldw	r4,-56(fp)
 40118cc:	e17ff317 	ldw	r5,-52(fp)
 40118d0:	4012cc80 	call	4012cc8 <__floatundidf>
 40118d4:	1021883a 	mov	r16,r2
 40118d8:	1823883a 	mov	r17,r3
 40118dc:	e13ffa17 	ldw	r4,-24(fp)
 40118e0:	400fe9c0 	call	400fe9c <__floatunsidf>
 40118e4:	1009883a 	mov	r4,r2
 40118e8:	180b883a 	mov	r5,r3
 40118ec:	200d883a 	mov	r6,r4
 40118f0:	280f883a 	mov	r7,r5
 40118f4:	8009883a 	mov	r4,r16
 40118f8:	880b883a 	mov	r5,r17
 40118fc:	400390c0 	call	400390c <__divdf3>
 4011900:	1009883a 	mov	r4,r2
 4011904:	180b883a 	mov	r5,r3
 4011908:	e13ff415 	stw	r4,-48(fp)
 401190c:	e17ff515 	stw	r5,-44(fp)
 4011910:	e0bff017 	ldw	r2,-64(fp)
 4011914:	d8800315 	stw	r2,12(sp)
 4011918:	e0bff117 	ldw	r2,-60(fp)
 401191c:	d8800215 	stw	r2,8(sp)
 4011920:	e0bff017 	ldw	r2,-64(fp)
 4011924:	d8800115 	stw	r2,4(sp)
 4011928:	e0bff317 	ldw	r2,-52(fp)
 401192c:	d8800015 	stw	r2,0(sp)
 4011930:	e1fff217 	ldw	r7,-56(fp)
 4011934:	e17ff417 	ldw	r5,-48(fp)
 4011938:	e1bff517 	ldw	r6,-44(fp)
 401193c:	01010074 	movhi	r4,1025
 4011940:	210c6b04 	addi	r4,r4,12716
 4011944:	4005acc0 	call	4005acc <printf>
 4011948:	e0bff817 	ldw	r2,-32(fp)
 401194c:	10c00104 	addi	r3,r2,4
 4011950:	e0fff815 	stw	r3,-32(fp)
 4011954:	10800017 	ldw	r2,0(r2)
 4011958:	e0bfee15 	stw	r2,-72(fp)
 401195c:	00800044 	movi	r2,1
 4011960:	e0bfef15 	stw	r2,-68(fp)
 4011964:	00004e06 	br	4011aa0 <perf_print_formatted_report+0x24c>
 4011968:	e17fef17 	ldw	r5,-68(fp)
 401196c:	e13ff917 	ldw	r4,-28(fp)
 4011970:	40124740 	call	4012474 <perf_get_section_time>
 4011974:	e0bff615 	stw	r2,-40(fp)
 4011978:	e0fff715 	stw	r3,-36(fp)
 401197c:	e13ff617 	ldw	r4,-40(fp)
 4011980:	e17ff717 	ldw	r5,-36(fp)
 4011984:	4012cc80 	call	4012cc8 <__floatundidf>
 4011988:	1011883a 	mov	r8,r2
 401198c:	1813883a 	mov	r9,r3
 4011990:	000d883a 	mov	r6,zero
 4011994:	01d01674 	movhi	r7,16473
 4011998:	4009883a 	mov	r4,r8
 401199c:	480b883a 	mov	r5,r9
 40119a0:	400444c0 	call	400444c <__muldf3>
 40119a4:	1009883a 	mov	r4,r2
 40119a8:	180b883a 	mov	r5,r3
 40119ac:	2021883a 	mov	r16,r4
 40119b0:	2823883a 	mov	r17,r5
 40119b4:	e13ff217 	ldw	r4,-56(fp)
 40119b8:	e17ff317 	ldw	r5,-52(fp)
 40119bc:	4012cc80 	call	4012cc8 <__floatundidf>
 40119c0:	1009883a 	mov	r4,r2
 40119c4:	180b883a 	mov	r5,r3
 40119c8:	200d883a 	mov	r6,r4
 40119cc:	280f883a 	mov	r7,r5
 40119d0:	8009883a 	mov	r4,r16
 40119d4:	880b883a 	mov	r5,r17
 40119d8:	400390c0 	call	400390c <__divdf3>
 40119dc:	1009883a 	mov	r4,r2
 40119e0:	180b883a 	mov	r5,r3
 40119e4:	2025883a 	mov	r18,r4
 40119e8:	2827883a 	mov	r19,r5
 40119ec:	e13ff617 	ldw	r4,-40(fp)
 40119f0:	e17ff717 	ldw	r5,-36(fp)
 40119f4:	4012cc80 	call	4012cc8 <__floatundidf>
 40119f8:	1021883a 	mov	r16,r2
 40119fc:	1823883a 	mov	r17,r3
 4011a00:	e13ffa17 	ldw	r4,-24(fp)
 4011a04:	400fe9c0 	call	400fe9c <__floatunsidf>
 4011a08:	1009883a 	mov	r4,r2
 4011a0c:	180b883a 	mov	r5,r3
 4011a10:	200d883a 	mov	r6,r4
 4011a14:	280f883a 	mov	r7,r5
 4011a18:	8009883a 	mov	r4,r16
 4011a1c:	880b883a 	mov	r5,r17
 4011a20:	400390c0 	call	400390c <__divdf3>
 4011a24:	1009883a 	mov	r4,r2
 4011a28:	180b883a 	mov	r5,r3
 4011a2c:	2021883a 	mov	r16,r4
 4011a30:	2823883a 	mov	r17,r5
 4011a34:	e17fef17 	ldw	r5,-68(fp)
 4011a38:	e13ff917 	ldw	r4,-28(fp)
 4011a3c:	401257c0 	call	401257c <perf_get_num_starts>
 4011a40:	1007883a 	mov	r3,r2
 4011a44:	e0bff017 	ldw	r2,-64(fp)
 4011a48:	d8800515 	stw	r2,20(sp)
 4011a4c:	d8c00415 	stw	r3,16(sp)
 4011a50:	e0bff617 	ldw	r2,-40(fp)
 4011a54:	d8800215 	stw	r2,8(sp)
 4011a58:	e0bff717 	ldw	r2,-36(fp)
 4011a5c:	d8800315 	stw	r2,12(sp)
 4011a60:	dc000015 	stw	r16,0(sp)
 4011a64:	dc400115 	stw	r17,4(sp)
 4011a68:	900d883a 	mov	r6,r18
 4011a6c:	980f883a 	mov	r7,r19
 4011a70:	e17fee17 	ldw	r5,-72(fp)
 4011a74:	01010074 	movhi	r4,1025
 4011a78:	210c8004 	addi	r4,r4,12800
 4011a7c:	4005acc0 	call	4005acc <printf>
 4011a80:	e0bff817 	ldw	r2,-32(fp)
 4011a84:	10c00104 	addi	r3,r2,4
 4011a88:	e0fff815 	stw	r3,-32(fp)
 4011a8c:	10800017 	ldw	r2,0(r2)
 4011a90:	e0bfee15 	stw	r2,-72(fp)
 4011a94:	e0bfef17 	ldw	r2,-68(fp)
 4011a98:	10800044 	addi	r2,r2,1
 4011a9c:	e0bfef15 	stw	r2,-68(fp)
 4011aa0:	e0bfef17 	ldw	r2,-68(fp)
 4011aa4:	e0fffb17 	ldw	r3,-20(fp)
 4011aa8:	18bfaf0e 	bge	r3,r2,4011968 <__alt_data_end+0xfc011968>
 4011aac:	0005883a 	mov	r2,zero
 4011ab0:	e6fffc04 	addi	sp,fp,-16
 4011ab4:	dfc00517 	ldw	ra,20(sp)
 4011ab8:	df000417 	ldw	fp,16(sp)
 4011abc:	dcc00317 	ldw	r19,12(sp)
 4011ac0:	dc800217 	ldw	r18,8(sp)
 4011ac4:	dc400117 	ldw	r17,4(sp)
 4011ac8:	dc000017 	ldw	r16,0(sp)
 4011acc:	dec00704 	addi	sp,sp,28
 4011ad0:	f800283a 	ret

04011ad4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4011ad4:	defff504 	addi	sp,sp,-44
 4011ad8:	df000a15 	stw	fp,40(sp)
 4011adc:	df000a04 	addi	fp,sp,40
 4011ae0:	e13ffc15 	stw	r4,-16(fp)
 4011ae4:	e17ffd15 	stw	r5,-12(fp)
 4011ae8:	e1bffe15 	stw	r6,-8(fp)
 4011aec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4011af0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4011af4:	d0a72e17 	ldw	r2,-25416(gp)
  
  if (alt_ticks_per_second ())
 4011af8:	10003c26 	beq	r2,zero,4011bec <alt_alarm_start+0x118>
  {
    if (alarm)
 4011afc:	e0bffc17 	ldw	r2,-16(fp)
 4011b00:	10003826 	beq	r2,zero,4011be4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4011b04:	e0bffc17 	ldw	r2,-16(fp)
 4011b08:	e0fffe17 	ldw	r3,-8(fp)
 4011b0c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4011b10:	e0bffc17 	ldw	r2,-16(fp)
 4011b14:	e0ffff17 	ldw	r3,-4(fp)
 4011b18:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011b1c:	0005303a 	rdctl	r2,status
 4011b20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011b24:	e0fff917 	ldw	r3,-28(fp)
 4011b28:	00bfff84 	movi	r2,-2
 4011b2c:	1884703a 	and	r2,r3,r2
 4011b30:	1001703a 	wrctl	status,r2
  
  return context;
 4011b34:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4011b38:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4011b3c:	d0a72f17 	ldw	r2,-25412(gp)
      
      current_nticks = alt_nticks();
 4011b40:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4011b44:	e0fffd17 	ldw	r3,-12(fp)
 4011b48:	e0bff617 	ldw	r2,-40(fp)
 4011b4c:	1885883a 	add	r2,r3,r2
 4011b50:	10c00044 	addi	r3,r2,1
 4011b54:	e0bffc17 	ldw	r2,-16(fp)
 4011b58:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4011b5c:	e0bffc17 	ldw	r2,-16(fp)
 4011b60:	10c00217 	ldw	r3,8(r2)
 4011b64:	e0bff617 	ldw	r2,-40(fp)
 4011b68:	1880042e 	bgeu	r3,r2,4011b7c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4011b6c:	e0bffc17 	ldw	r2,-16(fp)
 4011b70:	00c00044 	movi	r3,1
 4011b74:	10c00405 	stb	r3,16(r2)
 4011b78:	00000206 	br	4011b84 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4011b7c:	e0bffc17 	ldw	r2,-16(fp)
 4011b80:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4011b84:	e0bffc17 	ldw	r2,-16(fp)
 4011b88:	d0e03404 	addi	r3,gp,-32560
 4011b8c:	e0fffa15 	stw	r3,-24(fp)
 4011b90:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4011b94:	e0bffb17 	ldw	r2,-20(fp)
 4011b98:	e0fffa17 	ldw	r3,-24(fp)
 4011b9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4011ba0:	e0bffa17 	ldw	r2,-24(fp)
 4011ba4:	10c00017 	ldw	r3,0(r2)
 4011ba8:	e0bffb17 	ldw	r2,-20(fp)
 4011bac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4011bb0:	e0bffa17 	ldw	r2,-24(fp)
 4011bb4:	10800017 	ldw	r2,0(r2)
 4011bb8:	e0fffb17 	ldw	r3,-20(fp)
 4011bbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4011bc0:	e0bffa17 	ldw	r2,-24(fp)
 4011bc4:	e0fffb17 	ldw	r3,-20(fp)
 4011bc8:	10c00015 	stw	r3,0(r2)
 4011bcc:	e0bff817 	ldw	r2,-32(fp)
 4011bd0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011bd4:	e0bff717 	ldw	r2,-36(fp)
 4011bd8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4011bdc:	0005883a 	mov	r2,zero
 4011be0:	00000306 	br	4011bf0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4011be4:	00bffa84 	movi	r2,-22
 4011be8:	00000106 	br	4011bf0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4011bec:	00bfde84 	movi	r2,-134
  }
}
 4011bf0:	e037883a 	mov	sp,fp
 4011bf4:	df000017 	ldw	fp,0(sp)
 4011bf8:	dec00104 	addi	sp,sp,4
 4011bfc:	f800283a 	ret

04011c00 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4011c00:	defffe04 	addi	sp,sp,-8
 4011c04:	df000115 	stw	fp,4(sp)
 4011c08:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4011c0c:	e03fff15 	stw	zero,-4(fp)
 4011c10:	00000506 	br	4011c28 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4011c14:	e0bfff17 	ldw	r2,-4(fp)
 4011c18:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4011c1c:	e0bfff17 	ldw	r2,-4(fp)
 4011c20:	10800804 	addi	r2,r2,32
 4011c24:	e0bfff15 	stw	r2,-4(fp)
 4011c28:	e0bfff17 	ldw	r2,-4(fp)
 4011c2c:	10820030 	cmpltui	r2,r2,2048
 4011c30:	103ff81e 	bne	r2,zero,4011c14 <__alt_data_end+0xfc011c14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4011c34:	0001883a 	nop
 4011c38:	e037883a 	mov	sp,fp
 4011c3c:	df000017 	ldw	fp,0(sp)
 4011c40:	dec00104 	addi	sp,sp,4
 4011c44:	f800283a 	ret

04011c48 <alt_get_errno>:
 4011c48:	defffe04 	addi	sp,sp,-8
 4011c4c:	dfc00115 	stw	ra,4(sp)
 4011c50:	df000015 	stw	fp,0(sp)
 4011c54:	d839883a 	mov	fp,sp
 4011c58:	d0a03217 	ldw	r2,-32568(gp)
 4011c5c:	10000326 	beq	r2,zero,4011c6c <alt_get_errno+0x24>
 4011c60:	d0a03217 	ldw	r2,-32568(gp)
 4011c64:	103ee83a 	callr	r2
 4011c68:	00000106 	br	4011c70 <alt_get_errno+0x28>
 4011c6c:	d0a72004 	addi	r2,gp,-25472
 4011c70:	e037883a 	mov	sp,fp
 4011c74:	dfc00117 	ldw	ra,4(sp)
 4011c78:	df000017 	ldw	fp,0(sp)
 4011c7c:	dec00204 	addi	sp,sp,8
 4011c80:	f800283a 	ret

04011c84 <alt_dev_llist_insert>:
 4011c84:	defffa04 	addi	sp,sp,-24
 4011c88:	dfc00515 	stw	ra,20(sp)
 4011c8c:	df000415 	stw	fp,16(sp)
 4011c90:	df000404 	addi	fp,sp,16
 4011c94:	e13ffe15 	stw	r4,-8(fp)
 4011c98:	e17fff15 	stw	r5,-4(fp)
 4011c9c:	e0bffe17 	ldw	r2,-8(fp)
 4011ca0:	10000326 	beq	r2,zero,4011cb0 <alt_dev_llist_insert+0x2c>
 4011ca4:	e0bffe17 	ldw	r2,-8(fp)
 4011ca8:	10800217 	ldw	r2,8(r2)
 4011cac:	1000061e 	bne	r2,zero,4011cc8 <alt_dev_llist_insert+0x44>
 4011cb0:	4011c480 	call	4011c48 <alt_get_errno>
 4011cb4:	1007883a 	mov	r3,r2
 4011cb8:	00800584 	movi	r2,22
 4011cbc:	18800015 	stw	r2,0(r3)
 4011cc0:	00bffa84 	movi	r2,-22
 4011cc4:	00001306 	br	4011d14 <alt_dev_llist_insert+0x90>
 4011cc8:	e0bffe17 	ldw	r2,-8(fp)
 4011ccc:	e0ffff17 	ldw	r3,-4(fp)
 4011cd0:	e0fffc15 	stw	r3,-16(fp)
 4011cd4:	e0bffd15 	stw	r2,-12(fp)
 4011cd8:	e0bffd17 	ldw	r2,-12(fp)
 4011cdc:	e0fffc17 	ldw	r3,-16(fp)
 4011ce0:	10c00115 	stw	r3,4(r2)
 4011ce4:	e0bffc17 	ldw	r2,-16(fp)
 4011ce8:	10c00017 	ldw	r3,0(r2)
 4011cec:	e0bffd17 	ldw	r2,-12(fp)
 4011cf0:	10c00015 	stw	r3,0(r2)
 4011cf4:	e0bffc17 	ldw	r2,-16(fp)
 4011cf8:	10800017 	ldw	r2,0(r2)
 4011cfc:	e0fffd17 	ldw	r3,-12(fp)
 4011d00:	10c00115 	stw	r3,4(r2)
 4011d04:	e0bffc17 	ldw	r2,-16(fp)
 4011d08:	e0fffd17 	ldw	r3,-12(fp)
 4011d0c:	10c00015 	stw	r3,0(r2)
 4011d10:	0005883a 	mov	r2,zero
 4011d14:	e037883a 	mov	sp,fp
 4011d18:	dfc00117 	ldw	ra,4(sp)
 4011d1c:	df000017 	ldw	fp,0(sp)
 4011d20:	dec00204 	addi	sp,sp,8
 4011d24:	f800283a 	ret

04011d28 <_do_ctors>:
 4011d28:	defffd04 	addi	sp,sp,-12
 4011d2c:	dfc00215 	stw	ra,8(sp)
 4011d30:	df000115 	stw	fp,4(sp)
 4011d34:	df000104 	addi	fp,sp,4
 4011d38:	00810074 	movhi	r2,1025
 4011d3c:	108b5a04 	addi	r2,r2,11624
 4011d40:	e0bfff15 	stw	r2,-4(fp)
 4011d44:	00000606 	br	4011d60 <_do_ctors+0x38>
 4011d48:	e0bfff17 	ldw	r2,-4(fp)
 4011d4c:	10800017 	ldw	r2,0(r2)
 4011d50:	103ee83a 	callr	r2
 4011d54:	e0bfff17 	ldw	r2,-4(fp)
 4011d58:	10bfff04 	addi	r2,r2,-4
 4011d5c:	e0bfff15 	stw	r2,-4(fp)
 4011d60:	e0ffff17 	ldw	r3,-4(fp)
 4011d64:	00810074 	movhi	r2,1025
 4011d68:	108b5b04 	addi	r2,r2,11628
 4011d6c:	18bff62e 	bgeu	r3,r2,4011d48 <__alt_data_end+0xfc011d48>
 4011d70:	0001883a 	nop
 4011d74:	e037883a 	mov	sp,fp
 4011d78:	dfc00117 	ldw	ra,4(sp)
 4011d7c:	df000017 	ldw	fp,0(sp)
 4011d80:	dec00204 	addi	sp,sp,8
 4011d84:	f800283a 	ret

04011d88 <_do_dtors>:
 4011d88:	defffd04 	addi	sp,sp,-12
 4011d8c:	dfc00215 	stw	ra,8(sp)
 4011d90:	df000115 	stw	fp,4(sp)
 4011d94:	df000104 	addi	fp,sp,4
 4011d98:	00810074 	movhi	r2,1025
 4011d9c:	108b5a04 	addi	r2,r2,11624
 4011da0:	e0bfff15 	stw	r2,-4(fp)
 4011da4:	00000606 	br	4011dc0 <_do_dtors+0x38>
 4011da8:	e0bfff17 	ldw	r2,-4(fp)
 4011dac:	10800017 	ldw	r2,0(r2)
 4011db0:	103ee83a 	callr	r2
 4011db4:	e0bfff17 	ldw	r2,-4(fp)
 4011db8:	10bfff04 	addi	r2,r2,-4
 4011dbc:	e0bfff15 	stw	r2,-4(fp)
 4011dc0:	e0ffff17 	ldw	r3,-4(fp)
 4011dc4:	00810074 	movhi	r2,1025
 4011dc8:	108b5b04 	addi	r2,r2,11628
 4011dcc:	18bff62e 	bgeu	r3,r2,4011da8 <__alt_data_end+0xfc011da8>
 4011dd0:	0001883a 	nop
 4011dd4:	e037883a 	mov	sp,fp
 4011dd8:	dfc00117 	ldw	ra,4(sp)
 4011ddc:	df000017 	ldw	fp,0(sp)
 4011de0:	dec00204 	addi	sp,sp,8
 4011de4:	f800283a 	ret

04011de8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4011de8:	defffe04 	addi	sp,sp,-8
 4011dec:	dfc00115 	stw	ra,4(sp)
 4011df0:	df000015 	stw	fp,0(sp)
 4011df4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4011df8:	01440004 	movi	r5,4096
 4011dfc:	0009883a 	mov	r4,zero
 4011e00:	401283c0 	call	401283c <alt_icache_flush>
#endif
}
 4011e04:	0001883a 	nop
 4011e08:	e037883a 	mov	sp,fp
 4011e0c:	dfc00117 	ldw	ra,4(sp)
 4011e10:	df000017 	ldw	fp,0(sp)
 4011e14:	dec00204 	addi	sp,sp,8
 4011e18:	f800283a 	ret

04011e1c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4011e1c:	defff904 	addi	sp,sp,-28
 4011e20:	dfc00615 	stw	ra,24(sp)
 4011e24:	df000515 	stw	fp,20(sp)
 4011e28:	df000504 	addi	fp,sp,20
 4011e2c:	e13ffc15 	stw	r4,-16(fp)
 4011e30:	e17ffd15 	stw	r5,-12(fp)
 4011e34:	e1bffe15 	stw	r6,-8(fp)
 4011e38:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4011e3c:	e0800217 	ldw	r2,8(fp)
 4011e40:	d8800015 	stw	r2,0(sp)
 4011e44:	e1ffff17 	ldw	r7,-4(fp)
 4011e48:	e1bffe17 	ldw	r6,-8(fp)
 4011e4c:	e17ffd17 	ldw	r5,-12(fp)
 4011e50:	e13ffc17 	ldw	r4,-16(fp)
 4011e54:	4011fcc0 	call	4011fcc <alt_iic_isr_register>
}  
 4011e58:	e037883a 	mov	sp,fp
 4011e5c:	dfc00117 	ldw	ra,4(sp)
 4011e60:	df000017 	ldw	fp,0(sp)
 4011e64:	dec00204 	addi	sp,sp,8
 4011e68:	f800283a 	ret

04011e6c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4011e6c:	defff904 	addi	sp,sp,-28
 4011e70:	df000615 	stw	fp,24(sp)
 4011e74:	df000604 	addi	fp,sp,24
 4011e78:	e13ffe15 	stw	r4,-8(fp)
 4011e7c:	e17fff15 	stw	r5,-4(fp)
 4011e80:	e0bfff17 	ldw	r2,-4(fp)
 4011e84:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011e88:	0005303a 	rdctl	r2,status
 4011e8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011e90:	e0fffb17 	ldw	r3,-20(fp)
 4011e94:	00bfff84 	movi	r2,-2
 4011e98:	1884703a 	and	r2,r3,r2
 4011e9c:	1001703a 	wrctl	status,r2
  
  return context;
 4011ea0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011ea4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4011ea8:	00c00044 	movi	r3,1
 4011eac:	e0bffa17 	ldw	r2,-24(fp)
 4011eb0:	1884983a 	sll	r2,r3,r2
 4011eb4:	1007883a 	mov	r3,r2
 4011eb8:	d0a73017 	ldw	r2,-25408(gp)
 4011ebc:	1884b03a 	or	r2,r3,r2
 4011ec0:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011ec4:	d0a73017 	ldw	r2,-25408(gp)
 4011ec8:	100170fa 	wrctl	ienable,r2
 4011ecc:	e0bffc17 	ldw	r2,-16(fp)
 4011ed0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011ed4:	e0bffd17 	ldw	r2,-12(fp)
 4011ed8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011edc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4011ee0:	0001883a 	nop
}
 4011ee4:	e037883a 	mov	sp,fp
 4011ee8:	df000017 	ldw	fp,0(sp)
 4011eec:	dec00104 	addi	sp,sp,4
 4011ef0:	f800283a 	ret

04011ef4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4011ef4:	defff904 	addi	sp,sp,-28
 4011ef8:	df000615 	stw	fp,24(sp)
 4011efc:	df000604 	addi	fp,sp,24
 4011f00:	e13ffe15 	stw	r4,-8(fp)
 4011f04:	e17fff15 	stw	r5,-4(fp)
 4011f08:	e0bfff17 	ldw	r2,-4(fp)
 4011f0c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011f10:	0005303a 	rdctl	r2,status
 4011f14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011f18:	e0fffb17 	ldw	r3,-20(fp)
 4011f1c:	00bfff84 	movi	r2,-2
 4011f20:	1884703a 	and	r2,r3,r2
 4011f24:	1001703a 	wrctl	status,r2
  
  return context;
 4011f28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011f2c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4011f30:	00c00044 	movi	r3,1
 4011f34:	e0bffa17 	ldw	r2,-24(fp)
 4011f38:	1884983a 	sll	r2,r3,r2
 4011f3c:	0084303a 	nor	r2,zero,r2
 4011f40:	1007883a 	mov	r3,r2
 4011f44:	d0a73017 	ldw	r2,-25408(gp)
 4011f48:	1884703a 	and	r2,r3,r2
 4011f4c:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011f50:	d0a73017 	ldw	r2,-25408(gp)
 4011f54:	100170fa 	wrctl	ienable,r2
 4011f58:	e0bffc17 	ldw	r2,-16(fp)
 4011f5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011f60:	e0bffd17 	ldw	r2,-12(fp)
 4011f64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011f68:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4011f6c:	0001883a 	nop
}
 4011f70:	e037883a 	mov	sp,fp
 4011f74:	df000017 	ldw	fp,0(sp)
 4011f78:	dec00104 	addi	sp,sp,4
 4011f7c:	f800283a 	ret

04011f80 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4011f80:	defffc04 	addi	sp,sp,-16
 4011f84:	df000315 	stw	fp,12(sp)
 4011f88:	df000304 	addi	fp,sp,12
 4011f8c:	e13ffe15 	stw	r4,-8(fp)
 4011f90:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4011f94:	000530fa 	rdctl	r2,ienable
 4011f98:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4011f9c:	00c00044 	movi	r3,1
 4011fa0:	e0bfff17 	ldw	r2,-4(fp)
 4011fa4:	1884983a 	sll	r2,r3,r2
 4011fa8:	1007883a 	mov	r3,r2
 4011fac:	e0bffd17 	ldw	r2,-12(fp)
 4011fb0:	1884703a 	and	r2,r3,r2
 4011fb4:	1004c03a 	cmpne	r2,r2,zero
 4011fb8:	10803fcc 	andi	r2,r2,255
}
 4011fbc:	e037883a 	mov	sp,fp
 4011fc0:	df000017 	ldw	fp,0(sp)
 4011fc4:	dec00104 	addi	sp,sp,4
 4011fc8:	f800283a 	ret

04011fcc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4011fcc:	defff504 	addi	sp,sp,-44
 4011fd0:	dfc00a15 	stw	ra,40(sp)
 4011fd4:	df000915 	stw	fp,36(sp)
 4011fd8:	df000904 	addi	fp,sp,36
 4011fdc:	e13ffc15 	stw	r4,-16(fp)
 4011fe0:	e17ffd15 	stw	r5,-12(fp)
 4011fe4:	e1bffe15 	stw	r6,-8(fp)
 4011fe8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4011fec:	00bffa84 	movi	r2,-22
 4011ff0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4011ff4:	e0bffd17 	ldw	r2,-12(fp)
 4011ff8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4011ffc:	e0bff817 	ldw	r2,-32(fp)
 4012000:	10800808 	cmpgei	r2,r2,32
 4012004:	1000271e 	bne	r2,zero,40120a4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012008:	0005303a 	rdctl	r2,status
 401200c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012010:	e0fffb17 	ldw	r3,-20(fp)
 4012014:	00bfff84 	movi	r2,-2
 4012018:	1884703a 	and	r2,r3,r2
 401201c:	1001703a 	wrctl	status,r2
  
  return context;
 4012020:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4012024:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4012028:	008100b4 	movhi	r2,1026
 401202c:	10a45004 	addi	r2,r2,-28352
 4012030:	e0fff817 	ldw	r3,-32(fp)
 4012034:	180690fa 	slli	r3,r3,3
 4012038:	10c5883a 	add	r2,r2,r3
 401203c:	e0fffe17 	ldw	r3,-8(fp)
 4012040:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4012044:	008100b4 	movhi	r2,1026
 4012048:	10a45004 	addi	r2,r2,-28352
 401204c:	e0fff817 	ldw	r3,-32(fp)
 4012050:	180690fa 	slli	r3,r3,3
 4012054:	10c5883a 	add	r2,r2,r3
 4012058:	10800104 	addi	r2,r2,4
 401205c:	e0ffff17 	ldw	r3,-4(fp)
 4012060:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4012064:	e0bffe17 	ldw	r2,-8(fp)
 4012068:	10000526 	beq	r2,zero,4012080 <alt_iic_isr_register+0xb4>
 401206c:	e0bff817 	ldw	r2,-32(fp)
 4012070:	100b883a 	mov	r5,r2
 4012074:	e13ffc17 	ldw	r4,-16(fp)
 4012078:	4011e6c0 	call	4011e6c <alt_ic_irq_enable>
 401207c:	00000406 	br	4012090 <alt_iic_isr_register+0xc4>
 4012080:	e0bff817 	ldw	r2,-32(fp)
 4012084:	100b883a 	mov	r5,r2
 4012088:	e13ffc17 	ldw	r4,-16(fp)
 401208c:	4011ef40 	call	4011ef4 <alt_ic_irq_disable>
 4012090:	e0bff715 	stw	r2,-36(fp)
 4012094:	e0bffa17 	ldw	r2,-24(fp)
 4012098:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401209c:	e0bff917 	ldw	r2,-28(fp)
 40120a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40120a4:	e0bff717 	ldw	r2,-36(fp)
}
 40120a8:	e037883a 	mov	sp,fp
 40120ac:	dfc00117 	ldw	ra,4(sp)
 40120b0:	df000017 	ldw	fp,0(sp)
 40120b4:	dec00204 	addi	sp,sp,8
 40120b8:	f800283a 	ret

040120bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40120bc:	defff904 	addi	sp,sp,-28
 40120c0:	dfc00615 	stw	ra,24(sp)
 40120c4:	df000515 	stw	fp,20(sp)
 40120c8:	df000504 	addi	fp,sp,20
 40120cc:	e13ffc15 	stw	r4,-16(fp)
 40120d0:	e17ffd15 	stw	r5,-12(fp)
 40120d4:	e1bffe15 	stw	r6,-8(fp)
 40120d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40120dc:	e1bfff17 	ldw	r6,-4(fp)
 40120e0:	e17ffe17 	ldw	r5,-8(fp)
 40120e4:	e13ffd17 	ldw	r4,-12(fp)
 40120e8:	40122fc0 	call	40122fc <open>
 40120ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40120f0:	e0bffb17 	ldw	r2,-20(fp)
 40120f4:	10001c16 	blt	r2,zero,4012168 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40120f8:	00810074 	movhi	r2,1025
 40120fc:	108ebc04 	addi	r2,r2,15088
 4012100:	e0fffb17 	ldw	r3,-20(fp)
 4012104:	18c00324 	muli	r3,r3,12
 4012108:	10c5883a 	add	r2,r2,r3
 401210c:	10c00017 	ldw	r3,0(r2)
 4012110:	e0bffc17 	ldw	r2,-16(fp)
 4012114:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4012118:	00810074 	movhi	r2,1025
 401211c:	108ebc04 	addi	r2,r2,15088
 4012120:	e0fffb17 	ldw	r3,-20(fp)
 4012124:	18c00324 	muli	r3,r3,12
 4012128:	10c5883a 	add	r2,r2,r3
 401212c:	10800104 	addi	r2,r2,4
 4012130:	10c00017 	ldw	r3,0(r2)
 4012134:	e0bffc17 	ldw	r2,-16(fp)
 4012138:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401213c:	00810074 	movhi	r2,1025
 4012140:	108ebc04 	addi	r2,r2,15088
 4012144:	e0fffb17 	ldw	r3,-20(fp)
 4012148:	18c00324 	muli	r3,r3,12
 401214c:	10c5883a 	add	r2,r2,r3
 4012150:	10800204 	addi	r2,r2,8
 4012154:	10c00017 	ldw	r3,0(r2)
 4012158:	e0bffc17 	ldw	r2,-16(fp)
 401215c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4012160:	e13ffb17 	ldw	r4,-20(fp)
 4012164:	40108340 	call	4010834 <alt_release_fd>
  }
} 
 4012168:	0001883a 	nop
 401216c:	e037883a 	mov	sp,fp
 4012170:	dfc00117 	ldw	ra,4(sp)
 4012174:	df000017 	ldw	fp,0(sp)
 4012178:	dec00204 	addi	sp,sp,8
 401217c:	f800283a 	ret

04012180 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4012180:	defffb04 	addi	sp,sp,-20
 4012184:	dfc00415 	stw	ra,16(sp)
 4012188:	df000315 	stw	fp,12(sp)
 401218c:	df000304 	addi	fp,sp,12
 4012190:	e13ffd15 	stw	r4,-12(fp)
 4012194:	e17ffe15 	stw	r5,-8(fp)
 4012198:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401219c:	01c07fc4 	movi	r7,511
 40121a0:	01800044 	movi	r6,1
 40121a4:	e17ffd17 	ldw	r5,-12(fp)
 40121a8:	01010074 	movhi	r4,1025
 40121ac:	210ebf04 	addi	r4,r4,15100
 40121b0:	40120bc0 	call	40120bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40121b4:	01c07fc4 	movi	r7,511
 40121b8:	000d883a 	mov	r6,zero
 40121bc:	e17ffe17 	ldw	r5,-8(fp)
 40121c0:	01010074 	movhi	r4,1025
 40121c4:	210ebc04 	addi	r4,r4,15088
 40121c8:	40120bc0 	call	40120bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40121cc:	01c07fc4 	movi	r7,511
 40121d0:	01800044 	movi	r6,1
 40121d4:	e17fff17 	ldw	r5,-4(fp)
 40121d8:	01010074 	movhi	r4,1025
 40121dc:	210ec204 	addi	r4,r4,15112
 40121e0:	40120bc0 	call	40120bc <alt_open_fd>
}  
 40121e4:	0001883a 	nop
 40121e8:	e037883a 	mov	sp,fp
 40121ec:	dfc00117 	ldw	ra,4(sp)
 40121f0:	df000017 	ldw	fp,0(sp)
 40121f4:	dec00204 	addi	sp,sp,8
 40121f8:	f800283a 	ret

040121fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40121fc:	defffe04 	addi	sp,sp,-8
 4012200:	dfc00115 	stw	ra,4(sp)
 4012204:	df000015 	stw	fp,0(sp)
 4012208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401220c:	d0a03217 	ldw	r2,-32568(gp)
 4012210:	10000326 	beq	r2,zero,4012220 <alt_get_errno+0x24>
 4012214:	d0a03217 	ldw	r2,-32568(gp)
 4012218:	103ee83a 	callr	r2
 401221c:	00000106 	br	4012224 <alt_get_errno+0x28>
 4012220:	d0a72004 	addi	r2,gp,-25472
}
 4012224:	e037883a 	mov	sp,fp
 4012228:	dfc00117 	ldw	ra,4(sp)
 401222c:	df000017 	ldw	fp,0(sp)
 4012230:	dec00204 	addi	sp,sp,8
 4012234:	f800283a 	ret

04012238 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4012238:	defffd04 	addi	sp,sp,-12
 401223c:	df000215 	stw	fp,8(sp)
 4012240:	df000204 	addi	fp,sp,8
 4012244:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4012248:	e0bfff17 	ldw	r2,-4(fp)
 401224c:	10800217 	ldw	r2,8(r2)
 4012250:	10d00034 	orhi	r3,r2,16384
 4012254:	e0bfff17 	ldw	r2,-4(fp)
 4012258:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401225c:	e03ffe15 	stw	zero,-8(fp)
 4012260:	00001d06 	br	40122d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012264:	00810074 	movhi	r2,1025
 4012268:	108ebc04 	addi	r2,r2,15088
 401226c:	e0fffe17 	ldw	r3,-8(fp)
 4012270:	18c00324 	muli	r3,r3,12
 4012274:	10c5883a 	add	r2,r2,r3
 4012278:	10c00017 	ldw	r3,0(r2)
 401227c:	e0bfff17 	ldw	r2,-4(fp)
 4012280:	10800017 	ldw	r2,0(r2)
 4012284:	1880111e 	bne	r3,r2,40122cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012288:	00810074 	movhi	r2,1025
 401228c:	108ebc04 	addi	r2,r2,15088
 4012290:	e0fffe17 	ldw	r3,-8(fp)
 4012294:	18c00324 	muli	r3,r3,12
 4012298:	10c5883a 	add	r2,r2,r3
 401229c:	10800204 	addi	r2,r2,8
 40122a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40122a4:	1000090e 	bge	r2,zero,40122cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40122a8:	e0bffe17 	ldw	r2,-8(fp)
 40122ac:	10c00324 	muli	r3,r2,12
 40122b0:	00810074 	movhi	r2,1025
 40122b4:	108ebc04 	addi	r2,r2,15088
 40122b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40122bc:	e0bfff17 	ldw	r2,-4(fp)
 40122c0:	18800226 	beq	r3,r2,40122cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40122c4:	00bffcc4 	movi	r2,-13
 40122c8:	00000806 	br	40122ec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40122cc:	e0bffe17 	ldw	r2,-8(fp)
 40122d0:	10800044 	addi	r2,r2,1
 40122d4:	e0bffe15 	stw	r2,-8(fp)
 40122d8:	d0a03117 	ldw	r2,-32572(gp)
 40122dc:	1007883a 	mov	r3,r2
 40122e0:	e0bffe17 	ldw	r2,-8(fp)
 40122e4:	18bfdf2e 	bgeu	r3,r2,4012264 <__alt_data_end+0xfc012264>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40122e8:	0005883a 	mov	r2,zero
}
 40122ec:	e037883a 	mov	sp,fp
 40122f0:	df000017 	ldw	fp,0(sp)
 40122f4:	dec00104 	addi	sp,sp,4
 40122f8:	f800283a 	ret

040122fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40122fc:	defff604 	addi	sp,sp,-40
 4012300:	dfc00915 	stw	ra,36(sp)
 4012304:	df000815 	stw	fp,32(sp)
 4012308:	df000804 	addi	fp,sp,32
 401230c:	e13ffd15 	stw	r4,-12(fp)
 4012310:	e17ffe15 	stw	r5,-8(fp)
 4012314:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4012318:	00bfffc4 	movi	r2,-1
 401231c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4012320:	00bffb44 	movi	r2,-19
 4012324:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4012328:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401232c:	d1602f04 	addi	r5,gp,-32580
 4012330:	e13ffd17 	ldw	r4,-12(fp)
 4012334:	40126000 	call	4012600 <alt_find_dev>
 4012338:	e0bff815 	stw	r2,-32(fp)
 401233c:	e0bff817 	ldw	r2,-32(fp)
 4012340:	1000051e 	bne	r2,zero,4012358 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4012344:	e13ffd17 	ldw	r4,-12(fp)
 4012348:	40126900 	call	4012690 <alt_find_file>
 401234c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4012350:	00800044 	movi	r2,1
 4012354:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4012358:	e0bff817 	ldw	r2,-32(fp)
 401235c:	10002926 	beq	r2,zero,4012404 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4012360:	e13ff817 	ldw	r4,-32(fp)
 4012364:	40127980 	call	4012798 <alt_get_fd>
 4012368:	e0bff915 	stw	r2,-28(fp)
 401236c:	e0bff917 	ldw	r2,-28(fp)
 4012370:	1000030e 	bge	r2,zero,4012380 <open+0x84>
    {
      status = index;
 4012374:	e0bff917 	ldw	r2,-28(fp)
 4012378:	e0bffa15 	stw	r2,-24(fp)
 401237c:	00002306 	br	401240c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4012380:	e0bff917 	ldw	r2,-28(fp)
 4012384:	10c00324 	muli	r3,r2,12
 4012388:	00810074 	movhi	r2,1025
 401238c:	108ebc04 	addi	r2,r2,15088
 4012390:	1885883a 	add	r2,r3,r2
 4012394:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4012398:	e0fffe17 	ldw	r3,-8(fp)
 401239c:	00900034 	movhi	r2,16384
 40123a0:	10bfffc4 	addi	r2,r2,-1
 40123a4:	1886703a 	and	r3,r3,r2
 40123a8:	e0bffc17 	ldw	r2,-16(fp)
 40123ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40123b0:	e0bffb17 	ldw	r2,-20(fp)
 40123b4:	1000051e 	bne	r2,zero,40123cc <open+0xd0>
 40123b8:	e13ffc17 	ldw	r4,-16(fp)
 40123bc:	40122380 	call	4012238 <alt_file_locked>
 40123c0:	e0bffa15 	stw	r2,-24(fp)
 40123c4:	e0bffa17 	ldw	r2,-24(fp)
 40123c8:	10001016 	blt	r2,zero,401240c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40123cc:	e0bff817 	ldw	r2,-32(fp)
 40123d0:	10800317 	ldw	r2,12(r2)
 40123d4:	10000826 	beq	r2,zero,40123f8 <open+0xfc>
 40123d8:	e0bff817 	ldw	r2,-32(fp)
 40123dc:	10800317 	ldw	r2,12(r2)
 40123e0:	e1ffff17 	ldw	r7,-4(fp)
 40123e4:	e1bffe17 	ldw	r6,-8(fp)
 40123e8:	e17ffd17 	ldw	r5,-12(fp)
 40123ec:	e13ffc17 	ldw	r4,-16(fp)
 40123f0:	103ee83a 	callr	r2
 40123f4:	00000106 	br	40123fc <open+0x100>
 40123f8:	0005883a 	mov	r2,zero
 40123fc:	e0bffa15 	stw	r2,-24(fp)
 4012400:	00000206 	br	401240c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4012404:	00bffb44 	movi	r2,-19
 4012408:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401240c:	e0bffa17 	ldw	r2,-24(fp)
 4012410:	1000090e 	bge	r2,zero,4012438 <open+0x13c>
  {
    alt_release_fd (index);  
 4012414:	e13ff917 	ldw	r4,-28(fp)
 4012418:	40108340 	call	4010834 <alt_release_fd>
    ALT_ERRNO = -status;
 401241c:	40121fc0 	call	40121fc <alt_get_errno>
 4012420:	1007883a 	mov	r3,r2
 4012424:	e0bffa17 	ldw	r2,-24(fp)
 4012428:	0085c83a 	sub	r2,zero,r2
 401242c:	18800015 	stw	r2,0(r3)
    return -1;
 4012430:	00bfffc4 	movi	r2,-1
 4012434:	00000106 	br	401243c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4012438:	e0bff917 	ldw	r2,-28(fp)
}
 401243c:	e037883a 	mov	sp,fp
 4012440:	dfc00117 	ldw	ra,4(sp)
 4012444:	df000017 	ldw	fp,0(sp)
 4012448:	dec00204 	addi	sp,sp,8
 401244c:	f800283a 	ret

04012450 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4012450:	deffff04 	addi	sp,sp,-4
 4012454:	df000015 	stw	fp,0(sp)
 4012458:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401245c:	000170fa 	wrctl	ienable,zero
}
 4012460:	0001883a 	nop
 4012464:	e037883a 	mov	sp,fp
 4012468:	df000017 	ldw	fp,0(sp)
 401246c:	dec00104 	addi	sp,sp,4
 4012470:	f800283a 	ret

04012474 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 4012474:	defff904 	addi	sp,sp,-28
 4012478:	df000615 	stw	fp,24(sp)
 401247c:	df000604 	addi	fp,sp,24
 4012480:	e13ffe15 	stw	r4,-8(fp)
 4012484:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 4012488:	e03ffa15 	stw	zero,-24(fp)
 401248c:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 4012490:	000b883a 	mov	r5,zero
 4012494:	e13ffe17 	ldw	r4,-8(fp)
 4012498:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
 401249c:	e13fff17 	ldw	r4,-4(fp)
 40124a0:	2008913a 	slli	r4,r4,4
 40124a4:	200b883a 	mov	r5,r4
 40124a8:	e13ffe17 	ldw	r4,-8(fp)
 40124ac:	2149883a 	add	r4,r4,r5
 40124b0:	21000037 	ldwio	r4,0(r4)
 40124b4:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 40124b8:	e13fff17 	ldw	r4,-4(fp)
 40124bc:	2008913a 	slli	r4,r4,4
 40124c0:	21000104 	addi	r4,r4,4
 40124c4:	200b883a 	mov	r5,r4
 40124c8:	e13ffe17 	ldw	r4,-8(fp)
 40124cc:	2149883a 	add	r4,r4,r5
 40124d0:	21000037 	ldwio	r4,0(r4)
 40124d4:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 40124d8:	e13ffd17 	ldw	r4,-12(fp)
 40124dc:	2011883a 	mov	r8,r4
 40124e0:	0013883a 	mov	r9,zero
 40124e4:	4006983a 	sll	r3,r8,zero
 40124e8:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
 40124ec:	e13ffc17 	ldw	r4,-16(fp)
 40124f0:	200d883a 	mov	r6,r4
 40124f4:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 40124f8:	1188b03a 	or	r4,r2,r6
 40124fc:	e13ffa15 	stw	r4,-24(fp)
 4012500:	19c4b03a 	or	r2,r3,r7
 4012504:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 4012508:	e0bffa17 	ldw	r2,-24(fp)
 401250c:	e0fffb17 	ldw	r3,-20(fp)
 4012510:	1009883a 	mov	r4,r2
 4012514:	180b883a 	mov	r5,r3
}
 4012518:	2005883a 	mov	r2,r4
 401251c:	2807883a 	mov	r3,r5
 4012520:	e037883a 	mov	sp,fp
 4012524:	df000017 	ldw	fp,0(sp)
 4012528:	dec00104 	addi	sp,sp,4
 401252c:	f800283a 	ret

04012530 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 4012530:	defffd04 	addi	sp,sp,-12
 4012534:	dfc00215 	stw	ra,8(sp)
 4012538:	df000115 	stw	fp,4(sp)
 401253c:	df000104 	addi	fp,sp,4
 4012540:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 4012544:	000b883a 	mov	r5,zero
 4012548:	e13fff17 	ldw	r4,-4(fp)
 401254c:	40124740 	call	4012474 <perf_get_section_time>
 4012550:	100b883a 	mov	r5,r2
 4012554:	180d883a 	mov	r6,r3
 4012558:	2807883a 	mov	r3,r5
 401255c:	3009883a 	mov	r4,r6
}
 4012560:	1805883a 	mov	r2,r3
 4012564:	2007883a 	mov	r3,r4
 4012568:	e037883a 	mov	sp,fp
 401256c:	dfc00117 	ldw	ra,4(sp)
 4012570:	df000017 	ldw	fp,0(sp)
 4012574:	dec00204 	addi	sp,sp,8
 4012578:	f800283a 	ret

0401257c <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 401257c:	defffd04 	addi	sp,sp,-12
 4012580:	df000215 	stw	fp,8(sp)
 4012584:	df000204 	addi	fp,sp,8
 4012588:	e13ffe15 	stw	r4,-8(fp)
 401258c:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 4012590:	e0bfff17 	ldw	r2,-4(fp)
 4012594:	1004913a 	slli	r2,r2,4
 4012598:	10800204 	addi	r2,r2,8
 401259c:	1007883a 	mov	r3,r2
 40125a0:	e0bffe17 	ldw	r2,-8(fp)
 40125a4:	10c5883a 	add	r2,r2,r3
 40125a8:	10800037 	ldwio	r2,0(r2)
}
 40125ac:	e037883a 	mov	sp,fp
 40125b0:	df000017 	ldw	fp,0(sp)
 40125b4:	dec00104 	addi	sp,sp,4
 40125b8:	f800283a 	ret

040125bc <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 40125bc:	deffff04 	addi	sp,sp,-4
 40125c0:	df000015 	stw	fp,0(sp)
 40125c4:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
 40125c8:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
 40125cc:	e037883a 	mov	sp,fp
 40125d0:	df000017 	ldw	fp,0(sp)
 40125d4:	dec00104 	addi	sp,sp,4
 40125d8:	f800283a 	ret

040125dc <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 40125dc:	deffff04 	addi	sp,sp,-4
 40125e0:	df000015 	stw	fp,0(sp)
 40125e4:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 40125e8:	00817db4 	movhi	r2,1526
 40125ec:	10b84004 	addi	r2,r2,-7936
}
 40125f0:	e037883a 	mov	sp,fp
 40125f4:	df000017 	ldw	fp,0(sp)
 40125f8:	dec00104 	addi	sp,sp,4
 40125fc:	f800283a 	ret

04012600 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4012600:	defffa04 	addi	sp,sp,-24
 4012604:	dfc00515 	stw	ra,20(sp)
 4012608:	df000415 	stw	fp,16(sp)
 401260c:	df000404 	addi	fp,sp,16
 4012610:	e13ffe15 	stw	r4,-8(fp)
 4012614:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4012618:	e0bfff17 	ldw	r2,-4(fp)
 401261c:	10800017 	ldw	r2,0(r2)
 4012620:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4012624:	e13ffe17 	ldw	r4,-8(fp)
 4012628:	4005c780 	call	4005c78 <strlen>
 401262c:	10800044 	addi	r2,r2,1
 4012630:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4012634:	00000d06 	br	401266c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4012638:	e0bffc17 	ldw	r2,-16(fp)
 401263c:	10800217 	ldw	r2,8(r2)
 4012640:	e0fffd17 	ldw	r3,-12(fp)
 4012644:	180d883a 	mov	r6,r3
 4012648:	e17ffe17 	ldw	r5,-8(fp)
 401264c:	1009883a 	mov	r4,r2
 4012650:	40129b40 	call	40129b4 <memcmp>
 4012654:	1000021e 	bne	r2,zero,4012660 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4012658:	e0bffc17 	ldw	r2,-16(fp)
 401265c:	00000706 	br	401267c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4012660:	e0bffc17 	ldw	r2,-16(fp)
 4012664:	10800017 	ldw	r2,0(r2)
 4012668:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401266c:	e0fffc17 	ldw	r3,-16(fp)
 4012670:	e0bfff17 	ldw	r2,-4(fp)
 4012674:	18bff01e 	bne	r3,r2,4012638 <__alt_data_end+0xfc012638>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4012678:	0005883a 	mov	r2,zero
}
 401267c:	e037883a 	mov	sp,fp
 4012680:	dfc00117 	ldw	ra,4(sp)
 4012684:	df000017 	ldw	fp,0(sp)
 4012688:	dec00204 	addi	sp,sp,8
 401268c:	f800283a 	ret

04012690 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4012690:	defffb04 	addi	sp,sp,-20
 4012694:	dfc00415 	stw	ra,16(sp)
 4012698:	df000315 	stw	fp,12(sp)
 401269c:	df000304 	addi	fp,sp,12
 40126a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40126a4:	d0a02d17 	ldw	r2,-32588(gp)
 40126a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40126ac:	00003106 	br	4012774 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40126b0:	e0bffd17 	ldw	r2,-12(fp)
 40126b4:	10800217 	ldw	r2,8(r2)
 40126b8:	1009883a 	mov	r4,r2
 40126bc:	4005c780 	call	4005c78 <strlen>
 40126c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40126c4:	e0bffd17 	ldw	r2,-12(fp)
 40126c8:	10c00217 	ldw	r3,8(r2)
 40126cc:	e0bffe17 	ldw	r2,-8(fp)
 40126d0:	10bfffc4 	addi	r2,r2,-1
 40126d4:	1885883a 	add	r2,r3,r2
 40126d8:	10800003 	ldbu	r2,0(r2)
 40126dc:	10803fcc 	andi	r2,r2,255
 40126e0:	1080201c 	xori	r2,r2,128
 40126e4:	10bfe004 	addi	r2,r2,-128
 40126e8:	10800bd8 	cmpnei	r2,r2,47
 40126ec:	1000031e 	bne	r2,zero,40126fc <alt_find_file+0x6c>
    {
      len -= 1;
 40126f0:	e0bffe17 	ldw	r2,-8(fp)
 40126f4:	10bfffc4 	addi	r2,r2,-1
 40126f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40126fc:	e0bffe17 	ldw	r2,-8(fp)
 4012700:	e0ffff17 	ldw	r3,-4(fp)
 4012704:	1885883a 	add	r2,r3,r2
 4012708:	10800003 	ldbu	r2,0(r2)
 401270c:	10803fcc 	andi	r2,r2,255
 4012710:	1080201c 	xori	r2,r2,128
 4012714:	10bfe004 	addi	r2,r2,-128
 4012718:	10800be0 	cmpeqi	r2,r2,47
 401271c:	1000081e 	bne	r2,zero,4012740 <alt_find_file+0xb0>
 4012720:	e0bffe17 	ldw	r2,-8(fp)
 4012724:	e0ffff17 	ldw	r3,-4(fp)
 4012728:	1885883a 	add	r2,r3,r2
 401272c:	10800003 	ldbu	r2,0(r2)
 4012730:	10803fcc 	andi	r2,r2,255
 4012734:	1080201c 	xori	r2,r2,128
 4012738:	10bfe004 	addi	r2,r2,-128
 401273c:	10000a1e 	bne	r2,zero,4012768 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4012740:	e0bffd17 	ldw	r2,-12(fp)
 4012744:	10800217 	ldw	r2,8(r2)
 4012748:	e0fffe17 	ldw	r3,-8(fp)
 401274c:	180d883a 	mov	r6,r3
 4012750:	e17fff17 	ldw	r5,-4(fp)
 4012754:	1009883a 	mov	r4,r2
 4012758:	40129b40 	call	40129b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401275c:	1000021e 	bne	r2,zero,4012768 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4012760:	e0bffd17 	ldw	r2,-12(fp)
 4012764:	00000706 	br	4012784 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4012768:	e0bffd17 	ldw	r2,-12(fp)
 401276c:	10800017 	ldw	r2,0(r2)
 4012770:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4012774:	e0fffd17 	ldw	r3,-12(fp)
 4012778:	d0a02d04 	addi	r2,gp,-32588
 401277c:	18bfcc1e 	bne	r3,r2,40126b0 <__alt_data_end+0xfc0126b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4012780:	0005883a 	mov	r2,zero
}
 4012784:	e037883a 	mov	sp,fp
 4012788:	dfc00117 	ldw	ra,4(sp)
 401278c:	df000017 	ldw	fp,0(sp)
 4012790:	dec00204 	addi	sp,sp,8
 4012794:	f800283a 	ret

04012798 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4012798:	defffc04 	addi	sp,sp,-16
 401279c:	df000315 	stw	fp,12(sp)
 40127a0:	df000304 	addi	fp,sp,12
 40127a4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40127a8:	00bffa04 	movi	r2,-24
 40127ac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40127b0:	e03ffd15 	stw	zero,-12(fp)
 40127b4:	00001906 	br	401281c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 40127b8:	00810074 	movhi	r2,1025
 40127bc:	108ebc04 	addi	r2,r2,15088
 40127c0:	e0fffd17 	ldw	r3,-12(fp)
 40127c4:	18c00324 	muli	r3,r3,12
 40127c8:	10c5883a 	add	r2,r2,r3
 40127cc:	10800017 	ldw	r2,0(r2)
 40127d0:	10000f1e 	bne	r2,zero,4012810 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 40127d4:	00810074 	movhi	r2,1025
 40127d8:	108ebc04 	addi	r2,r2,15088
 40127dc:	e0fffd17 	ldw	r3,-12(fp)
 40127e0:	18c00324 	muli	r3,r3,12
 40127e4:	10c5883a 	add	r2,r2,r3
 40127e8:	e0ffff17 	ldw	r3,-4(fp)
 40127ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40127f0:	d0e03117 	ldw	r3,-32572(gp)
 40127f4:	e0bffd17 	ldw	r2,-12(fp)
 40127f8:	1880020e 	bge	r3,r2,4012804 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 40127fc:	e0bffd17 	ldw	r2,-12(fp)
 4012800:	d0a03115 	stw	r2,-32572(gp)
      }
      rc = i;
 4012804:	e0bffd17 	ldw	r2,-12(fp)
 4012808:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 401280c:	00000606 	br	4012828 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4012810:	e0bffd17 	ldw	r2,-12(fp)
 4012814:	10800044 	addi	r2,r2,1
 4012818:	e0bffd15 	stw	r2,-12(fp)
 401281c:	e0bffd17 	ldw	r2,-12(fp)
 4012820:	10800810 	cmplti	r2,r2,32
 4012824:	103fe41e 	bne	r2,zero,40127b8 <__alt_data_end+0xfc0127b8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4012828:	e0bffe17 	ldw	r2,-8(fp)
}
 401282c:	e037883a 	mov	sp,fp
 4012830:	df000017 	ldw	fp,0(sp)
 4012834:	dec00104 	addi	sp,sp,4
 4012838:	f800283a 	ret

0401283c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 401283c:	defffb04 	addi	sp,sp,-20
 4012840:	df000415 	stw	fp,16(sp)
 4012844:	df000404 	addi	fp,sp,16
 4012848:	e13ffe15 	stw	r4,-8(fp)
 401284c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4012850:	e0bfff17 	ldw	r2,-4(fp)
 4012854:	10840070 	cmpltui	r2,r2,4097
 4012858:	1000021e 	bne	r2,zero,4012864 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 401285c:	00840004 	movi	r2,4096
 4012860:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4012864:	e0fffe17 	ldw	r3,-8(fp)
 4012868:	e0bfff17 	ldw	r2,-4(fp)
 401286c:	1885883a 	add	r2,r3,r2
 4012870:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4012874:	e0bffe17 	ldw	r2,-8(fp)
 4012878:	e0bffc15 	stw	r2,-16(fp)
 401287c:	00000506 	br	4012894 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4012880:	e0bffc17 	ldw	r2,-16(fp)
 4012884:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4012888:	e0bffc17 	ldw	r2,-16(fp)
 401288c:	10800804 	addi	r2,r2,32
 4012890:	e0bffc15 	stw	r2,-16(fp)
 4012894:	e0fffc17 	ldw	r3,-16(fp)
 4012898:	e0bffd17 	ldw	r2,-12(fp)
 401289c:	18bff836 	bltu	r3,r2,4012880 <__alt_data_end+0xfc012880>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40128a0:	e0bffe17 	ldw	r2,-8(fp)
 40128a4:	108007cc 	andi	r2,r2,31
 40128a8:	10000226 	beq	r2,zero,40128b4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40128ac:	e0bffc17 	ldw	r2,-16(fp)
 40128b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40128b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40128b8:	0001883a 	nop
 40128bc:	e037883a 	mov	sp,fp
 40128c0:	df000017 	ldw	fp,0(sp)
 40128c4:	dec00104 	addi	sp,sp,4
 40128c8:	f800283a 	ret

040128cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40128cc:	defffe04 	addi	sp,sp,-8
 40128d0:	df000115 	stw	fp,4(sp)
 40128d4:	df000104 	addi	fp,sp,4
 40128d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40128dc:	e0bfff17 	ldw	r2,-4(fp)
 40128e0:	10bffe84 	addi	r2,r2,-6
 40128e4:	10c00428 	cmpgeui	r3,r2,16
 40128e8:	18001a1e 	bne	r3,zero,4012954 <alt_exception_cause_generated_bad_addr+0x88>
 40128ec:	100690ba 	slli	r3,r2,2
 40128f0:	00810074 	movhi	r2,1025
 40128f4:	108a4104 	addi	r2,r2,10500
 40128f8:	1885883a 	add	r2,r3,r2
 40128fc:	10800017 	ldw	r2,0(r2)
 4012900:	1000683a 	jmp	r2
 4012904:	04012944 	movi	r16,1189
 4012908:	04012944 	movi	r16,1189
 401290c:	04012954 	movui	r16,1189
 4012910:	04012954 	movui	r16,1189
 4012914:	04012954 	movui	r16,1189
 4012918:	04012944 	movi	r16,1189
 401291c:	0401294c 	andi	r16,zero,1189
 4012920:	04012954 	movui	r16,1189
 4012924:	04012944 	movi	r16,1189
 4012928:	04012944 	movi	r16,1189
 401292c:	04012954 	movui	r16,1189
 4012930:	04012944 	movi	r16,1189
 4012934:	0401294c 	andi	r16,zero,1189
 4012938:	04012954 	movui	r16,1189
 401293c:	04012954 	movui	r16,1189
 4012940:	04012944 	movi	r16,1189
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4012944:	00800044 	movi	r2,1
 4012948:	00000306 	br	4012958 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401294c:	0005883a 	mov	r2,zero
 4012950:	00000106 	br	4012958 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4012954:	0005883a 	mov	r2,zero
  }
}
 4012958:	e037883a 	mov	sp,fp
 401295c:	df000017 	ldw	fp,0(sp)
 4012960:	dec00104 	addi	sp,sp,4
 4012964:	f800283a 	ret

04012968 <atexit>:
 4012968:	200b883a 	mov	r5,r4
 401296c:	000f883a 	mov	r7,zero
 4012970:	000d883a 	mov	r6,zero
 4012974:	0009883a 	mov	r4,zero
 4012978:	4012a301 	jmpi	4012a30 <__register_exitproc>

0401297c <exit>:
 401297c:	defffe04 	addi	sp,sp,-8
 4012980:	000b883a 	mov	r5,zero
 4012984:	dc000015 	stw	r16,0(sp)
 4012988:	dfc00115 	stw	ra,4(sp)
 401298c:	2021883a 	mov	r16,r4
 4012990:	4012b480 	call	4012b48 <__call_exitprocs>
 4012994:	00810074 	movhi	r2,1025
 4012998:	10935b04 	addi	r2,r2,19820
 401299c:	11000017 	ldw	r4,0(r2)
 40129a0:	20800f17 	ldw	r2,60(r4)
 40129a4:	10000126 	beq	r2,zero,40129ac <exit+0x30>
 40129a8:	103ee83a 	callr	r2
 40129ac:	8009883a 	mov	r4,r16
 40129b0:	4012d380 	call	4012d38 <_exit>

040129b4 <memcmp>:
 40129b4:	01c000c4 	movi	r7,3
 40129b8:	3980192e 	bgeu	r7,r6,4012a20 <memcmp+0x6c>
 40129bc:	2144b03a 	or	r2,r4,r5
 40129c0:	11c4703a 	and	r2,r2,r7
 40129c4:	10000f26 	beq	r2,zero,4012a04 <memcmp+0x50>
 40129c8:	20800003 	ldbu	r2,0(r4)
 40129cc:	28c00003 	ldbu	r3,0(r5)
 40129d0:	10c0151e 	bne	r2,r3,4012a28 <memcmp+0x74>
 40129d4:	31bfff84 	addi	r6,r6,-2
 40129d8:	01ffffc4 	movi	r7,-1
 40129dc:	00000406 	br	40129f0 <memcmp+0x3c>
 40129e0:	20800003 	ldbu	r2,0(r4)
 40129e4:	28c00003 	ldbu	r3,0(r5)
 40129e8:	31bfffc4 	addi	r6,r6,-1
 40129ec:	10c00e1e 	bne	r2,r3,4012a28 <memcmp+0x74>
 40129f0:	21000044 	addi	r4,r4,1
 40129f4:	29400044 	addi	r5,r5,1
 40129f8:	31fff91e 	bne	r6,r7,40129e0 <__alt_data_end+0xfc0129e0>
 40129fc:	0005883a 	mov	r2,zero
 4012a00:	f800283a 	ret
 4012a04:	20c00017 	ldw	r3,0(r4)
 4012a08:	28800017 	ldw	r2,0(r5)
 4012a0c:	18bfee1e 	bne	r3,r2,40129c8 <__alt_data_end+0xfc0129c8>
 4012a10:	31bfff04 	addi	r6,r6,-4
 4012a14:	21000104 	addi	r4,r4,4
 4012a18:	29400104 	addi	r5,r5,4
 4012a1c:	39bff936 	bltu	r7,r6,4012a04 <__alt_data_end+0xfc012a04>
 4012a20:	303fe91e 	bne	r6,zero,40129c8 <__alt_data_end+0xfc0129c8>
 4012a24:	003ff506 	br	40129fc <__alt_data_end+0xfc0129fc>
 4012a28:	10c5c83a 	sub	r2,r2,r3
 4012a2c:	f800283a 	ret

04012a30 <__register_exitproc>:
 4012a30:	defffa04 	addi	sp,sp,-24
 4012a34:	dc000315 	stw	r16,12(sp)
 4012a38:	04010074 	movhi	r16,1025
 4012a3c:	84135b04 	addi	r16,r16,19820
 4012a40:	80c00017 	ldw	r3,0(r16)
 4012a44:	dc400415 	stw	r17,16(sp)
 4012a48:	dfc00515 	stw	ra,20(sp)
 4012a4c:	18805217 	ldw	r2,328(r3)
 4012a50:	2023883a 	mov	r17,r4
 4012a54:	10003726 	beq	r2,zero,4012b34 <__register_exitproc+0x104>
 4012a58:	10c00117 	ldw	r3,4(r2)
 4012a5c:	010007c4 	movi	r4,31
 4012a60:	20c00e16 	blt	r4,r3,4012a9c <__register_exitproc+0x6c>
 4012a64:	1a000044 	addi	r8,r3,1
 4012a68:	8800221e 	bne	r17,zero,4012af4 <__register_exitproc+0xc4>
 4012a6c:	18c00084 	addi	r3,r3,2
 4012a70:	18c7883a 	add	r3,r3,r3
 4012a74:	18c7883a 	add	r3,r3,r3
 4012a78:	12000115 	stw	r8,4(r2)
 4012a7c:	10c7883a 	add	r3,r2,r3
 4012a80:	19400015 	stw	r5,0(r3)
 4012a84:	0005883a 	mov	r2,zero
 4012a88:	dfc00517 	ldw	ra,20(sp)
 4012a8c:	dc400417 	ldw	r17,16(sp)
 4012a90:	dc000317 	ldw	r16,12(sp)
 4012a94:	dec00604 	addi	sp,sp,24
 4012a98:	f800283a 	ret
 4012a9c:	00800034 	movhi	r2,0
 4012aa0:	10800004 	addi	r2,r2,0
 4012aa4:	10002626 	beq	r2,zero,4012b40 <__register_exitproc+0x110>
 4012aa8:	01006404 	movi	r4,400
 4012aac:	d9400015 	stw	r5,0(sp)
 4012ab0:	d9800115 	stw	r6,4(sp)
 4012ab4:	d9c00215 	stw	r7,8(sp)
 4012ab8:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4012abc:	d9400017 	ldw	r5,0(sp)
 4012ac0:	d9800117 	ldw	r6,4(sp)
 4012ac4:	d9c00217 	ldw	r7,8(sp)
 4012ac8:	10001d26 	beq	r2,zero,4012b40 <__register_exitproc+0x110>
 4012acc:	81000017 	ldw	r4,0(r16)
 4012ad0:	10000115 	stw	zero,4(r2)
 4012ad4:	02000044 	movi	r8,1
 4012ad8:	22405217 	ldw	r9,328(r4)
 4012adc:	0007883a 	mov	r3,zero
 4012ae0:	12400015 	stw	r9,0(r2)
 4012ae4:	20805215 	stw	r2,328(r4)
 4012ae8:	10006215 	stw	zero,392(r2)
 4012aec:	10006315 	stw	zero,396(r2)
 4012af0:	883fde26 	beq	r17,zero,4012a6c <__alt_data_end+0xfc012a6c>
 4012af4:	18c9883a 	add	r4,r3,r3
 4012af8:	2109883a 	add	r4,r4,r4
 4012afc:	1109883a 	add	r4,r2,r4
 4012b00:	21802215 	stw	r6,136(r4)
 4012b04:	01800044 	movi	r6,1
 4012b08:	12406217 	ldw	r9,392(r2)
 4012b0c:	30cc983a 	sll	r6,r6,r3
 4012b10:	4992b03a 	or	r9,r9,r6
 4012b14:	12406215 	stw	r9,392(r2)
 4012b18:	21c04215 	stw	r7,264(r4)
 4012b1c:	01000084 	movi	r4,2
 4012b20:	893fd21e 	bne	r17,r4,4012a6c <__alt_data_end+0xfc012a6c>
 4012b24:	11006317 	ldw	r4,396(r2)
 4012b28:	218cb03a 	or	r6,r4,r6
 4012b2c:	11806315 	stw	r6,396(r2)
 4012b30:	003fce06 	br	4012a6c <__alt_data_end+0xfc012a6c>
 4012b34:	18805304 	addi	r2,r3,332
 4012b38:	18805215 	stw	r2,328(r3)
 4012b3c:	003fc606 	br	4012a58 <__alt_data_end+0xfc012a58>
 4012b40:	00bfffc4 	movi	r2,-1
 4012b44:	003fd006 	br	4012a88 <__alt_data_end+0xfc012a88>

04012b48 <__call_exitprocs>:
 4012b48:	defff504 	addi	sp,sp,-44
 4012b4c:	df000915 	stw	fp,36(sp)
 4012b50:	dd400615 	stw	r21,24(sp)
 4012b54:	dc800315 	stw	r18,12(sp)
 4012b58:	dfc00a15 	stw	ra,40(sp)
 4012b5c:	ddc00815 	stw	r23,32(sp)
 4012b60:	dd800715 	stw	r22,28(sp)
 4012b64:	dd000515 	stw	r20,20(sp)
 4012b68:	dcc00415 	stw	r19,16(sp)
 4012b6c:	dc400215 	stw	r17,8(sp)
 4012b70:	dc000115 	stw	r16,4(sp)
 4012b74:	d9000015 	stw	r4,0(sp)
 4012b78:	2839883a 	mov	fp,r5
 4012b7c:	04800044 	movi	r18,1
 4012b80:	057fffc4 	movi	r21,-1
 4012b84:	00810074 	movhi	r2,1025
 4012b88:	10935b04 	addi	r2,r2,19820
 4012b8c:	12000017 	ldw	r8,0(r2)
 4012b90:	45005217 	ldw	r20,328(r8)
 4012b94:	44c05204 	addi	r19,r8,328
 4012b98:	a0001c26 	beq	r20,zero,4012c0c <__call_exitprocs+0xc4>
 4012b9c:	a0800117 	ldw	r2,4(r20)
 4012ba0:	15ffffc4 	addi	r23,r2,-1
 4012ba4:	b8000d16 	blt	r23,zero,4012bdc <__call_exitprocs+0x94>
 4012ba8:	14000044 	addi	r16,r2,1
 4012bac:	8421883a 	add	r16,r16,r16
 4012bb0:	8421883a 	add	r16,r16,r16
 4012bb4:	84402004 	addi	r17,r16,128
 4012bb8:	a463883a 	add	r17,r20,r17
 4012bbc:	a421883a 	add	r16,r20,r16
 4012bc0:	e0001e26 	beq	fp,zero,4012c3c <__call_exitprocs+0xf4>
 4012bc4:	80804017 	ldw	r2,256(r16)
 4012bc8:	e0801c26 	beq	fp,r2,4012c3c <__call_exitprocs+0xf4>
 4012bcc:	bdffffc4 	addi	r23,r23,-1
 4012bd0:	843fff04 	addi	r16,r16,-4
 4012bd4:	8c7fff04 	addi	r17,r17,-4
 4012bd8:	bd7ff91e 	bne	r23,r21,4012bc0 <__alt_data_end+0xfc012bc0>
 4012bdc:	00800034 	movhi	r2,0
 4012be0:	10800004 	addi	r2,r2,0
 4012be4:	10000926 	beq	r2,zero,4012c0c <__call_exitprocs+0xc4>
 4012be8:	a0800117 	ldw	r2,4(r20)
 4012bec:	1000301e 	bne	r2,zero,4012cb0 <__call_exitprocs+0x168>
 4012bf0:	a0800017 	ldw	r2,0(r20)
 4012bf4:	10003226 	beq	r2,zero,4012cc0 <__call_exitprocs+0x178>
 4012bf8:	a009883a 	mov	r4,r20
 4012bfc:	98800015 	stw	r2,0(r19)
 4012c00:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4012c04:	9d000017 	ldw	r20,0(r19)
 4012c08:	a03fe41e 	bne	r20,zero,4012b9c <__alt_data_end+0xfc012b9c>
 4012c0c:	dfc00a17 	ldw	ra,40(sp)
 4012c10:	df000917 	ldw	fp,36(sp)
 4012c14:	ddc00817 	ldw	r23,32(sp)
 4012c18:	dd800717 	ldw	r22,28(sp)
 4012c1c:	dd400617 	ldw	r21,24(sp)
 4012c20:	dd000517 	ldw	r20,20(sp)
 4012c24:	dcc00417 	ldw	r19,16(sp)
 4012c28:	dc800317 	ldw	r18,12(sp)
 4012c2c:	dc400217 	ldw	r17,8(sp)
 4012c30:	dc000117 	ldw	r16,4(sp)
 4012c34:	dec00b04 	addi	sp,sp,44
 4012c38:	f800283a 	ret
 4012c3c:	a0800117 	ldw	r2,4(r20)
 4012c40:	80c00017 	ldw	r3,0(r16)
 4012c44:	10bfffc4 	addi	r2,r2,-1
 4012c48:	15c01426 	beq	r2,r23,4012c9c <__call_exitprocs+0x154>
 4012c4c:	80000015 	stw	zero,0(r16)
 4012c50:	183fde26 	beq	r3,zero,4012bcc <__alt_data_end+0xfc012bcc>
 4012c54:	95c8983a 	sll	r4,r18,r23
 4012c58:	a0806217 	ldw	r2,392(r20)
 4012c5c:	a5800117 	ldw	r22,4(r20)
 4012c60:	2084703a 	and	r2,r4,r2
 4012c64:	10000b26 	beq	r2,zero,4012c94 <__call_exitprocs+0x14c>
 4012c68:	a0806317 	ldw	r2,396(r20)
 4012c6c:	2088703a 	and	r4,r4,r2
 4012c70:	20000c1e 	bne	r4,zero,4012ca4 <__call_exitprocs+0x15c>
 4012c74:	89400017 	ldw	r5,0(r17)
 4012c78:	d9000017 	ldw	r4,0(sp)
 4012c7c:	183ee83a 	callr	r3
 4012c80:	a0800117 	ldw	r2,4(r20)
 4012c84:	15bfbf1e 	bne	r2,r22,4012b84 <__alt_data_end+0xfc012b84>
 4012c88:	98800017 	ldw	r2,0(r19)
 4012c8c:	153fcf26 	beq	r2,r20,4012bcc <__alt_data_end+0xfc012bcc>
 4012c90:	003fbc06 	br	4012b84 <__alt_data_end+0xfc012b84>
 4012c94:	183ee83a 	callr	r3
 4012c98:	003ff906 	br	4012c80 <__alt_data_end+0xfc012c80>
 4012c9c:	a5c00115 	stw	r23,4(r20)
 4012ca0:	003feb06 	br	4012c50 <__alt_data_end+0xfc012c50>
 4012ca4:	89000017 	ldw	r4,0(r17)
 4012ca8:	183ee83a 	callr	r3
 4012cac:	003ff406 	br	4012c80 <__alt_data_end+0xfc012c80>
 4012cb0:	a0800017 	ldw	r2,0(r20)
 4012cb4:	a027883a 	mov	r19,r20
 4012cb8:	1029883a 	mov	r20,r2
 4012cbc:	003fb606 	br	4012b98 <__alt_data_end+0xfc012b98>
 4012cc0:	0005883a 	mov	r2,zero
 4012cc4:	003ffb06 	br	4012cb4 <__alt_data_end+0xfc012cb4>

04012cc8 <__floatundidf>:
 4012cc8:	defffc04 	addi	sp,sp,-16
 4012ccc:	dc800215 	stw	r18,8(sp)
 4012cd0:	2025883a 	mov	r18,r4
 4012cd4:	2809883a 	mov	r4,r5
 4012cd8:	dfc00315 	stw	ra,12(sp)
 4012cdc:	dc400115 	stw	r17,4(sp)
 4012ce0:	dc000015 	stw	r16,0(sp)
 4012ce4:	400fe9c0 	call	400fe9c <__floatunsidf>
 4012ce8:	000d883a 	mov	r6,zero
 4012cec:	01d07c34 	movhi	r7,16880
 4012cf0:	180b883a 	mov	r5,r3
 4012cf4:	1009883a 	mov	r4,r2
 4012cf8:	400444c0 	call	400444c <__muldf3>
 4012cfc:	9009883a 	mov	r4,r18
 4012d00:	1023883a 	mov	r17,r2
 4012d04:	1821883a 	mov	r16,r3
 4012d08:	400fe9c0 	call	400fe9c <__floatunsidf>
 4012d0c:	880d883a 	mov	r6,r17
 4012d10:	800f883a 	mov	r7,r16
 4012d14:	1009883a 	mov	r4,r2
 4012d18:	180b883a 	mov	r5,r3
 4012d1c:	40030600 	call	4003060 <__adddf3>
 4012d20:	dfc00317 	ldw	ra,12(sp)
 4012d24:	dc800217 	ldw	r18,8(sp)
 4012d28:	dc400117 	ldw	r17,4(sp)
 4012d2c:	dc000017 	ldw	r16,0(sp)
 4012d30:	dec00404 	addi	sp,sp,16
 4012d34:	f800283a 	ret

04012d38 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4012d38:	defffd04 	addi	sp,sp,-12
 4012d3c:	df000215 	stw	fp,8(sp)
 4012d40:	df000204 	addi	fp,sp,8
 4012d44:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4012d48:	0001883a 	nop
 4012d4c:	e0bfff17 	ldw	r2,-4(fp)
 4012d50:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4012d54:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4012d58:	10000226 	beq	r2,zero,4012d64 <_exit+0x2c>
    ALT_SIM_FAIL();
 4012d5c:	002af070 	cmpltui	zero,zero,43969
 4012d60:	00000106 	br	4012d68 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4012d64:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4012d68:	003fff06 	br	4012d68 <__alt_data_end+0xfc012d68>
